{"version":3,"sources":["skylark-graphics-canvas2d-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","canvas2d","global","sqrt","atan2","pow","abs","PiBy180","PiBy2","min","max","supportQuality","degreesToRadians","originXOffset","originYOffset","clone","toFixed","multipleSpacesRegex","setObjectScaleOverridden","fabric","version","copyGLTo2DDrawImage","gl","pipelineState","glCanvas","canvas","targetCanvas","ctx","getContext","translate","height","scale","sourceY","drawImage","width","copyGLTo2DPutImageData","dWidth","destinationWidth","dHeight","destinationHeight","numBytes","u8","Uint8Array","this","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","document","window","require","jsdom","decodeURIComponent","features","FetchExternalResources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","defaultView","DOMParser","isTouchSupported","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","fontPaths","iMatrix","canvasModule","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","prop","on","push","stopObserving","call","fire","options","listenersForEvent","len","filter","value","Observable","off","trigger","Collection","_objects","add","apply","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","_set","key","get","toggle","exports","Math","PI","cos","angle","angleSlice","sin","sign","removeFromArray","idx","getRandomInt","floor","random","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","rx","ry","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","xPoints","minX","maxX","yPoints","minY","maxY","left","top","invertTransform","a","r","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","parts","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","forEach","klass","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","x2","y2","da","dx","dy","rot","dc","di","draw","save","moveTo","rotate","restore","createCanvasElement","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","customTransformMatrix","skewMatrixX","tan","scaleMatrix","resetObjectTransform","target","flipX","flipY","saveObjectTransform","fn","String","match","isTransparent","tolerance","temp","_isTransparent","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","_join","Array","join","arcToSegments","toX","toY","large","sweep","rotateX","argsString","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","result","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","find","byProperty","condition","k","invoke","method","args","value1","value2","extend","deep","Element","hasOwnProperty","getWholeChar","str","code","charCodeAt","isNaN","next","prev","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","emptyFunction","IS_DONTENUM_BUGGY","addMethods","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","createClass","shift","initialize","subclasses","unknown","areHostMethods","methodNames","test","getElement","setElement","uid","getUniqueId","element","__uniqueID","createListener","wrappedHandler","e","event","createWrappedHandler","addListener","removeListener","shouldUseAddListenerRemoveListener","documentElement","shouldUseAttachEventDetachEvent","listeners","handlers","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","handlersForEvent","createDispatcher","pointerX","clientX","pointerY","clientY","_getPointer","pageProp","clientProp","pointer","touchProp","eventTouchProp","getPointer","srcElement","scroll","getScrollLeftTop","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","setOpacity","es","currentStyle","hasLayout","zoom","setStyle","styles","elementStyle","cssText","normalizedProperty","styleFloat","_slice","sliceCanConvertNodelists","getElementStyle","toArray","arrayLike","childNodes","err","makeElement","tagName","el","className","htmlFor","setAttribute","docElement","body","scrollLeft","scrollTop","host","nodeType","arr","getComputedStyle","attr","undefined","selectProp","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","getById","id","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","parseInt","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","makeXHR","factories","XMLHttpRequest","ActiveXObject","req","emptyFn","request","onComplete","xhr","parameters","param","addParamToUrl","open","setRequestHeader","send","warn","noop","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","_cancelAnimFrame","cancelAnimationFrame","clearTimeout","requestAnimFrame","animate","timestamp","time","start","Date","duration","finish","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","cancelAnimFrame","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","begin","end","pos","color","posValue","colorEasing","normalize","asin","elastic","opts","easeInBounce","easeOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInOutBounce","attributesMap","display","visibility","transform","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","letter-spacing","paint-order","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","colorAttributes","stroke","normalizeAttr","normalizeValue","parentAttributes","parsed","isArray","map","n","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","getSvgRegex","RegExp","_getMultipleNodes","nodeNames","nodeName","nodeList","nodeArray","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","selector","doesSomeParentMatch","matcher","classNames","getAttribute","elementById","node","nodelist","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","cssRules","gradientDefs","skewMatrix","matrix","commaWsp","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","translateMatrix","rotateMatrix","multiplierX","multiplierY","combinedMatrix","reViewBoxAttrValue","applyViewboxTransform","viewBoxWidth","viewBoxHeight","viewBoxAttr","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","missingDimAttr","toBeParsed","parsedDim","widthDiff","heightDiff","firstChild","parseSVGDocument","parsingOptions","attrs","xlink","substr","el2","cloneNode","currentTrans","oldLength","el3","nodeValue","removeAttribute","parseUseDirectives","svgUid","__uid","descendants","selectNodes","hasAncestorWithNodeName","getGradientDefs","getCSSRules","parseElements","instances","reFontDeclaration","parseFontDeclaration","oStyle","fontStyle","fontWeight","lineHeight","elList","idsToXlinkMap","parseAttributes","ownAttributes","rule","getGlobalStylesForElement","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","setAlpha","getAlpha","toRgba","_setStrokeFillOpacity","ElementsParser","parse","chunk","pair","trim","parseStyleString","parseStyleObject","parsePointsAttribute","parsedPoints","allRules","styleContents","textContent","text","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","numElements","createObjects","_obj","createObject","fromElement","_createObject","checkIfDone","createCallback","resolveGradient","Image","_removeTransformMatrix","instanceFillValue","gradientId","lastIndex","createAccessors","propName","capitalizedPropName","setterName","getterName","proto","stateProperties","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","colorAlpha","keyValuePairs","_convertPercentUnitsToValues","gradientUnits","propValue","addFactor","multFactor","ellipseMatrix","scaleFactor","offsetX","offsetY","gradientTransform","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","sort","pathOffset","reverse","minRadius","maxRadius","percentageShift","colorStop","toLive","gradient","createLinearGradient","createRadialGradient","instance","colorStopEls","getLinearCoords","getRadialCoords","forObject","repeat","patternTransform","setOptions","NUM_FRACTION_DIGITS","toDataURL","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","Error","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","canvasEl","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","_renderOverlay","render","_renderBackgroundOrOverlay","fillStyle","fillRect","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","setPositionByOrigin","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","excludeFromExport","_toObject","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","row","rowIndex","_char","charIndex","fontList","_setSVGObject","finalWidth","finalHeight","sendToBack","objs","activeSelection","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","contextTop","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","needsFullRender","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","lineTo","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","translateToGivenOrigin","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","getActiveObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","calcTransformMatrix","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","shouldCache","_cacheCanvas","normalizedPointer","targetRelativeX","cacheTranslationX","zoomX","targetRelativeY","cacheTranslationY","zoomY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","_setupCurrentTransform","ex","ey","lastX","lastY","theta","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","0","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByOrigin","constraintPosition","actualMouseByCenter","toLocalPoint","lastMouseByCenter","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","changeX","changeY","forbidScalingX","forbidScalingY","_scaleObjectEqually","newScaleX","newScaleY","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","targets","_searchPossibleTargets","_checkTarget","isEditing","subTarget","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","bottom","right","lowerCanvasClass","_copyCanvasStyle","class","touch-action","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_hoveredTarget","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","realizeTransform","clearContextTop","_setCursorFromEvent","cursorOffset","mr","mb","ml","addEventOptions","passive","checkClick","which","button","cursorMap","_bindEvents","addOrRemove","functor","eventjsFunctor","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","hiddenTextarea","focus","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","__onMouseDown","__onMouseUp","__onMouseMove","_shouldRender","isMoving","_previousPointer","isClick","_target","_onMouseUpInDrawingMode","_finalizeCurrentTransform","shouldRender","_maybeGroupObjects","__corner","eventType","subTargets","absolutePointer","_scaling","actionPerformed","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","shouldGroup","_shouldGroup","_handleGrouping","saveState","touches","_transformObject","_fireOverOutEvents","fireSynteticInOutEvents","targetName","canvasEvtOut","evtOut","canvasEvtIn","evtIn","config","inOpt","outOpt","inFires","oldTarget","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","format","quality","multiplier","cropping","__toDataURLWithMultiplier","origWidth","origHeight","scaledWidth","scaledHeight","newZoom","vp","newVp","originalInteractive","originalSkipOffScreen","needsResize","__toDataURL","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","fillRule","globalCompositeOperation","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","dirty","paintFirst","cacheProperties","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","_getNonTransformedDimensions","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","sizeShrinking","setTransform","_transformDone","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","isCacheDirty","propertySet","drawObject","drawCacheOnCanvas","_removeCacheCanvas","needsItsOwnCache","ownCaching","willDrawShadow","_setStrokeStyles","_setFillStyles","skipCanvas","_removeShadow","decl","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","dataUrl","origParams","withoutTransform","boundingRect","getBoundingRect","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","extraParam","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","getCoords","absolute","calculate","calcCoords","pointTL","pointBR","intersection","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","w","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","skipAbsolute","_setCornerCoords","transformMatrixKey","prefix","cache","dimensionMatrix","_calcDimensionsTransformMatrix","flipping","bbox","dimX","dimY","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgId","getSvgTransform","translatePart","anglePart","scalePart","skewXPart","skewYPart","flipXPart","flipYPart","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","addPaintOrder","saveProps","props","tmpObj","dashedPropertySet","keys","_isEqual","origValue","currentValue","firstPass","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","from","valueProgress","timeProgress","coordProps","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","pi","startAngle","endAngle","setRadius","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","calcDim","_calcDimensions","diffX","diffY","commonRender","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","_parseDimensions","_renderPathCommands","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","chunks","addTransform","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","pathUrl","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","objsToObject","originalDefaults","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","toGroup","newGroup","childrenOverride","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","removeTexture","_originalElement","_initConfig","resizeFilter","applyResizeFilters","applyFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","clipPath","clipPathId","imageMarkup","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","sW","sH","elementToDraw","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","testPrecision","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","webGlPrecision","resources","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","startTime","drawImageTime","putImageDataTime","testContext","now","copyGLTo2D","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","originalWidth","originalHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","resizeCanvasIfNeeded","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","applyFiltersDebug","ret","glError","getError","NO_ERROR","errorString","glErrorToString","glErrorCode","errorCode","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","ext","getExtension","renderer","vendor","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","distance","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","sX","sY","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","lineTopOffset","originalFill","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","char","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","lineBounds","_getGraphemeBox","numOfSpaces","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","isJustify","charsToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","lineHeightDiff","scaledDiff","textHeight","offX","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","lineOffset","realLineHeight","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPostion","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","styleObj","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLenght","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","9","27","33","34","35","36","37","38","39","40","ctrlKeysMapUp","67","88","ctrlKeysMapDown","65","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","removedText","nextText","charCount","nextCharCount","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","textAfterCursor","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","svgStyle","Textbox","minWidth","dynamicMinWidth","__cachedLines","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","getMinWidth","tw"],"mappings":"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","file":"../skylark-graphics-canvas2d-all.js","sourcesContent":["define('skylark-langx/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx/skylark',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-graphics-canvas2d/canvas2d',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.canvas2d = skylark.canvas2d || {};\r\n});\ndefine('skylark-graphics-canvas2d/primitives/fabric',[], function() { \r\n  var fabric = fabric || { version: '2.3.6' };\r\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n    fabric.document = document;\r\n    fabric.window = window;\r\n  }\r\n  else {\r\n    // assume we're running under node.js when document/window are not present\r\n    fabric.document = require('jsdom')\r\n      .jsdom(\r\n        decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\r\n        { features: {\r\n          FetchExternalResources: ['img']\r\n        }\r\n        });\r\n    fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\r\n    fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\r\n    fabric.window = fabric.document.defaultView;\r\n    DOMParser = require('xmldom').DOMParser;\r\n  }\r\n\r\n  /**\r\n   * True when in environment that supports touch events\r\n   * @type boolean\r\n   */\r\n  fabric.isTouchSupported = 'ontouchstart' in fabric.window;\r\n\r\n  /**\r\n   * True when in environment that's probably Node.js\r\n   * @type boolean\r\n   */\r\n  fabric.isLikelyNode = typeof Buffer !== 'undefined' &&\r\n                        typeof window === 'undefined';\r\n\r\n  /* _FROM_SVG_START_ */\r\n  /**\r\n   * Attributes parsed from all SVG elements\r\n   * @type array\r\n   */\r\n  fabric.SHARED_ATTRIBUTES = [\r\n    \"display\",\r\n    \"transform\",\r\n    \"fill\", \"fill-opacity\", \"fill-rule\",\r\n    \"opacity\",\r\n    \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\r\n    \"stroke-linejoin\", \"stroke-miterlimit\",\r\n    \"stroke-opacity\", \"stroke-width\",\r\n    \"id\", \"paint-order\",\r\n    \"instantiated_by_use\"\r\n  ];\r\n  /* _FROM_SVG_END_ */\r\n\r\n  /**\r\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\r\n   */\r\n  fabric.DPI = 96;\r\n  fabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\r\n  fabric.fontPaths = { };\r\n  fabric.iMatrix = [1, 0, 0, 1, 0, 0];\r\n  fabric.canvasModule = 'canvas';\r\n\r\n  /**\r\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.perfLimitSizeTotal = 2097152;\r\n\r\n  /**\r\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.maxCacheSideLimit = 4096;\r\n\r\n  /**\r\n   * Lowest pixel limit for cache canvases, set at 256PX\r\n   * @since 1.7.14\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.minCacheSideLimit = 256;\r\n\r\n  /**\r\n   * Cache Object for widths of chars in text rendering.\r\n   */\r\n  fabric.charWidthsCache = { };\r\n\r\n  /**\r\n   * if webgl is enabled and available, textureSize will determine the size\r\n   * of the canvas backend\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default\r\n   */\r\n  fabric.textureSize = 2048;\r\n\r\n  /**\r\n   * Enable webgl for filtering picture is available\r\n   * A filtering backend will be initialized, this will both take memory and\r\n   * time since a default 2048x2048 canvas will be created for the gl context\r\n   * @since 2.0.0\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  fabric.enableGLFiltering = true;\r\n\r\n  /**\r\n   * Device Pixel Ratio\r\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\r\n   */\r\n  fabric.devicePixelRatio = fabric.window.devicePixelRatio ||\r\n                            fabric.window.webkitDevicePixelRatio ||\r\n                            fabric.window.mozDevicePixelRatio ||\r\n                            1;\r\n  /**\r\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\r\n   * which is unitless and not rendered equally across browsers.\r\n   *\r\n   * Values that work quite well (as of October 2017) are:\r\n   * - Chrome: 1.5\r\n   * - Edge: 1.75\r\n   * - Firefox: 0.9\r\n   * - Safari: 0.95\r\n   *\r\n   * @since 2.0.0\r\n   * @type Number\r\n   * @default 1\r\n   */\r\n  fabric.browserShadowBlurConstant = 1;\r\n\r\n  /**\r\n   * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.arcToSegmentsCache = { };\r\n\r\n  /**\r\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\r\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\r\n   * you do not get any speed benefit and you get a big object in memory.\r\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\r\n   * can eventually clear it.\r\n   * It was an internal variable, is accessible since version 2.3.4\r\n   */\r\n  fabric.boundsOfCurveCache = { };\r\n\r\n  /**\r\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\r\n   * @default true\r\n   */\r\n  fabric.cachesBoundsOfCurve = true;\r\n\r\n  fabric.initFilterBackend = function() {\r\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\r\n      console.log('max texture size: ' + fabric.maxTextureSize);\r\n      return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\r\n    }\r\n    else if (fabric.Canvas2dFilterBackend) {\r\n      return (new fabric.Canvas2dFilterBackend());\r\n    }\r\n  };\r\n\r\n\r\n  //if (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n  //  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\r\n  //  window.fabric = fabric;\r\n  //}\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    function _removeEventListener(eventName, handler) {\r\n      if (!this.__eventListeners[eventName]) {\r\n        return;\r\n      }\r\n      var eventListener = this.__eventListeners[eventName];\r\n      if (handler) {\r\n        eventListener[eventListener.indexOf(handler)] = false;\r\n      }\r\n      else {\r\n        fabric.util.array.fill(eventListener, false);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Observes specified event\r\n     * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias on\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function that receives a notification when an event of the specified type occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function observe(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        this.__eventListeners = { };\r\n      }\r\n      // one object with key/value pairs was passed\r\n      if (arguments.length === 1) {\r\n        for (var prop in eventName) {\r\n          this.on(prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        if (!this.__eventListeners[eventName]) {\r\n          this.__eventListeners[eventName] = [];\r\n        }\r\n        this.__eventListeners[eventName].push(handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Stops event observing for a particular event handler. Calling this method\r\n     * without arguments removes all handlers for all events\r\n     * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias off\r\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n     * @param {Function} handler Function to be deleted from EventListeners\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function stopObserving(eventName, handler) {\r\n      if (!this.__eventListeners) {\r\n        return;\r\n      }\r\n\r\n      // remove all key/value pairs (event name -> event handler)\r\n      if (arguments.length === 0) {\r\n        for (eventName in this.__eventListeners) {\r\n          _removeEventListener.call(this, eventName);\r\n        }\r\n      }\r\n      // one object with key/value pairs was passed\r\n      else if (arguments.length === 1 && typeof arguments[0] === 'object') {\r\n        for (var prop in eventName) {\r\n          _removeEventListener.call(this, prop, eventName[prop]);\r\n        }\r\n      }\r\n      else {\r\n        _removeEventListener.call(this, eventName, handler);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Fires event with an optional options object\r\n     * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\r\n     * @memberOf fabric.Observable\r\n     * @alias trigger\r\n     * @param {String} eventName Event name to fire\r\n     * @param {Object} [options] Options object\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    function fire(eventName, options) {\r\n      if (!this.__eventListeners) {\r\n        return;\r\n      }\r\n\r\n      var listenersForEvent = this.__eventListeners[eventName];\r\n      if (!listenersForEvent) {\r\n        return;\r\n      }\r\n\r\n      for (var i = 0, len = listenersForEvent.length; i < len; i++) {\r\n        listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\r\n      }\r\n      this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\r\n        return value !== false;\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.Observable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\r\n     * @see {@link http://fabricjs.com/events|Events demo}\r\n     */\r\n    fabric.Observable = {\r\n      observe: observe,\r\n      stopObserving: stopObserving,\r\n      fire: fire,\r\n\r\n      on: observe,\r\n      off: stopObserving,\r\n      trigger: fire\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Collection\r\n   */\r\n  fabric.Collection = {\r\n\r\n    _objects: [],\r\n\r\n    /**\r\n     * Adds objects to collection, Canvas or Group, then renders canvas\r\n     * (if `renderOnAddRemove` is not `false`).\r\n     * in case of Group no changes to bounding box are made.\r\n     * Objects should be instances of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the add method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    add: function () {\r\n      this._objects.push.apply(this._objects, arguments);\r\n      if (this._onObjectAdded) {\r\n        for (var i = 0, length = arguments.length; i < length; i++) {\r\n          this._onObjectAdded(arguments[i]);\r\n        }\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * An object should be an instance of (or inherit from) fabric.Object\r\n     * Use of this function is highly discouraged for groups.\r\n     * you can add a bunch of objects with the insertAt method but then you NEED\r\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n     * @param {Object} object Object to insert\r\n     * @param {Number} index Index to insert object at\r\n     * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    insertAt: function (object, index, nonSplicing) {\r\n      var objects = this._objects;\r\n      if (nonSplicing) {\r\n        objects[index] = object;\r\n      }\r\n      else {\r\n        objects.splice(index, 0, object);\r\n      }\r\n      this._onObjectAdded && this._onObjectAdded(object);\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n     * @param {...fabric.Object} object Zero or more fabric instances\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    remove: function() {\r\n      var objects = this._objects,\r\n          index, somethingRemoved = false;\r\n\r\n      for (var i = 0, length = arguments.length; i < length; i++) {\r\n        index = objects.indexOf(arguments[i]);\r\n\r\n        // only call onObjectRemoved if an object was actually removed\r\n        if (index !== -1) {\r\n          somethingRemoved = true;\r\n          objects.splice(index, 1);\r\n          this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\r\n        }\r\n      }\r\n\r\n      this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Executes given function for each object in this group\r\n     * @param {Function} callback\r\n     *                   Callback invoked with current object as first argument,\r\n     *                   index - as second and an array of all objects - as third.\r\n     *                   Callback is invoked in a context of Global Object (e.g. `window`)\r\n     *                   when no `context` argument is given\r\n     *\r\n     * @param {Object} context Context (aka thisObject)\r\n     * @return {Self} thisArg\r\n     * @chainable\r\n     */\r\n    forEachObject: function(callback, context) {\r\n      var objects = this.getObjects();\r\n      for (var i = 0, len = objects.length; i < len; i++) {\r\n        callback.call(context, objects[i], i, objects);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of children objects of this instance\r\n     * Type parameter introduced in 1.3.10\r\n     * since 2.3.5 this method return always a COPY of the array;\r\n     * @param {String} [type] When specified, only objects of this type are returned\r\n     * @return {Array}\r\n     */\r\n    getObjects: function(type) {\r\n      if (typeof type === 'undefined') {\r\n        return this._objects.concat();\r\n      }\r\n      return this._objects.filter(function(o) {\r\n        return o.type === type;\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Returns object at specified index\r\n     * @param {Number} index\r\n     * @return {Self} thisArg\r\n     */\r\n    item: function (index) {\r\n      return this._objects[index];\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains no objects\r\n     * @return {Boolean} true if collection is empty\r\n     */\r\n    isEmpty: function () {\r\n      return this._objects.length === 0;\r\n    },\r\n\r\n    /**\r\n     * Returns a size of a collection (i.e: length of an array containing its objects)\r\n     * @return {Number} Collection size\r\n     */\r\n    size: function() {\r\n      return this._objects.length;\r\n    },\r\n\r\n    /**\r\n     * Returns true if collection contains an object\r\n     * @param {Object} object Object to check against\r\n     * @return {Boolean} `true` if collection contains an object\r\n     */\r\n    contains: function(object) {\r\n      return this._objects.indexOf(object) > -1;\r\n    },\r\n\r\n    /**\r\n     * Returns number representation of a collection complexity\r\n     * @return {Number} complexity\r\n     */\r\n    complexity: function () {\r\n      return this._objects.reduce(function (memo, current) {\r\n        memo += current.complexity ? current.complexity() : 0;\r\n        return memo;\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @namespace fabric.CommonMethods\r\n   */\r\n  fabric.CommonMethods = {\r\n\r\n    /**\r\n     * Sets object's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this.set(prop, options[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Gradient to\r\n     */\r\n    _initGradient: function(filler, property) {\r\n      if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\r\n        this.set(property, new fabric.Gradient(filler));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [filler] Options object\r\n     * @param {String} [property] property to set the Pattern to\r\n     * @param {Function} [callback] callback to invoke after pattern load\r\n     */\r\n    _initPattern: function(filler, property, callback) {\r\n      if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\r\n        this.set(property, new fabric.Pattern(filler, callback));\r\n      }\r\n      else {\r\n        callback && callback();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initClipping: function(options) {\r\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\r\n        return;\r\n      }\r\n\r\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\r\n      if (typeof functionBody !== 'undefined') {\r\n        this.clipTo = new Function('ctx', functionBody);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _setObject: function(obj) {\r\n      for (var prop in obj) {\r\n        this._set(prop, obj[prop]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    set: function(key, value) {\r\n      if (typeof key === 'object') {\r\n        this._setObject(key);\r\n      }\r\n      else {\r\n        if (typeof value === 'function' && key !== 'clipTo') {\r\n          this._set(key, value(this.get(key)));\r\n        }\r\n        else {\r\n          this._set(key, value);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    _set: function(key, value) {\r\n      this[key] = value;\r\n    },\r\n\r\n    /**\r\n     * Toggles specified property from `true` to `false` or from `false` to `true`\r\n     * @param {String} property Property to toggle\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    toggle: function(property) {\r\n      var value = this.get(property);\r\n      if (typeof value === 'boolean') {\r\n        this.set(property, !value);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Basic getter\r\n     * @param {String} property Property name\r\n     * @return {*} value of a property\r\n     */\r\n    get: function(property) {\r\n      return this[property];\r\n    }\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    var sqrt = Math.sqrt,\r\n        atan2 = Math.atan2,\r\n        pow = Math.pow,\r\n        abs = Math.abs,\r\n        PiBy180 = Math.PI / 180,\r\n        PiBy2 = Math.PI / 2;\r\n\r\n    /**\r\n     * @namespace fabric.util\r\n     */\r\n    fabric.util = {\r\n\r\n      /**\r\n       * Calculate the cos of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      cos: function(angle) {\r\n        if (angle === 0) { return 1; }\r\n        if (angle < 0) {\r\n          // cos(a) = cos(-a)\r\n          angle = -angle;\r\n        }\r\n        var angleSlice = angle / PiBy2;\r\n        switch (angleSlice) {\r\n          case 1: case 3: return 0;\r\n          case 2: return -1;\r\n        }\r\n        return Math.cos(angle);\r\n      },\r\n\r\n      /**\r\n       * Calculate the sin of an angle, avoiding returning floats for known results\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} angle the angle in radians or in degree\r\n       * @return {Number}\r\n       */\r\n      sin: function(angle) {\r\n        if (angle === 0) { return 0; }\r\n        var angleSlice = angle / PiBy2, sign = 1;\r\n        if (angle < 0) {\r\n          // sin(-a) = -sin(a)\r\n          sign = -1;\r\n        }\r\n        switch (angleSlice) {\r\n          case 1: return sign;\r\n          case 2: return 0;\r\n          case 3: return -sign;\r\n        }\r\n        return Math.sin(angle);\r\n      },\r\n\r\n      /**\r\n       * Removes value from an array.\r\n       * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} array\r\n       * @param {*} value\r\n       * @return {Array} original array\r\n       */\r\n      removeFromArray: function(array, value) {\r\n        var idx = array.indexOf(value);\r\n        if (idx !== -1) {\r\n          array.splice(idx, 1);\r\n        }\r\n        return array;\r\n      },\r\n\r\n      /**\r\n       * Returns random number between 2 specified ones.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} min lower limit\r\n       * @param {Number} max upper limit\r\n       * @return {Number} random value (between min and max)\r\n       */\r\n      getRandomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      },\r\n\r\n      /**\r\n       * Transforms degrees to radians.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} degrees value in degrees\r\n       * @return {Number} value in radians\r\n       */\r\n      degreesToRadians: function(degrees) {\r\n        return degrees * PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Transforms radians to degrees.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number} radians value in radians\r\n       * @return {Number} value in degrees\r\n       */\r\n      radiansToDegrees: function(radians) {\r\n        return radians / PiBy180;\r\n      },\r\n\r\n      /**\r\n       * Rotates `point` around `origin` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {fabric.Point} point The point to rotate\r\n       * @param {fabric.Point} origin The origin of the rotation\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {fabric.Point} The new rotated point\r\n       */\r\n      rotatePoint: function(point, origin, radians) {\r\n        point.subtractEquals(origin);\r\n        var v = fabric.util.rotateVector(point, radians);\r\n        return new fabric.Point(v.x, v.y).addEquals(origin);\r\n      },\r\n\r\n      /**\r\n       * Rotates `vector` with `radians`\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} vector The vector to rotate (x and y)\r\n       * @param {Number} radians The radians of the angle for the rotation\r\n       * @return {Object} The new rotated point\r\n       */\r\n      rotateVector: function(vector, radians) {\r\n        var sin = fabric.util.sin(radians),\r\n            cos = fabric.util.cos(radians),\r\n            rx = vector.x * cos - vector.y * sin,\r\n            ry = vector.x * sin + vector.y * cos;\r\n        return {\r\n          x: rx,\r\n          y: ry\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Apply transform t to point p\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Point} p The point to transform\r\n       * @param  {Array} t The transform\r\n       * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\r\n       * @return {fabric.Point} The transformed point\r\n       */\r\n      transformPoint: function(p, t, ignoreOffset) {\r\n        if (ignoreOffset) {\r\n          return new fabric.Point(\r\n            t[0] * p.x + t[2] * p.y,\r\n            t[1] * p.x + t[3] * p.y\r\n          );\r\n        }\r\n        return new fabric.Point(\r\n          t[0] * p.x + t[2] * p.y + t[4],\r\n          t[1] * p.x + t[3] * p.y + t[5]\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of points's bounding rectangle (left, top, width, height)\r\n       * @param {Array} points 4 points array\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      makeBoundingBoxFromPoints: function(points) {\r\n        var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\r\n            minX = fabric.util.array.min(xPoints),\r\n            maxX = fabric.util.array.max(xPoints),\r\n            width = maxX - minX,\r\n            yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\r\n            minY = fabric.util.array.min(yPoints),\r\n            maxY = fabric.util.array.max(yPoints),\r\n            height = maxY - minY;\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Invert transformation t\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} t The transform\r\n       * @return {Array} The inverted transform\r\n       */\r\n      invertTransform: function(t) {\r\n        var a = 1 / (t[0] * t[3] - t[1] * t[2]),\r\n            r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\r\n            o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\r\n        r[4] = -o.x;\r\n        r[5] = -o.y;\r\n        return r;\r\n      },\r\n\r\n      /**\r\n       * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Number|String} number number to operate on\r\n       * @param {Number} fractionDigits number of fraction digits to \"leave\"\r\n       * @return {Number}\r\n       */\r\n      toFixed: function(number, fractionDigits) {\r\n        return parseFloat(Number(number).toFixed(fractionDigits));\r\n      },\r\n\r\n      /**\r\n       * Converts from attribute value to pixel value if applicable.\r\n       * Returns converted pixels or original value not converted.\r\n       * @param {Number|String} value number to operate on\r\n       * @param {Number} fontSize\r\n       * @return {Number|String}\r\n       */\r\n      parseUnit: function(value, fontSize) {\r\n        var unit = /\\D{0,2}$/.exec(value),\r\n            number = parseFloat(value);\r\n        if (!fontSize) {\r\n          fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n        }\r\n        switch (unit[0]) {\r\n          case 'mm':\r\n            return number * fabric.DPI / 25.4;\r\n\r\n          case 'cm':\r\n            return number * fabric.DPI / 2.54;\r\n\r\n          case 'in':\r\n            return number * fabric.DPI;\r\n\r\n          case 'pt':\r\n            return number * fabric.DPI / 72; // or * 4 / 3\r\n\r\n          case 'pc':\r\n            return number * fabric.DPI / 72 * 12; // or * 16\r\n\r\n          case 'em':\r\n            return number * fontSize;\r\n\r\n          default:\r\n            return number;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Function which always returns `false`.\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {Boolean}\r\n       */\r\n      falseFunction: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns klass \"Class\" object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of object (eg. 'circle')\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @return {Object} klass \"Class\"\r\n       */\r\n      getKlass: function(type, namespace) {\r\n        // capitalize first letter only\r\n        type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\r\n        return fabric.util.resolveNamespace(namespace)[type];\r\n      },\r\n\r\n      /**\r\n       * Returns array of attributes for given svg that fabric parses\r\n       * @memberOf fabric.util\r\n       * @param {String} type Type of svg element (eg. 'circle')\r\n       * @return {Array} string names of supported attributes\r\n       */\r\n      getSvgAttributes: function(type) {\r\n        var attributes = [\r\n          'instantiated_by_use',\r\n          'style',\r\n          'id',\r\n          'class'\r\n        ];\r\n        switch (type) {\r\n          case 'linearGradient':\r\n            attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\r\n            break;\r\n          case 'radialGradient':\r\n            attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\r\n            break;\r\n          case 'stop':\r\n            attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\r\n            break;\r\n        }\r\n        return attributes;\r\n      },\r\n\r\n      /**\r\n       * Returns object of given namespace\r\n       * @memberOf fabric.util\r\n       * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\r\n       * @return {Object} Object for given namespace (default fabric)\r\n       */\r\n      resolveNamespace: function(namespace) {\r\n        if (!namespace) {\r\n          return fabric;\r\n        }\r\n\r\n        var parts = namespace.split('.'),\r\n            len = parts.length, i,\r\n            obj = global || fabric.window;\r\n\r\n        for (i = 0; i < len; ++i) {\r\n          obj = obj[parts[i]];\r\n        }\r\n\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Loads image element from given url and passes it to a callback\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL representing an image\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @param {*} [context] Context to invoke callback in\r\n       * @param {Object} [crossOrigin] crossOrigin value to set image element to\r\n       */\r\n      loadImage: function(url, callback, context, crossOrigin) {\r\n        if (!url) {\r\n          callback && callback.call(context, url);\r\n          return;\r\n        }\r\n\r\n        var img = fabric.util.createImage();\r\n\r\n        /** @ignore */\r\n        var onLoadCallback = function () {\r\n          callback && callback.call(context, img);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        img.onload = onLoadCallback;\r\n        /** @ignore */\r\n        img.onerror = function() {\r\n          fabric.log('Error loading ' + img.src);\r\n          callback && callback.call(context, null, true);\r\n          img = img.onload = img.onerror = null;\r\n        };\r\n\r\n        // data-urls appear to be buggy with crossOrigin\r\n        // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\r\n        // see https://code.google.com/p/chromium/issues/detail?id=315152\r\n        //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\r\n        if (url.indexOf('data') !== 0 && crossOrigin) {\r\n          img.crossOrigin = crossOrigin;\r\n        }\r\n\r\n        // IE10 / IE11-Fix: SVG contents from data: URI\r\n        // will only be available if the IMG is present\r\n        // in the DOM (and visible)\r\n        if (url.substring(0,14) === 'data:image/svg') {\r\n          img.onload = null;\r\n          fabric.util.loadImageInDom(img, onLoadCallback);\r\n        }\r\n\r\n        img.src = url;\r\n      },\r\n\r\n      /**\r\n       * Attaches SVG image with data: URL to the dom\r\n       * @memberOf fabric.util\r\n       * @param {Object} img Image object with data:image/svg src\r\n       * @param {Function} callback Callback; invoked with loaded image\r\n       * @return {Object} DOM element (div containing the SVG image)\r\n       */\r\n      loadImageInDom: function(img, onLoadCallback) {\r\n        var div = fabric.document.createElement('div');\r\n        div.style.width = div.style.height = '1px';\r\n        div.style.left = div.style.top = '-100%';\r\n        div.style.position = 'absolute';\r\n        div.appendChild(img);\r\n        fabric.document.querySelector('body').appendChild(div);\r\n        /**\r\n         * Wrap in function to:\r\n         *   1. Call existing callback\r\n         *   2. Cleanup DOM\r\n         */\r\n        img.onload = function () {\r\n          onLoadCallback();\r\n          div.parentNode.removeChild(div);\r\n          div = null;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Creates corresponding fabric instances from their object representations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} objects Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * @param {String} namespace Namespace to get klass \"Class\" object from\r\n       * @param {Function} reviver Method for further parsing of object elements,\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenObjects: function(objects, callback, namespace, reviver) {\r\n        objects = objects || [];\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedObjects === numTotalObjects) {\r\n            callback && callback(enlivenedObjects);\r\n          }\r\n        }\r\n\r\n        var enlivenedObjects = [],\r\n            numLoadedObjects = 0,\r\n            numTotalObjects = objects.length;\r\n\r\n        if (!numTotalObjects) {\r\n          callback && callback(enlivenedObjects);\r\n          return;\r\n        }\r\n\r\n        objects.forEach(function (o, index) {\r\n          // if sparse array\r\n          if (!o || !o.type) {\r\n            onLoaded();\r\n            return;\r\n          }\r\n          var klass = fabric.util.getKlass(o.type, namespace);\r\n          klass.fromObject(o, function (obj, error) {\r\n            error || (enlivenedObjects[index] = obj);\r\n            reviver && reviver(o, obj, error);\r\n            onLoaded();\r\n          });\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Create and wait for loading of patterns\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} patterns Objects to enliven\r\n       * @param {Function} callback Callback to invoke when all objects are created\r\n       * called after each fabric object created.\r\n       */\r\n      enlivenPatterns: function(patterns, callback) {\r\n        patterns = patterns || [];\r\n\r\n        function onLoaded() {\r\n          if (++numLoadedPatterns === numPatterns) {\r\n            callback && callback(enlivenedPatterns);\r\n          }\r\n        }\r\n\r\n        var enlivenedPatterns = [],\r\n            numLoadedPatterns = 0,\r\n            numPatterns = patterns.length;\r\n\r\n        if (!numPatterns) {\r\n          callback && callback(enlivenedPatterns);\r\n          return;\r\n        }\r\n\r\n        patterns.forEach(function (p, index) {\r\n          if (p && p.source) {\r\n            new fabric.Pattern(p, function(pattern) {\r\n              enlivenedPatterns[index] = pattern;\r\n              onLoaded();\r\n            });\r\n          }\r\n          else {\r\n            enlivenedPatterns[index] = p;\r\n            onLoaded();\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Groups SVG elements (usually those retrieved from SVG document)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Array} elements SVG elements to group\r\n       * @param {Object} [options] Options object\r\n       * @param {String} path Value to set sourcePath to\r\n       * @return {fabric.Object|fabric.Group}\r\n       */\r\n      groupSVGElements: function(elements, options, path) {\r\n        var object;\r\n        if (elements.length === 1) {\r\n          return elements[0];\r\n        }\r\n        if (options) {\r\n          if (options.width && options.height) {\r\n            options.centerPoint = {\r\n              x: options.width / 2,\r\n              y: options.height / 2\r\n            };\r\n          }\r\n          else {\r\n            delete options.width;\r\n            delete options.height;\r\n          }\r\n        }\r\n        object = new fabric.Group(elements, options);\r\n        if (typeof path !== 'undefined') {\r\n          object.sourcePath = path;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Populates an object with properties of another object\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param {Object} source Source object\r\n       * @param {Object} destination Destination object\r\n       * @return {Array} properties Properties names to include\r\n       */\r\n      populateWithProperties: function(source, destination, properties) {\r\n        if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\r\n          for (var i = 0, len = properties.length; i < len; i++) {\r\n            if (properties[i] in source) {\r\n              destination[properties[i]] = source[properties[i]];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a dashed line between two points\r\n       *\r\n       * This method is used to draw dashed line around selection area.\r\n       * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\r\n       *\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x  start x coordinate\r\n       * @param {Number} y start y coordinate\r\n       * @param {Number} x2 end x coordinate\r\n       * @param {Number} y2 end y coordinate\r\n       * @param {Array} da dash array pattern\r\n       */\r\n      drawDashedLine: function(ctx, x, y, x2, y2, da) {\r\n        var dx = x2 - x,\r\n            dy = y2 - y,\r\n            len = sqrt(dx * dx + dy * dy),\r\n            rot = atan2(dy, dx),\r\n            dc = da.length,\r\n            di = 0,\r\n            draw = true;\r\n\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.moveTo(0, 0);\r\n        ctx.rotate(rot);\r\n\r\n        x = 0;\r\n        while (len > x) {\r\n          x += da[di++ % dc];\r\n          if (x > len) {\r\n            x = len;\r\n          }\r\n          ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\r\n          draw = !draw;\r\n        }\r\n\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Creates canvas element\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {CanvasElement} initialized canvas element\r\n       */\r\n      createCanvasElement: function() {\r\n        return fabric.document.createElement('canvas');\r\n      },\r\n\r\n      /**\r\n       * Creates image element (works on client and node)\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @return {HTMLImageElement} HTML image element\r\n       */\r\n      createImage: function() {\r\n        return fabric.document.createElement('img');\r\n      },\r\n\r\n      /**\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @deprecated since 2.0.0\r\n       * @param {fabric.Object} receiver Object implementing `clipTo` method\r\n       * @param {CanvasRenderingContext2D} ctx Context to clip\r\n       */\r\n      clipContext: function(receiver, ctx) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        receiver.clipTo(ctx);\r\n        ctx.clip();\r\n      },\r\n\r\n      /**\r\n       * Multiply matrix A by matrix B to nest transformations\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a First transformMatrix\r\n       * @param  {Array} b Second transformMatrix\r\n       * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\r\n       * @return {Array} The product of the two transform matrices\r\n       */\r\n      multiplyTransformMatrices: function(a, b, is2x2) {\r\n        // Matrix multiply a * b\r\n        return [\r\n          a[0] * b[0] + a[2] * b[1],\r\n          a[1] * b[0] + a[3] * b[1],\r\n          a[0] * b[2] + a[2] * b[3],\r\n          a[1] * b[2] + a[3] * b[3],\r\n          is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\r\n          is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Decomposes standard 2x2 matrix into transform componentes\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {Array} a transformMatrix\r\n       * @return {Object} Components of transform\r\n       */\r\n      qrDecompose: function(a) {\r\n        var angle = atan2(a[1], a[0]),\r\n            denom = pow(a[0], 2) + pow(a[1], 2),\r\n            scaleX = sqrt(denom),\r\n            scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\r\n            skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\r\n        return {\r\n          angle: angle  / PiBy180,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          skewX: skewX / PiBy180,\r\n          skewY: 0,\r\n          translateX: a[4],\r\n          translateY: a[5]\r\n        };\r\n      },\r\n\r\n      customTransformMatrix: function(scaleX, scaleY, skewX) {\r\n        var skewMatrixX = [1, 0, abs(Math.tan(skewX * PiBy180)), 1],\r\n            scaleMatrix = [abs(scaleX), 0, 0, abs(scaleY)];\r\n        return fabric.util.multiplyTransformMatrices(scaleMatrix, skewMatrixX, true);\r\n      },\r\n\r\n      /**\r\n       * reset an object transform state to neutral. Top and left are not accounted for\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to transform\r\n       */\r\n      resetObjectTransform: function (target) {\r\n        target.scaleX = 1;\r\n        target.scaleY = 1;\r\n        target.skewX = 0;\r\n        target.skewY = 0;\r\n        target.flipX = false;\r\n        target.flipY = false;\r\n        target.rotate(0);\r\n      },\r\n\r\n      /**\r\n       * Extract Object transform values\r\n       * @static\r\n       * @memberOf fabric.util\r\n       * @param  {fabric.Object} target object to read from\r\n       * @return {Object} Components of transform\r\n       */\r\n      saveObjectTransform: function (target) {\r\n        return {\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          angle: target.angle,\r\n          left: target.left,\r\n          flipX: target.flipX,\r\n          flipY: target.flipY,\r\n          top: target.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of function body\r\n       * @param {Function} fn Function to get body of\r\n       * @return {String} Function body\r\n       */\r\n      getFunctionBody: function(fn) {\r\n        return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\r\n      },\r\n\r\n      /**\r\n       * Returns true if context has transparent pixel\r\n       * at specified location (taking tolerance into account)\r\n       * @param {CanvasRenderingContext2D} ctx context\r\n       * @param {Number} x x coordinate\r\n       * @param {Number} y y coordinate\r\n       * @param {Number} tolerance Tolerance\r\n       */\r\n      isTransparent: function(ctx, x, y, tolerance) {\r\n\r\n        // If tolerance is > 0 adjust start coords to take into account.\r\n        // If moves off Canvas fix to 0\r\n        if (tolerance > 0) {\r\n          if (x > tolerance) {\r\n            x -= tolerance;\r\n          }\r\n          else {\r\n            x = 0;\r\n          }\r\n          if (y > tolerance) {\r\n            y -= tolerance;\r\n          }\r\n          else {\r\n            y = 0;\r\n          }\r\n        }\r\n\r\n        var _isTransparent = true, i, temp,\r\n            imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\r\n            l = imageData.data.length;\r\n\r\n        // Split image data - for tolerance > 1, pixelDataSize = 4;\r\n        for (i = 3; i < l; i += 4) {\r\n          temp = imageData.data[i];\r\n          _isTransparent = temp <= 0;\r\n          if (_isTransparent === false) {\r\n            break; // Stop if colour found\r\n          }\r\n        }\r\n\r\n        imageData = null;\r\n\r\n        return _isTransparent;\r\n      },\r\n\r\n      /**\r\n       * Parse preserveAspectRatio attribute from element\r\n       * @param {string} attribute to be parsed\r\n       * @return {Object} an object containing align and meetOrSlice attribute\r\n       */\r\n      parsePreserveAspectRatioAttribute: function(attribute) {\r\n        var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\r\n            aspectRatioAttrs = attribute.split(' '), align;\r\n\r\n        if (aspectRatioAttrs && aspectRatioAttrs.length) {\r\n          meetOrSlice = aspectRatioAttrs.pop();\r\n          if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\r\n            align = meetOrSlice;\r\n            meetOrSlice = 'meet';\r\n          }\r\n          else if (aspectRatioAttrs.length) {\r\n            align = aspectRatioAttrs.pop();\r\n          }\r\n        }\r\n        //divide align in alignX and alignY\r\n        alignX = align !== 'none' ? align.slice(1, 4) : 'none';\r\n        alignY = align !== 'none' ? align.slice(5, 8) : 'none';\r\n        return {\r\n          meetOrSlice: meetOrSlice,\r\n          alignX: alignX,\r\n          alignY: alignY\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Clear char widths cache for the given font family or all the cache if no\r\n       * fontFamily is specified.\r\n       * Use it if you know you are loading fonts in a lazy way and you are not waiting\r\n       * for custom fonts to load properly when adding text objects to the canvas.\r\n       * If a text object is added when its own font is not loaded yet, you will get wrong\r\n       * measurement and so wrong bounding boxes.\r\n       * After the font cache is cleared, either change the textObject text content or call\r\n       * initDimensions() to trigger a recalculation\r\n       * @memberOf fabric.util\r\n       * @param {String} [fontFamily] font family to clear\r\n       */\r\n      clearFabricFontCache: function(fontFamily) {\r\n        fontFamily = (fontFamily || '').toLowerCase();\r\n        if (!fontFamily) {\r\n          fabric.charWidthsCache = { };\r\n        }\r\n        else if (fabric.charWidthsCache[fontFamily]) {\r\n          delete fabric.charWidthsCache[fontFamily];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Given current aspect ratio, determines the max width and height that can\r\n       * respect the total allowed area for the cache.\r\n       * @memberOf fabric.util\r\n       * @param {Number} ar aspect ratio\r\n       * @param {Number} maximumArea Maximum area you want to achieve\r\n       * @return {Object.x} Limited dimensions by X\r\n       * @return {Object.y} Limited dimensions by Y\r\n       */\r\n      limitDimsByArea: function(ar, maximumArea) {\r\n        var roughWidth = Math.sqrt(maximumArea * ar),\r\n            perfLimitSizeY = Math.floor(maximumArea / roughWidth);\r\n        return { x: Math.floor(roughWidth), y: perfLimitSizeY };\r\n      },\r\n\r\n      capValue: function(min, value, max) {\r\n        return Math.max(min, Math.min(value, max));\r\n      },\r\n\r\n      findScaleToFit: function(source, destination) {\r\n        return Math.min(destination.width / source.width, destination.height / source.height);\r\n      },\r\n\r\n      findScaleToCover: function(source, destination) {\r\n        return Math.max(destination.width / source.width, destination.height / source.height);\r\n      }\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var _join = Array.prototype.join;\r\n\r\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\r\n     * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\r\n     * http://mozilla.org/MPL/2.0/\r\n     */\r\n    function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\r\n      var argsString = _join.call(arguments);\r\n      if (fabric.arcToSegmentsCache[argsString]) {\r\n        return fabric.arcToSegmentsCache[argsString];\r\n      }\r\n\r\n      var PI = Math.PI, th = rotateX * PI / 180,\r\n          sinTh = fabric.util.sin(th),\r\n          cosTh = fabric.util.cos(th),\r\n          fromX = 0, fromY = 0;\r\n\r\n      rx = Math.abs(rx);\r\n      ry = Math.abs(ry);\r\n\r\n      var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\r\n          py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\r\n          rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\r\n          pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\r\n          root = 0;\r\n\r\n      if (pl < 0) {\r\n        var s = Math.sqrt(1 - pl / (rx2 * ry2));\r\n        rx *= s;\r\n        ry *= s;\r\n      }\r\n      else {\r\n        root = (large === sweep ? -1.0 : 1.0) *\r\n                Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\r\n      }\r\n\r\n      var cx = root * rx * py / ry,\r\n          cy = -root * ry * px / rx,\r\n          cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\r\n          cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\r\n          mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\r\n          dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\r\n\r\n      if (sweep === 0 && dtheta > 0) {\r\n        dtheta -= 2 * PI;\r\n      }\r\n      else if (sweep === 1 && dtheta < 0) {\r\n        dtheta += 2 * PI;\r\n      }\r\n\r\n      // Convert into cubic bezier segments <= 90deg\r\n      var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\r\n          result = [], mDelta = dtheta / segments,\r\n          mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\r\n          th3 = mTheta + mDelta;\r\n\r\n      for (var i = 0; i < segments; i++) {\r\n        result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\r\n        fromX = result[i][4];\r\n        fromY = result[i][5];\r\n        mTheta = th3;\r\n        th3 += mDelta;\r\n      }\r\n      fabric.arcToSegmentsCache[argsString] = result;\r\n      return result;\r\n    }\r\n\r\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\r\n      var costh2 = fabric.util.cos(th2),\r\n          sinth2 = fabric.util.sin(th2),\r\n          costh3 = fabric.util.cos(th3),\r\n          sinth3 = fabric.util.sin(th3),\r\n          toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\r\n          toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\r\n          cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\r\n          cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\r\n          cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\r\n          cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\r\n\r\n      return [\r\n        cp1X, cp1Y,\r\n        cp2X, cp2Y,\r\n        toX, toY\r\n      ];\r\n    }\r\n\r\n    /*\r\n     * Private\r\n     */\r\n    function calcVectorAngle(ux, uy, vx, vy) {\r\n      var ta = Math.atan2(uy, ux),\r\n          tb = Math.atan2(vy, vx);\r\n      if (tb >= ta) {\r\n        return tb - ta;\r\n      }\r\n      else {\r\n        return 2 * Math.PI - (ta - tb);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Draws arc\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {Number} fx\r\n     * @param {Number} fy\r\n     * @param {Array} coords\r\n     */\r\n    fabric.util.drawArc = function(ctx, fx, fy, coords) {\r\n      var rx = coords[0],\r\n          ry = coords[1],\r\n          rot = coords[2],\r\n          large = coords[3],\r\n          sweep = coords[4],\r\n          tx = coords[5],\r\n          ty = coords[6],\r\n          segs = [[], [], [], []],\r\n          segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segsNorm.length; i < len; i++) {\r\n        segs[i][0] = segsNorm[i][0] + fx;\r\n        segs[i][1] = segsNorm[i][1] + fy;\r\n        segs[i][2] = segsNorm[i][2] + fx;\r\n        segs[i][3] = segsNorm[i][3] + fy;\r\n        segs[i][4] = segsNorm[i][4] + fx;\r\n        segs[i][5] = segsNorm[i][5] + fy;\r\n        ctx.bezierCurveTo.apply(ctx, segs[i]);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a elliptic-arc\r\n     * @param {Number} fx start point of arc\r\n     * @param {Number} fy\r\n     * @param {Number} rx horizontal radius\r\n     * @param {Number} ry vertical radius\r\n     * @param {Number} rot angle of horizontal axe\r\n     * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\r\n     * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\r\n     * @param {Number} tx end point of arc\r\n     * @param {Number} ty\r\n     */\r\n    fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\r\n\r\n      var fromX = 0, fromY = 0, bound, bounds = [],\r\n          segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n      for (var i = 0, len = segs.length; i < len; i++) {\r\n        bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\r\n        bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\r\n        bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\r\n        fromX = segs[i][4];\r\n        fromY = segs[i][5];\r\n      }\r\n      return bounds;\r\n    };\r\n\r\n    /**\r\n     * Calculate bounding box of a beziercurve\r\n     * @param {Number} x0 starting point\r\n     * @param {Number} y0\r\n     * @param {Number} x1 first control point\r\n     * @param {Number} y1\r\n     * @param {Number} x2 secondo control point\r\n     * @param {Number} y2\r\n     * @param {Number} x3 end of beizer\r\n     * @param {Number} y3\r\n     */\r\n    // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\r\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n      var argsString;\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        argsString = _join.call(arguments);\r\n        if (fabric.boundsOfCurveCache[argsString]) {\r\n          return fabric.boundsOfCurveCache[argsString];\r\n        }\r\n      }\r\n\r\n      var sqrt = Math.sqrt,\r\n          min = Math.min, max = Math.max,\r\n          abs = Math.abs, tvalues = [],\r\n          bounds = [[], []],\r\n          a, b, c, t, t1, t2, b2ac, sqrtb2ac;\r\n\r\n      b = 6 * x0 - 12 * x1 + 6 * x2;\r\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\r\n      c = 3 * x1 - 3 * x0;\r\n\r\n      for (var i = 0; i < 2; ++i) {\r\n        if (i > 0) {\r\n          b = 6 * y0 - 12 * y1 + 6 * y2;\r\n          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\r\n          c = 3 * y1 - 3 * y0;\r\n        }\r\n\r\n        if (abs(a) < 1e-12) {\r\n          if (abs(b) < 1e-12) {\r\n            continue;\r\n          }\r\n          t = -c / b;\r\n          if (0 < t && t < 1) {\r\n            tvalues.push(t);\r\n          }\r\n          continue;\r\n        }\r\n        b2ac = b * b - 4 * c * a;\r\n        if (b2ac < 0) {\r\n          continue;\r\n        }\r\n        sqrtb2ac = sqrt(b2ac);\r\n        t1 = (-b + sqrtb2ac) / (2 * a);\r\n        if (0 < t1 && t1 < 1) {\r\n          tvalues.push(t1);\r\n        }\r\n        t2 = (-b - sqrtb2ac) / (2 * a);\r\n        if (0 < t2 && t2 < 1) {\r\n          tvalues.push(t2);\r\n        }\r\n      }\r\n\r\n      var x, y, j = tvalues.length, jlen = j, mt;\r\n      while (j--) {\r\n        t = tvalues[j];\r\n        mt = 1 - t;\r\n        x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\r\n        bounds[0][j] = x;\r\n\r\n        y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\r\n        bounds[1][j] = y;\r\n      }\r\n\r\n      bounds[0][jlen] = x0;\r\n      bounds[1][jlen] = y0;\r\n      bounds[0][jlen + 1] = x3;\r\n      bounds[1][jlen + 1] = y3;\r\n      var result = [\r\n        {\r\n          x: min.apply(null, bounds[0]),\r\n          y: min.apply(null, bounds[1])\r\n        },\r\n        {\r\n          x: max.apply(null, bounds[0]),\r\n          y: max.apply(null, bounds[1])\r\n        }\r\n      ];\r\n      if (fabric.cachesBoundsOfCurve) {\r\n        fabric.boundsOfCurveCache[argsString] = result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Invokes method on all items in a given array\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} method Name of a method to invoke\r\n     * @return {Array}\r\n     */\r\n    function invoke(array, method) {\r\n      var args = slice.call(arguments, 2), result = [];\r\n      for (var i = 0, len = array.length; i < len; i++) {\r\n        result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Finds maximum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function max(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 >= value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Finds minimum value in array (not necessarily \"first\" one)\r\n     * @memberOf fabric.util.array\r\n     * @param {Array} array Array to iterate over\r\n     * @param {String} byProperty\r\n     * @return {*}\r\n     */\r\n    function min(array, byProperty) {\r\n      return find(array, byProperty, function(value1, value2) {\r\n        return value1 < value2;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function fill(array, value) {\r\n      var k = array.length;\r\n      while (k--) {\r\n        array[k] = value;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function find(array, byProperty, condition) {\r\n      if (!array || array.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var i = array.length - 1,\r\n          result = byProperty ? array[i][byProperty] : array[i];\r\n      if (byProperty) {\r\n        while (i--) {\r\n          if (condition(array[i][byProperty], result)) {\r\n            result = array[i][byProperty];\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        while (i--) {\r\n          if (condition(array[i], result)) {\r\n            result = array[i];\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * @namespace fabric.util.array\r\n     */\r\n    fabric.util.array = {\r\n      fill: fill,\r\n      invoke: invoke,\r\n      min: min,\r\n      max: max\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n    /**\r\n     * Copies all enumerable properties of one js object to another\r\n     * Does not clone or extend fabric.Object subclasses.\r\n     * @memberOf fabric.util.object\r\n     * @param {Object} destination Where to copy to\r\n     * @param {Object} source Where to copy from\r\n     * @return {Object}\r\n     */\r\n\r\n    function extend(destination, source, deep) {\r\n      // JScript DontEnum bug is not taken care of\r\n      // the deep clone is for internal use, is not meant to avoid\r\n      // javascript traps or cloning html element or self referenced objects.\r\n      if (deep) {\r\n        if (!fabric.isLikelyNode && source instanceof Element) {\r\n          // avoid cloning deep images, canvases,\r\n          destination = source;\r\n        }\r\n        else if (source instanceof Array) {\r\n          destination = [];\r\n          for (var i = 0, len = source.length; i < len; i++) {\r\n            destination[i] = extend({ }, source[i], deep);\r\n          }\r\n        }\r\n        else if (source && typeof source === 'object') {\r\n          for (var property in source) {\r\n            if (source.hasOwnProperty(property)) {\r\n              destination[property] = extend({ }, source[property], deep);\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          // this sounds odd for an extend but is ok for recursive use\r\n          destination = source;\r\n        }\r\n      }\r\n      else {\r\n        for (var property in source) {\r\n          destination[property] = source[property];\r\n        }\r\n      }\r\n      return destination;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty object and copies all enumerable properties of another object to it\r\n     * @memberOf fabric.util.object\r\n     * TODO: this function return an empty object if you try to clone null\r\n     * @param {Object} object Object to clone\r\n     * @return {Object}\r\n     */\r\n    function clone(object, deep) {\r\n      return extend({ }, object, deep);\r\n    }\r\n\r\n    /** @namespace fabric.util.object */\r\n    fabric.util.object = {\r\n      extend: extend,\r\n      clone: clone\r\n    };\r\n    fabric.util.object.extend(fabric.util, fabric.Observable);\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * Camelizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to camelize\r\n     * @return {String} Camelized version of a string\r\n     */\r\n    function camelize(string) {\r\n      return string.replace(/-+(.)?/g, function(match, character) {\r\n        return character ? character.toUpperCase() : '';\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Capitalizes a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to capitalize\r\n     * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\r\n     * and other letters stay untouched, if false first letter is capitalized\r\n     * and other letters are converted to lowercase.\r\n     * @return {String} Capitalized version of a string\r\n     */\r\n    function capitalize(string, firstLetterOnly) {\r\n      return string.charAt(0).toUpperCase() +\r\n        (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Escapes XML in a string\r\n     * @memberOf fabric.util.string\r\n     * @param {String} string String to escape\r\n     * @return {String} Escaped version of a string\r\n     */\r\n    function escapeXml(string) {\r\n      return string.replace(/&/g, '&amp;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&apos;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n    }\r\n\r\n    /**\r\n     * Divide a string in the user perceived single units\r\n     * @memberOf fabric.util.string\r\n     * @param {String} textstring String to escape\r\n     * @return {Array} array containing the graphemes\r\n     */\r\n    function graphemeSplit(textstring) {\r\n      var i = 0, chr, graphemes = [];\r\n      for (i = 0, chr; i < textstring.length; i++) {\r\n        if ((chr = getWholeChar(textstring, i)) === false) {\r\n          continue;\r\n        }\r\n        graphemes.push(chr);\r\n      }\r\n      return graphemes;\r\n    }\r\n\r\n    // taken from mdn in the charAt doc page.\r\n    function getWholeChar(str, i) {\r\n      var code = str.charCodeAt(i);\r\n\r\n      if (isNaN(code)) {\r\n        return ''; // Position not found\r\n      }\r\n      if (code < 0xD800 || code > 0xDFFF) {\r\n        return str.charAt(i);\r\n      }\r\n\r\n      // High surrogate (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        if (str.length <= (i + 1)) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        var next = str.charCodeAt(i + 1);\r\n        if (0xDC00 > next || next > 0xDFFF) {\r\n          throw 'High surrogate without following low surrogate';\r\n        }\r\n        return str.charAt(i) + str.charAt(i + 1);\r\n      }\r\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\r\n      if (i === 0) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      var prev = str.charCodeAt(i - 1);\r\n\r\n      // (could change last hex to 0xDB7F to treat high private\r\n      // surrogates as single characters)\r\n      if (0xD800 > prev || prev > 0xDBFF) {\r\n        throw 'Low surrogate without preceding high surrogate';\r\n      }\r\n      // We can pass over low surrogates now as the second component\r\n      // in a pair which we have already processed\r\n      return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * String utilities\r\n     * @namespace fabric.util.string\r\n     */\r\n    fabric.util.string = {\r\n      camelize: camelize,\r\n      capitalize: capitalize,\r\n      escapeXml: escapeXml,\r\n      graphemeSplit: graphemeSplit\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var slice = Array.prototype.slice, emptyFunction = function() { },\r\n\r\n        IS_DONTENUM_BUGGY = (function() {\r\n          for (var p in { toString: 1 }) {\r\n            if (p === 'toString') {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        })(),\r\n\r\n        /** @ignore */\r\n        addMethods = function(klass, source, parent) {\r\n          for (var property in source) {\r\n\r\n            if (property in klass.prototype &&\r\n                typeof klass.prototype[property] === 'function' &&\r\n                (source[property] + '').indexOf('callSuper') > -1) {\r\n\r\n              klass.prototype[property] = (function(property) {\r\n                return function() {\r\n\r\n                  var superclass = this.constructor.superclass;\r\n                  this.constructor.superclass = parent;\r\n                  var returnValue = source[property].apply(this, arguments);\r\n                  this.constructor.superclass = superclass;\r\n\r\n                  if (property !== 'initialize') {\r\n                    return returnValue;\r\n                  }\r\n                };\r\n              })(property);\r\n            }\r\n            else {\r\n              klass.prototype[property] = source[property];\r\n            }\r\n\r\n            if (IS_DONTENUM_BUGGY) {\r\n              if (source.toString !== Object.prototype.toString) {\r\n                klass.prototype.toString = source.toString;\r\n              }\r\n              if (source.valueOf !== Object.prototype.valueOf) {\r\n                klass.prototype.valueOf = source.valueOf;\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n    function Subclass() { }\r\n\r\n    function callSuper(methodName) {\r\n      var parentMethod = null,\r\n          _this = this;\r\n\r\n      // climb prototype chain to find method not equal to callee's method\r\n      while (_this.constructor.superclass) {\r\n        var superClassMethod = _this.constructor.superclass.prototype[methodName];\r\n        if (_this[methodName] !== superClassMethod) {\r\n          parentMethod = superClassMethod;\r\n          break;\r\n        }\r\n        // eslint-disable-next-line\r\n        _this = _this.constructor.superclass.prototype;\r\n      }\r\n\r\n      if (!parentMethod) {\r\n        return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\r\n      }\r\n\r\n      return (arguments.length > 1)\r\n        ? parentMethod.apply(this, slice.call(arguments, 1))\r\n        : parentMethod.call(this);\r\n    }\r\n\r\n    /**\r\n     * Helper for creation of \"classes\".\r\n     * @memberOf fabric.util\r\n     * @param {Function} [parent] optional \"Class\" to inherit from\r\n     * @param {Object} [properties] Properties shared by all instances of this class\r\n     *                  (be careful modifying objects defined here as this would affect all instances)\r\n     */\r\n    function createClass() {\r\n      var parent = null,\r\n          properties = slice.call(arguments, 0);\r\n\r\n      if (typeof properties[0] === 'function') {\r\n        parent = properties.shift();\r\n      }\r\n      function klass() {\r\n        this.initialize.apply(this, arguments);\r\n      }\r\n\r\n      klass.superclass = parent;\r\n      klass.subclasses = [];\r\n\r\n      if (parent) {\r\n        Subclass.prototype = parent.prototype;\r\n        klass.prototype = new Subclass();\r\n        parent.subclasses.push(klass);\r\n      }\r\n      for (var i = 0, length = properties.length; i < length; i++) {\r\n        addMethods(klass, properties[i], parent);\r\n      }\r\n      if (!klass.prototype.initialize) {\r\n        klass.prototype.initialize = emptyFunction;\r\n      }\r\n      klass.prototype.constructor = klass;\r\n      klass.prototype.callSuper = callSuper;\r\n      return klass;\r\n    }\r\n\r\n    fabric.util.createClass = createClass;\r\n  })();\r\n\r\n\r\n  (function () {\r\n\r\n    var unknown = 'unknown';\r\n\r\n    /* EVENT HANDLING */\r\n\r\n    function areHostMethods(object) {\r\n      var methodNames = Array.prototype.slice.call(arguments, 1),\r\n          t, i, len = methodNames.length;\r\n      for (i = 0; i < len; i++) {\r\n        t = typeof object[methodNames[i]];\r\n        if (!(/^(?:function|object|unknown)$/).test(t)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /** @ignore */\r\n    var getElement,\r\n        setElement,\r\n        getUniqueId = (function () {\r\n          var uid = 0;\r\n          return function (element) {\r\n            return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\r\n          };\r\n        })();\r\n\r\n    (function () {\r\n      var elements = { };\r\n      /** @ignore */\r\n      getElement = function (uid) {\r\n        return elements[uid];\r\n      };\r\n      /** @ignore */\r\n      setElement = function (uid, element) {\r\n        elements[uid] = element;\r\n      };\r\n    })();\r\n\r\n    function createListener(uid, handler) {\r\n      return {\r\n        handler: handler,\r\n        wrappedHandler: createWrappedHandler(uid, handler)\r\n      };\r\n    }\r\n\r\n    function createWrappedHandler(uid, handler) {\r\n      return function (e) {\r\n        handler.call(getElement(uid), e || fabric.window.event);\r\n      };\r\n    }\r\n\r\n    function createDispatcher(uid, eventName) {\r\n      return function (e) {\r\n        if (handlers[uid] && handlers[uid][eventName]) {\r\n          var handlersForEvent = handlers[uid][eventName];\r\n          for (var i = 0, len = handlersForEvent.length; i < len; i++) {\r\n            handlersForEvent[i].call(this, e || fabric.window.event);\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    var shouldUseAddListenerRemoveListener = (\r\n          areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\r\n          areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\r\n\r\n        shouldUseAttachEventDetachEvent = (\r\n          areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\r\n          areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\r\n\r\n        // IE branch\r\n        listeners = { },\r\n\r\n        // DOM L0 branch\r\n        handlers = { },\r\n\r\n        addListener, removeListener;\r\n\r\n    if (shouldUseAddListenerRemoveListener) {\r\n      /** @ignore */\r\n      addListener = function (element, eventName, handler, options) {\r\n        // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\r\n        element && element.addEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\r\n      };\r\n      /** @ignore */\r\n      removeListener = function (element, eventName, handler, options) {\r\n        element && element.removeEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\r\n      };\r\n    }\r\n\r\n    else if (shouldUseAttachEventDetachEvent) {\r\n      /** @ignore */\r\n      addListener = function (element, eventName, handler) {\r\n        if (!element) {\r\n          return;\r\n        }\r\n        var uid = getUniqueId(element);\r\n        setElement(uid, element);\r\n        if (!listeners[uid]) {\r\n          listeners[uid] = { };\r\n        }\r\n        if (!listeners[uid][eventName]) {\r\n          listeners[uid][eventName] = [];\r\n\r\n        }\r\n        var listener = createListener(uid, handler);\r\n        listeners[uid][eventName].push(listener);\r\n        element.attachEvent('on' + eventName, listener.wrappedHandler);\r\n      };\r\n      /** @ignore */\r\n      removeListener = function (element, eventName, handler) {\r\n        if (!element) {\r\n          return;\r\n        }\r\n        var uid = getUniqueId(element), listener;\r\n        if (listeners[uid] && listeners[uid][eventName]) {\r\n          for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\r\n            listener = listeners[uid][eventName][i];\r\n            if (listener && listener.handler === handler) {\r\n              element.detachEvent('on' + eventName, listener.wrappedHandler);\r\n              listeners[uid][eventName][i] = null;\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    else {\r\n      /** @ignore */\r\n      addListener = function (element, eventName, handler) {\r\n        if (!element) {\r\n          return;\r\n        }\r\n        var uid = getUniqueId(element);\r\n        if (!handlers[uid]) {\r\n          handlers[uid] = { };\r\n        }\r\n        if (!handlers[uid][eventName]) {\r\n          handlers[uid][eventName] = [];\r\n          var existingHandler = element['on' + eventName];\r\n          if (existingHandler) {\r\n            handlers[uid][eventName].push(existingHandler);\r\n          }\r\n          element['on' + eventName] = createDispatcher(uid, eventName);\r\n        }\r\n        handlers[uid][eventName].push(handler);\r\n      };\r\n      /** @ignore */\r\n      removeListener = function (element, eventName, handler) {\r\n        if (!element) {\r\n          return;\r\n        }\r\n        var uid = getUniqueId(element);\r\n        if (handlers[uid] && handlers[uid][eventName]) {\r\n          var handlersForEvent = handlers[uid][eventName];\r\n          for (var i = 0, len = handlersForEvent.length; i < len; i++) {\r\n            if (handlersForEvent[i] === handler) {\r\n              handlersForEvent.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener to an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.addListener = addListener;\r\n\r\n    /**\r\n     * Removes an event listener from an element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {String} eventName\r\n     * @param {Function} handler\r\n     */\r\n    fabric.util.removeListener = removeListener;\r\n\r\n    /**\r\n     * Cross-browser wrapper for getting event's coordinates\r\n     * @memberOf fabric.util\r\n     * @param {Event} event Event object\r\n     */\r\n    function getPointer(event) {\r\n      event || (event = fabric.window.event);\r\n\r\n      var element = event.target ||\r\n                    (typeof event.srcElement !== unknown ? event.srcElement : null),\r\n\r\n          scroll = fabric.util.getScrollLeftTop(element);\r\n      return {\r\n        x: pointerX(event) + scroll.left,\r\n        y: pointerY(event) + scroll.top\r\n      };\r\n    }\r\n\r\n    var pointerX = function(event) {\r\n          return event.clientX;\r\n        },\r\n\r\n        pointerY = function(event) {\r\n          return event.clientY;\r\n        };\r\n\r\n    function _getPointer(event, pageProp, clientProp) {\r\n      var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\r\n      var pointer, eventTouchProp = event[touchProp];\r\n\r\n      if (eventTouchProp && eventTouchProp[0]) {\r\n        pointer = eventTouchProp[0][clientProp];\r\n      }\r\n\r\n      if (typeof pointer === 'undefined') {\r\n        pointer = event[clientProp];\r\n      }\r\n\r\n      return pointer;\r\n    }\r\n\r\n    if (fabric.isTouchSupported) {\r\n      pointerX = function(event) {\r\n        return _getPointer(event, 'pageX', 'clientX');\r\n      };\r\n      pointerY = function(event) {\r\n        return _getPointer(event, 'pageY', 'clientY');\r\n      };\r\n    }\r\n\r\n    fabric.util.getPointer = getPointer;\r\n\r\n  })();\r\n\r\n\r\n  (function () {\r\n\r\n    /**\r\n     * Cross-browser wrapper for setting element's style\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element\r\n     * @param {Object} styles\r\n     * @return {HTMLElement} Element that was passed as a first argument\r\n     */\r\n    function setStyle(element, styles) {\r\n      var elementStyle = element.style;\r\n      if (!elementStyle) {\r\n        return element;\r\n      }\r\n      if (typeof styles === 'string') {\r\n        element.style.cssText += ';' + styles;\r\n        return styles.indexOf('opacity') > -1\r\n          ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\r\n          : element;\r\n      }\r\n      for (var property in styles) {\r\n        if (property === 'opacity') {\r\n          setOpacity(element, styles[property]);\r\n        }\r\n        else {\r\n          var normalizedProperty = (property === 'float' || property === 'cssFloat')\r\n            ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\r\n            : property;\r\n          elementStyle[normalizedProperty] = styles[property];\r\n        }\r\n      }\r\n      return element;\r\n    }\r\n\r\n    var parseEl = fabric.document.createElement('div'),\r\n        supportsOpacity = typeof parseEl.style.opacity === 'string',\r\n        supportsFilters = typeof parseEl.style.filter === 'string',\r\n        reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\r\n\r\n        /** @ignore */\r\n        setOpacity = function (element) { return element; };\r\n\r\n    if (supportsOpacity) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        element.style.opacity = value;\r\n        return element;\r\n      };\r\n    }\r\n    else if (supportsFilters) {\r\n      /** @ignore */\r\n      setOpacity = function(element, value) {\r\n        var es = element.style;\r\n        if (element.currentStyle && !element.currentStyle.hasLayout) {\r\n          es.zoom = 1;\r\n        }\r\n        if (reOpacity.test(es.filter)) {\r\n          value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\r\n          es.filter = es.filter.replace(reOpacity, value);\r\n        }\r\n        else {\r\n          es.filter += ' alpha(opacity=' + (value * 100) + ')';\r\n        }\r\n        return element;\r\n      };\r\n    }\r\n\r\n    fabric.util.setStyle = setStyle;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var _slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Takes id and returns an element with that id (if one exists in a document)\r\n     * @memberOf fabric.util\r\n     * @param {String|HTMLElement} id\r\n     * @return {HTMLElement|null}\r\n     */\r\n    function getById(id) {\r\n      return typeof id === 'string' ? fabric.document.getElementById(id) : id;\r\n    }\r\n\r\n    var sliceCanConvertNodelists,\r\n        /**\r\n         * Converts an array-like object (e.g. arguments or NodeList) to an array\r\n         * @memberOf fabric.util\r\n         * @param {Object} arrayLike\r\n         * @return {Array}\r\n         */\r\n        toArray = function(arrayLike) {\r\n          return _slice.call(arrayLike, 0);\r\n        };\r\n\r\n    try {\r\n      sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\r\n    }\r\n    catch (err) { }\r\n\r\n    if (!sliceCanConvertNodelists) {\r\n      toArray = function(arrayLike) {\r\n        var arr = new Array(arrayLike.length), i = arrayLike.length;\r\n        while (i--) {\r\n          arr[i] = arrayLike[i];\r\n        }\r\n        return arr;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates specified element with specified attributes\r\n     * @memberOf fabric.util\r\n     * @param {String} tagName Type of an element to create\r\n     * @param {Object} [attributes] Attributes to set on an element\r\n     * @return {HTMLElement} Newly created element\r\n     */\r\n    function makeElement(tagName, attributes) {\r\n      var el = fabric.document.createElement(tagName);\r\n      for (var prop in attributes) {\r\n        if (prop === 'class') {\r\n          el.className = attributes[prop];\r\n        }\r\n        else if (prop === 'for') {\r\n          el.htmlFor = attributes[prop];\r\n        }\r\n        else {\r\n          el.setAttribute(prop, attributes[prop]);\r\n        }\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Adds class to an element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to add class to\r\n     * @param {String} className Class to add to an element\r\n     */\r\n    function addClass(element, className) {\r\n      if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\r\n        element.className += (element.className ? ' ' : '') + className;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Wraps element with another element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to wrap\r\n     * @param {HTMLElement|String} wrapper Element to wrap with\r\n     * @param {Object} [attributes] Attributes to set on a wrapper\r\n     * @return {HTMLElement} wrapper\r\n     */\r\n    function wrapElement(element, wrapper, attributes) {\r\n      if (typeof wrapper === 'string') {\r\n        wrapper = makeElement(wrapper, attributes);\r\n      }\r\n      if (element.parentNode) {\r\n        element.parentNode.replaceChild(wrapper, element);\r\n      }\r\n      wrapper.appendChild(element);\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Returns element scroll offsets\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to operate on\r\n     * @return {Object} Object with left/top values\r\n     */\r\n    function getScrollLeftTop(element) {\r\n\r\n      var left = 0,\r\n          top = 0,\r\n          docElement = fabric.document.documentElement,\r\n          body = fabric.document.body || {\r\n            scrollLeft: 0, scrollTop: 0\r\n          };\r\n\r\n      // While loop checks (and then sets element to) .parentNode OR .host\r\n      //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\r\n      //  but the .parentNode of a root ShadowDOM node will always be null, instead\r\n      //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\r\n      while (element && (element.parentNode || element.host)) {\r\n\r\n        // Set element to element parent, or 'host' in case of ShadowDOM\r\n        element = element.parentNode || element.host;\r\n\r\n        if (element === fabric.document) {\r\n          left = body.scrollLeft || docElement.scrollLeft || 0;\r\n          top = body.scrollTop ||  docElement.scrollTop || 0;\r\n        }\r\n        else {\r\n          left += element.scrollLeft || 0;\r\n          top += element.scrollTop || 0;\r\n        }\r\n\r\n        if (element.nodeType === 1 && element.style.position === 'fixed') {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return { left: left, top: top };\r\n    }\r\n\r\n    /**\r\n     * Returns offset for a given element\r\n     * @function\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get offset for\r\n     * @return {Object} Object with \"left\" and \"top\" properties\r\n     */\r\n    function getElementOffset(element) {\r\n      var docElem,\r\n          doc = element && element.ownerDocument,\r\n          box = { left: 0, top: 0 },\r\n          offset = { left: 0, top: 0 },\r\n          scrollLeftTop,\r\n          offsetAttributes = {\r\n            borderLeftWidth: 'left',\r\n            borderTopWidth:  'top',\r\n            paddingLeft:     'left',\r\n            paddingTop:      'top'\r\n          };\r\n\r\n      if (!doc) {\r\n        return offset;\r\n      }\r\n\r\n      for (var attr in offsetAttributes) {\r\n        offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\r\n      }\r\n\r\n      docElem = doc.documentElement;\r\n      if ( typeof element.getBoundingClientRect !== 'undefined' ) {\r\n        box = element.getBoundingClientRect();\r\n      }\r\n\r\n      scrollLeftTop = getScrollLeftTop(element);\r\n\r\n      return {\r\n        left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\r\n        top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Returns style attribute value of a given element\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to get style attribute for\r\n     * @param {String} attr Style attribute to get for element\r\n     * @return {String} Style attribute value of the given element.\r\n     */\r\n    var getElementStyle;\r\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\r\n      getElementStyle = function(element, attr) {\r\n        var style = fabric.document.defaultView.getComputedStyle(element, null);\r\n        return style ? style[attr] : undefined;\r\n      };\r\n    }\r\n    else {\r\n      getElementStyle = function(element, attr) {\r\n        var value = element.style[attr];\r\n        if (!value && element.currentStyle) {\r\n          value = element.currentStyle[attr];\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n\r\n    (function () {\r\n      var style = fabric.document.documentElement.style,\r\n          selectProp = 'userSelect' in style\r\n            ? 'userSelect'\r\n            : 'MozUserSelect' in style\r\n              ? 'MozUserSelect'\r\n              : 'WebkitUserSelect' in style\r\n                ? 'WebkitUserSelect'\r\n                : 'KhtmlUserSelect' in style\r\n                  ? 'KhtmlUserSelect'\r\n                  : '';\r\n\r\n      /**\r\n       * Makes element unselectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make unselectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementUnselectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = fabric.util.falseFunction;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = 'none';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = 'on';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      /**\r\n       * Makes element selectable\r\n       * @memberOf fabric.util\r\n       * @param {HTMLElement} element Element to make selectable\r\n       * @return {HTMLElement} Element that was passed in\r\n       */\r\n      function makeElementSelectable(element) {\r\n        if (typeof element.onselectstart !== 'undefined') {\r\n          element.onselectstart = null;\r\n        }\r\n        if (selectProp) {\r\n          element.style[selectProp] = '';\r\n        }\r\n        else if (typeof element.unselectable === 'string') {\r\n          element.unselectable = '';\r\n        }\r\n        return element;\r\n      }\r\n\r\n      fabric.util.makeElementUnselectable = makeElementUnselectable;\r\n      fabric.util.makeElementSelectable = makeElementSelectable;\r\n    })();\r\n\r\n    (function() {\r\n\r\n      /**\r\n       * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\r\n       * @memberOf fabric.util\r\n       * @param {String} url URL of a script to load\r\n       * @param {Function} callback Callback to execute when script is finished loading\r\n       */\r\n      function getScript(url, callback) {\r\n        var headEl = fabric.document.getElementsByTagName('head')[0],\r\n            scriptEl = fabric.document.createElement('script'),\r\n            loading = true;\r\n\r\n        /** @ignore */\r\n        scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\r\n          if (loading) {\r\n            if (typeof this.readyState === 'string' &&\r\n                this.readyState !== 'loaded' &&\r\n                this.readyState !== 'complete') {\r\n              return;\r\n            }\r\n            loading = false;\r\n            callback(e || fabric.window.event);\r\n            scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\r\n          }\r\n        };\r\n        scriptEl.src = url;\r\n        headEl.appendChild(scriptEl);\r\n        // causes issue in Opera\r\n        // headEl.removeChild(scriptEl);\r\n      }\r\n\r\n      fabric.util.getScript = getScript;\r\n    })();\r\n\r\n    function getNodeCanvas(element) {\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      return impl._canvas || impl._image;\r\n    };\r\n\r\n    function cleanUpJsdomNode(element) {\r\n      if (!fabric.isLikelyNode) {\r\n        return;\r\n      }\r\n      var impl = fabric.jsdomImplForWrapper(element);\r\n      if (impl) {\r\n        impl._image = null;\r\n        impl._canvas = null;\r\n        // unsure if necessary\r\n        impl._currentSrc = null;\r\n        impl._attributes = null;\r\n        impl._classList = null;\r\n      }\r\n    }\r\n\r\n    fabric.util.getById = getById;\r\n    fabric.util.toArray = toArray;\r\n    fabric.util.makeElement = makeElement;\r\n    fabric.util.addClass = addClass;\r\n    fabric.util.wrapElement = wrapElement;\r\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\r\n    fabric.util.getElementOffset = getElementOffset;\r\n    fabric.util.getElementStyle = getElementStyle;\r\n    fabric.util.getNodeCanvas = getNodeCanvas;\r\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function addParamToUrl(url, param) {\r\n      return url + (/\\?/.test(url) ? '&' : '?') + param;\r\n    }\r\n\r\n    var makeXHR = (function() {\r\n      var factories = [\r\n        function() { return new fabric.window.XMLHttpRequest(); },\r\n        function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\r\n        function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\r\n        function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); }\r\n      ];\r\n      for (var i = factories.length; i--; ) {\r\n        try {\r\n          var req = factories[i]();\r\n          if (req) {\r\n            return factories[i];\r\n          }\r\n        }\r\n        catch (err) { }\r\n      }\r\n    })();\r\n\r\n    function emptyFn() { }\r\n\r\n    /**\r\n     * Cross-browser abstraction for sending XMLHttpRequest\r\n     * @memberOf fabric.util\r\n     * @param {String} url URL to send XMLHttpRequest to\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.method=\"GET\"]\r\n     * @param {String} [options.parameters] parameters to append to url in GET or in body\r\n     * @param {String} [options.body] body to send with POST or PUT request\r\n     * @param {Function} options.onComplete Callback to invoke when request is completed\r\n     * @return {XMLHttpRequest} request\r\n     */\r\n    function request(url, options) {\r\n      options || (options = { });\r\n\r\n      var method = options.method ? options.method.toUpperCase() : 'GET',\r\n          onComplete = options.onComplete || function() { },\r\n          xhr = makeXHR(),\r\n          body = options.body || options.parameters;\r\n\r\n      /** @ignore */\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          onComplete(xhr);\r\n          xhr.onreadystatechange = emptyFn;\r\n        }\r\n      };\r\n\r\n      if (method === 'GET') {\r\n        body = null;\r\n        if (typeof options.parameters === 'string') {\r\n          url = addParamToUrl(url, options.parameters);\r\n        }\r\n      }\r\n\r\n      xhr.open(method, url, true);\r\n\r\n      if (method === 'POST' || method === 'PUT') {\r\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n      }\r\n\r\n      xhr.send(body);\r\n      return xhr;\r\n    }\r\n\r\n    fabric.util.request = request;\r\n  })();\r\n\r\n\r\n  /**\r\n   * Wrapper around `console.log` (when available)\r\n   * @param {*} [values] Values to log\r\n   */\r\n  fabric.log = function() { };\r\n\r\n  /**\r\n   * Wrapper around `console.warn` (when available)\r\n   * @param {*} [values] Values to log as a warning\r\n   */\r\n  fabric.warn = function() { };\r\n\r\n  /* eslint-disable */\r\n  if (typeof console !== 'undefined') {\r\n\r\n    ['log', 'warn'].forEach(function(methodName) {\r\n\r\n      if (typeof console[methodName] !== 'undefined' &&\r\n          typeof console[methodName].apply === 'function') {\r\n\r\n        fabric[methodName] = function() {\r\n          return console[methodName].apply(console, arguments);\r\n        };\r\n      }\r\n    });\r\n  }\r\n  /* eslint-enable */\r\n\r\n\r\n  (function() {\r\n\r\n    function noop() {\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Number} [options.startValue=0] Starting value\r\n     * @param {Number} [options.endValue=100] Ending value\r\n     * @param {Number} [options.byValue=100] Value to modify the property by\r\n     * @param {Function} [options.easing] Easing function\r\n     * @param {Number} [options.duration=500] Duration of change (in ms)\r\n     */\r\n    function animate(options) {\r\n\r\n      requestAnimFrame(function(timestamp) {\r\n        options || (options = { });\r\n\r\n        var start = timestamp || +new Date(),\r\n            duration = options.duration || 500,\r\n            finish = start + duration, time,\r\n            onChange = options.onChange || noop,\r\n            abort = options.abort || noop,\r\n            onComplete = options.onComplete || noop,\r\n            easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\r\n            startValue = 'startValue' in options ? options.startValue : 0,\r\n            endValue = 'endValue' in options ? options.endValue : 100,\r\n            byValue = options.byValue || endValue - startValue;\r\n\r\n        options.onStart && options.onStart();\r\n\r\n        (function tick(ticktime) {\r\n          if (abort()) {\r\n            onComplete(endValue, 1, 1);\r\n            return;\r\n          }\r\n          time = ticktime || +new Date();\r\n          var currentTime = time > finish ? duration : (time - start),\r\n              timePerc = currentTime / duration,\r\n              current = easing(currentTime, startValue, byValue, duration),\r\n              valuePerc = Math.abs((current - startValue) / byValue);\r\n          onChange(current, valuePerc, timePerc);\r\n          if (time > finish) {\r\n            options.onComplete && options.onComplete();\r\n            return;\r\n          }\r\n          requestAnimFrame(tick);\r\n        })(start);\r\n      });\r\n\r\n    }\r\n\r\n    var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\r\n                            fabric.window.webkitRequestAnimationFrame ||\r\n                            fabric.window.mozRequestAnimationFrame    ||\r\n                            fabric.window.oRequestAnimationFrame      ||\r\n                            fabric.window.msRequestAnimationFrame     ||\r\n                            function(callback) {\r\n                              return fabric.window.setTimeout(callback, 1000 / 60);\r\n                            };\r\n\r\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\r\n\r\n    /**\r\n     * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n     * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\r\n     * @memberOf fabric.util\r\n     * @param {Function} callback Callback to invoke\r\n     * @param {DOMElement} element optional Element to associate with animation\r\n     */\r\n    function requestAnimFrame() {\r\n      return _requestAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    function cancelAnimFrame() {\r\n      return _cancelAnimFrame.apply(fabric.window, arguments);\r\n    }\r\n\r\n    fabric.util.animate = animate;\r\n    fabric.util.requestAnimFrame = requestAnimFrame;\r\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\r\n  })();\r\n\r\n\r\n  (function() {\r\n    // Calculate an in-between color. Returns a \"rgba()\" string.\r\n    // Credit: Edwin Martin <edwin@bitstorm.org>\r\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\r\n    function calculateColor(begin, end, pos) {\r\n      var color = 'rgba('\r\n          + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\r\n          + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\r\n          + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\r\n\r\n      color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\r\n      color += ')';\r\n      return color;\r\n    }\r\n\r\n    /**\r\n     * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\r\n     * @memberOf fabric.util\r\n     * @param {String} fromColor The starting color in hex or rgb(a) format.\r\n     * @param {String} toColor The starting color in hex or rgb(a) format.\r\n     * @param {Number} [duration] Duration of change (in ms).\r\n     * @param {Object} [options] Animation options\r\n     * @param {Function} [options.onChange] Callback; invoked on every value change\r\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n     * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\r\n     */\r\n    function animateColor(fromColor, toColor, duration, options) {\r\n      var startColor = new fabric.Color(fromColor).getSource(),\r\n          endColor = new fabric.Color(toColor).getSource();\r\n\r\n      options = options || {};\r\n\r\n      fabric.util.animate(fabric.util.object.extend(options, {\r\n        duration: duration || 500,\r\n        startValue: startColor,\r\n        endValue: endColor,\r\n        byValue: endColor,\r\n        easing: function (currentTime, startValue, byValue, duration) {\r\n          var posValue = options.colorEasing\r\n            ? options.colorEasing(currentTime, duration)\r\n            : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\r\n          return calculateColor(startValue, byValue, posValue);\r\n        }\r\n      }));\r\n    }\r\n\r\n    fabric.util.animateColor = animateColor;\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function normalize(a, c, p, s) {\r\n      if (a < Math.abs(c)) {\r\n        a = c;\r\n        s = p / 4;\r\n      }\r\n      else {\r\n        //handle the 0/0 case:\r\n        if (c === 0 && a === 0) {\r\n          s = p / (2 * Math.PI) * Math.asin(1);\r\n        }\r\n        else {\r\n          s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n      }\r\n      return { a: a, c: c, p: p, s: s };\r\n    }\r\n\r\n    function elastic(opts, t, d) {\r\n      return opts.a *\r\n        Math.pow(2, 10 * (t -= 1)) *\r\n        Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\r\n    }\r\n\r\n    /**\r\n     * Cubic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCubic(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Cubic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCubic(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuart(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuart(t, b, c, d) {\r\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quartic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuart(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t + b;\r\n      }\r\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInQuint(t, b, c, d) {\r\n      return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutQuint(t, b, c, d) {\r\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Quintic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutQuint(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * t * t * t * t * t + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInSine(t, b, c, d) {\r\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutSine(t, b, c, d) {\r\n      return c * Math.sin(t / d * (Math.PI / 2)) + b;\r\n    }\r\n\r\n    /**\r\n     * Sinusoidal easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutSine(t, b, c, d) {\r\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInExpo(t, b, c, d) {\r\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutExpo(t, b, c, d) {\r\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Exponential easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutExpo(t, b, c, d) {\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      if (t === d) {\r\n        return b + c;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\r\n      }\r\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInCirc(t, b, c, d) {\r\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutCirc(t, b, c, d) {\r\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\r\n    }\r\n\r\n    /**\r\n     * Circular easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutCirc(t, b, c, d) {\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\r\n      }\r\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return -elastic(opts, t, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d;\r\n      if (t === 1) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * 0.3;\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Elastic easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutElastic(t, b, c, d) {\r\n      var s = 1.70158, p = 0, a = c;\r\n      if (t === 0) {\r\n        return b;\r\n      }\r\n      t /= d / 2;\r\n      if (t === 2) {\r\n        return b + c;\r\n      }\r\n      if (!p) {\r\n        p = d * (0.3 * 1.5);\r\n      }\r\n      var opts = normalize(a, c, p, s);\r\n      if (t < 1) {\r\n        return -0.5 * elastic(opts, t, d) + b;\r\n      }\r\n      return opts.a * Math.pow(2, -10 * (t -= 1)) *\r\n        Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    }\r\n\r\n    /**\r\n     * Backwards easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBack(t, b, c, d, s) {\r\n      if (s === undefined) {\r\n        s = 1.70158;\r\n      }\r\n      t /= d / 2;\r\n      if (t < 1) {\r\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\r\n      }\r\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInBounce(t, b, c, d) {\r\n      return c - easeOutBounce (d - t, 0, c, d) + b;\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeOutBounce(t, b, c, d) {\r\n      if ((t /= d) < (1 / 2.75)) {\r\n        return c * (7.5625 * t * t) + b;\r\n      }\r\n      else if (t < (2 / 2.75)) {\r\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\r\n      }\r\n      else if (t < (2.5 / 2.75)) {\r\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\r\n      }\r\n      else {\r\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Bouncing easing in and out\r\n     * @memberOf fabric.util.ease\r\n     */\r\n    function easeInOutBounce(t, b, c, d) {\r\n      if (t < d / 2) {\r\n        return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\r\n      }\r\n      return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\r\n    }\r\n\r\n    /**\r\n     * Easing functions\r\n     * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\r\n     * @namespace fabric.util.ease\r\n     */\r\n    fabric.util.ease = {\r\n\r\n      /**\r\n       * Quadratic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInQuad: function(t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeOutQuad: function(t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n      },\r\n\r\n      /**\r\n       * Quadratic easing in and out\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInOutQuad: function(t, b, c, d) {\r\n        t /= (d / 2);\r\n        if (t < 1) {\r\n          return c / 2 * t * t + b;\r\n        }\r\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n      },\r\n\r\n      /**\r\n       * Cubic easing in\r\n       * @memberOf fabric.util.ease\r\n       */\r\n      easeInCubic: function(t, b, c, d) {\r\n        return c * (t /= d) * t * t + b;\r\n      },\r\n\r\n      easeOutCubic: easeOutCubic,\r\n      easeInOutCubic: easeInOutCubic,\r\n      easeInQuart: easeInQuart,\r\n      easeOutQuart: easeOutQuart,\r\n      easeInOutQuart: easeInOutQuart,\r\n      easeInQuint: easeInQuint,\r\n      easeOutQuint: easeOutQuint,\r\n      easeInOutQuint: easeInOutQuint,\r\n      easeInSine: easeInSine,\r\n      easeOutSine: easeOutSine,\r\n      easeInOutSine: easeInOutSine,\r\n      easeInExpo: easeInExpo,\r\n      easeOutExpo: easeOutExpo,\r\n      easeInOutExpo: easeInOutExpo,\r\n      easeInCirc: easeInCirc,\r\n      easeOutCirc: easeOutCirc,\r\n      easeInOutCirc: easeInOutCirc,\r\n      easeInElastic: easeInElastic,\r\n      easeOutElastic: easeOutElastic,\r\n      easeInOutElastic: easeInOutElastic,\r\n      easeInBack: easeInBack,\r\n      easeOutBack: easeOutBack,\r\n      easeInOutBack: easeInOutBack,\r\n      easeInBounce: easeInBounce,\r\n      easeOutBounce: easeOutBounce,\r\n      easeInOutBounce: easeInOutBounce\r\n    };\r\n\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * @name fabric\r\n     * @namespace\r\n     */\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        parseUnit = fabric.util.parseUnit,\r\n        multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\r\n\r\n        svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\r\n          'image', 'text', 'linearGradient', 'radialGradient', 'stop'],\r\n        svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\r\n        svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\r\n        svgValidParents = ['symbol', 'g', 'a', 'svg'],\r\n\r\n        attributesMap = {\r\n          cx:                   'left',\r\n          x:                    'left',\r\n          r:                    'radius',\r\n          cy:                   'top',\r\n          y:                    'top',\r\n          display:              'visible',\r\n          visibility:           'visible',\r\n          transform:            'transformMatrix',\r\n          'fill-opacity':       'fillOpacity',\r\n          'fill-rule':          'fillRule',\r\n          'font-family':        'fontFamily',\r\n          'font-size':          'fontSize',\r\n          'font-style':         'fontStyle',\r\n          'font-weight':        'fontWeight',\r\n          'letter-spacing':     'charSpacing',\r\n          'paint-order':        'paintFirst',\r\n          'stroke-dasharray':   'strokeDashArray',\r\n          'stroke-linecap':     'strokeLineCap',\r\n          'stroke-linejoin':    'strokeLineJoin',\r\n          'stroke-miterlimit':  'strokeMiterLimit',\r\n          'stroke-opacity':     'strokeOpacity',\r\n          'stroke-width':       'strokeWidth',\r\n          'text-decoration':    'textDecoration',\r\n          'text-anchor':        'textAnchor',\r\n          opacity:              'opacity'\r\n        },\r\n\r\n        colorAttributes = {\r\n          stroke: 'strokeOpacity',\r\n          fill:   'fillOpacity'\r\n        };\r\n\r\n    fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\r\n    fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\r\n    fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\r\n    fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\r\n\r\n    fabric.cssRules = { };\r\n    fabric.gradientDefs = { };\r\n\r\n    function normalizeAttr(attr) {\r\n      // transform attribute names\r\n      if (attr in attributesMap) {\r\n        return attributesMap[attr];\r\n      }\r\n      return attr;\r\n    }\r\n\r\n    function normalizeValue(attr, value, parentAttributes, fontSize) {\r\n      var isArray = Object.prototype.toString.call(value) === '[object Array]',\r\n          parsed;\r\n\r\n      if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\r\n        value = '';\r\n      }\r\n      else if (attr === 'strokeDashArray') {\r\n        if (value === 'none') {\r\n          value = null;\r\n        }\r\n        else {\r\n          value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\r\n            return parseFloat(n);\r\n          });\r\n        }\r\n      }\r\n      else if (attr === 'transformMatrix') {\r\n        if (parentAttributes && parentAttributes.transformMatrix) {\r\n          value = multiplyTransformMatrices(\r\n            parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\r\n        }\r\n        else {\r\n          value = fabric.parseTransformAttribute(value);\r\n        }\r\n      }\r\n      else if (attr === 'visible') {\r\n        value = value !== 'none' && value !== 'hidden';\r\n        // display=none on parent element always takes precedence over child element\r\n        if (parentAttributes && parentAttributes.visible === false) {\r\n          value = false;\r\n        }\r\n      }\r\n      else if (attr === 'opacity') {\r\n        value = parseFloat(value);\r\n        if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\r\n          value *= parentAttributes.opacity;\r\n        }\r\n      }\r\n      else if (attr === 'textAnchor' /* text-anchor */) {\r\n        value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\r\n      }\r\n      else if (attr === 'charSpacing') {\r\n        // parseUnit returns px and we convert it to em\r\n        parsed = parseUnit(value, fontSize) / fontSize * 1000;\r\n      }\r\n      else if (attr === 'paintFirst') {\r\n        var fillIndex = value.indexOf('fill');\r\n        var strokeIndex = value.indexOf('stroke');\r\n        var value = 'fill';\r\n        if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\r\n          value = 'stroke';\r\n        }\r\n        else if (fillIndex === -1 && strokeIndex > -1) {\r\n          value = 'stroke';\r\n        }\r\n      }\r\n      else {\r\n        parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\r\n      }\r\n\r\n      return (!isArray && isNaN(parsed) ? value : parsed);\r\n    }\r\n\r\n    /**\r\n      * @private\r\n      */\r\n    function getSvgRegex(arr) {\r\n      return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} attributes Array of attributes to parse\r\n     */\r\n    function _setStrokeFillOpacity(attributes) {\r\n      for (var attr in colorAttributes) {\r\n\r\n        if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\r\n          continue;\r\n        }\r\n\r\n        if (typeof attributes[attr] === 'undefined') {\r\n          if (!fabric.Object.prototype[attr]) {\r\n            continue;\r\n          }\r\n          attributes[attr] = fabric.Object.prototype[attr];\r\n        }\r\n\r\n        if (attributes[attr].indexOf('url(') === 0) {\r\n          continue;\r\n        }\r\n\r\n        var color = new fabric.Color(attributes[attr]);\r\n        attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\r\n      }\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _getMultipleNodes(doc, nodeNames) {\r\n      var nodeName, nodeArray = [], nodeList, i, len;\r\n      for (i = 0, len = nodeNames.length; i < len; i++) {\r\n        nodeName = nodeNames[i];\r\n        nodeList = doc.getElementsByTagName(nodeName);\r\n        nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\r\n      }\r\n      return nodeArray;\r\n    }\r\n\r\n    /**\r\n     * Parses \"transform\" attribute, returning an array of values\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {String} attributeValue String containing attribute value\r\n     * @return {Array} Array of 6 elements representing transformation matrix\r\n     */\r\n    fabric.parseTransformAttribute = (function() {\r\n      function rotateMatrix(matrix, args) {\r\n        var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\r\n            x = 0, y = 0;\r\n        if (args.length === 3) {\r\n          x = args[1];\r\n          y = args[2];\r\n        }\r\n\r\n        matrix[0] = cos;\r\n        matrix[1] = sin;\r\n        matrix[2] = -sin;\r\n        matrix[3] = cos;\r\n        matrix[4] = x - (cos * x - sin * y);\r\n        matrix[5] = y - (sin * x + cos * y);\r\n      }\r\n\r\n      function scaleMatrix(matrix, args) {\r\n        var multiplierX = args[0],\r\n            multiplierY = (args.length === 2) ? args[1] : args[0];\r\n\r\n        matrix[0] = multiplierX;\r\n        matrix[3] = multiplierY;\r\n      }\r\n\r\n      function skewMatrix(matrix, args, pos) {\r\n        matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\r\n      }\r\n\r\n      function translateMatrix(matrix, args) {\r\n        matrix[4] = args[0];\r\n        if (args.length === 2) {\r\n          matrix[5] = args[1];\r\n        }\r\n      }\r\n\r\n      // identity matrix\r\n      var iMatrix = [\r\n            1, // a\r\n            0, // b\r\n            0, // c\r\n            1, // d\r\n            0, // e\r\n            0  // f\r\n          ],\r\n\r\n          // == begin transform regexp\r\n          number = fabric.reNum,\r\n\r\n          commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\r\n\r\n          skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\r\n\r\n          rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + ')' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\r\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\r\n\r\n          matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' + commaWsp +\r\n                    '(' + number + ')' +\r\n                    '\\\\s*\\\\))',\r\n\r\n          transform = '(?:' +\r\n                      matrix + '|' +\r\n                      translate + '|' +\r\n                      scale + '|' +\r\n                      rotate + '|' +\r\n                      skewX + '|' +\r\n                      skewY +\r\n                      ')',\r\n\r\n          transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\r\n\r\n          transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\r\n\r\n          // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\r\n          reTransformList = new RegExp(transformList),\r\n          // == end transform regexp\r\n\r\n          reTransform = new RegExp(transform, 'g');\r\n\r\n      return function(attributeValue) {\r\n\r\n        // start with identity matrix\r\n        var matrix = iMatrix.concat(),\r\n            matrices = [];\r\n\r\n        // return if no argument was given or\r\n        // an argument does not match transform attribute regexp\r\n        if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\r\n          return matrix;\r\n        }\r\n\r\n        attributeValue.replace(reTransform, function(match) {\r\n\r\n          var m = new RegExp(transform).exec(match).filter(function (match) {\r\n                // match !== '' && match != null\r\n                return (!!match);\r\n              }),\r\n              operation = m[1],\r\n              args = m.slice(2).map(parseFloat);\r\n\r\n          switch (operation) {\r\n            case 'translate':\r\n              translateMatrix(matrix, args);\r\n              break;\r\n            case 'rotate':\r\n              args[0] = fabric.util.degreesToRadians(args[0]);\r\n              rotateMatrix(matrix, args);\r\n              break;\r\n            case 'scale':\r\n              scaleMatrix(matrix, args);\r\n              break;\r\n            case 'skewX':\r\n              skewMatrix(matrix, args, 2);\r\n              break;\r\n            case 'skewY':\r\n              skewMatrix(matrix, args, 1);\r\n              break;\r\n            case 'matrix':\r\n              matrix = args;\r\n              break;\r\n          }\r\n\r\n          // snapshot current matrix into matrices array\r\n          matrices.push(matrix.concat());\r\n          // reset\r\n          matrix = iMatrix.concat();\r\n        });\r\n\r\n        var combinedMatrix = matrices[0];\r\n        while (matrices.length > 1) {\r\n          matrices.shift();\r\n          combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\r\n        }\r\n        return combinedMatrix;\r\n      };\r\n    })();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleString(style, oStyle) {\r\n      var attr, value;\r\n      style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\r\n        var pair = chunk.split(':');\r\n\r\n        attr = pair[0].trim().toLowerCase();\r\n        value =  pair[1].trim();\r\n\r\n        oStyle[attr] = value;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseStyleObject(style, oStyle) {\r\n      var attr, value;\r\n      for (var prop in style) {\r\n        if (typeof style[prop] === 'undefined') {\r\n          continue;\r\n        }\r\n\r\n        attr = prop.toLowerCase();\r\n        value = style[prop];\r\n\r\n        oStyle[attr] = value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function getGlobalStylesForElement(element, svgUid) {\r\n      var styles = { };\r\n      for (var rule in fabric.cssRules[svgUid]) {\r\n        if (elementMatchesRule(element, rule.split(' '))) {\r\n          for (var property in fabric.cssRules[svgUid][rule]) {\r\n            styles[property] = fabric.cssRules[svgUid][rule][property];\r\n          }\r\n        }\r\n      }\r\n      return styles;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function elementMatchesRule(element, selectors) {\r\n      var firstMatching, parentMatching = true;\r\n      //start from rightmost selector.\r\n      firstMatching = selectorMatches(element, selectors.pop());\r\n      if (firstMatching && selectors.length) {\r\n        parentMatching = doesSomeParentMatch(element, selectors);\r\n      }\r\n      return firstMatching && parentMatching && (selectors.length === 0);\r\n    }\r\n\r\n    function doesSomeParentMatch(element, selectors) {\r\n      var selector, parentMatching = true;\r\n      while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\r\n        if (parentMatching) {\r\n          selector = selectors.pop();\r\n        }\r\n        element = element.parentNode;\r\n        parentMatching = selectorMatches(element, selector);\r\n      }\r\n      return selectors.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function selectorMatches(element, selector) {\r\n      var nodeName = element.nodeName,\r\n          classNames = element.getAttribute('class'),\r\n          id = element.getAttribute('id'), matcher, i;\r\n      // i check if a selector matches slicing away part from it.\r\n      // if i get empty string i should match\r\n      matcher = new RegExp('^' + nodeName, 'i');\r\n      selector = selector.replace(matcher, '');\r\n      if (id && selector.length) {\r\n        matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\r\n        selector = selector.replace(matcher, '');\r\n      }\r\n      if (classNames && selector.length) {\r\n        classNames = classNames.split(' ');\r\n        for (i = classNames.length; i--;) {\r\n          matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\r\n          selector = selector.replace(matcher, '');\r\n        }\r\n      }\r\n      return selector.length === 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * to support IE8 missing getElementById on SVGdocument\r\n     */\r\n    function elementById(doc, id) {\r\n      var el;\r\n      doc.getElementById && (el = doc.getElementById(id));\r\n      if (el) {\r\n        return el;\r\n      }\r\n      var node, i, len, nodelist = doc.getElementsByTagName('*');\r\n      for (i = 0, len = nodelist.length; i < len; i++) {\r\n        node = nodelist[i];\r\n        if (id === node.getAttribute('id')) {\r\n          return node;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function parseUseDirectives(doc) {\r\n      var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\r\n\r\n      while (nodelist.length && i < nodelist.length) {\r\n        var el = nodelist[i],\r\n            xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\r\n            x = el.getAttribute('x') || 0,\r\n            y = el.getAttribute('y') || 0,\r\n            el2 = elementById(doc, xlink).cloneNode(true),\r\n            currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\r\n            parentNode, oldLength = nodelist.length, attr, j, attrs, len;\r\n\r\n        applyViewboxTransform(el2);\r\n        if (/^svg$/i.test(el2.nodeName)) {\r\n          var el3 = el2.ownerDocument.createElement('g');\r\n          for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\r\n            attr = attrs.item(j);\r\n            el3.setAttribute(attr.nodeName, attr.nodeValue);\r\n          }\r\n          // el2.firstChild != null\r\n          while (el2.firstChild) {\r\n            el3.appendChild(el2.firstChild);\r\n          }\r\n          el2 = el3;\r\n        }\r\n\r\n        for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\r\n          attr = attrs.item(j);\r\n          if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\r\n            attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\r\n            continue;\r\n          }\r\n\r\n          if (attr.nodeName === 'transform') {\r\n            currentTrans = attr.nodeValue + ' ' + currentTrans;\r\n          }\r\n          else {\r\n            el2.setAttribute(attr.nodeName, attr.nodeValue);\r\n          }\r\n        }\r\n\r\n        el2.setAttribute('transform', currentTrans);\r\n        el2.setAttribute('instantiated_by_use', '1');\r\n        el2.removeAttribute('id');\r\n        parentNode = el.parentNode;\r\n        parentNode.replaceChild(el2, el);\r\n        // some browsers do not shorten nodelist after replaceChild (IE8)\r\n        if (nodelist.length === oldLength) {\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\r\n    // matches, e.g.: +14.56e-12, etc.\r\n    var reViewBoxAttrValue = new RegExp(\r\n      '^' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\r\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\r\n      '$'\r\n    );\r\n\r\n    /**\r\n     * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\r\n     */\r\n    function applyViewboxTransform(element) {\r\n\r\n      var viewBoxAttr = element.getAttribute('viewBox'),\r\n          scaleX = 1,\r\n          scaleY = 1,\r\n          minX = 0,\r\n          minY = 0,\r\n          viewBoxWidth, viewBoxHeight, matrix, el,\r\n          widthAttr = element.getAttribute('width'),\r\n          heightAttr = element.getAttribute('height'),\r\n          x = element.getAttribute('x') || 0,\r\n          y = element.getAttribute('y') || 0,\r\n          preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\r\n          missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\r\n                             || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\r\n          missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\r\n          toBeParsed = missingViewBox && missingDimAttr,\r\n          parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\r\n\r\n      parsedDim.width = 0;\r\n      parsedDim.height = 0;\r\n      parsedDim.toBeParsed = toBeParsed;\r\n\r\n      if (toBeParsed) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (missingViewBox) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        return parsedDim;\r\n      }\r\n\r\n      minX = -parseFloat(viewBoxAttr[1]);\r\n      minY = -parseFloat(viewBoxAttr[2]);\r\n      viewBoxWidth = parseFloat(viewBoxAttr[3]);\r\n      viewBoxHeight = parseFloat(viewBoxAttr[4]);\r\n\r\n      if (!missingDimAttr) {\r\n        parsedDim.width = parseUnit(widthAttr);\r\n        parsedDim.height = parseUnit(heightAttr);\r\n        scaleX = parsedDim.width / viewBoxWidth;\r\n        scaleY = parsedDim.height / viewBoxHeight;\r\n      }\r\n      else {\r\n        parsedDim.width = viewBoxWidth;\r\n        parsedDim.height = viewBoxHeight;\r\n      }\r\n\r\n      // default is to preserve aspect ratio\r\n      preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\r\n      if (preserveAspectRatio.alignX !== 'none') {\r\n        //translate all container for the effect of Mid, Min, Max\r\n        if (preserveAspectRatio.meetOrSlice === 'meet') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        if (preserveAspectRatio.meetOrSlice === 'slice') {\r\n          scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\r\n          // calculate additional translation to move the viewbox\r\n        }\r\n        widthDiff = parsedDim.width - viewBoxWidth * scaleX;\r\n        heightDiff = parsedDim.height - viewBoxHeight * scaleX;\r\n        if (preserveAspectRatio.alignX === 'Mid') {\r\n          widthDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Mid') {\r\n          heightDiff /= 2;\r\n        }\r\n        if (preserveAspectRatio.alignX === 'Min') {\r\n          widthDiff = 0;\r\n        }\r\n        if (preserveAspectRatio.alignY === 'Min') {\r\n          heightDiff = 0;\r\n        }\r\n      }\r\n\r\n      if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\r\n        return parsedDim;\r\n      }\r\n\r\n      if (x || y) {\r\n        translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\r\n      }\r\n\r\n      matrix = translateMatrix + ' matrix(' + scaleX +\r\n                    ' 0' +\r\n                    ' 0 ' +\r\n                    scaleY + ' ' +\r\n                    (minX * scaleX + widthDiff) + ' ' +\r\n                    (minY * scaleY + heightDiff) + ') ';\r\n\r\n      if (element.nodeName === 'svg') {\r\n        el = element.ownerDocument.createElement('g');\r\n        // element.firstChild != null\r\n        while (element.firstChild) {\r\n          el.appendChild(element.firstChild);\r\n        }\r\n        element.appendChild(el);\r\n      }\r\n      else {\r\n        el = element;\r\n        matrix = el.getAttribute('transform') + matrix;\r\n      }\r\n\r\n      el.setAttribute('transform', matrix);\r\n      return parsedDim;\r\n    }\r\n\r\n    function hasAncestorWithNodeName(element, nodeName) {\r\n      while (element && (element = element.parentNode)) {\r\n        if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\r\n          && !element.getAttribute('instantiated_by_use')) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric\r\n     * @param {SVGDocument} doc SVG document to parse\r\n     * @param {Function} callback Callback to call when parsing is finished;\r\n     * It's being passed an array of elements (parsed from a document).\r\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n     * @param {Object} [parsingOptions] options for parsing document\r\n     * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\r\n     */\r\n    fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\r\n      if (!doc) {\r\n        return;\r\n      }\r\n\r\n      parseUseDirectives(doc);\r\n\r\n      var svgUid =  fabric.Object.__uid++, i, len,\r\n          options = applyViewboxTransform(doc),\r\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\r\n      options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\r\n      options.svgUid = svgUid;\r\n\r\n      if (descendants.length === 0 && fabric.isLikelyNode) {\r\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\r\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\r\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\r\n        var arr = [];\r\n        for (i = 0, len = descendants.length; i < len; i++) {\r\n          arr[i] = descendants[i];\r\n        }\r\n        descendants = arr;\r\n      }\r\n\r\n      var elements = descendants.filter(function(el) {\r\n        applyViewboxTransform(el);\r\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\r\n              !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\r\n      });\r\n\r\n      if (!elements || (elements && !elements.length)) {\r\n        callback && callback([], {});\r\n        return;\r\n      }\r\n\r\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\r\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\r\n      // Precedence of rules:   style > class > attribute\r\n      fabric.parseElements(elements, function(instances, elements) {\r\n        if (callback) {\r\n          callback(instances, options, elements, descendants);\r\n        }\r\n      }, clone(options), reviver, parsingOptions);\r\n    };\r\n\r\n    var reFontDeclaration = new RegExp(\r\n      '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\r\n      '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\r\n        fabric.reNum +\r\n      '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\r\n\r\n    extend(fabric, {\r\n      /**\r\n       * Parses a short font declaration, building adding its properties to a style object\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {String} value font declaration\r\n       * @param {Object} oStyle definition\r\n       */\r\n      parseFontDeclaration: function(value, oStyle) {\r\n        var match = value.match(reFontDeclaration);\r\n\r\n        if (!match) {\r\n          return;\r\n        }\r\n        var fontStyle = match[1],\r\n            // font variant is not used\r\n            // fontVariant = match[2],\r\n            fontWeight = match[3],\r\n            fontSize = match[4],\r\n            lineHeight = match[5],\r\n            fontFamily = match[6];\r\n\r\n        if (fontStyle) {\r\n          oStyle.fontStyle = fontStyle;\r\n        }\r\n        if (fontWeight) {\r\n          oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\r\n        }\r\n        if (fontSize) {\r\n          oStyle.fontSize = parseUnit(fontSize);\r\n        }\r\n        if (fontFamily) {\r\n          oStyle.fontFamily = fontFamily;\r\n        }\r\n        if (lineHeight) {\r\n          oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Parses an SVG document, returning all of the gradient declarations found in it\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\r\n       */\r\n      getGradientDefs: function(doc) {\r\n        var tagArray = [\r\n              'linearGradient',\r\n              'radialGradient',\r\n              'svg:linearGradient',\r\n              'svg:radialGradient'],\r\n            elList = _getMultipleNodes(doc, tagArray),\r\n            el, j = 0, id, xlink,\r\n            gradientDefs = { }, idsToXlinkMap = { };\r\n        j = elList.length;\r\n\r\n        while (j--) {\r\n          el = elList[j];\r\n          xlink = el.getAttribute('xlink:href');\r\n          id = el.getAttribute('id');\r\n          if (xlink) {\r\n            idsToXlinkMap[id] = xlink.substr(1);\r\n          }\r\n          gradientDefs[id] = el;\r\n        }\r\n\r\n        for (id in idsToXlinkMap) {\r\n          var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\r\n          el = gradientDefs[id];\r\n          while (el2.firstChild) {\r\n            el.appendChild(el2.firstChild);\r\n          }\r\n        }\r\n        return gradientDefs;\r\n      },\r\n\r\n      /**\r\n       * Returns an object of attributes' name/value, given element and an array of attribute names;\r\n       * Parses parent \"g\" nodes recursively upwards.\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {DOMElement} element Element to parse\r\n       * @param {Array} attributes Array of attributes to parse\r\n       * @return {Object} object containing parsed attributes' names/values\r\n       */\r\n      parseAttributes: function(element, attributes, svgUid) {\r\n\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        var value,\r\n            parentAttributes = { },\r\n            fontSize;\r\n\r\n        if (typeof svgUid === 'undefined') {\r\n          svgUid = element.getAttribute('svgUid');\r\n        }\r\n        // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\r\n        if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\r\n          parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\r\n        }\r\n        fontSize = (parentAttributes && parentAttributes.fontSize ) ||\r\n                   element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n\r\n        var ownAttributes = attributes.reduce(function(memo, attr) {\r\n          value = element.getAttribute(attr);\r\n          if (value) { // eslint-disable-line\r\n            memo[attr] = value;\r\n          }\r\n          return memo;\r\n        }, { });\r\n        // add values parsed from style, which take precedence over attributes\r\n        // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\r\n        ownAttributes = extend(ownAttributes,\r\n          extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\r\n\r\n        var normalizedAttr, normalizedValue, normalizedStyle = {};\r\n        for (var attr in ownAttributes) {\r\n          normalizedAttr = normalizeAttr(attr);\r\n          normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\r\n          normalizedStyle[normalizedAttr] = normalizedValue;\r\n        }\r\n        if (normalizedStyle && normalizedStyle.font) {\r\n          fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\r\n        }\r\n        var mergedAttrs = extend(parentAttributes, normalizedStyle);\r\n        return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\r\n      },\r\n\r\n      /**\r\n       * Transforms an array of svg elements to corresponding fabric.* instances\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {Array} elements Array of elements to parse\r\n       * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       */\r\n      parseElements: function(elements, callback, options, reviver, parsingOptions) {\r\n        new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\r\n      },\r\n\r\n      /**\r\n       * Parses \"style\" attribute, retuning an object with values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {SVGElement} element Element to parse\r\n       * @return {Object} Objects with values parsed from style attribute of an element\r\n       */\r\n      parseStyleAttribute: function(element) {\r\n        var oStyle = { },\r\n            style = element.getAttribute('style');\r\n\r\n        if (!style) {\r\n          return oStyle;\r\n        }\r\n\r\n        if (typeof style === 'string') {\r\n          parseStyleString(style, oStyle);\r\n        }\r\n        else {\r\n          parseStyleObject(style, oStyle);\r\n        }\r\n\r\n        return oStyle;\r\n      },\r\n\r\n      /**\r\n       * Parses \"points\" attribute, returning an array of values\r\n       * @static\r\n       * @memberOf fabric\r\n       * @param {String} points points attribute string\r\n       * @return {Array} array of points\r\n       */\r\n      parsePointsAttribute: function(points) {\r\n\r\n        // points attribute is required and must not be empty\r\n        if (!points) {\r\n          return null;\r\n        }\r\n\r\n        // replace commas with whitespace and remove bookending whitespace\r\n        points = points.replace(/,/g, ' ').trim();\r\n\r\n        points = points.split(/\\s+/);\r\n        var parsedPoints = [], i, len;\r\n\r\n        for (i = 0, len = points.length; i < len; i += 2) {\r\n          parsedPoints.push({\r\n            x: parseFloat(points[i]),\r\n            y: parseFloat(points[i + 1])\r\n          });\r\n        }\r\n\r\n        // odd number of points is an error\r\n        // if (parsedPoints.length % 2 !== 0) {\r\n        //   return null;\r\n        // }\r\n\r\n        return parsedPoints;\r\n      },\r\n\r\n      /**\r\n       * Returns CSS rules for a given SVG document\r\n       * @static\r\n       * @function\r\n       * @memberOf fabric\r\n       * @param {SVGDocument} doc SVG document to parse\r\n       * @return {Object} CSS rules of this document\r\n       */\r\n      getCSSRules: function(doc) {\r\n        var styles = doc.getElementsByTagName('style'), i, len,\r\n            allRules = { }, rules;\r\n\r\n        // very crude parsing of style contents\r\n        for (i = 0, len = styles.length; i < len; i++) {\r\n          // IE9 doesn't support textContent, but provides text instead.\r\n          var styleContents = styles[i].textContent || styles[i].text;\r\n\r\n          // remove comments\r\n          styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\r\n          if (styleContents.trim() === '') {\r\n            continue;\r\n          }\r\n          rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\r\n          rules = rules.map(function(rule) { return rule.trim(); });\r\n          // eslint-disable-next-line no-loop-func\r\n          rules.forEach(function(rule) {\r\n\r\n            var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\r\n                ruleObj = { }, declaration = match[2].trim(),\r\n                propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\r\n\r\n            for (i = 0, len = propertyValuePairs.length; i < len; i++) {\r\n              var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\r\n                  property = pair[0],\r\n                  value = pair[1];\r\n              ruleObj[property] = value;\r\n            }\r\n            rule = match[1];\r\n            rule.split(',').forEach(function(_rule) {\r\n              _rule = _rule.replace(/^svg/i, '').trim();\r\n              if (_rule === '') {\r\n                return;\r\n              }\r\n              if (allRules[_rule]) {\r\n                fabric.util.object.extend(allRules[_rule], ruleObj);\r\n              }\r\n              else {\r\n                allRules[_rule] = fabric.util.object.clone(ruleObj);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        return allRules;\r\n      },\r\n\r\n      /**\r\n       * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\r\n       * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\r\n       * @memberOf fabric\r\n       * @param {String} url\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromURL: function(url, callback, reviver, options) {\r\n\r\n        url = url.replace(/^\\n\\s*/, '').trim();\r\n        new fabric.util.request(url, {\r\n          method: 'get',\r\n          onComplete: onComplete\r\n        });\r\n\r\n        function onComplete(r) {\r\n\r\n          var xml = r.responseXML;\r\n          if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\r\n            xml = new ActiveXObject('Microsoft.XMLDOM');\r\n            xml.async = 'false';\r\n            //IE chokes on DOCTYPE\r\n            xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n          }\r\n          if (!xml || !xml.documentElement) {\r\n            callback && callback(null);\r\n          }\r\n\r\n          fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\r\n            callback && callback(results, _options, elements, allElements);\r\n          }, reviver, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\r\n       * @memberOf fabric\r\n       * @param {String} string\r\n       * @param {Function} callback\r\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\r\n       * @param {Object} [options] Object containing options for parsing\r\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\r\n       */\r\n      loadSVGFromString: function(string, callback, reviver, options) {\r\n        string = string.trim();\r\n        var doc;\r\n        if (typeof DOMParser !== 'undefined') {\r\n          var parser = new DOMParser();\r\n          if (parser && parser.parseFromString) {\r\n            doc = parser.parseFromString(string, 'text/xml');\r\n          }\r\n        }\r\n        else if (fabric.window.ActiveXObject) {\r\n          doc = new ActiveXObject('Microsoft.XMLDOM');\r\n          doc.async = 'false';\r\n          // IE chokes on DOCTYPE\r\n          doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\r\n        }\r\n\r\n        fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\r\n          callback(results, _options, elements, allElements);\r\n        }, reviver, options);\r\n      }\r\n    });\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions) {\r\n    this.elements = elements;\r\n    this.callback = callback;\r\n    this.options = options;\r\n    this.reviver = reviver;\r\n    this.svgUid = (options && options.svgUid) || 0;\r\n    this.parsingOptions = parsingOptions;\r\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.parse = function() {\r\n    this.instances = new Array(this.elements.length);\r\n    this.numElements = this.elements.length;\r\n\r\n    this.createObjects();\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.createObjects = function() {\r\n    for (var i = 0, len = this.elements.length; i < len; i++) {\r\n      this.elements[i].setAttribute('svgUid', this.svgUid);\r\n      (function(_obj, i) {\r\n        setTimeout(function() {\r\n          _obj.createObject(_obj.elements[i], i);\r\n        }, 0);\r\n      })(this, i);\r\n    }\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.createObject = function(el, index) {\r\n    var klass = fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\r\n    if (klass && klass.fromElement) {\r\n      try {\r\n        this._createObject(klass, el, index);\r\n      }\r\n      catch (err) {\r\n        fabric.log(err);\r\n      }\r\n    }\r\n    else {\r\n      this.checkIfDone();\r\n    }\r\n  };\r\n\r\n  fabric.ElementsParser.prototype._createObject = function(klass, el, index) {\r\n    klass.fromElement(el, this.createCallback(index, el), this.options);\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.createCallback = function(index, el) {\r\n    var _this = this;\r\n    return function(obj) {\r\n      var _options;\r\n      _this.resolveGradient(obj, 'fill');\r\n      _this.resolveGradient(obj, 'stroke');\r\n      if (obj instanceof fabric.Image) {\r\n        _options = obj.parsePreserveAspectRatioAttribute(el);\r\n      }\r\n      obj._removeTransformMatrix(_options);\r\n      _this.reviver && _this.reviver(el, obj);\r\n      _this.instances[index] = obj;\r\n      _this.checkIfDone();\r\n    };\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\r\n\r\n    var instanceFillValue = obj[property];\r\n    if (!(/^url\\(/).test(instanceFillValue)) {\r\n      return;\r\n    }\r\n    var gradientId = this.regexUrl.exec(instanceFillValue)[1];\r\n    this.regexUrl.lastIndex = 0;\r\n    if (fabric.gradientDefs[this.svgUid][gradientId]) {\r\n      obj.set(property,\r\n        fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\r\n    }\r\n  };\r\n\r\n  fabric.ElementsParser.prototype.checkIfDone = function() {\r\n    if (--this.numElements === 0) {\r\n      this.instances = this.instances.filter(function(el) {\r\n        // eslint-disable-next-line no-eq-null, eqeqeq\r\n        return el != null;\r\n      });\r\n      this.callback(this.instances, this.elements);\r\n    }\r\n  };\r\n\r\n(function() {\r\n\r\n  /**\r\n   * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\r\n   * @static\r\n   * @memberOf fabric.util\r\n   * @param {Object} klass \"Class\" to create accessors for\r\n   */\r\n  fabric.util.createAccessors = function(klass) {\r\n    var proto = klass.prototype, i, propName,\r\n        capitalizedPropName, setterName, getterName;\r\n\r\n    for (i = proto.stateProperties.length; i--; ) {\r\n\r\n      propName = proto.stateProperties[i];\r\n      capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1);\r\n      setterName = 'set' + capitalizedPropName;\r\n      getterName = 'get' + capitalizedPropName;\r\n\r\n      // using `new Function` for better introspection\r\n      if (!proto[getterName]) {\r\n        proto[getterName] = (function(property) {\r\n          return new Function('return this.get(\"' + property + '\")');\r\n        })(propName);\r\n      }\r\n      if (!proto[setterName]) {\r\n        proto[setterName] = (function(property) {\r\n          return new Function('value', 'return this.set(\"' + property + '\", value)');\r\n        })(propName);\r\n      }\r\n    }\r\n  };\r\n\r\n  /** @lends fabric.Text.Prototype */\r\n  /**\r\n   * Retrieves object's fontSize\r\n   * @method getFontSize\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} Font size (in pixels)\r\n   */\r\n\r\n  /**\r\n   * Sets object's fontSize\r\n   * Does not update the object .width and .height,\r\n   * call .initDimensions() to update the values.\r\n   * @method setFontSize\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {Number} fontSize Font size (in pixels)\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's fontWeight\r\n   * @method getFontWeight\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {(String|Number)} Font weight\r\n   */\r\n\r\n  /**\r\n   * Sets object's fontWeight\r\n   * Does not update the object .width and .height,\r\n   * call .initDimensions() to update the values.\r\n   * @method setFontWeight\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {(Number|String)} fontWeight Font weight\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's fontFamily\r\n   * @method getFontFamily\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} Font family\r\n   */\r\n\r\n  /**\r\n   * Sets object's fontFamily\r\n   * Does not update the object .width and .height,\r\n   * call .initDimensions() to update the values.\r\n   * @method setFontFamily\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {String} fontFamily Font family\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's text\r\n   * @method getText\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} text\r\n   */\r\n\r\n  /**\r\n   * Sets object's text\r\n   * Does not update the object .width and .height,\r\n   * call .initDimensions() to update the values.\r\n   * @method setText\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {String} text Text\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's underline\r\n   * @method getUnderline\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {Boolean} underline enabled or disabled\r\n   */\r\n\r\n  /**\r\n   * Sets object's underline\r\n   * @method setUnderline\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {Boolean} underline Text decoration\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's fontStyle\r\n   * @method getFontStyle\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} Font style\r\n   */\r\n\r\n  /**\r\n   * Sets object's fontStyle\r\n   * Does not update the object .width and .height,\r\n   * call .initDimensions() to update the values.\r\n   * @method setFontStyle\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {String} fontStyle Font style\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's lineHeight\r\n   * @method getLineHeight\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {Number} Line height\r\n   */\r\n\r\n  /**\r\n   * Sets object's lineHeight\r\n   * @method setLineHeight\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {Number} lineHeight Line height\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's textAlign\r\n   * @method getTextAlign\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} Text alignment\r\n   */\r\n\r\n  /**\r\n   * Sets object's textAlign\r\n   * @method setTextAlign\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {String} textAlign Text alignment\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's textBackgroundColor\r\n   * @method getTextBackgroundColor\r\n   * @memberOf fabric.Text.prototype\r\n   * @return {String} Text background color\r\n   */\r\n\r\n  /**\r\n   * Sets object's textBackgroundColor\r\n   * @method setTextBackgroundColor\r\n   * @memberOf fabric.Text.prototype\r\n   * @param {String} textBackgroundColor Text background color\r\n   * @return {fabric.Text}\r\n   * @chainable\r\n   */\r\n\r\n  /** @lends fabric.Object.Prototype */\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#clipTo|clipping function}\r\n   * @method getClipTo\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Function}\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#clipTo|clipping function}\r\n   * @method setClipTo\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Function} clipTo Clipping function\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\r\n   * @method getTransformMatrix\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Array} transformMatrix\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\r\n   * @method setTransformMatrix\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Array} transformMatrix\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#visible|visible} state\r\n   * @method getVisible\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Boolean} True if visible\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#visible|visible} state\r\n   * @method setVisible\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Boolean} value visible value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#shadow|shadow}\r\n   * @method getShadow\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Object} Shadow instance\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#stroke|stroke}\r\n   * @method getStroke\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {String} stroke value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#stroke|stroke}\r\n   * @method setStroke\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {String} value stroke value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\r\n   * @method getStrokeWidth\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} strokeWidth value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\r\n   * @method setStrokeWidth\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value strokeWidth value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#originX|originX}\r\n   * @method getOriginX\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {String} originX value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#originX|originX}\r\n   * @method setOriginX\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {String} value originX value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#originY|originY}\r\n   * @method getOriginY\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {String} originY value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#originY|originY}\r\n   * @method setOriginY\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {String} value originY value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#fill|fill}\r\n   * @method getFill\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {String} Fill value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#fill|fill}\r\n   * @method setFill\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {String} value Fill value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#opacity|opacity}\r\n   * @method getOpacity\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} Opacity value (0-1)\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#opacity|opacity}\r\n   * @method setOpacity\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value Opacity value (0-1)\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\r\n   * @method getAngle\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number}\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#top|top position}\r\n   * @method getTop\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} Top value (in pixels)\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#top|top position}\r\n   * @method setTop\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value Top value (in pixels)\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#left|left position}\r\n   * @method getLeft\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} Left value (in pixels)\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#left|left position}\r\n   * @method setLeft\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value Left value (in pixels)\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\r\n   * @method getScaleX\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} scaleX value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#scaleX|scaleX} value\r\n   * @method setScaleX\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value scaleX value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\r\n   * @method getScaleY\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Number} scaleY value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#scaleY|scaleY} value\r\n   * @method setScaleY\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Number} value scaleY value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#flipX|flipX} value\r\n   * @method getFlipX\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Boolean} flipX value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#flipX|flipX} value\r\n   * @method setFlipX\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Boolean} value flipX value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n  /**\r\n   * Retrieves object's {@link fabric.Object#flipY|flipY} value\r\n   * @method getFlipY\r\n   * @memberOf fabric.Object.prototype\r\n   * @return {Boolean} flipY value\r\n   */\r\n\r\n  /**\r\n   * Sets object's {@link fabric.Object#flipY|flipY} value\r\n   * @method setFlipY\r\n   * @memberOf fabric.Object.prototype\r\n   * @param {Boolean} value flipY value\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n\r\n    //var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Point) {\r\n      fabric.warn('fabric.Point is already defined');\r\n      return;\r\n    }\r\n\r\n    fabric.Point = Point;\r\n\r\n    /**\r\n     * Point class\r\n     * @class fabric.Point\r\n     * @memberOf fabric\r\n     * @constructor\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @return {fabric.Point} thisArg\r\n     */\r\n    function Point(x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n\r\n    Point.prototype = /** @lends fabric.Point.prototype */ {\r\n\r\n      type: 'point',\r\n\r\n      constructor: Point,\r\n\r\n      /**\r\n       * Adds another point to this one and returns another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point instance with added values\r\n       */\r\n      add: function (that) {\r\n        return new Point(this.x + that.x, this.y + that.y);\r\n      },\r\n\r\n      /**\r\n       * Adds another point to this one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      addEquals: function (that) {\r\n        this.x += that.x;\r\n        this.y += that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} new Point with added value\r\n       */\r\n      scalarAdd: function (scalar) {\r\n        return new Point(this.x + scalar, this.y + scalar);\r\n      },\r\n\r\n      /**\r\n       * Adds value to this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarAddEquals: function (scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point and returns a new one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} new Point object with subtracted values\r\n       */\r\n      subtract: function (that) {\r\n        return new Point(this.x - that.x, this.y - that.y);\r\n      },\r\n\r\n      /**\r\n       * Subtracts another point from this point\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      subtractEquals: function (that) {\r\n        this.x -= that.x;\r\n        this.y -= that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point and returns a new one\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      scalarSubtract: function (scalar) {\r\n        return new Point(this.x - scalar, this.y - scalar);\r\n      },\r\n\r\n      /**\r\n       * Subtracts value from this point\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      scalarSubtractEquals: function (scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value and returns a new one\r\n       * TODO: rename in scalarMultiply in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      multiply: function (scalar) {\r\n        return new Point(this.x * scalar, this.y * scalar);\r\n      },\r\n\r\n      /**\r\n       * Multiplies this point by a value\r\n       * TODO: rename in scalarMultiplyEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      multiplyEquals: function (scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value and returns a new one\r\n       * TODO: rename in scalarDivide in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point}\r\n       */\r\n      divide: function (scalar) {\r\n        return new Point(this.x / scalar, this.y / scalar);\r\n      },\r\n\r\n      /**\r\n       * Divides this point by a value\r\n       * TODO: rename in scalarDivideEquals in 2.0\r\n       * @param {Number} scalar\r\n       * @return {fabric.Point} thisArg\r\n       * @chainable\r\n       */\r\n      divideEquals: function (scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      eq: function (that) {\r\n        return (this.x === that.x && this.y === that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lt: function (that) {\r\n        return (this.x < that.x && this.y < that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is less than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      lte: function (that) {\r\n        return (this.x <= that.x && this.y <= that.y);\r\n      },\r\n\r\n      /**\r\n\r\n       * Returns true if this point is greater another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gt: function (that) {\r\n        return (this.x > that.x && this.y > that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns true if this point is greater than or equal to another one\r\n       * @param {fabric.Point} that\r\n       * @return {Boolean}\r\n       */\r\n      gte: function (that) {\r\n        return (this.x >= that.x && this.y >= that.y);\r\n      },\r\n\r\n      /**\r\n       * Returns new point which is the result of linear interpolation with this one and another one\r\n       * @param {fabric.Point} that\r\n       * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\r\n       * @return {fabric.Point}\r\n       */\r\n      lerp: function (that, t) {\r\n        if (typeof t === 'undefined') {\r\n          t = 0.5;\r\n        }\r\n        t = Math.max(Math.min(1, t), 0);\r\n        return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\r\n      },\r\n\r\n      /**\r\n       * Returns distance from this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {Number}\r\n       */\r\n      distanceFrom: function (that) {\r\n        var dx = this.x - that.x,\r\n            dy = this.y - that.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n      },\r\n\r\n      /**\r\n       * Returns the point between this point and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      midPointFrom: function (that) {\r\n        return this.lerp(that);\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the min of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      min: function (that) {\r\n        return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns a new point which is the max of this and another one\r\n       * @param {fabric.Point} that\r\n       * @return {fabric.Point}\r\n       */\r\n      max: function (that) {\r\n        return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of this point\r\n       * @return {String}\r\n       */\r\n      toString: function () {\r\n        return this.x + ',' + this.y;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point\r\n       * @param {Number} x\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setXY: function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x of this point\r\n       * @param {Number} x\r\n       * @chainable\r\n       */\r\n      setX: function (x) {\r\n        this.x = x;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets y of this point\r\n       * @param {Number} y\r\n       * @chainable\r\n       */\r\n      setY: function (y) {\r\n        this.y = y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets x/y of this point from another point\r\n       * @param {fabric.Point} that\r\n       * @chainable\r\n       */\r\n      setFromPoint: function (that) {\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Swaps x/y of this point and another point\r\n       * @param {fabric.Point} that\r\n       */\r\n      swap: function (that) {\r\n        var x = this.x,\r\n            y = this.y;\r\n        this.x = that.x;\r\n        this.y = that.y;\r\n        that.x = x;\r\n        that.y = y;\r\n      },\r\n\r\n      /**\r\n       * return a cloned instance of the point\r\n       * @return {fabric.Point}\r\n       */\r\n      clone: function () {\r\n        return new Point(this.x, this.y);\r\n      }\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n    //var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Intersection) {\r\n      fabric.warn('fabric.Intersection is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Intersection class\r\n     * @class fabric.Intersection\r\n     * @memberOf fabric\r\n     * @constructor\r\n     */\r\n    function Intersection(status) {\r\n      this.status = status;\r\n      this.points = [];\r\n    }\r\n\r\n    fabric.Intersection = Intersection;\r\n\r\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\r\n\r\n      constructor: Intersection,\r\n\r\n      /**\r\n       * Appends a point to intersection\r\n       * @param {fabric.Point} point\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoint: function (point) {\r\n        this.points.push(point);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Appends points to intersection\r\n       * @param {Array} points\r\n       * @return {fabric.Intersection} thisArg\r\n       * @chainable\r\n       */\r\n      appendPoints: function (points) {\r\n        this.points = this.points.concat(points);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Checks if one line intersects another\r\n     * TODO: rename in intersectSegmentSegment\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {fabric.Point} b1\r\n     * @param {fabric.Point} b2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\r\n      var result,\r\n          uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\r\n          ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\r\n          uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n      if (uB !== 0) {\r\n        var ua = uaT / uB,\r\n            ub = ubT / uB;\r\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n          result = new Intersection('Intersection');\r\n          result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\r\n        }\r\n        else {\r\n          result = new Intersection();\r\n        }\r\n      }\r\n      else {\r\n        if (uaT === 0 || ubT === 0) {\r\n          result = new Intersection('Coincident');\r\n        }\r\n        else {\r\n          result = new Intersection('Parallel');\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if line intersects polygon\r\n     * TODO: rename in intersectSegmentPolygon\r\n     * fix detection of coincident\r\n     * @static\r\n     * @param {fabric.Point} a1\r\n     * @param {fabric.Point} a2\r\n     * @param {Array} points\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\r\n      var result = new Intersection(),\r\n          length = points.length,\r\n          b1, b2, inter, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        b1 = points[i];\r\n        b2 = points[(i + 1) % length];\r\n        inter = Intersection.intersectLineLine(a1, a2, b1, b2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects another polygon\r\n     * @static\r\n     * @param {Array} points1\r\n     * @param {Array} points2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\r\n      var result = new Intersection(),\r\n          length = points1.length, i;\r\n\r\n      for (i = 0; i < length; i++) {\r\n        var a1 = points1[i],\r\n            a2 = points1[(i + 1) % length],\r\n            inter = Intersection.intersectLinePolygon(a1, a2, points2);\r\n\r\n        result.appendPoints(inter.points);\r\n      }\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Checks if polygon intersects rectangle\r\n     * @static\r\n     * @param {Array} points\r\n     * @param {fabric.Point} r1\r\n     * @param {fabric.Point} r2\r\n     * @return {fabric.Intersection}\r\n     */\r\n    fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\r\n      var min = r1.min(r2),\r\n          max = r1.max(r2),\r\n          topRight = new fabric.Point(max.x, min.y),\r\n          bottomLeft = new fabric.Point(min.x, max.y),\r\n          inter1 = Intersection.intersectLinePolygon(min, topRight, points),\r\n          inter2 = Intersection.intersectLinePolygon(topRight, max, points),\r\n          inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\r\n          inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\r\n          result = new Intersection();\r\n\r\n      result.appendPoints(inter1.points);\r\n      result.appendPoints(inter2.points);\r\n      result.appendPoints(inter3.points);\r\n      result.appendPoints(inter4.points);\r\n\r\n      if (result.points.length > 0) {\r\n        result.status = 'Intersection';\r\n      }\r\n      return result;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    //var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Color) {\r\n      fabric.warn('fabric.Color is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Color class\r\n     * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\r\n     * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\r\n     *\r\n     * @class fabric.Color\r\n     * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\r\n     * @return {fabric.Color} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\r\n     */\r\n    function Color(color) {\r\n      if (!color) {\r\n        this.setSource([0, 0, 0, 1]);\r\n      }\r\n      else {\r\n        this._tryParsingColor(color);\r\n      }\r\n    }\r\n\r\n    fabric.Color = Color;\r\n\r\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {String|Array} color Color value to parse\r\n       */\r\n      _tryParsingColor: function(color) {\r\n        var source;\r\n\r\n        if (color in Color.colorNameMap) {\r\n          color = Color.colorNameMap[color];\r\n        }\r\n\r\n        if (color === 'transparent') {\r\n          source = [255, 255, 255, 0];\r\n        }\r\n\r\n        if (!source) {\r\n          source = Color.sourceFromHex(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromRgb(color);\r\n        }\r\n        if (!source) {\r\n          source = Color.sourceFromHsl(color);\r\n        }\r\n        if (!source) {\r\n          //if color is not recognize let's make black as canvas does\r\n          source = [0, 0, 0, 1];\r\n        }\r\n        if (source) {\r\n          this.setSource(source);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n       * @private\r\n       * @param {Number} r Red color value\r\n       * @param {Number} g Green color value\r\n       * @param {Number} b Blue color value\r\n       * @return {Array} Hsl color\r\n       */\r\n      _rgbToHsl: function(r, g, b) {\r\n        r /= 255; g /= 255; b /= 255;\r\n\r\n        var h, s, l,\r\n            max = fabric.util.array.max([r, g, b]),\r\n            min = fabric.util.array.min([r, g, b]);\r\n\r\n        l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n          h = s = 0; // achromatic\r\n        }\r\n        else {\r\n          var d = max - min;\r\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n          switch (max) {\r\n            case r:\r\n              h = (g - b) / d + (g < b ? 6 : 0);\r\n              break;\r\n            case g:\r\n              h = (b - r) / d + 2;\r\n              break;\r\n            case b:\r\n              h = (r - g) / d + 4;\r\n              break;\r\n          }\r\n          h /= 6;\r\n        }\r\n\r\n        return [\r\n          Math.round(h * 360),\r\n          Math.round(s * 100),\r\n          Math.round(l * 100)\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @return {Array}\r\n       */\r\n      getSource: function() {\r\n        return this._source;\r\n      },\r\n\r\n      /**\r\n       * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n       * @param {Array} source\r\n       */\r\n      setSource: function(source) {\r\n        this._source = source;\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGB format\r\n       * @return {String} ex: rgb(0-255,0-255,0-255)\r\n       */\r\n      toRgb: function() {\r\n        var source = this.getSource();\r\n        return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in RGBA format\r\n       * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\r\n       */\r\n      toRgba: function() {\r\n        var source = this.getSource();\r\n        return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSL format\r\n       * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\r\n       */\r\n      toHsl: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HSLA format\r\n       * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\r\n       */\r\n      toHsla: function() {\r\n        var source = this.getSource(),\r\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n        return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEX format\r\n       * @return {String} ex: FF5555\r\n       */\r\n      toHex: function() {\r\n        var source = this.getSource(), r, g, b;\r\n\r\n        r = source[0].toString(16);\r\n        r = (r.length === 1) ? ('0' + r) : r;\r\n\r\n        g = source[1].toString(16);\r\n        g = (g.length === 1) ? ('0' + g) : g;\r\n\r\n        b = source[2].toString(16);\r\n        b = (b.length === 1) ? ('0' + b) : b;\r\n\r\n        return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Returns color representation in HEXA format\r\n       * @return {String} ex: FF5555CC\r\n       */\r\n      toHexa: function() {\r\n        var source = this.getSource(), a;\r\n\r\n        a = Math.round(source[3] * 255);\r\n        a = a.toString(16);\r\n        a = (a.length === 1) ? ('0' + a) : a;\r\n\r\n        return this.toHex() + a.toUpperCase();\r\n      },\r\n\r\n      /**\r\n       * Gets value of alpha channel for this color\r\n       * @return {Number} 0-1\r\n       */\r\n      getAlpha: function() {\r\n        return this.getSource()[3];\r\n      },\r\n\r\n      /**\r\n       * Sets value of alpha channel for this color\r\n       * @param {Number} alpha Alpha value 0-1\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      setAlpha: function(alpha) {\r\n        var source = this.getSource();\r\n        source[3] = alpha;\r\n        this.setSource(source);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its grayscale representation\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toGrayscale: function() {\r\n        var source = this.getSource(),\r\n            average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\r\n            currentAlpha = source[3];\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Transforms color to its black and white representation\r\n       * @param {Number} threshold\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      toBlackWhite: function(threshold) {\r\n        var source = this.getSource(),\r\n            average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\r\n            currentAlpha = source[3];\r\n\r\n        threshold = threshold || 127;\r\n\r\n        average = (Number(average) < Number(threshold)) ? 0 : 255;\r\n        this.setSource([average, average, average, currentAlpha]);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Overlays color with another color\r\n       * @param {String|fabric.Color} otherColor\r\n       * @return {fabric.Color} thisArg\r\n       */\r\n      overlayWith: function(otherColor) {\r\n        if (!(otherColor instanceof Color)) {\r\n          otherColor = new Color(otherColor);\r\n        }\r\n\r\n        var result = [],\r\n            alpha = this.getAlpha(),\r\n            otherAlpha = 0.5,\r\n            source = this.getSource(),\r\n            otherSource = otherColor.getSource(), i;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\r\n        }\r\n\r\n        result[3] = alpha;\r\n        this.setSource(result);\r\n        return this;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\r\n\r\n    /**\r\n     * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     */\r\n    fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\r\n\r\n    /**\r\n     * Map of the 148 color names with HEX code\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Color\r\n     * @see: https://www.w3.org/TR/css3-color/#svg-color\r\n     */\r\n    fabric.Color.colorNameMap = {\r\n      aliceblue:            '#F0F8FF',\r\n      antiquewhite:         '#FAEBD7',\r\n      aqua:                 '#00FFFF',\r\n      aquamarine:           '#7FFFD4',\r\n      azure:                '#F0FFFF',\r\n      beige:                '#F5F5DC',\r\n      bisque:               '#FFE4C4',\r\n      black:                '#000000',\r\n      blanchedalmond:       '#FFEBCD',\r\n      blue:                 '#0000FF',\r\n      blueviolet:           '#8A2BE2',\r\n      brown:                '#A52A2A',\r\n      burlywood:            '#DEB887',\r\n      cadetblue:            '#5F9EA0',\r\n      chartreuse:           '#7FFF00',\r\n      chocolate:            '#D2691E',\r\n      coral:                '#FF7F50',\r\n      cornflowerblue:       '#6495ED',\r\n      cornsilk:             '#FFF8DC',\r\n      crimson:              '#DC143C',\r\n      cyan:                 '#00FFFF',\r\n      darkblue:             '#00008B',\r\n      darkcyan:             '#008B8B',\r\n      darkgoldenrod:        '#B8860B',\r\n      darkgray:             '#A9A9A9',\r\n      darkgrey:             '#A9A9A9',\r\n      darkgreen:            '#006400',\r\n      darkkhaki:            '#BDB76B',\r\n      darkmagenta:          '#8B008B',\r\n      darkolivegreen:       '#556B2F',\r\n      darkorange:           '#FF8C00',\r\n      darkorchid:           '#9932CC',\r\n      darkred:              '#8B0000',\r\n      darksalmon:           '#E9967A',\r\n      darkseagreen:         '#8FBC8F',\r\n      darkslateblue:        '#483D8B',\r\n      darkslategray:        '#2F4F4F',\r\n      darkslategrey:        '#2F4F4F',\r\n      darkturquoise:        '#00CED1',\r\n      darkviolet:           '#9400D3',\r\n      deeppink:             '#FF1493',\r\n      deepskyblue:          '#00BFFF',\r\n      dimgray:              '#696969',\r\n      dimgrey:              '#696969',\r\n      dodgerblue:           '#1E90FF',\r\n      firebrick:            '#B22222',\r\n      floralwhite:          '#FFFAF0',\r\n      forestgreen:          '#228B22',\r\n      fuchsia:              '#FF00FF',\r\n      gainsboro:            '#DCDCDC',\r\n      ghostwhite:           '#F8F8FF',\r\n      gold:                 '#FFD700',\r\n      goldenrod:            '#DAA520',\r\n      gray:                 '#808080',\r\n      grey:                 '#808080',\r\n      green:                '#008000',\r\n      greenyellow:          '#ADFF2F',\r\n      honeydew:             '#F0FFF0',\r\n      hotpink:              '#FF69B4',\r\n      indianred:            '#CD5C5C',\r\n      indigo:               '#4B0082',\r\n      ivory:                '#FFFFF0',\r\n      khaki:                '#F0E68C',\r\n      lavender:             '#E6E6FA',\r\n      lavenderblush:        '#FFF0F5',\r\n      lawngreen:            '#7CFC00',\r\n      lemonchiffon:         '#FFFACD',\r\n      lightblue:            '#ADD8E6',\r\n      lightcoral:           '#F08080',\r\n      lightcyan:            '#E0FFFF',\r\n      lightgoldenrodyellow: '#FAFAD2',\r\n      lightgray:            '#D3D3D3',\r\n      lightgrey:            '#D3D3D3',\r\n      lightgreen:           '#90EE90',\r\n      lightpink:            '#FFB6C1',\r\n      lightsalmon:          '#FFA07A',\r\n      lightseagreen:        '#20B2AA',\r\n      lightskyblue:         '#87CEFA',\r\n      lightslategray:       '#778899',\r\n      lightslategrey:       '#778899',\r\n      lightsteelblue:       '#B0C4DE',\r\n      lightyellow:          '#FFFFE0',\r\n      lime:                 '#00FF00',\r\n      limegreen:            '#32CD32',\r\n      linen:                '#FAF0E6',\r\n      magenta:              '#FF00FF',\r\n      maroon:               '#800000',\r\n      mediumaquamarine:     '#66CDAA',\r\n      mediumblue:           '#0000CD',\r\n      mediumorchid:         '#BA55D3',\r\n      mediumpurple:         '#9370DB',\r\n      mediumseagreen:       '#3CB371',\r\n      mediumslateblue:      '#7B68EE',\r\n      mediumspringgreen:    '#00FA9A',\r\n      mediumturquoise:      '#48D1CC',\r\n      mediumvioletred:      '#C71585',\r\n      midnightblue:         '#191970',\r\n      mintcream:            '#F5FFFA',\r\n      mistyrose:            '#FFE4E1',\r\n      moccasin:             '#FFE4B5',\r\n      navajowhite:          '#FFDEAD',\r\n      navy:                 '#000080',\r\n      oldlace:              '#FDF5E6',\r\n      olive:                '#808000',\r\n      olivedrab:            '#6B8E23',\r\n      orange:               '#FFA500',\r\n      orangered:            '#FF4500',\r\n      orchid:               '#DA70D6',\r\n      palegoldenrod:        '#EEE8AA',\r\n      palegreen:            '#98FB98',\r\n      paleturquoise:        '#AFEEEE',\r\n      palevioletred:        '#DB7093',\r\n      papayawhip:           '#FFEFD5',\r\n      peachpuff:            '#FFDAB9',\r\n      peru:                 '#CD853F',\r\n      pink:                 '#FFC0CB',\r\n      plum:                 '#DDA0DD',\r\n      powderblue:           '#B0E0E6',\r\n      purple:               '#800080',\r\n      rebeccapurple:        '#663399',\r\n      red:                  '#FF0000',\r\n      rosybrown:            '#BC8F8F',\r\n      royalblue:            '#4169E1',\r\n      saddlebrown:          '#8B4513',\r\n      salmon:               '#FA8072',\r\n      sandybrown:           '#F4A460',\r\n      seagreen:             '#2E8B57',\r\n      seashell:             '#FFF5EE',\r\n      sienna:               '#A0522D',\r\n      silver:               '#C0C0C0',\r\n      skyblue:              '#87CEEB',\r\n      slateblue:            '#6A5ACD',\r\n      slategray:            '#708090',\r\n      slategrey:            '#708090',\r\n      snow:                 '#FFFAFA',\r\n      springgreen:          '#00FF7F',\r\n      steelblue:            '#4682B4',\r\n      tan:                  '#D2B48C',\r\n      teal:                 '#008080',\r\n      thistle:              '#D8BFD8',\r\n      tomato:               '#FF6347',\r\n      turquoise:            '#40E0D0',\r\n      violet:               '#EE82EE',\r\n      wheat:                '#F5DEB3',\r\n      white:                '#FFFFFF',\r\n      whitesmoke:           '#F5F5F5',\r\n      yellow:               '#FFFF00',\r\n      yellowgreen:          '#9ACD32'\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @param {Number} p\r\n     * @param {Number} q\r\n     * @param {Number} t\r\n     * @return {Number}\r\n     */\r\n    function hue2rgb(p, q, t) {\r\n      if (t < 0) {\r\n        t += 1;\r\n      }\r\n      if (t > 1) {\r\n        t -= 1;\r\n      }\r\n      if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n      }\r\n      if (t < 1 / 2) {\r\n        return q;\r\n      }\r\n      if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n      }\r\n      return p;\r\n    }\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGB format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgb = function(color) {\r\n      return Color.fromSource(Color.sourceFromRgb(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromRgb = function(color) {\r\n      var match = color.match(Color.reRGBa);\r\n      if (match) {\r\n        var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\r\n            g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\r\n            b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\r\n\r\n        return [\r\n          parseInt(r, 10),\r\n          parseInt(g, 10),\r\n          parseInt(b, 10),\r\n          match[4] ? parseFloat(match[4]) : 1\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in RGBA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromRgba = Color.fromRgb;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSL format\r\n     * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\r\n     * @memberOf fabric.Color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsl = function(color) {\r\n      return Color.fromSource(Color.sourceFromHsl(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\r\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\r\n     * @return {Array} source\r\n     * @see http://http://www.w3.org/TR/css3-color/#hsl-color\r\n     */\r\n    fabric.Color.sourceFromHsl = function(color) {\r\n      var match = color.match(Color.reHSLa);\r\n      if (!match) {\r\n        return;\r\n      }\r\n\r\n      var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\r\n          s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\r\n          l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\r\n          r, g, b;\r\n\r\n      if (s === 0) {\r\n        r = g = b = l;\r\n      }\r\n      else {\r\n        var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n            p = l * 2 - q;\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n      }\r\n\r\n      return [\r\n        Math.round(r * 255),\r\n        Math.round(g * 255),\r\n        Math.round(b * 255),\r\n        match[4] ? parseFloat(match[4]) : 1\r\n      ];\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HSLA format\r\n     * @static\r\n     * @function\r\n     * @memberOf fabric.Color\r\n     * @param {String} color\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHsla = Color.fromHsl;\r\n\r\n    /**\r\n     * Returns new color object, when given a color in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color Color value ex: FF5555\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromHex = function(color) {\r\n      return Color.fromSource(Color.sourceFromHex(color));\r\n    };\r\n\r\n    /**\r\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {String} color ex: FF5555 or FF5544CC (RGBa)\r\n     * @return {Array} source\r\n     */\r\n    fabric.Color.sourceFromHex = function(color) {\r\n      if (color.match(Color.reHex)) {\r\n        var value = color.slice(color.indexOf('#') + 1),\r\n            isShortNotation = (value.length === 3 || value.length === 4),\r\n            isRGBa = (value.length === 8 || value.length === 4),\r\n            r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\r\n            g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\r\n            b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\r\n            a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\r\n\r\n        return [\r\n          parseInt(r, 16),\r\n          parseInt(g, 16),\r\n          parseInt(b, 16),\r\n          parseFloat((parseInt(a, 16) / 255).toFixed(2))\r\n        ];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\r\n     * @static\r\n     * @memberOf fabric.Color\r\n     * @param {Array} source\r\n     * @return {fabric.Color}\r\n     */\r\n    fabric.Color.fromSource = function(source) {\r\n      var oColor = new Color();\r\n      oColor.setSource(source);\r\n      return oColor;\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    /* _FROM_SVG_START_ */\r\n    function getColorStop(el) {\r\n      var style = el.getAttribute('style'),\r\n          offset = el.getAttribute('offset') || 0,\r\n          color, colorAlpha, opacity, i;\r\n\r\n      // convert percents to absolute values\r\n      offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\r\n      offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\r\n      if (style) {\r\n        var keyValuePairs = style.split(/\\s*;\\s*/);\r\n\r\n        if (keyValuePairs[keyValuePairs.length - 1] === '') {\r\n          keyValuePairs.pop();\r\n        }\r\n\r\n        for (i = keyValuePairs.length; i--; ) {\r\n\r\n          var split = keyValuePairs[i].split(/\\s*:\\s*/),\r\n              key = split[0].trim(),\r\n              value = split[1].trim();\r\n\r\n          if (key === 'stop-color') {\r\n            color = value;\r\n          }\r\n          else if (key === 'stop-opacity') {\r\n            opacity = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!color) {\r\n        color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\r\n      }\r\n      if (!opacity) {\r\n        opacity = el.getAttribute('stop-opacity');\r\n      }\r\n\r\n      color = new fabric.Color(color);\r\n      colorAlpha = color.getAlpha();\r\n      opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\r\n      opacity *= colorAlpha;\r\n\r\n      return {\r\n        offset: offset,\r\n        color: color.toRgb(),\r\n        opacity: opacity\r\n      };\r\n    }\r\n\r\n    function getLinearCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('x1') || 0,\r\n        y1: el.getAttribute('y1') || 0,\r\n        x2: el.getAttribute('x2') || '100%',\r\n        y2: el.getAttribute('y2') || 0\r\n      };\r\n    }\r\n\r\n    function getRadialCoords(el) {\r\n      return {\r\n        x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\r\n        y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\r\n        r1: 0,\r\n        x2: el.getAttribute('cx') || '50%',\r\n        y2: el.getAttribute('cy') || '50%',\r\n        r2: el.getAttribute('r') || '50%'\r\n      };\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    /**\r\n     * Gradient class\r\n     * @class fabric.Gradient\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\r\n     * @see {@link fabric.Gradient#initialize} for constructor definition\r\n     */\r\n    fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\r\n\r\n      /**\r\n       * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Vertical offset for aligning gradients coming from SVG when outside pathgroups\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        options || (options = { });\r\n\r\n        var coords = { };\r\n\r\n        this.id = fabric.Object.__uid++;\r\n        this.type = options.type || 'linear';\r\n\r\n        coords = {\r\n          x1: options.coords.x1 || 0,\r\n          y1: options.coords.y1 || 0,\r\n          x2: options.coords.x2 || 0,\r\n          y2: options.coords.y2 || 0\r\n        };\r\n\r\n        if (this.type === 'radial') {\r\n          coords.r1 = options.coords.r1 || 0;\r\n          coords.r2 = options.coords.r2 || 0;\r\n        }\r\n        this.coords = coords;\r\n        this.colorStops = options.colorStops.slice();\r\n        if (options.gradientTransform) {\r\n          this.gradientTransform = options.gradientTransform;\r\n        }\r\n        this.offsetX = options.offsetX || this.offsetX;\r\n        this.offsetY = options.offsetY || this.offsetY;\r\n      },\r\n\r\n      /**\r\n       * Adds another colorStop\r\n       * @param {Object} colorStop Object with offset and color\r\n       * @return {fabric.Gradient} thisArg\r\n       */\r\n      addColorStop: function(colorStops) {\r\n        for (var position in colorStops) {\r\n          var color = new fabric.Color(colorStops[position]);\r\n          this.colorStops.push({\r\n            offset: parseFloat(position),\r\n            color: color.toRgb(),\r\n            opacity: color.getAlpha()\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a gradient\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object}\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var object = {\r\n          type: this.type,\r\n          coords: this.coords,\r\n          colorStops: this.colorStops,\r\n          offsetX: this.offsetX,\r\n          offsetY: this.offsetY,\r\n          gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an gradient\r\n       * @param {Object} object Object to create a gradient for\r\n       * @return {String} SVG representation of an gradient (linear/radial)\r\n       */\r\n      toSVG: function(object) {\r\n        var coords = clone(this.coords, true), i, len,\r\n            markup, commonAttributes, colorStops = clone(this.colorStops, true),\r\n            needsSwap = coords.r1 > coords.r2,\r\n            offsetX = object.width / 2, offsetY = object.height / 2;\r\n        // colorStops must be sorted ascending\r\n        colorStops.sort(function(a, b) {\r\n          return a.offset - b.offset;\r\n        });\r\n        if (object.type === 'path') {\r\n          offsetX -= object.pathOffset.x;\r\n          offsetY -= object.pathOffset.y;\r\n        }\r\n        for (var prop in coords) {\r\n          if (prop === 'x1' || prop === 'x2') {\r\n            coords[prop] += this.offsetX - offsetX;\r\n          }\r\n          else if (prop === 'y1' || prop === 'y2') {\r\n            coords[prop] += this.offsetY - offsetY;\r\n          }\r\n        }\r\n\r\n        commonAttributes = 'id=\"SVGID_' + this.id +\r\n                       '\" gradientUnits=\"userSpaceOnUse\"';\r\n        if (this.gradientTransform) {\r\n          commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\r\n        }\r\n        if (this.type === 'linear') {\r\n          markup = [\r\n            '<linearGradient ',\r\n            commonAttributes,\r\n            ' x1=\"', coords.x1,\r\n            '\" y1=\"', coords.y1,\r\n            '\" x2=\"', coords.x2,\r\n            '\" y2=\"', coords.y2,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n        else if (this.type === 'radial') {\r\n          // svg radial gradient has just 1 radius. the biggest.\r\n          markup = [\r\n            '<radialGradient ',\r\n            commonAttributes,\r\n            ' cx=\"', needsSwap ? coords.x1 : coords.x2,\r\n            '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\r\n            '\" r=\"', needsSwap ? coords.r1 : coords.r2,\r\n            '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\r\n            '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\r\n            '\">\\n'\r\n          ];\r\n        }\r\n\r\n        if (this.type === 'radial') {\r\n          if (needsSwap) {\r\n            // svg goes from internal to external radius. if radius are inverted, swap color stops.\r\n            colorStops = colorStops.concat();\r\n            colorStops.reverse();\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset = 1 - colorStops[i].offset;\r\n            }\r\n          }\r\n          var minRadius = Math.min(coords.r1, coords.r2);\r\n          if (minRadius > 0) {\r\n            // i have to shift all colorStops and add new one in 0.\r\n            var maxRadius = Math.max(coords.r1, coords.r2),\r\n                percentageShift = minRadius / maxRadius;\r\n            for (i = 0, len = colorStops.length; i < len; i++) {\r\n              colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\r\n            }\r\n          }\r\n        }\r\n\r\n        for (i = 0, len = colorStops.length; i < len; i++) {\r\n          var colorStop = colorStops[i];\r\n          markup.push(\r\n            '<stop ',\r\n            'offset=\"', (colorStop.offset * 100) + '%',\r\n            '\" style=\"stop-color:', colorStop.color,\r\n            (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\r\n            '\"/>\\n'\r\n          );\r\n        }\r\n\r\n        markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\r\n\r\n        return markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns an instance of CanvasGradient\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @return {CanvasGradient}\r\n       */\r\n      toLive: function(ctx) {\r\n        var gradient, coords = fabric.util.object.clone(this.coords), i, len;\r\n\r\n        if (!this.type) {\r\n          return;\r\n        }\r\n\r\n        if (this.type === 'linear') {\r\n          gradient = ctx.createLinearGradient(\r\n            coords.x1, coords.y1, coords.x2, coords.y2);\r\n        }\r\n        else if (this.type === 'radial') {\r\n          gradient = ctx.createRadialGradient(\r\n            coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\r\n        }\r\n\r\n        for (i = 0, len = this.colorStops.length; i < len; i++) {\r\n          var color = this.colorStops[i].color,\r\n              opacity = this.colorStops[i].opacity,\r\n              offset = this.colorStops[i].offset;\r\n\r\n          if (typeof opacity !== 'undefined') {\r\n            color = new fabric.Color(color).setAlpha(opacity).toRgba();\r\n          }\r\n          gradient.addColorStop(offset, color);\r\n        }\r\n\r\n        return gradient;\r\n      }\r\n    });\r\n\r\n    fabric.util.object.extend(fabric.Gradient, {\r\n\r\n      /* _FROM_SVG_START_ */\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from an SVG element\r\n       * @static\r\n       * @memberOf fabric.Gradient\r\n       * @param {SVGGradientElement} el SVG gradient element\r\n       * @param {fabric.Object} instance\r\n       * @return {fabric.Gradient} Gradient instance\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\r\n       * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\r\n       */\r\n      fromElement: function(el, instance) {\r\n        /**\r\n         *  @example:\r\n         *\r\n         *  <linearGradient id=\"linearGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\"/>\r\n         *    <stop offset=\"100%\" stop-color=\"black\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <linearGradient id=\"linearGrad2\">\r\n         *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\r\n         *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\r\n         *  </linearGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad1\">\r\n         *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\r\n         *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\r\n         *  </radialGradient>\r\n         *\r\n         *  OR\r\n         *\r\n         *  <radialGradient id=\"radialGrad2\">\r\n         *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\r\n         *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\r\n         *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\r\n         *  </radialGradient>\r\n         *\r\n         */\r\n\r\n        var colorStopEls = el.getElementsByTagName('stop'),\r\n            type,\r\n            gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\r\n            gradientTransform = el.getAttribute('gradientTransform'),\r\n            colorStops = [],\r\n            coords, ellipseMatrix, i;\r\n\r\n        if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\r\n          type = 'linear';\r\n        }\r\n        else {\r\n          type = 'radial';\r\n        }\r\n\r\n        if (type === 'linear') {\r\n          coords = getLinearCoords(el);\r\n        }\r\n        else if (type === 'radial') {\r\n          coords = getRadialCoords(el);\r\n        }\r\n\r\n        for (i = colorStopEls.length; i--; ) {\r\n          colorStops.push(getColorStop(colorStopEls[i]));\r\n        }\r\n\r\n        ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\r\n\r\n        var gradient = new fabric.Gradient({\r\n          type: type,\r\n          coords: coords,\r\n          colorStops: colorStops,\r\n          offsetX: -instance.left,\r\n          offsetY: -instance.top\r\n        });\r\n\r\n        if (gradientTransform || ellipseMatrix !== '') {\r\n          gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\r\n        }\r\n\r\n        return gradient;\r\n      },\r\n      /* _FROM_SVG_END_ */\r\n\r\n      /**\r\n       * Returns {@link fabric.Gradient} instance from its object representation\r\n       * @static\r\n       * @memberOf fabric.Gradient\r\n       * @param {Object} obj\r\n       * @param {Object} [options] Options object\r\n       */\r\n      forObject: function(obj, options) {\r\n        options || (options = { });\r\n        _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\r\n        return new fabric.Gradient(options);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _convertPercentUnitsToValues(object, options, gradientUnits) {\r\n      var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\r\n      for (var prop in options) {\r\n        if (options[prop] === 'Infinity') {\r\n          options[prop] = 1;\r\n        }\r\n        else if (options[prop] === '-Infinity') {\r\n          options[prop] = 0;\r\n        }\r\n        propValue = parseFloat(options[prop], 10);\r\n        if (typeof options[prop] === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(options[prop])) {\r\n          multFactor = 0.01;\r\n        }\r\n        else {\r\n          multFactor = 1;\r\n        }\r\n        if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\r\n          multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\r\n          addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\r\n        }\r\n        else if (prop === 'y1' || prop === 'y2') {\r\n          multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\r\n          addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\r\n        }\r\n        options[prop] = propValue * multFactor + addFactor;\r\n      }\r\n      if (object.type === 'ellipse' &&\r\n          options.r2 !== null &&\r\n          gradientUnits === 'objectBoundingBox' &&\r\n          object.rx !== object.ry) {\r\n\r\n        var scaleFactor = object.ry / object.rx;\r\n        ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\r\n        if (options.y1) {\r\n          options.y1 /= scaleFactor;\r\n        }\r\n        if (options.y2) {\r\n          options.y2 /= scaleFactor;\r\n        }\r\n      }\r\n      return ellipseMatrix;\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    /**\r\n     * Pattern class\r\n     * @class fabric.Pattern\r\n     * @see {@link http://fabricjs.com/patterns|Pattern demo}\r\n     * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\r\n     * @see {@link fabric.Pattern#initialize} for constructor definition\r\n     */\r\n\r\n\r\n    fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\r\n\r\n      /**\r\n       * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @type String\r\n       * @default\r\n       */\r\n      repeat: 'repeat',\r\n\r\n      /**\r\n       * Pattern horizontal offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Pattern vertical offset from object's left/top corner\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * transform matrix to change the pattern, imported from svgs.\r\n       * @type Array\r\n       * @default\r\n       */\r\n      patternTransform: null,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @param {Function} [callback] function to invoke after callback init.\r\n       * @return {fabric.Pattern} thisArg\r\n       */\r\n      initialize: function(options, callback) {\r\n        options || (options = { });\r\n\r\n        this.id = fabric.Object.__uid++;\r\n        this.setOptions(options);\r\n        if (!options.source || (options.source && typeof options.source !== 'string')) {\r\n          callback && callback(this);\r\n          return;\r\n        }\r\n        // function string\r\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\r\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\r\n          callback && callback(this);\r\n        }\r\n        else {\r\n          // img src string\r\n          var _this = this;\r\n          this.source = fabric.util.createImage();\r\n          fabric.util.loadImage(options.source, function(img) {\r\n            _this.source = img;\r\n            callback && callback(_this);\r\n          }, null, this.crossOrigin);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of a pattern\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of a pattern instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            source, object;\r\n\r\n        // callback\r\n        if (typeof this.source === 'function') {\r\n          source = String(this.source);\r\n        }\r\n        // <img> element\r\n        else if (typeof this.source.src === 'string') {\r\n          source = this.source.src;\r\n        }\r\n        // <canvas> element\r\n        else if (typeof this.source === 'object' && this.source.toDataURL) {\r\n          source = this.source.toDataURL();\r\n        }\r\n\r\n        object = {\r\n          type: 'pattern',\r\n          source: source,\r\n          repeat: this.repeat,\r\n          crossOrigin: this.crossOrigin,\r\n          offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\r\n          offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\r\n          patternTransform: this.patternTransform ? this.patternTransform.concat() : null\r\n        };\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n\r\n        return object;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a pattern\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a pattern\r\n       */\r\n      toSVG: function(object) {\r\n        var patternSource = typeof this.source === 'function' ? this.source() : this.source,\r\n            patternWidth = patternSource.width / object.width,\r\n            patternHeight = patternSource.height / object.height,\r\n            patternOffsetX = this.offsetX / object.width,\r\n            patternOffsetY = this.offsetY / object.height,\r\n            patternImgSrc = '';\r\n        if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\r\n          patternHeight = 1;\r\n          if (patternOffsetY) {\r\n            patternHeight += Math.abs(patternOffsetY);\r\n          }\r\n        }\r\n        if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\r\n          patternWidth = 1;\r\n          if (patternOffsetX) {\r\n            patternWidth += Math.abs(patternOffsetX);\r\n          }\r\n\r\n        }\r\n        if (patternSource.src) {\r\n          patternImgSrc = patternSource.src;\r\n        }\r\n        else if (patternSource.toDataURL) {\r\n          patternImgSrc = patternSource.toDataURL();\r\n        }\r\n\r\n        return '<pattern id=\"SVGID_' + this.id +\r\n                      '\" x=\"' + patternOffsetX +\r\n                      '\" y=\"' + patternOffsetY +\r\n                      '\" width=\"' + patternWidth +\r\n                      '\" height=\"' + patternHeight + '\">\\n' +\r\n                 '<image x=\"0\" y=\"0\"' +\r\n                        ' width=\"' + patternSource.width +\r\n                        '\" height=\"' + patternSource.height +\r\n                        '\" xlink:href=\"' + patternImgSrc +\r\n                 '\"></image>\\n' +\r\n               '</pattern>\\n';\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      setOptions: function(options) {\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns an instance of CanvasPattern\r\n       * @param {CanvasRenderingContext2D} ctx Context to create pattern\r\n       * @return {CanvasPattern}\r\n       */\r\n      toLive: function(ctx) {\r\n        var source = typeof this.source === 'function' ? this.source() : this.source;\r\n\r\n        // if the image failed to load, return, and allow rest to continue loading\r\n        if (!source) {\r\n          return '';\r\n        }\r\n\r\n        // if an image\r\n        if (typeof source.src !== 'undefined') {\r\n          if (!source.complete) {\r\n            return '';\r\n          }\r\n          if (source.naturalWidth === 0 || source.naturalHeight === 0) {\r\n            return '';\r\n          }\r\n        }\r\n        return ctx.createPattern(source, this.repeat);\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Shadow) {\r\n      fabric.warn('fabric.Shadow is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Shadow class\r\n     * @class fabric.Shadow\r\n     * @see {@link http://fabricjs.com/shadows|Shadow demo}\r\n     * @see {@link fabric.Shadow#initialize} for constructor definition\r\n     */\r\n    fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\r\n\r\n      /**\r\n       * Shadow color\r\n       * @type String\r\n       * @default\r\n       */\r\n      color: 'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Shadow blur\r\n       * @type Number\r\n       */\r\n      blur: 0,\r\n\r\n      /**\r\n       * Shadow horizontal offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetX: 0,\r\n\r\n      /**\r\n       * Shadow vertical offset\r\n       * @type Number\r\n       * @default\r\n       */\r\n      offsetY: 0,\r\n\r\n      /**\r\n       * Whether the shadow should affect stroke operations\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      affectStroke: false,\r\n\r\n      /**\r\n       * Indicates whether toObject should include default values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\r\n       * @return {fabric.Shadow} thisArg\r\n       */\r\n      initialize: function(options) {\r\n\r\n        if (typeof options === 'string') {\r\n          options = this._parseShadow(options);\r\n        }\r\n\r\n        for (var prop in options) {\r\n          this[prop] = options[prop];\r\n        }\r\n\r\n        this.id = fabric.Object.__uid++;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} shadow Shadow value to parse\r\n       * @return {Object} Shadow object with color, offsetX, offsetY and blur\r\n       */\r\n      _parseShadow: function(shadow) {\r\n        var shadowStr = shadow.trim(),\r\n            offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\r\n            color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\r\n\r\n        return {\r\n          color: color.trim(),\r\n          offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\r\n          offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\r\n          blur: parseInt(offsetsAndBlur[3], 10) || 0\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\r\n       * @return {String} Returns CSS3 text-shadow declaration\r\n       */\r\n      toString: function() {\r\n        return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of a shadow\r\n       * @param {fabric.Object} object\r\n       * @return {String} SVG representation of a shadow\r\n       */\r\n      toSVG: function(object) {\r\n        var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n            offset = fabric.util.rotateVector(\r\n              { x: this.offsetX, y: this.offsetY },\r\n              fabric.util.degreesToRadians(-object.angle)),\r\n            BLUR_BOX = 20, color = new fabric.Color(this.color);\r\n\r\n        if (object.width && object.height) {\r\n          //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\r\n          // we add some extra space to filter box to contain the blur ( 20 )\r\n          fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n          fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\r\n        }\r\n        if (object.flipX) {\r\n          offset.x *= -1;\r\n        }\r\n        if (object.flipY) {\r\n          offset.y *= -1;\r\n        }\r\n\r\n        return (\r\n          '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\r\n            'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\r\n            '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\r\n              toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\r\n            '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\r\n            '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\r\n            '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\r\n            '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\r\n            '\\t<feMerge>\\n' +\r\n              '\\t\\t<feMergeNode></feMergeNode>\\n' +\r\n              '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\r\n            '\\t</feMerge>\\n' +\r\n          '</filter>\\n');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns object representation of a shadow\r\n       * @return {Object} Object representation of a shadow instance\r\n       */\r\n      toObject: function() {\r\n        if (this.includeDefaultValues) {\r\n          return {\r\n            color: this.color,\r\n            blur: this.blur,\r\n            offsetX: this.offsetX,\r\n            offsetY: this.offsetY,\r\n            affectStroke: this.affectStroke\r\n          };\r\n        }\r\n        var obj = { }, proto = fabric.Shadow.prototype;\r\n\r\n        ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke'].forEach(function(prop) {\r\n          if (this[prop] !== proto[prop]) {\r\n            obj[prop] = this[prop];\r\n          }\r\n        }, this);\r\n\r\n        return obj;\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\r\n     * @static\r\n     * @field\r\n     * @memberOf fabric.Shadow\r\n     */\r\n    // eslint-disable-next-line max-len\r\n    fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function () {\r\n\r\n    'use strict';\r\n\r\n    if (fabric.StaticCanvas) {\r\n      fabric.warn('fabric.StaticCanvas is already defined.');\r\n      return;\r\n    }\r\n\r\n    // aliases for faster resolution\r\n    var extend = fabric.util.object.extend,\r\n        getElementOffset = fabric.util.getElementOffset,\r\n        removeFromArray = fabric.util.removeFromArray,\r\n        toFixed = fabric.util.toFixed,\r\n        transformPoint = fabric.util.transformPoint,\r\n        invertTransform = fabric.util.invertTransform,\r\n\r\n        CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\r\n\r\n    /**\r\n     * Static canvas class\r\n     * @class fabric.StaticCanvas\r\n     * @mixes fabric.Collection\r\n     * @mixes fabric.Observable\r\n     * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\r\n     * @see {@link fabric.StaticCanvas#initialize} for constructor definition\r\n     * @fires before:render\r\n     * @fires after:render\r\n     * @fires canvas:cleared\r\n     * @fires object:added\r\n     * @fires object:removed\r\n     */\r\n    fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n      },\r\n\r\n      /**\r\n       * Background color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      backgroundColor: '',\r\n\r\n      /**\r\n       * Background image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\r\n       * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      backgroundImage: null,\r\n\r\n      /**\r\n       * Overlay color of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\r\n       * @since 1.3.9\r\n       * @type {(String|fabric.Pattern)}\r\n       * @default\r\n       */\r\n      overlayColor: '',\r\n\r\n      /**\r\n       * Overlay image of canvas instance.\r\n       * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\r\n       * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\r\n       * and \"overlayImageTop\" properties are deprecated since 1.3.9.\r\n       * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\r\n       * @type fabric.Image\r\n       * @default\r\n       */\r\n      overlayImage: null,\r\n\r\n      /**\r\n       * Indicates whether toObject/toDatalessObject should include default values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues: true,\r\n\r\n      /**\r\n       * Indicates whether objects' state should be saved\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      stateful: false,\r\n\r\n      /**\r\n       * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\r\n       * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\r\n       * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\r\n       * since the renders are quequed and executed one per frame.\r\n       * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\r\n       * Left default to true to do not break documentation and old app, fiddles.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      renderOnAddRemove: true,\r\n\r\n      /**\r\n       * Function that determines clipping of entire canvas area\r\n       * Being passed context as first argument.\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       * @default\r\n       */\r\n      clipTo: null,\r\n\r\n      /**\r\n       * Indicates whether object controls (borders/controls) are rendered above overlay image\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      controlsAboveOverlay: false,\r\n\r\n      /**\r\n       * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      allowTouchScrolling: false,\r\n\r\n      /**\r\n       * Indicates whether this canvas will use image smoothing, this is on by default in browsers\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      imageSmoothingEnabled: true,\r\n\r\n      /**\r\n       * The transformation (in the format of Canvas transform) which focuses the viewport\r\n       * @type Array\r\n       * @default\r\n       */\r\n      viewportTransform: fabric.iMatrix.concat(),\r\n\r\n      /**\r\n       * if set to false background image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      backgroundVpt: true,\r\n\r\n      /**\r\n       * if set to false overlya image is not affected by viewport transform\r\n       * @since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overlayVpt: true,\r\n\r\n      /**\r\n       * Callback; invoked right before object is about to be scaled/rotated\r\n       * @deprecated since 2.3.0\r\n       * Use before:transform event\r\n       */\r\n      onBeforeScaleRotate: function () {\r\n        /* NOOP */\r\n      },\r\n\r\n      /**\r\n       * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      enableRetinaScaling: true,\r\n\r\n      /**\r\n       * Describe canvas element extension over design\r\n       * properties are tl,tr,bl,br.\r\n       * if canvas is not zoomed/panned those points are the four corner of canvas\r\n       * if canvas is viewportTransformed you those points indicate the extension\r\n       * of canvas element in plain untrasformed coordinates\r\n       * The coordinates get updated with @method calcViewportBoundaries.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       */\r\n      vptCoords: { },\r\n\r\n      /**\r\n       * Based on vptCoords and object.aCoords, skip rendering of objects that\r\n       * are not included in current viewport.\r\n       * May greatly help in applications with crowded canvas and use of zoom/pan\r\n       * If One of the corner of the bounding box of the object is on the canvas\r\n       * the objects get rendered.\r\n       * @memberOf fabric.StaticCanvas.prototype\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipOffscreen: true,\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initStatic: function(el, options) {\r\n        var cb = this.requestRenderAllBound;\r\n        this._objects = [];\r\n        this._createLowerCanvas(el);\r\n        this._initOptions(options);\r\n        this._setImageSmoothing();\r\n        // only initialize retina scaling once\r\n        if (!this.interactive) {\r\n          this._initRetinaScaling();\r\n        }\r\n\r\n        if (options.overlayImage) {\r\n          this.setOverlayImage(options.overlayImage, cb);\r\n        }\r\n        if (options.backgroundImage) {\r\n          this.setBackgroundImage(options.backgroundImage, cb);\r\n        }\r\n        if (options.backgroundColor) {\r\n          this.setBackgroundColor(options.backgroundColor, cb);\r\n        }\r\n        if (options.overlayColor) {\r\n          this.setOverlayColor(options.overlayColor, cb);\r\n        }\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _isRetinaScaling: function() {\r\n        return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} retinaScaling if applied, otherwise 1;\r\n       */\r\n      getRetinaScaling: function() {\r\n        return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initRetinaScaling: function() {\r\n        if (!this._isRetinaScaling()) {\r\n          return;\r\n        }\r\n        this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\r\n        this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\r\n\r\n        this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\r\n      },\r\n\r\n      /**\r\n       * Calculates canvas element offset relative to the document\r\n       * This method is also attached as \"resize\" event handler of window\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      calcOffset: function () {\r\n        this._offset = getElementOffset(this.lowerCanvasEl);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\r\n       * @param {Function} callback callback to invoke when image is loaded and set as an overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\r\n       * @example <caption>Normal overlayImage with left/top = 0</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage with different properties</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position overlayImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>overlayImage loaded from cross-origin</caption>\r\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      setOverlayImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('overlayImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\r\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundImage with left/top = 0</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage with different properties</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\r\n       * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\r\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n       *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\r\n       * });\r\n       * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   width: canvas.width,\r\n       *   height: canvas.height,\r\n       *   // Needed to position backgroundImage at 0/0\r\n       *   originX: 'left',\r\n       *   originY: 'top'\r\n       * });\r\n       * @example <caption>backgroundImage loaded from cross-origin</caption>\r\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n       *   opacity: 0.5,\r\n       *   angle: 45,\r\n       *   left: 400,\r\n       *   top: 400,\r\n       *   originX: 'left',\r\n       *   originY: 'top',\r\n       *   crossOrigin: 'anonymous'\r\n       * });\r\n       */\r\n      setBackgroundImage: function (image, callback, options) {\r\n        return this.__setBgOverlayImage('backgroundImage', image, callback, options);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\r\n       * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\r\n       * @param {Function} callback Callback to invoke when foreground color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\r\n       * @example <caption>Normal overlayColor - color value</caption>\r\n       * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\r\n       * canvas.setOverlayColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setOverlayColor: function(overlayColor, callback) {\r\n        return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\r\n       * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\r\n       * @param {Function} callback Callback to invoke when background color is set\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\r\n       * @example <caption>Normal backgroundColor - color value</caption>\r\n       * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n       * }, canvas.renderAll.bind(canvas));\r\n       * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\r\n       * canvas.setBackgroundColor({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat',\r\n       *   offsetX: 200,\r\n       *   offsetY: 100\r\n       * }, canvas.renderAll.bind(canvas));\r\n       */\r\n      setBackgroundColor: function(backgroundColor, callback) {\r\n        return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\r\n       */\r\n      _setImageSmoothing: function() {\r\n        var ctx = this.getContext();\r\n\r\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\r\n          || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\r\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\r\n       * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\r\n       * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\r\n       * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\r\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\r\n       */\r\n      __setBgOverlayImage: function(property, image, callback, options) {\r\n        if (typeof image === 'string') {\r\n          fabric.util.loadImage(image, function(img) {\r\n            img && (this[property] = new fabric.Image(img, options));\r\n            callback && callback(img);\r\n          }, this, options && options.crossOrigin);\r\n        }\r\n        else {\r\n          options && image.setOptions(options);\r\n          this[property] = image;\r\n          callback && callback(image);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\r\n       * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\r\n       * @param {(Object|String|null)} color Object with pattern information, color value or null\r\n       * @param {Function} [callback] Callback is invoked when color is set\r\n       */\r\n      __setBgOverlayColor: function(property, color, callback) {\r\n        this[property] = color;\r\n        this._initGradient(color, property);\r\n        this._initPattern(color, property, callback);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCanvasElement: function() {\r\n        var element = fabric.util.createCanvasElement();\r\n        if (!element) {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        if (!element.style) {\r\n          element.style = { };\r\n        }\r\n        if (typeof element.getContext === 'undefined') {\r\n          throw CANVAS_INIT_ERROR;\r\n        }\r\n        return element;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initOptions: function (options) {\r\n        this._setOptions(options);\r\n\r\n        this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\r\n        this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\r\n\r\n        if (!this.lowerCanvasEl.style) {\r\n          return;\r\n        }\r\n\r\n        this.lowerCanvasEl.width = this.width;\r\n        this.lowerCanvasEl.height = this.height;\r\n\r\n        this.lowerCanvasEl.style.width = this.width + 'px';\r\n        this.lowerCanvasEl.style.height = this.height + 'px';\r\n\r\n        this.viewportTransform = this.viewportTransform.slice();\r\n      },\r\n\r\n      /**\r\n       * Creates a bottom canvas\r\n       * @private\r\n       * @param {HTMLElement} [canvasEl]\r\n       */\r\n      _createLowerCanvas: function (canvasEl) {\r\n        // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\r\n        if (canvasEl && canvasEl.getContext) {\r\n          this.lowerCanvasEl = canvasEl;\r\n        }\r\n        else {\r\n          this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\r\n        }\r\n\r\n        fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\r\n\r\n        if (this.interactive) {\r\n          this._applyCanvasStyle(this.lowerCanvasEl);\r\n        }\r\n\r\n        this.contextContainer = this.lowerCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * Returns canvas width (in px)\r\n       * @return {Number}\r\n       */\r\n      getWidth: function () {\r\n        return this.width;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas height (in px)\r\n       * @return {Number}\r\n       */\r\n      getHeight: function () {\r\n        return this.height;\r\n      },\r\n\r\n      /**\r\n       * Sets width of this canvas instance\r\n       * @param {Number|String} value                         Value to set width to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setWidth: function (value, options) {\r\n        return this.setDimensions({ width: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets height of this canvas instance\r\n       * @param {Number|String} value                         Value to set height to\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setHeight: function (value, options) {\r\n        return this.setDimensions({ height: value }, options);\r\n      },\r\n\r\n      /**\r\n       * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\r\n       * @param {Object}        dimensions                    Object with width/height properties\r\n       * @param {Number|String} [dimensions.width]            Width of canvas element\r\n       * @param {Number|String} [dimensions.height]           Height of canvas element\r\n       * @param {Object}        [options]                     Options object\r\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setDimensions: function (dimensions, options) {\r\n        var cssValue;\r\n\r\n        options = options || {};\r\n\r\n        for (var prop in dimensions) {\r\n          cssValue = dimensions[prop];\r\n\r\n          if (!options.cssOnly) {\r\n            this._setBackstoreDimension(prop, dimensions[prop]);\r\n            cssValue += 'px';\r\n            this.hasLostContext = true;\r\n          }\r\n\r\n          if (!options.backstoreOnly) {\r\n            this._setCssDimension(prop, cssValue);\r\n          }\r\n        }\r\n        if (this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\r\n        }\r\n        this._initRetinaScaling();\r\n        this._setImageSmoothing();\r\n        this.calcOffset();\r\n\r\n        if (!options.cssOnly) {\r\n          this.requestRenderAll();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {Number} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setBackstoreDimension: function (prop, value) {\r\n        this.lowerCanvasEl[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl[prop] = value;\r\n        }\r\n\r\n        if (this.cacheCanvasEl) {\r\n          this.cacheCanvasEl[prop] = value;\r\n        }\r\n\r\n        this[prop] = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Helper for setting css width/height\r\n       * @private\r\n       * @param {String} prop property (width|height)\r\n       * @param {String} value value to set property to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      _setCssDimension: function (prop, value) {\r\n        this.lowerCanvasEl.style[prop] = value;\r\n\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl.style[prop] = value;\r\n        }\r\n\r\n        if (this.wrapperEl) {\r\n          this.wrapperEl.style[prop] = value;\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns canvas zoom level\r\n       * @return {Number}\r\n       */\r\n      getZoom: function () {\r\n        return this.viewportTransform[0];\r\n      },\r\n\r\n      /**\r\n       * Sets viewport transform of this canvas instance\r\n       * @param {Array} vpt the transform in the form of context.transform\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setViewportTransform: function (vpt) {\r\n        var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\r\n        this.viewportTransform = vpt;\r\n        for (i = 0, len = this._objects.length; i < len; i++) {\r\n          object = this._objects[i];\r\n          object.group || object.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          activeObject.setCoords(ignoreVpt, skipAbsolute);\r\n        }\r\n        this.calcViewportBoundaries();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance, zoom centered around point\r\n       * @param {fabric.Point} point to zoom with respect to\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      zoomToPoint: function (point, value) {\r\n        // TODO: just change the scale, preserve other transformations\r\n        var before = point, vpt = this.viewportTransform.slice(0);\r\n        point = transformPoint(point, invertTransform(this.viewportTransform));\r\n        vpt[0] = value;\r\n        vpt[3] = value;\r\n        var after = transformPoint(point, vpt);\r\n        vpt[4] += before.x - after.x;\r\n        vpt[5] += before.y - after.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Sets zoom level of this canvas instance\r\n       * @param {Number} value to set zoom to, less than 1 zooms out\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      setZoom: function (value) {\r\n        this.zoomToPoint(new fabric.Point(0, 0), value);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Pan viewport so as to place point at top left corner of canvas\r\n       * @param {fabric.Point} point to move to\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      absolutePan: function (point) {\r\n        var vpt = this.viewportTransform.slice(0);\r\n        vpt[4] = -point.x;\r\n        vpt[5] = -point.y;\r\n        return this.setViewportTransform(vpt);\r\n      },\r\n\r\n      /**\r\n       * Pans viewpoint relatively\r\n       * @param {fabric.Point} point (position vector) to move by\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable true\r\n       */\r\n      relativePan: function (point) {\r\n        return this.absolutePan(new fabric.Point(\r\n          -point.x - this.viewportTransform[4],\r\n          -point.y - this.viewportTransform[5]\r\n        ));\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element corresponding to this instance\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getElement: function () {\r\n        return this.lowerCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was added\r\n       */\r\n      _onObjectAdded: function(obj) {\r\n        this.stateful && obj.setupState();\r\n        obj._set('canvas', this);\r\n        obj.setCoords();\r\n        this.fire('object:added', { target: obj });\r\n        obj.fire('added');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        this.fire('object:removed', { target: obj });\r\n        obj.fire('removed');\r\n        delete obj.canvas;\r\n      },\r\n\r\n      /**\r\n       * Clears specified context of canvas element\r\n       * @param {CanvasRenderingContext2D} ctx Context to clear\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clearContext: function(ctx) {\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where objects are drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getContext: function () {\r\n        return this.contextContainer;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        this._objects.length = 0;\r\n        this.backgroundImage = null;\r\n        this.overlayImage = null;\r\n        this.backgroundColor = '';\r\n        this.overlayColor = '';\r\n        if (this._hasITextHandlers) {\r\n          this.off('mouse:up', this._mouseUpITextHandler);\r\n          this._iTextInstances = null;\r\n          this._hasITextHandlers = false;\r\n        }\r\n        this.clearContext(this.contextContainer);\r\n        this.fire('canvas:cleared');\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Renders the canvas\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._objects);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Function created to be instance bound at initialization\r\n       * used in requestAnimationFrame rendering\r\n       * Let the fabricJS call it. If you call it manually you could have more\r\n       * animationFrame stacking on to of each other\r\n       * for an imperative rendering, use canvas.renderAll\r\n       * @private\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAndReset: function() {\r\n        this.isRendering = 0;\r\n        this.renderAll();\r\n      },\r\n\r\n      /**\r\n       * Append a renderAll request to next animation frame.\r\n       * unless one is already in progress, in that case nothing is done\r\n       * a boolean flag will avoid appending more.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      requestRenderAll: function () {\r\n        if (!this.isRendering) {\r\n          this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Calculate the position of the 4 corner of canvas with current viewportTransform.\r\n       * helps to determinate when an object is in the current rendering viewport using\r\n       * object absolute coordinates ( aCoords )\r\n       * @return {Object} points.tl\r\n       * @chainable\r\n       */\r\n      calcViewportBoundaries: function() {\r\n        var points = { }, width = this.width, height = this.height,\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\r\n        points.br = transformPoint({ x: width, y: height }, iVpt);\r\n        points.tr = new fabric.Point(points.br.x, points.tl.y);\r\n        points.bl = new fabric.Point(points.tl.x, points.br.y);\r\n        this.vptCoords = points;\r\n        return points;\r\n      },\r\n\r\n      cancelRequestedRender: function() {\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders background, objects, overlay and controls.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {Array} objects to render\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderCanvas: function(ctx, objects) {\r\n        var v = this.viewportTransform;\r\n        this.cancelRequestedRender();\r\n        this.calcViewportBoundaries();\r\n        this.clearContext(ctx);\r\n        this.fire('before:render');\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, ctx);\r\n        }\r\n        this._renderBackground(ctx);\r\n\r\n        ctx.save();\r\n        //apply viewport transform once for all rendering process\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        this._renderObjects(ctx, objects);\r\n        ctx.restore();\r\n        if (!this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        if (this.clipTo) {\r\n          ctx.restore();\r\n        }\r\n        this._renderOverlay(ctx);\r\n        if (this.controlsAboveOverlay && this.interactive) {\r\n          this.drawControls(ctx);\r\n        }\r\n        this.fire('after:render');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Array} objects to render\r\n       */\r\n      _renderObjects: function(ctx, objects) {\r\n        var i, len;\r\n        for (i = 0, len = objects.length; i < len; ++i) {\r\n          objects[i] && objects[i].render(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {string} property 'background' or 'overlay'\r\n       */\r\n      _renderBackgroundOrOverlay: function(ctx, property) {\r\n        var object = this[property + 'Color'], v;\r\n        if (object) {\r\n          ctx.fillStyle = object.toLive\r\n            ? object.toLive(ctx, this)\r\n            : object;\r\n\r\n          ctx.fillRect(\r\n            object.offsetX || 0,\r\n            object.offsetY || 0,\r\n            this.width,\r\n            this.height);\r\n        }\r\n        object = this[property + 'Image'];\r\n        if (object) {\r\n          if (this[property + 'Vpt']) {\r\n            v = this.viewportTransform;\r\n            ctx.save();\r\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          }\r\n          object.render(ctx);\r\n          this[property + 'Vpt'] && ctx.restore();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'background');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderOverlay: function(ctx) {\r\n        this._renderBackgroundOrOverlay(ctx, 'overlay');\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a center of canvas.\r\n       * Returned value is an object with top and left properties\r\n       * @return {Object} object with \"top\" and \"left\" number values\r\n       */\r\n      getCenter: function () {\r\n        return {\r\n          top: this.height / 2,\r\n          left: this.width / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       */\r\n      centerObjectH: function (object) {\r\n        return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically in the canvas\r\n       * @param {fabric.Object} object Object to center vertically\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObjectV: function (object) {\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the canvas\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      centerObject: function(object) {\r\n        var center = this.getCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(center.left, center.top));\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally in the viewport\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObject: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, vpCenter);\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectH: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n        this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object Vertically in the viewport, object.top is unchanged\r\n       * @param {fabric.Object} object Object to center vertically and horizontally\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterObjectV: function(object) {\r\n        var vpCenter = this.getVpCenter();\r\n\r\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\r\n      },\r\n\r\n      /**\r\n       * Calculate the point in canvas that correspond to the center of actual viewport.\r\n       * @return {fabric.Point} vpCenter, viewport center\r\n       * @chainable\r\n       */\r\n      getVpCenter: function() {\r\n        var center = this.getCenter(),\r\n            iVpt = invertTransform(this.viewportTransform);\r\n        return transformPoint({ x: center.left, y: center.top }, iVpt);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} object Object to center\r\n       * @param {fabric.Point} center Center point\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      _centerObject: function(object, center) {\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        object.setCoords();\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returs dataless JSON representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {String} json string\r\n       */\r\n      toDatalessJSON: function (propertiesToInclude) {\r\n        return this.toDatalessObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of canvas\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function (propertiesToInclude) {\r\n        return this._toObjectMethod('toDatalessObject', propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjectMethod: function (methodName, propertiesToInclude) {\r\n\r\n        var data = {\r\n          version: fabric.version,\r\n          objects: this._toObjects(methodName, propertiesToInclude)\r\n        };\r\n\r\n        extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\r\n\r\n        fabric.util.populateWithProperties(this, data, propertiesToInclude);\r\n\r\n        return data;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObjects: function(methodName, propertiesToInclude) {\r\n        return this._objects.filter(function(object) {\r\n          return !object.excludeFromExport;\r\n        }).map(function(instance) {\r\n          return this._toObject(instance, methodName, propertiesToInclude);\r\n        }, this);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        var originalValue;\r\n\r\n        if (!this.includeDefaultValues) {\r\n          originalValue = instance.includeDefaultValues;\r\n          instance.includeDefaultValues = false;\r\n        }\r\n\r\n        var object = instance[methodName](propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          instance.includeDefaultValues = originalValue;\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __serializeBgOverlay: function(methodName, propertiesToInclude) {\r\n        var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\r\n\r\n        if (this.backgroundColor) {\r\n          data.background = this.backgroundColor.toObject\r\n            ? this.backgroundColor.toObject(propertiesToInclude)\r\n            : this.backgroundColor;\r\n        }\r\n\r\n        if (this.overlayColor) {\r\n          data.overlay = this.overlayColor.toObject\r\n            ? this.overlayColor.toObject(propertiesToInclude)\r\n            : this.overlayColor;\r\n        }\r\n        if (bgImage && !bgImage.excludeFromExport) {\r\n          data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\r\n        }\r\n        if (overlay && !overlay.excludeFromExport) {\r\n          data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\r\n        }\r\n\r\n        return data;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\r\n       * a zoomed canvas will then produce zoomed SVG output.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      svgViewportTransformation: true,\r\n\r\n      /**\r\n       * Returns SVG representation of canvas\r\n       * @function\r\n       * @param {Object} [options] Options object for SVG output\r\n       * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\r\n       * @param {Object} [options.viewBox] SVG viewbox object\r\n       * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\r\n       * @param {Number} [options.viewBox.y] y-coordinate of viewbox\r\n       * @param {Number} [options.viewBox.width] Width of viewbox\r\n       * @param {Number} [options.viewBox.height] Height of viewbox\r\n       * @param {String} [options.encoding=UTF-8] Encoding of SVG output\r\n       * @param {String} [options.width] desired width of svg with or without units\r\n       * @param {String} [options.height] desired height of svg with or without units\r\n       * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\r\n       * @return {String} SVG string\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n       * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\r\n       * @example <caption>Normal SVG output</caption>\r\n       * var svg = canvas.toSVG();\r\n       * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\r\n       * var svg = canvas.toSVG({suppressPreamble: true});\r\n       * @example <caption>SVG output with viewBox attribute</caption>\r\n       * var svg = canvas.toSVG({\r\n       *   viewBox: {\r\n       *     x: 100,\r\n       *     y: 100,\r\n       *     width: 200,\r\n       *     height: 300\r\n       *   }\r\n       * });\r\n       * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\r\n       * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\r\n       * @example <caption>Modify SVG output with reviver function</caption>\r\n       * var svg = canvas.toSVG(null, function(svg) {\r\n       *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\r\n       * });\r\n       */\r\n      toSVG: function(options, reviver) {\r\n        options || (options = { });\r\n\r\n        var markup = [];\r\n\r\n        this._setSVGPreamble(markup, options);\r\n        this._setSVGHeader(markup, options);\r\n\r\n        this._setSVGBgOverlayColor(markup, 'backgroundColor');\r\n        this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\r\n\r\n        this._setSVGObjects(markup, reviver);\r\n\r\n        this._setSVGBgOverlayColor(markup, 'overlayColor');\r\n        this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\r\n\r\n        markup.push('</svg>');\r\n\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGPreamble: function(markup, options) {\r\n        if (options.suppressPreamble) {\r\n          return;\r\n        }\r\n        markup.push(\r\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\r\n          '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\r\n          '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGHeader: function(markup, options) {\r\n        var width = options.width || this.width,\r\n            height = options.height || this.height,\r\n            vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        if (options.viewBox) {\r\n          viewBox = 'viewBox=\"' +\r\n                  options.viewBox.x + ' ' +\r\n                  options.viewBox.y + ' ' +\r\n                  options.viewBox.width + ' ' +\r\n                  options.viewBox.height + '\" ';\r\n        }\r\n        else {\r\n          if (this.svgViewportTransformation) {\r\n            vpt = this.viewportTransform;\r\n            viewBox = 'viewBox=\"' +\r\n                    toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\r\n                    toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\r\n          }\r\n        }\r\n\r\n        markup.push(\r\n          '<svg ',\r\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\r\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\r\n          'version=\"1.1\" ',\r\n          'width=\"', width, '\" ',\r\n          'height=\"', height, '\" ',\r\n          viewBox,\r\n          'xml:space=\"preserve\">\\n',\r\n          '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\r\n          '<defs>\\n',\r\n          this.createSVGFontFacesMarkup(),\r\n          this.createSVGRefElementsMarkup(),\r\n          '</defs>\\n'\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG referenced elements like patterns, gradients etc.\r\n       * @return {String}\r\n       */\r\n      createSVGRefElementsMarkup: function() {\r\n        var _this = this,\r\n            markup = ['backgroundColor', 'overlayColor'].map(function(prop) {\r\n              var fill = _this[prop];\r\n              if (fill && fill.toLive) {\r\n                return fill.toSVG(_this, false);\r\n              }\r\n            });\r\n        return markup.join('');\r\n      },\r\n\r\n      /**\r\n       * Creates markup containing SVG font faces,\r\n       * font URLs for font faces must be collected by developers\r\n       * and are not extracted from the DOM by fabricjs\r\n       * @param {Array} objects Array of fabric objects\r\n       * @return {String}\r\n       */\r\n      createSVGFontFacesMarkup: function() {\r\n        var markup = '', fontList = { }, obj, fontFamily,\r\n            style, row, rowIndex, _char, charIndex, i, len,\r\n            fontPaths = fabric.fontPaths, objects = this._objects;\r\n\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          obj = objects[i];\r\n          fontFamily = obj.fontFamily;\r\n          if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\r\n            continue;\r\n          }\r\n          fontList[fontFamily] = true;\r\n          if (!obj.styles) {\r\n            continue;\r\n          }\r\n          style = obj.styles;\r\n          for (rowIndex in style) {\r\n            row = style[rowIndex];\r\n            for (charIndex in row) {\r\n              _char = row[charIndex];\r\n              fontFamily = _char.fontFamily;\r\n              if (!fontList[fontFamily] && fontPaths[fontFamily]) {\r\n                fontList[fontFamily] = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var j in fontList) {\r\n          markup += [\r\n            '\\t\\t@font-face {\\n',\r\n            '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\r\n            '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\r\n            '\\t\\t}\\n'\r\n          ].join('');\r\n        }\r\n\r\n        if (markup) {\r\n          markup = [\r\n            '\\t<style type=\"text/css\">',\r\n            '<![CDATA[\\n',\r\n            markup,\r\n            ']]>',\r\n            '</style>\\n'\r\n          ].join('');\r\n        }\r\n\r\n        return markup;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObjects: function(markup, reviver) {\r\n        var instance, i, len, objects = this._objects;\r\n        for (i = 0, len = objects.length; i < len; i++) {\r\n          instance = objects[i];\r\n          if (instance.excludeFromExport) {\r\n            continue;\r\n          }\r\n          this._setSVGObject(markup, instance, reviver);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        markup.push(instance.toSVG(reviver));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayImage: function(markup, property, reviver) {\r\n        if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\r\n          markup.push(this[property].toSVG(reviver));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGBgOverlayColor: function(markup, property) {\r\n        var filler = this[property], vpt = this.viewportTransform, finalWidth = this.width / vpt[0],\r\n            finalHeight = this.height / vpt[3];\r\n        if (!filler) {\r\n          return;\r\n        }\r\n        if (filler.toLive) {\r\n          var repeat = filler.repeat;\r\n          markup.push(\r\n            '<rect transform=\"translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\r\n            ' x=\"', filler.offsetX - finalWidth / 2, '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\r\n            'width=\"',\r\n            (repeat === 'repeat-y' || repeat === 'no-repeat'\r\n              ? filler.source.width\r\n              : finalWidth ),\r\n            '\" height=\"',\r\n            (repeat === 'repeat-x' || repeat === 'no-repeat'\r\n              ? filler.source.height\r\n              : finalHeight),\r\n            '\" fill=\"url(#SVGID_' + filler.id + ')\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n        else {\r\n          markup.push(\r\n            '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\r\n            'fill=\"', this[property], '\"',\r\n            '></rect>\\n'\r\n          );\r\n        }\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the bottom of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send to back\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendToBack: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.unshift(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.unshift(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or the objects of a multiple selection\r\n       * to the top of the stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringToFront: function (object) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, objs;\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.push(obj);\r\n          }\r\n        }\r\n        else {\r\n          removeFromArray(this._objects, object);\r\n          this._objects.push(object);\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection down in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in behind\r\n       * the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      sendBackwards: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = 0; i < objs.length; i++) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx > 0 + objsMoved) {\r\n              newIdx = idx - 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== 0) {\r\n            // if object is not on the bottom of stack\r\n            newIdx = this._findNewLowerIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewLowerIndex: function(object, idx, intersecting) {\r\n        var newIdx, i;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse down the stack looking for the nearest intersecting object\r\n          for (i = idx - 1; i >= 0; --i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx - 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object or a selection up in stack of drawn objects\r\n       * An optional paramter, intersecting allowes to move the object in front\r\n       * of the first intersecting object. Where intersection is calculated with\r\n       * bounding box. If no intersection is found, there will not be change in the\r\n       * stack.\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      bringForward: function (object, intersecting) {\r\n        if (!object) {\r\n          return this;\r\n        }\r\n        var activeSelection = this._activeObject,\r\n            i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n        if (object === activeSelection && object.type === 'activeSelection') {\r\n          objs = activeSelection._objects;\r\n          for (i = objs.length; i--;) {\r\n            obj = objs[i];\r\n            idx = this._objects.indexOf(obj);\r\n            if (idx < this._objects.length - 1 - objsMoved) {\r\n              newIdx = idx + 1;\r\n              removeFromArray(this._objects, obj);\r\n              this._objects.splice(newIdx, 0, obj);\r\n            }\r\n            objsMoved++;\r\n          }\r\n        }\r\n        else {\r\n          idx = this._objects.indexOf(object);\r\n          if (idx !== this._objects.length - 1) {\r\n            // if object is not on top of stack (last item in an array)\r\n            newIdx = this._findNewUpperIndex(object, idx, intersecting);\r\n            removeFromArray(this._objects, object);\r\n            this._objects.splice(newIdx, 0, object);\r\n          }\r\n        }\r\n        this.renderOnAddRemove && this.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _findNewUpperIndex: function(object, idx, intersecting) {\r\n        var newIdx, i, len;\r\n\r\n        if (intersecting) {\r\n          newIdx = idx;\r\n\r\n          // traverse up the stack looking for the nearest intersecting object\r\n          for (i = idx + 1, len = this._objects.length; i < len; ++i) {\r\n\r\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                                 object.isContainedWithinObject(this._objects[i]) ||\r\n                                 this._objects[i].isContainedWithinObject(object);\r\n\r\n            if (isIntersecting) {\r\n              newIdx = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          newIdx = idx + 1;\r\n        }\r\n\r\n        return newIdx;\r\n      },\r\n\r\n      /**\r\n       * Moves an object to specified level in stack of drawn objects\r\n       * @param {fabric.Object} object Object to send\r\n       * @param {Number} index Position to move to\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      moveTo: function (object, index) {\r\n        removeFromArray(this._objects, object);\r\n        this._objects.splice(index, 0, object);\r\n        return this.renderOnAddRemove && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and dispose objects\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        // cancel eventually ongoing renders\r\n        if (this.isRendering) {\r\n          fabric.util.cancelAnimFrame(this.isRendering);\r\n          this.isRendering = 0;\r\n        }\r\n        this.forEachObject(function(object) {\r\n          object.dispose && object.dispose();\r\n        });\r\n        this._objects = [];\r\n        if (this.backgroundImage && this.backgroundImage.dispose) {\r\n          this.backgroundImage.dispose();\r\n        }\r\n        this.backgroundImage = null;\r\n        if (this.overlayImage && this.overlayImage.dispose) {\r\n          this.overlayImage.dispose();\r\n        }\r\n        this.overlayImage = null;\r\n        this._iTextInstances = null;\r\n        this.contextContainer = null;\r\n        fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\r\n        this.lowerCanvasEl = undefined;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function () {\r\n        return '#<fabric.Canvas (' + this.complexity() + '): ' +\r\n                 '{ objects: ' + this._objects.length + ' }>';\r\n      }\r\n    });\r\n\r\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\r\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\r\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\r\n\r\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\r\n\r\n      /**\r\n       * @static\r\n       * @type String\r\n       * @default\r\n       */\r\n      EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\r\n\r\n      /**\r\n       * Provides a way to check support of some of the canvas methods\r\n       * (either those of HTMLCanvasElement itself, or rendering context)\r\n       *\r\n       * @param {String} methodName Method to check support for;\r\n       *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\r\n       * @return {Boolean | null} `true` if method is supported (or at least exists),\r\n       *                          `null` if canvas element or context can not be initialized\r\n       */\r\n      supports: function (methodName) {\r\n        var el = fabric.util.createCanvasElement();\r\n\r\n        if (!el || !el.getContext) {\r\n          return null;\r\n        }\r\n\r\n        var ctx = el.getContext('2d');\r\n        if (!ctx) {\r\n          return null;\r\n        }\r\n\r\n        switch (methodName) {\r\n\r\n          case 'getImageData':\r\n            return typeof ctx.getImageData !== 'undefined';\r\n\r\n          case 'setLineDash':\r\n            return typeof ctx.setLineDash !== 'undefined';\r\n\r\n          case 'toDataURL':\r\n            return typeof el.toDataURL !== 'undefined';\r\n\r\n          case 'toDataURLWithQuality':\r\n            try {\r\n              el.toDataURL('image/jpeg', 0);\r\n              return true;\r\n            }\r\n            catch (e) { }\r\n            return false;\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns JSON representation of canvas\r\n     * @function\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {String} JSON string\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\r\n     * @example <caption>JSON without additional properties</caption>\r\n     * var json = canvas.toJSON();\r\n     * @example <caption>JSON with additional properties included</caption>\r\n     * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\r\n     * @example <caption>JSON without default values</caption>\r\n     * canvas.includeDefaultValues = false;\r\n     * var json = canvas.toJSON();\r\n     */\r\n    fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\r\n\r\n    if (fabric.isLikelyNode) {\r\n      fabric.StaticCanvas.prototype.createPNGStream = function() {\r\n        var impl = fabric.util.getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createPNGStream();\r\n      };\r\n      fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\r\n        var impl = fabric.util.getNodeCanvas(this.lowerCanvasEl);\r\n        return impl && impl.createJPEGStream(opts);\r\n      };\r\n    }\r\n  })();\r\n\r\n\r\n  /**\r\n   * BaseBrush class\r\n   * @class fabric.BaseBrush\r\n   * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\r\n   */\r\n  fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\r\n\r\n    /**\r\n     * Color of a brush\r\n     * @type String\r\n     * @default\r\n     */\r\n    color: 'rgb(0, 0, 0)',\r\n\r\n    /**\r\n     * Width of a brush, has to be a Number, no string literals\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 1,\r\n\r\n    /**\r\n     * Shadow object representing shadow of this shape.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\r\n     * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */\r\n    shadow: null,\r\n\r\n    /**\r\n     * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineCap: 'round',\r\n\r\n    /**\r\n     * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineJoin: 'round',\r\n\r\n    /**\r\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeMiterLimit:         10,\r\n\r\n    /**\r\n     * Stroke Dash Array.\r\n     * @type Array\r\n     * @default\r\n     */\r\n    strokeDashArray: null,\r\n\r\n    /**\r\n     * Sets shadow of an object\r\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setShadow: function(options) {\r\n      this.shadow = new fabric.Shadow(options);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     * @private\r\n     */\r\n    _setBrushStyles: function() {\r\n      var ctx = this.canvas.contextTop;\r\n      ctx.strokeStyle = this.color;\r\n      ctx.lineWidth = this.width;\r\n      ctx.lineCap = this.strokeLineCap;\r\n      ctx.miterLimit = this.strokeMiterLimit;\r\n      ctx.lineJoin = this.strokeLineJoin;\r\n      if (fabric.StaticCanvas.supports('setLineDash')) {\r\n        ctx.setLineDash(this.strokeDashArray || []);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the transformation on given context\r\n     * @param {RenderingContext2d} ctx context to render on\r\n     * @private\r\n     */\r\n    _saveAndTransform: function(ctx) {\r\n      var v = this.canvas.viewportTransform;\r\n      ctx.save();\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n    },\r\n\r\n    /**\r\n     * Sets brush shadow styles\r\n     * @private\r\n     */\r\n    _setShadow: function() {\r\n      if (!this.shadow) {\r\n        return;\r\n      }\r\n\r\n      var ctx = this.canvas.contextTop,\r\n          zoom = this.canvas.getZoom();\r\n\r\n      ctx.shadowColor = this.shadow.color;\r\n      ctx.shadowBlur = this.shadow.blur * zoom;\r\n      ctx.shadowOffsetX = this.shadow.offsetX * zoom;\r\n      ctx.shadowOffsetY = this.shadow.offsetY * zoom;\r\n    },\r\n\r\n    /**\r\n     * Removes brush shadow styles\r\n     * @private\r\n     */\r\n    _resetShadow: function() {\r\n      var ctx = this.canvas.contextTop;\r\n\r\n      ctx.shadowColor = '';\r\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * PencilBrush class\r\n     * @class fabric.PencilBrush\r\n     * @extends fabric.BaseBrush\r\n     */\r\n    fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {fabric.Canvas} canvas\r\n       * @return {fabric.PencilBrush} Instance of a pencil brush\r\n       */\r\n      initialize: function(canvas) {\r\n        this.canvas = canvas;\r\n        this._points = [];\r\n      },\r\n\r\n      /**\r\n       * Invoked inside on mouse down and mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      _drawSegment: function (ctx, p1, p2) {\r\n        var midPoint = p1.midPointFrom(p2);\r\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\r\n        return midPoint;\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse down\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseDown: function(pointer) {\r\n        this._prepareForDrawing(pointer);\r\n        // capture coordinates immediately\r\n        // this allows to draw dots (when movement never occurs)\r\n        this._captureDrawingPath(pointer);\r\n        this._render();\r\n      },\r\n\r\n      /**\r\n       * Inovoked on mouse move\r\n       * @param {Object} pointer\r\n       */\r\n      onMouseMove: function(pointer) {\r\n        if (this._captureDrawingPath(pointer) && this._points.length > 1) {\r\n          if (this.needsFullRender) {\r\n            // redraw curve\r\n            // clear top canvas\r\n            this.canvas.clearContext(this.canvas.contextTop);\r\n            this._render();\r\n          }\r\n          else {\r\n            var points = this._points, length = points.length, ctx = this.canvas.contextTop;\r\n            // draw the curve update\r\n            this._saveAndTransform(ctx);\r\n            if (this.oldEnd) {\r\n              ctx.beginPath();\r\n              ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\r\n            }\r\n            this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invoked on mouse up\r\n       */\r\n      onMouseUp: function() {\r\n        this.oldEnd = undefined;\r\n        this._finalizeAndAddPath();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _prepareForDrawing: function(pointer) {\r\n\r\n        var p = new fabric.Point(pointer.x, pointer.y);\r\n\r\n        this._reset();\r\n        this._addPoint(p);\r\n        this.canvas.contextTop.moveTo(p.x, p.y);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Point} point Point to be added to points array\r\n       */\r\n      _addPoint: function(point) {\r\n        if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\r\n          return false;\r\n        }\r\n        this._points.push(point);\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Clear points array and set contextTop canvas style.\r\n       * @private\r\n       */\r\n      _reset: function() {\r\n        this._points.length = 0;\r\n        this._setBrushStyles();\r\n        var color = new fabric.Color(this.color);\r\n        this.needsFullRender = (color.getAlpha() < 1);\r\n        this._setShadow();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} pointer Actual mouse position related to the canvas.\r\n       */\r\n      _captureDrawingPath: function(pointer) {\r\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y);\r\n        return this._addPoint(pointerPoint);\r\n      },\r\n\r\n      /**\r\n       * Draw a smooth path on the topCanvas using quadraticCurveTo\r\n       * @private\r\n       */\r\n      _render: function() {\r\n        var ctx  = this.canvas.contextTop, i, len,\r\n            p1 = this._points[0],\r\n            p2 = this._points[1];\r\n\r\n        this._saveAndTransform(ctx);\r\n        ctx.beginPath();\r\n        //if we only have 2 points in the path and they are the same\r\n        //it means that the user only clicked the canvas without moving the mouse\r\n        //then we should be drawing a dot. A path isn't drawn between two identical dots\r\n        //that's why we set them apart a bit\r\n        if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\r\n          var width = this.width / 1000;\r\n          p1 = new fabric.Point(p1.x, p1.y);\r\n          p2 = new fabric.Point(p2.x, p2.y);\r\n          p1.x -= width;\r\n          p2.x += width;\r\n        }\r\n        ctx.moveTo(p1.x, p1.y);\r\n\r\n        for (i = 1, len = this._points.length; i < len; i++) {\r\n          // we pick the point between pi + 1 & pi + 2 as the\r\n          // end point and p1 as our control point.\r\n          this._drawSegment(ctx, p1, p2);\r\n          p1 = this._points[i];\r\n          p2 = this._points[i + 1];\r\n        }\r\n        // Draw last line as a straight line while\r\n        // we wait for the next point to be able to calculate\r\n        // the bezier control point\r\n        ctx.lineTo(p1.x, p1.y);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Converts points to SVG path\r\n       * @param {Array} points Array of points\r\n       * @return {String} SVG path\r\n       */\r\n      convertPointsToSVGPath: function(points) {\r\n        var path = [], i, width = this.width / 1000,\r\n            p1 = new fabric.Point(points[0].x, points[0].y),\r\n            p2 = new fabric.Point(points[1].x, points[1].y),\r\n            len = points.length, multSignX = 1, multSignY = 1, manyPoints = len > 2;\r\n\r\n        if (manyPoints) {\r\n          multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\r\n          multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\r\n        }\r\n        path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\r\n        for (i = 1; i < len; i++) {\r\n          if (!p1.eq(p2)) {\r\n            var midPoint = p1.midPointFrom(p2);\r\n            // p1 is our bezier control point\r\n            // midpoint is our endpoint\r\n            // start point is p(i-1) value.\r\n            path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\r\n          }\r\n          p1 = points[i];\r\n          if ((i + 1) < points.length) {\r\n            p2 = points[i + 1];\r\n          }\r\n        }\r\n        if (manyPoints) {\r\n          multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\r\n          multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\r\n        }\r\n        path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Creates fabric.Path object to add on canvas\r\n       * @param {String} pathData Path data\r\n       * @return {fabric.Path} Path to add on canvas\r\n       */\r\n      createPath: function(pathData) {\r\n        var path = new fabric.Path(pathData, {\r\n          fill: null,\r\n          stroke: this.color,\r\n          strokeWidth: this.width,\r\n          strokeLineCap: this.strokeLineCap,\r\n          strokeMiterLimit: this.strokeMiterLimit,\r\n          strokeLineJoin: this.strokeLineJoin,\r\n          strokeDashArray: this.strokeDashArray,\r\n        });\r\n        var position = new fabric.Point(path.left + path.width / 2, path.top + path.height / 2);\r\n        position = path.translateToGivenOrigin(position, 'center', 'center', path.originX, path.originY);\r\n        path.top = position.y;\r\n        path.left = position.x;\r\n        if (this.shadow) {\r\n          this.shadow.affectStroke = true;\r\n          path.setShadow(this.shadow);\r\n        }\r\n\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * On mouseup after drawing the path on contextTop canvas\r\n       * we use the points captured to create an new fabric path object\r\n       * and add it to the fabric canvas.\r\n       */\r\n      _finalizeAndAddPath: function() {\r\n        var ctx = this.canvas.contextTop;\r\n        ctx.closePath();\r\n\r\n        var pathData = this.convertPointsToSVGPath(this._points).join('');\r\n        if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\r\n          // do not create 0 width/height paths, as they are\r\n          // rendered inconsistently across browsers\r\n          // Firefox 4, for example, renders a dot,\r\n          // whereas Chrome 10 renders nothing\r\n          this.canvas.requestRenderAll();\r\n          return;\r\n        }\r\n\r\n        var path = this.createPath(pathData);\r\n        this.canvas.clearContext(this.canvas.contextTop);\r\n        this.canvas.add(path);\r\n        this.canvas.renderAll();\r\n        path.setCoords();\r\n        this._resetShadow();\r\n\r\n\r\n        // fire event 'path' created\r\n        this.canvas.fire('path:created', { path: path });\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  /**\r\n   * CircleBrush class\r\n   * @class fabric.CircleBrush\r\n   */\r\n  fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a brush\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width: 10,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.CircleBrush} Instance of a circle brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.points = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked inside on mouse down and mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    drawDot: function(pointer) {\r\n      var point = this.addPoint(pointer),\r\n          ctx = this.canvas.contextTop;\r\n      this._saveAndTransform(ctx);\r\n      ctx.fillStyle = point.fill;\r\n      ctx.beginPath();\r\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.points.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n      this.drawDot(pointer);\r\n    },\r\n\r\n    /**\r\n     * Render the full state of the brush\r\n     * @private\r\n     */\r\n    _render: function() {\r\n      var ctx  = this.canvas.contextTop, i, len,\r\n          points = this.points, point;\r\n      this._saveAndTransform(ctx);\r\n      for (i = 0, len = points.length; i < len; i++) {\r\n        point = points[i];\r\n        ctx.fillStyle = point.fill;\r\n        ctx.beginPath();\r\n        ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      this.drawDot(pointer);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var circles = [];\r\n\r\n      for (i = 0, len = this.points.length; i < len; i++) {\r\n        var point = this.points[i],\r\n            circle = new fabric.Circle({\r\n              radius: point.radius,\r\n              left: point.x,\r\n              top: point.y,\r\n              originX: 'center',\r\n              originY: 'center',\r\n              fill: point.fill\r\n            });\r\n\r\n        this.shadow && circle.setShadow(this.shadow);\r\n\r\n        circles.push(circle);\r\n      }\r\n      var group = new fabric.Group(circles);\r\n      group.canvas = this.canvas;\r\n\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     * @return {fabric.Point} Just added pointer point\r\n     */\r\n    addPoint: function(pointer) {\r\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y),\r\n\r\n          circleRadius = fabric.util.getRandomInt(\r\n            Math.max(0, this.width - 20), this.width + 20) / 2,\r\n\r\n          circleColor = new fabric.Color(this.color)\r\n            .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\r\n            .toRgba();\r\n\r\n      pointerPoint.radius = circleRadius;\r\n      pointerPoint.fill = circleColor;\r\n\r\n      this.points.push(pointerPoint);\r\n\r\n      return pointerPoint;\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * SprayBrush class\r\n   * @class fabric.SprayBrush\r\n   */\r\n  fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\r\n\r\n    /**\r\n     * Width of a spray\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width:              10,\r\n\r\n    /**\r\n     * Density of a spray (number of dots per chunk)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    density:            20,\r\n\r\n    /**\r\n     * Width of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidth:           1,\r\n\r\n    /**\r\n     * Width variance of spray dots\r\n     * @type Number\r\n     * @default\r\n     */\r\n    dotWidthVariance:   1,\r\n\r\n    /**\r\n     * Whether opacity of a dot should be random\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    randomOpacity:        false,\r\n\r\n    /**\r\n     * Whether overlapping dots (rectangles) should be removed (for performance reasons)\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    optimizeOverlapping:  true,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.SprayBrush} Instance of a spray brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this.sprayChunks = [];\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseDown: function(pointer) {\r\n      this.sprayChunks.length = 0;\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._setShadow();\r\n\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer) {\r\n      this.addSprayChunk(pointer);\r\n      this.render(this.sprayChunkPoints);\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function() {\r\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\r\n      this.canvas.renderOnAddRemove = false;\r\n\r\n      var rects = [];\r\n\r\n      for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        var sprayChunk = this.sprayChunks[i];\r\n\r\n        for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\r\n\r\n          var rect = new fabric.Rect({\r\n            width: sprayChunk[j].width,\r\n            height: sprayChunk[j].width,\r\n            left: sprayChunk[j].x + 1,\r\n            top: sprayChunk[j].y + 1,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            fill: this.color\r\n          });\r\n          rects.push(rect);\r\n        }\r\n      }\r\n\r\n      if (this.optimizeOverlapping) {\r\n        rects = this._getOptimizedRects(rects);\r\n      }\r\n\r\n      var group = new fabric.Group(rects);\r\n      this.shadow && group.setShadow(this.shadow);\r\n      this.canvas.add(group);\r\n      this.canvas.fire('path:created', { path: group });\r\n\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this._resetShadow();\r\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n      this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} rects\r\n     */\r\n    _getOptimizedRects: function(rects) {\r\n\r\n      // avoid creating duplicate rects at the same coordinates\r\n      var uniqueRects = { }, key, i, len;\r\n\r\n      for (i = 0, len = rects.length; i < len; i++) {\r\n        key = rects[i].left + '' + rects[i].top;\r\n        if (!uniqueRects[key]) {\r\n          uniqueRects[key] = rects[i];\r\n        }\r\n      }\r\n      var uniqueRectsArray = [];\r\n      for (key in uniqueRects) {\r\n        uniqueRectsArray.push(uniqueRects[key]);\r\n      }\r\n\r\n      return uniqueRectsArray;\r\n    },\r\n\r\n    /**\r\n     * Render new chunk of spray brush\r\n     */\r\n    render: function(sprayChunk) {\r\n      var ctx = this.canvas.contextTop, i, len;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, len = sprayChunk.length; i < len; i++) {\r\n        var point = sprayChunk[i];\r\n        if (typeof point.opacity !== 'undefined') {\r\n          ctx.globalAlpha = point.opacity;\r\n        }\r\n        ctx.fillRect(point.x, point.y, point.width, point.width);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Render all spray chunks\r\n     */\r\n    _render: function() {\r\n      var ctx = this.canvas.contextTop, i, ilen;\r\n      ctx.fillStyle = this.color;\r\n\r\n      this._saveAndTransform(ctx);\r\n\r\n      for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n        this.render(this.sprayChunks[i]);\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @param {Object} pointer\r\n     */\r\n    addSprayChunk: function(pointer) {\r\n      this.sprayChunkPoints = [];\r\n\r\n      var x, y, width, radius = this.width / 2, i;\r\n\r\n      for (i = 0; i < this.density; i++) {\r\n\r\n        x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\r\n        y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\r\n\r\n        if (this.dotWidthVariance) {\r\n          width = fabric.util.getRandomInt(\r\n            // bottom clamp width to 1\r\n            Math.max(1, this.dotWidth - this.dotWidthVariance),\r\n            this.dotWidth + this.dotWidthVariance);\r\n        }\r\n        else {\r\n          width = this.dotWidth;\r\n        }\r\n\r\n        var point = new fabric.Point(x, y);\r\n        point.width = width;\r\n\r\n        if (this.randomOpacity) {\r\n          point.opacity = fabric.util.getRandomInt(0, 100) / 100;\r\n        }\r\n\r\n        this.sprayChunkPoints.push(point);\r\n      }\r\n\r\n      this.sprayChunks.push(this.sprayChunkPoints);\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * PatternBrush class\r\n   * @class fabric.PatternBrush\r\n   * @extends fabric.BaseBrush\r\n   */\r\n  fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\r\n\r\n    getPatternSrc: function() {\r\n\r\n      var dotWidth = 20,\r\n          dotDistance = 5,\r\n          patternCanvas = fabric.util.createCanvasElement(),\r\n          patternCtx = patternCanvas.getContext('2d');\r\n\r\n      patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\r\n\r\n      patternCtx.fillStyle = this.color;\r\n      patternCtx.beginPath();\r\n      patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\r\n      patternCtx.closePath();\r\n      patternCtx.fill();\r\n\r\n      return patternCanvas;\r\n    },\r\n\r\n    getPatternSrcFunction: function() {\r\n      return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\r\n    },\r\n\r\n    /**\r\n     * Creates \"pattern\" instance property\r\n     */\r\n    getPattern: function() {\r\n      return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\r\n    },\r\n\r\n    /**\r\n     * Sets brush styles\r\n     */\r\n    _setBrushStyles: function() {\r\n      this.callSuper('_setBrushStyles');\r\n      this.canvas.contextTop.strokeStyle = this.getPattern();\r\n    },\r\n\r\n    /**\r\n     * Creates path\r\n     */\r\n    createPath: function(pathData) {\r\n      var path = this.callSuper('createPath', pathData),\r\n          topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\r\n\r\n      path.stroke = new fabric.Pattern({\r\n        source: this.source || this.getPatternSrcFunction(),\r\n        offsetX: -topLeft.x,\r\n        offsetY: -topLeft.y\r\n      });\r\n      return path;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    var getPointer = fabric.util.getPointer,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        radiansToDegrees = fabric.util.radiansToDegrees,\r\n        atan2 = Math.atan2,\r\n        abs = Math.abs,\r\n        supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n\r\n        STROKE_OFFSET = 0.5;\r\n\r\n    /**\r\n     * Canvas class\r\n     * @class fabric.Canvas\r\n     * @extends fabric.StaticCanvas\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\r\n     * @see {@link fabric.Canvas#initialize} for constructor definition\r\n     *\r\n     * @fires object:modified\r\n     * @fires object:rotated\r\n     * @fires object:scaled\r\n     * @fires object:moved\r\n     * @fires object:skewed\r\n     * @fires object:rotating\r\n     * @fires object:scaling\r\n     * @fires object:moving\r\n     * @fires object:skewing\r\n     * @fires object:selected this event is deprecated. use selection:created\r\n     *\r\n     * @fires before:transform\r\n     * @fires before:selection:cleared\r\n     * @fires selection:cleared\r\n     * @fires selection:updated\r\n     * @fires selection:created\r\n     *\r\n     * @fires path:created\r\n     * @fires mouse:down\r\n     * @fires mouse:move\r\n     * @fires mouse:up\r\n     * @fires mouse:down:before\r\n     * @fires mouse:move:before\r\n     * @fires mouse:up:before\r\n     * @fires mouse:over\r\n     * @fires mouse:out\r\n     * @fires mouse:dblclick\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     *\r\n     */\r\n    fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(el, options) {\r\n        options || (options = { });\r\n        this.renderAndResetBound = this.renderAndReset.bind(this);\r\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n        this._initStatic(el, options);\r\n        this._initInteractive();\r\n        this._createCacheCanvas();\r\n      },\r\n\r\n      /**\r\n       * When true, objects can be transformed by one side (unproportionally)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      uniScaleTransform:      false,\r\n\r\n      /**\r\n       * Indicates which key enable unproportional scaling\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      uniScaleKey:           'shiftKey',\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of scale transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:        false,\r\n\r\n      /**\r\n       * When true, objects use center point as the origin of rotate transformation.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:       false,\r\n\r\n      /**\r\n       * Indicates which key enable centered Transform\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      centeredKey:           'altKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternate action on corner\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled feature disabled.\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      altActionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates that canvas is interactive. This property should not be changed.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      interactive:            true,\r\n\r\n      /**\r\n       * Indicates whether group selection should be enabled\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selection:              true,\r\n\r\n      /**\r\n       * Indicates which key or keys enable multiple click selection\r\n       * Pass value as a string or array of strings\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * If `null` or empty or containing any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.2\r\n       * @type String|Array\r\n       * @default\r\n       */\r\n      selectionKey:           'shiftKey',\r\n\r\n      /**\r\n       * Indicates which key enable alternative selection\r\n       * in case of target overlapping with active object\r\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n       * For a series of reason that come from the general expectations on how\r\n       * things should work, this feature works only for preserveObjectStacking true.\r\n       * If `null` or 'none' or any other string that is not a modifier key\r\n       * feature is disabled.\r\n       * @since 1.6.5\r\n       * @type null|String\r\n       * @default\r\n       */\r\n      altSelectionKey:           null,\r\n\r\n      /**\r\n       * Color of selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\r\n\r\n      /**\r\n       * Default dash array pattern\r\n       * If not empty the selection border is dashed\r\n       * @type Array\r\n       */\r\n      selectionDashArray:     [],\r\n\r\n      /**\r\n       * Color of the border of selection (usually slightly darker than color of selection itself)\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\r\n\r\n      /**\r\n       * Width of a line used in object/group selection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionLineWidth:     1,\r\n\r\n      /**\r\n       * Select only shapes that are fully contained in the dragged selection rectangle.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectionFullyContained: false,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:            'move',\r\n\r\n      /**\r\n       * Default cursor value used when moving an object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:             'move',\r\n\r\n      /**\r\n       * Default cursor value used for the entire canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      defaultCursor:          'default',\r\n\r\n      /**\r\n       * Cursor value used during free drawing\r\n       * @type String\r\n       * @default\r\n       */\r\n      freeDrawingCursor:      'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for rotation point\r\n       * @type String\r\n       * @default\r\n       */\r\n      rotationCursor:         'crosshair',\r\n\r\n      /**\r\n       * Cursor value used for disabled elements ( corners with disabled action )\r\n       * @type String\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      notAllowedCursor:         'not-allowed',\r\n\r\n      /**\r\n       * Default element class that's given to wrapper (div) element of canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      containerClass:         'canvas-container',\r\n\r\n      /**\r\n       * When true, object detection happens on per-pixel basis rather than on per-bounding-box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:     false,\r\n\r\n      /**\r\n       * Number of pixels around target pixel to tolerate (consider active) during object detection\r\n       * @type Number\r\n       * @default\r\n       */\r\n      targetFindTolerance:    0,\r\n\r\n      /**\r\n       * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      skipTargetFind:         false,\r\n\r\n      /**\r\n       * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\r\n       * After mousedown, mousemove creates a shape,\r\n       * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\r\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isDrawingMode:          false,\r\n\r\n      /**\r\n       * Indicates whether objects should remain in current stack position when selected.\r\n       * When false objects are brought to top and rendered as part of the selection group\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      preserveObjectStacking: false,\r\n\r\n      /**\r\n       * Indicates the angle that an object will lock to while rotating.\r\n       * @type Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapAngle: 0,\r\n\r\n      /**\r\n       * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\r\n       * When `null`, the snapThreshold will default to the snapAngle.\r\n       * @type null|Number\r\n       * @since 1.6.7\r\n       * @default\r\n       */\r\n      snapThreshold: null,\r\n\r\n      /**\r\n       * Indicates if the right click on canvas can output the context menu or not\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      stopContextMenu: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire right click events\r\n       * @type Boolean\r\n       * @since 1.6.5\r\n       * @default\r\n       */\r\n      fireRightClick: false,\r\n\r\n      /**\r\n       * Indicates if the canvas can fire middle click events\r\n       * @type Boolean\r\n       * @since 1.7.8\r\n       * @default\r\n       */\r\n      fireMiddleClick: false,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initInteractive: function() {\r\n        this._currentTransform = null;\r\n        this._groupSelector = null;\r\n        this._initWrapperElement();\r\n        this._createUpperCanvas();\r\n        this._initEventListeners();\r\n\r\n        this._initRetinaScaling();\r\n\r\n        this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\r\n\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Divides objects in two groups, one to render immediately\r\n       * and one to render as activeGroup.\r\n       * @return {Array} objects to render immediately and pushes the other in the activeGroup.\r\n       */\r\n      _chooseObjectsToRender: function() {\r\n        var activeObjects = this.getActiveObjects(),\r\n            object, objsToRender, activeGroupObjects;\r\n\r\n        if (activeObjects.length > 0 && !this.preserveObjectStacking) {\r\n          objsToRender = [];\r\n          activeGroupObjects = [];\r\n          for (var i = 0, length = this._objects.length; i < length; i++) {\r\n            object = this._objects[i];\r\n            if (activeObjects.indexOf(object) === -1 ) {\r\n              objsToRender.push(object);\r\n            }\r\n            else {\r\n              activeGroupObjects.push(object);\r\n            }\r\n          }\r\n          if (activeObjects.length > 1) {\r\n            this._activeObject._objects = activeGroupObjects;\r\n          }\r\n          objsToRender.push.apply(objsToRender, activeGroupObjects);\r\n        }\r\n        else {\r\n          objsToRender = this._objects;\r\n        }\r\n        return objsToRender;\r\n      },\r\n\r\n      /**\r\n       * Renders both the top canvas and the secondary container canvas.\r\n       * @return {fabric.Canvas} instance\r\n       * @chainable\r\n       */\r\n      renderAll: function () {\r\n        if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\r\n          this.clearContext(this.contextTop);\r\n          this.contextTopDirty = false;\r\n        }\r\n        if (this.hasLostContext) {\r\n          this.renderTopLayer(this.contextTop);\r\n        }\r\n        var canvasToDrawOn = this.contextContainer;\r\n        this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\r\n        return this;\r\n      },\r\n\r\n      renderTopLayer: function(ctx) {\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this.freeDrawingBrush && this.freeDrawingBrush._render();\r\n        }\r\n        // we render the top context - last object\r\n        if (this.selection && this._groupSelector) {\r\n          this._drawSelection(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method to render only the top canvas.\r\n       * Also used to render the group selection box.\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      renderTop: function () {\r\n        var ctx = this.contextTop;\r\n        this.clearContext(ctx);\r\n        this.renderTopLayer(ctx);\r\n        this.fire('after:render');\r\n        this.contextTopDirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Resets the current transform to its original values and chooses the type of resizing based on the event\r\n       * @private\r\n       */\r\n      _resetCurrentTransform: function() {\r\n        var t = this._currentTransform;\r\n\r\n        t.target.set({\r\n          scaleX: t.original.scaleX,\r\n          scaleY: t.original.scaleY,\r\n          skewX: t.original.skewX,\r\n          skewY: t.original.skewY,\r\n          left: t.original.left,\r\n          top: t.original.top\r\n        });\r\n\r\n        if (this._shouldCenterTransform(t.target)) {\r\n          if (t.originX !== 'center') {\r\n            if (t.originX === 'right') {\r\n              t.mouseXSign = -1;\r\n            }\r\n            else {\r\n              t.mouseXSign = 1;\r\n            }\r\n          }\r\n          if (t.originY !== 'center') {\r\n            if (t.originY === 'bottom') {\r\n              t.mouseYSign = -1;\r\n            }\r\n            else {\r\n              t.mouseYSign = 1;\r\n            }\r\n          }\r\n\r\n          t.originX = 'center';\r\n          t.originY = 'center';\r\n        }\r\n        else {\r\n          t.originX = t.original.originX;\r\n          t.originY = t.original.originY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Checks if point is contained within an area of given object\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target Object to test against\r\n       * @param {Object} [point] x,y object of point coordinates we want to check.\r\n       * @return {Boolean} true if point is contained within an area of given object\r\n       */\r\n      containsPoint: function (e, target, point) {\r\n        var ignoreZoom = true,\r\n            pointer = point || this.getPointer(e, ignoreZoom),\r\n            xy;\r\n\r\n        if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\r\n          xy = this._normalizePointer(target.group, pointer);\r\n        }\r\n        else {\r\n          xy = { x: pointer.x, y: pointer.y };\r\n        }\r\n        // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\r\n        // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\r\n        return (target.containsPoint(xy) || target._findTargetCorner(pointer));\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _normalizePointer: function (object, pointer) {\r\n        var m = object.calcTransformMatrix(),\r\n            invertedM = fabric.util.invertTransform(m),\r\n            vptPointer = this.restorePointerVpt(pointer);\r\n        return fabric.util.transformPoint(vptPointer, invertedM);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object is transparent at a certain location\r\n       * @param {fabric.Object} target Object to check\r\n       * @param {Number} x Left coordinate\r\n       * @param {Number} y Top coordinate\r\n       * @return {Boolean}\r\n       */\r\n      isTargetTransparent: function (target, x, y) {\r\n        if (target.shouldCache() && target._cacheCanvas) {\r\n          var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\r\n              targetRelativeX = target.cacheTranslationX + (normalizedPointer.x * target.zoomX),\r\n              targetRelativeY = target.cacheTranslationY + (normalizedPointer.y * target.zoomY);\r\n\r\n          var isTransparent = fabric.util.isTransparent(\r\n            target._cacheContext, targetRelativeX, targetRelativeY, this.targetFindTolerance);\r\n\r\n          return isTransparent;\r\n        }\r\n\r\n        var ctx = this.contextCache,\r\n            originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\r\n\r\n        target.selectionBackgroundColor = '';\r\n\r\n        this.clearContext(ctx);\r\n\r\n        ctx.save();\r\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        target.render(ctx);\r\n        ctx.restore();\r\n\r\n        target === this._activeObject && target._renderControls(ctx, {\r\n          hasBorders: false,\r\n          transparentCorners: false\r\n        }, {\r\n          hasBorders: false,\r\n        });\r\n\r\n        target.selectionBackgroundColor = originalColor;\r\n\r\n        var isTransparent = fabric.util.isTransparent(\r\n          ctx, x, y, this.targetFindTolerance);\r\n\r\n        return isTransparent;\r\n      },\r\n\r\n      /**\r\n       * takes an event and determins if selection key has been pressed\r\n       * @private\r\n       * @param {Event} e Event object\r\n       */\r\n      _isSelectionKeyPressed: function(e) {\r\n        var selectionKeyPressed = false;\r\n\r\n        if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\r\n          selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\r\n        }\r\n        else {\r\n          selectionKeyPressed = e[this.selectionKey];\r\n        }\r\n\r\n        return selectionKeyPressed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldClearSelection: function (e, target) {\r\n        var activeObjects = this.getActiveObjects(),\r\n            activeObject = this._activeObject;\r\n\r\n        return (\r\n          !target\r\n          ||\r\n          (target &&\r\n            activeObject &&\r\n            activeObjects.length > 1 &&\r\n            activeObjects.indexOf(target) === -1 &&\r\n            activeObject !== target &&\r\n            !this._isSelectionKeyPressed(e))\r\n          ||\r\n          (target && !target.evented)\r\n          ||\r\n          (target &&\r\n            !target.selectable &&\r\n            activeObject &&\r\n            activeObject !== target)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * centeredScaling from object can't override centeredScaling from canvas.\r\n       * this should be fixed, since object setting should take precedence over canvas.\r\n       * @private\r\n       * @param {fabric.Object} target\r\n       */\r\n      _shouldCenterTransform: function (target) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var t = this._currentTransform,\r\n            centerTransform;\r\n\r\n        if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\r\n          centerTransform = this.centeredScaling || target.centeredScaling;\r\n        }\r\n        else if (t.action === 'rotate') {\r\n          centerTransform = this.centeredRotation || target.centeredRotation;\r\n        }\r\n\r\n        return centerTransform ? !t.altKey : t.altKey;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getOriginFromCorner: function(target, corner) {\r\n        var origin = {\r\n          x: target.originX,\r\n          y: target.originY\r\n        };\r\n\r\n        if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\r\n          origin.x = 'right';\r\n        }\r\n        else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\r\n          origin.x = 'left';\r\n        }\r\n\r\n        if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\r\n          origin.y = 'bottom';\r\n        }\r\n        else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\r\n          origin.y = 'top';\r\n        }\r\n\r\n        return origin;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getActionFromCorner: function(target, corner, e) {\r\n        if (!corner) {\r\n          return 'drag';\r\n        }\r\n\r\n        switch (corner) {\r\n          case 'mtr':\r\n            return 'rotate';\r\n          case 'ml':\r\n          case 'mr':\r\n            return e[this.altActionKey] ? 'skewY' : 'scaleX';\r\n          case 'mt':\r\n          case 'mb':\r\n            return e[this.altActionKey] ? 'skewX' : 'scaleY';\r\n          default:\r\n            return 'scale';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _setupCurrentTransform: function (e, target) {\r\n        if (!target) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this.getPointer(e),\r\n            corner = target._findTargetCorner(this.getPointer(e, true)),\r\n            action = this._getActionFromCorner(target, corner, e),\r\n            origin = this._getOriginFromCorner(target, corner);\r\n\r\n        this._currentTransform = {\r\n          target: target,\r\n          action: action,\r\n          corner: corner,\r\n          scaleX: target.scaleX,\r\n          scaleY: target.scaleY,\r\n          skewX: target.skewX,\r\n          skewY: target.skewY,\r\n          // used by transation\r\n          offsetX: pointer.x - target.left,\r\n          offsetY: pointer.y - target.top,\r\n          originX: origin.x,\r\n          originY: origin.y,\r\n          ex: pointer.x,\r\n          ey: pointer.y,\r\n          lastX: pointer.x,\r\n          lastY: pointer.y,\r\n          // unsure they are usefull anymore.\r\n          // left: target.left,\r\n          // top: target.top,\r\n          theta: degreesToRadians(target.angle),\r\n          // end of unsure\r\n          width: target.width * target.scaleX,\r\n          mouseXSign: 1,\r\n          mouseYSign: 1,\r\n          shiftKey: e.shiftKey,\r\n          altKey: e[this.centeredKey],\r\n          original: fabric.util.saveObjectTransform(target),\r\n        };\r\n\r\n        this._currentTransform.original.originX = origin.x;\r\n        this._currentTransform.original.originY = origin.y;\r\n\r\n        this._resetCurrentTransform();\r\n        this._beforeTransform(e);\r\n      },\r\n\r\n      /**\r\n       * Translates object by \"setting\" its left/top\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the translation occurred\r\n       */\r\n      _translateObject: function (x, y) {\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            newLeft = x - transform.offsetX,\r\n            newTop = y - transform.offsetY,\r\n            moveX = !target.get('lockMovementX') && target.left !== newLeft,\r\n            moveY = !target.get('lockMovementY') && target.top !== newTop;\r\n\r\n        moveX && target.set('left', newLeft);\r\n        moveY && target.set('top', newTop);\r\n        return moveX || moveY;\r\n      },\r\n\r\n      /**\r\n       * Check if we are increasing a positive skew or lower it,\r\n       * checking mouse direction and pressed corner.\r\n       * @private\r\n       */\r\n      _changeSkewTransformOrigin: function(mouseMove, t, by) {\r\n        var property = 'originX', origins = { 0: 'center' },\r\n            skew = t.target.skewX, originA = 'left', originB = 'right',\r\n            corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\r\n            flipSign = 1;\r\n\r\n        mouseMove = mouseMove > 0 ? 1 : -1;\r\n        if (by === 'y') {\r\n          skew = t.target.skewY;\r\n          originA = 'top';\r\n          originB = 'bottom';\r\n          property = 'originY';\r\n        }\r\n        origins[-1] = originA;\r\n        origins[1] = originB;\r\n\r\n        t.target.flipX && (flipSign *= -1);\r\n        t.target.flipY && (flipSign *= -1);\r\n\r\n        if (skew === 0) {\r\n          t.skewSign = -corner * mouseMove * flipSign;\r\n          t[property] = origins[-mouseMove];\r\n        }\r\n        else {\r\n          skew = skew > 0 ? 1 : -1;\r\n          t.skewSign = skew;\r\n          t[property] = origins[skew * corner * flipSign];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Skew object by mouse events\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y'\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _skewObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target, skewed = false,\r\n            lockSkewingX = target.get('lockSkewingX'),\r\n            lockSkewingY = target.get('lockSkewingY');\r\n\r\n        if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var center = target.getCenterPoint(),\r\n            actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\r\n            lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\r\n            actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\r\n\r\n        this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\r\n        actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\r\n        constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\r\n        // Actually skew the object\r\n        skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\r\n        t.lastX = x;\r\n        t.lastY = y;\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Set object skew\r\n       * @private\r\n       * @return {Boolean} true if the skewing occurred\r\n       */\r\n      _setObjectSkew: function(localMouse, transform, by, _dim) {\r\n        var target = transform.target, newValue, skewed = false,\r\n            skewSign = transform.skewSign, newDim, dimNoSkew,\r\n            otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\r\n\r\n        if (by === 'x') {\r\n          otherBy = 'y';\r\n          _otherBy = 'Y';\r\n          _by = 'X';\r\n          skewX = 0;\r\n          skewY = target.skewY;\r\n        }\r\n        else {\r\n          otherBy = 'x';\r\n          _otherBy = 'X';\r\n          _by = 'Y';\r\n          skewX = target.skewX;\r\n          skewY = 0;\r\n        }\r\n\r\n        dimNoSkew = target._getTransformedDimensions(skewX, skewY);\r\n        newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\r\n        if (newDimMouse <= 2) {\r\n          newValue = 0;\r\n        }\r\n        else {\r\n          newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\r\n                                          (dimNoSkew[otherBy] / target['scale' + _otherBy]));\r\n          newValue = fabric.util.radiansToDegrees(newValue);\r\n        }\r\n        skewed = target['skew' + _by] !== newValue;\r\n        target.set('skew' + _by, newValue);\r\n        if (target['skew' + _otherBy] !== 0) {\r\n          newDim = target._getTransformedDimensions();\r\n          newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\r\n          target.set('scale' + _otherBy, newValue);\r\n        }\r\n        return skewed;\r\n      },\r\n\r\n      /**\r\n       * Scales object by invoking its scaleX/scaleY methods\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\r\n       *                    When not provided, an object is scaled by both dimensions equally\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObject: function (x, y, by) {\r\n        var t = this._currentTransform,\r\n            target = t.target,\r\n            lockScalingX = target.lockScalingX,\r\n            lockScalingY = target.lockScalingY,\r\n            lockScalingFlip = target.lockScalingFlip;\r\n\r\n        if (lockScalingX && lockScalingY) {\r\n          return false;\r\n        }\r\n\r\n        // Get the constraint point\r\n        var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\r\n            localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\r\n            dim = target._getTransformedDimensions(), scaled = false;\r\n\r\n        this._setLocalMouse(localMouse, t);\r\n\r\n        // Actually scale the object\r\n        scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\r\n\r\n        // Make sure the constraints apply\r\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\r\n        var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\r\n            changeX, changeY, scaleX, scaleY;\r\n\r\n        scaleX = localMouse.x * target.scaleX / _dim.x;\r\n        scaleY = localMouse.y * target.scaleY / _dim.y;\r\n        changeX = target.scaleX !== scaleX;\r\n        changeY = target.scaleY !== scaleY;\r\n\r\n        if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\r\n          forbidScalingX = true;\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\r\n          forbidScalingY = true;\r\n          localMouse.y = 0;\r\n        }\r\n\r\n        if (by === 'equally' && !lockScalingX && !lockScalingY) {\r\n          scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\r\n        }\r\n        else if (!by) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\r\n        }\r\n        else if (by === 'x' && !target.get('lockUniScaling')) {\r\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\r\n        }\r\n        else if (by === 'y' && !target.get('lockUniScaling')) {\r\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\r\n        }\r\n        transform.newScaleX = scaleX;\r\n        transform.newScaleY = scaleY;\r\n        forbidScalingX || forbidScalingY || this._flipObject(transform, by);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _scaleObjectEqually: function(localMouse, target, transform, _dim) {\r\n\r\n        var dist = localMouse.y + localMouse.x,\r\n            lastDist = _dim.y * transform.original.scaleY / target.scaleY +\r\n                       _dim.x * transform.original.scaleX / target.scaleX,\r\n            scaled, signX = localMouse.x < 0 ? -1 : 1,\r\n            signY = localMouse.y < 0 ? -1 : 1;\r\n\r\n        // We use transform.scaleX/Y instead of target.scaleX/Y\r\n        // because the object may have a min scale and we'll loose the proportions\r\n        transform.newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\r\n        transform.newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\r\n        scaled = transform.newScaleX !== target.scaleX || transform.newScaleY !== target.scaleY;\r\n        target.set('scaleX', transform.newScaleX);\r\n        target.set('scaleY', transform.newScaleY);\r\n        return scaled;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _flipObject: function(transform, by) {\r\n        if (transform.newScaleX < 0 && by !== 'y') {\r\n          if (transform.originX === 'left') {\r\n            transform.originX = 'right';\r\n          }\r\n          else if (transform.originX === 'right') {\r\n            transform.originX = 'left';\r\n          }\r\n        }\r\n\r\n        if (transform.newScaleY < 0 && by !== 'x') {\r\n          if (transform.originY === 'top') {\r\n            transform.originY = 'bottom';\r\n          }\r\n          else if (transform.originY === 'bottom') {\r\n            transform.originY = 'top';\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setLocalMouse: function(localMouse, t) {\r\n        var target = t.target, zoom = this.getZoom(),\r\n            padding = target.padding / zoom;\r\n\r\n        if (t.originX === 'right') {\r\n          localMouse.x *= -1;\r\n        }\r\n        else if (t.originX === 'center') {\r\n          localMouse.x *= t.mouseXSign * 2;\r\n          if (localMouse.x < 0) {\r\n            t.mouseXSign = -t.mouseXSign;\r\n          }\r\n        }\r\n\r\n        if (t.originY === 'bottom') {\r\n          localMouse.y *= -1;\r\n        }\r\n        else if (t.originY === 'center') {\r\n          localMouse.y *= t.mouseYSign * 2;\r\n          if (localMouse.y < 0) {\r\n            t.mouseYSign = -t.mouseYSign;\r\n          }\r\n        }\r\n\r\n        // adjust the mouse coordinates when dealing with padding\r\n        if (abs(localMouse.x) > padding) {\r\n          if (localMouse.x < 0) {\r\n            localMouse.x += padding;\r\n          }\r\n          else {\r\n            localMouse.x -= padding;\r\n          }\r\n        }\r\n        else { // mouse is within the padding, set to 0\r\n          localMouse.x = 0;\r\n        }\r\n\r\n        if (abs(localMouse.y) > padding) {\r\n          if (localMouse.y < 0) {\r\n            localMouse.y += padding;\r\n          }\r\n          else {\r\n            localMouse.y -= padding;\r\n          }\r\n        }\r\n        else {\r\n          localMouse.y = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Rotates object by invoking its rotate method\r\n       * @private\r\n       * @param {Number} x pointer's x coordinate\r\n       * @param {Number} y pointer's y coordinate\r\n       * @return {Boolean} true if the rotation occurred\r\n       */\r\n      _rotateObject: function (x, y) {\r\n\r\n        var t = this._currentTransform,\r\n            target = t.target, constraintPosition,\r\n            constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\r\n\r\n        if (target.lockRotation) {\r\n          return false;\r\n        }\r\n\r\n        var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\r\n            curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\r\n            angle = radiansToDegrees(curAngle - lastAngle + t.theta),\r\n            hasRotated = true;\r\n\r\n        if (target.snapAngle > 0) {\r\n          var snapAngle  = target.snapAngle,\r\n              snapThreshold  = target.snapThreshold || snapAngle,\r\n              rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\r\n              leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\r\n\r\n          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\r\n            angle = leftAngleLocked;\r\n          }\r\n          else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\r\n            angle = rightAngleLocked;\r\n          }\r\n        }\r\n\r\n        // normalize angle to positive value\r\n        if (angle < 0) {\r\n          angle = 360 + angle;\r\n        }\r\n        angle %= 360;\r\n\r\n        if (target.angle === angle) {\r\n          hasRotated = false;\r\n        }\r\n        else {\r\n          // rotation only happen here\r\n          target.angle = angle;\r\n          // Make sure the constraints apply\r\n          target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\r\n        }\r\n\r\n        return hasRotated;\r\n      },\r\n\r\n      /**\r\n       * Set the cursor type of the canvas element\r\n       * @param {String} value Cursor type of the canvas element.\r\n       * @see http://www.w3.org/TR/css3-ui/#cursor\r\n       */\r\n      setCursor: function (value) {\r\n        this.upperCanvasEl.style.cursor = value;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx to draw the selection on\r\n       */\r\n      _drawSelection: function (ctx) {\r\n        var groupSelector = this._groupSelector,\r\n            left = groupSelector.left,\r\n            top = groupSelector.top,\r\n            aleft = abs(left),\r\n            atop = abs(top);\r\n\r\n        if (this.selectionColor) {\r\n          ctx.fillStyle = this.selectionColor;\r\n\r\n          ctx.fillRect(\r\n            groupSelector.ex - ((left > 0) ? 0 : -left),\r\n            groupSelector.ey - ((top > 0) ? 0 : -top),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n\r\n        if (!this.selectionLineWidth || !this.selectionBorderColor) {\r\n          return;\r\n        }\r\n        ctx.lineWidth = this.selectionLineWidth;\r\n        ctx.strokeStyle = this.selectionBorderColor;\r\n\r\n        // selection border\r\n        if (this.selectionDashArray.length > 1 && !supportLineDash) {\r\n\r\n          var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n              py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\r\n\r\n          ctx.beginPath();\r\n\r\n          fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\r\n          fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\r\n\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        }\r\n        else {\r\n          fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\r\n          ctx.strokeRect(\r\n            groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\r\n            groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\r\n            aleft,\r\n            atop\r\n          );\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that determines what object we are clicking on\r\n       * the skipGroup parameter is for internal use, is needed for shift+click action\r\n       * @param {Event} e mouse event\r\n       * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\r\n       */\r\n      findTarget: function (e, skipGroup) {\r\n        if (this.skipTargetFind) {\r\n          return;\r\n        }\r\n\r\n        var ignoreZoom = true,\r\n            pointer = this.getPointer(e, ignoreZoom),\r\n            activeObject = this._activeObject,\r\n            aObjects = this.getActiveObjects(),\r\n            activeTarget, activeTargetSubs;\r\n\r\n        // first check current group (if one exists)\r\n        // active group does not check sub targets like normal groups.\r\n        // if active group just exits.\r\n        this.targets = [];\r\n\r\n        if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          return activeObject;\r\n        }\r\n        // if we hit the corner of an activeObject, let's return that.\r\n        if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\r\n          return activeObject;\r\n        }\r\n        if (aObjects.length === 1 &&\r\n          activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n          if (!this.preserveObjectStacking) {\r\n            return activeObject;\r\n          }\r\n          else {\r\n            activeTarget = activeObject;\r\n            activeTargetSubs = this.targets;\r\n            this.targets = [];\r\n          }\r\n        }\r\n        var target = this._searchPossibleTargets(this._objects, pointer);\r\n        if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\r\n          target = activeTarget;\r\n          this.targets = activeTargetSubs;\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _checkTarget: function(pointer, obj) {\r\n        if (obj &&\r\n            obj.visible &&\r\n            obj.evented &&\r\n            this.containsPoint(null, obj, pointer)){\r\n          if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\r\n            var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\r\n            if (!isTransparent) {\r\n              return true;\r\n            }\r\n          }\r\n          else {\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _searchPossibleTargets: function(objects, pointer) {\r\n\r\n        // Cache all targets where their bounding box contains point.\r\n        var target, i = objects.length, normalizedPointer, subTarget;\r\n        // Do not check for currently grouped objects, since we check the parent group itself.\r\n        // until we call this function specifically to search inside the activeGroup\r\n        while (i--) {\r\n          if (this._checkTarget(pointer, objects[i])) {\r\n            target = objects[i];\r\n            if (target.subTargetCheck && target instanceof fabric.Group) {\r\n              normalizedPointer = this._normalizePointer(target, pointer);\r\n              subTarget = this._searchPossibleTargets(target._objects, normalizedPointer);\r\n              subTarget && this.targets.push(subTarget);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates without the effect of the viewport\r\n       * @param {Object} pointer with \"x\" and \"y\" number values\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      restorePointerVpt: function(pointer) {\r\n        return fabric.util.transformPoint(\r\n          pointer,\r\n          fabric.util.invertTransform(this.viewportTransform)\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Returns pointer coordinates relative to canvas.\r\n       * Can return coordinates with or without viewportTransform.\r\n       * ignoreZoom false gives back coordinates that represent\r\n       * the point clicked on canvas element.\r\n       * ignoreZoom true gives back coordinates after being processed\r\n       * by the viewportTransform ( sort of coordinates of what is displayed\r\n       * on the canvas where you are clicking.\r\n       * ignoreZoom true = HTMLElement coordinates relative to top,left\r\n       * ignoreZoom false, default = fabric space coordinates, the same used for shape position\r\n       * To interact with your shapes top and left you want to use ignoreZoom true\r\n       * most of the time, while ignoreZoom false will give you coordinates\r\n       * compatible with the object.oCoords system.\r\n       * of the time.\r\n       * @param {Event} e\r\n       * @param {Boolean} ignoreZoom\r\n       * @return {Object} object with \"x\" and \"y\" number values\r\n       */\r\n      getPointer: function (e, ignoreZoom) {\r\n        // return cached values if we are in the event processing chain\r\n        if (this._absolutePointer && !ignoreZoom) {\r\n          return this._absolutePointer;\r\n        }\r\n        if (this._pointer && ignoreZoom) {\r\n          return this._pointer;\r\n        }\r\n\r\n        var pointer = getPointer(e),\r\n            upperCanvasEl = this.upperCanvasEl,\r\n            bounds = upperCanvasEl.getBoundingClientRect(),\r\n            boundsWidth = bounds.width || 0,\r\n            boundsHeight = bounds.height || 0,\r\n            cssScale;\r\n\r\n        if (!boundsWidth || !boundsHeight ) {\r\n          if ('top' in bounds && 'bottom' in bounds) {\r\n            boundsHeight = Math.abs( bounds.top - bounds.bottom );\r\n          }\r\n          if ('right' in bounds && 'left' in bounds) {\r\n            boundsWidth = Math.abs( bounds.right - bounds.left );\r\n          }\r\n        }\r\n\r\n        this.calcOffset();\r\n        pointer.x = pointer.x - this._offset.left;\r\n        pointer.y = pointer.y - this._offset.top;\r\n        if (!ignoreZoom) {\r\n          pointer = this.restorePointerVpt(pointer);\r\n        }\r\n\r\n        if (boundsWidth === 0 || boundsHeight === 0) {\r\n          // If bounds are not available (i.e. not visible), do not apply scale.\r\n          cssScale = { width: 1, height: 1 };\r\n        }\r\n        else {\r\n          cssScale = {\r\n            width: upperCanvasEl.width / boundsWidth,\r\n            height: upperCanvasEl.height / boundsHeight\r\n          };\r\n        }\r\n\r\n        return {\r\n          x: pointer.x * cssScale.width,\r\n          y: pointer.y * cssScale.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\r\n       */\r\n      _createUpperCanvas: function () {\r\n        var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\r\n\r\n        // there is no need to create a new upperCanvas element if we have already one.\r\n        if (this.upperCanvasEl) {\r\n          this.upperCanvasEl.className = '';\r\n        }\r\n        else {\r\n          this.upperCanvasEl = this._createCanvasElement();\r\n        }\r\n        fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\r\n\r\n        this.wrapperEl.appendChild(this.upperCanvasEl);\r\n\r\n        this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\r\n        this._applyCanvasStyle(this.upperCanvasEl);\r\n        this.contextTop = this.upperCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function () {\r\n        this.cacheCanvasEl = this._createCanvasElement();\r\n        this.cacheCanvasEl.setAttribute('width', this.width);\r\n        this.cacheCanvasEl.setAttribute('height', this.height);\r\n        this.contextCache = this.cacheCanvasEl.getContext('2d');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _initWrapperElement: function () {\r\n        this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\r\n          'class': this.containerClass\r\n        });\r\n        fabric.util.setStyle(this.wrapperEl, {\r\n          width: this.width + 'px',\r\n          height: this.height + 'px',\r\n          position: 'relative'\r\n        });\r\n        fabric.util.makeElementUnselectable(this.wrapperEl);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {HTMLElement} element canvas element to apply styles on\r\n       */\r\n      _applyCanvasStyle: function (element) {\r\n        var width = this.width || element.width,\r\n            height = this.height || element.height;\r\n\r\n        fabric.util.setStyle(element, {\r\n          position: 'absolute',\r\n          width: width + 'px',\r\n          height: height + 'px',\r\n          left: 0,\r\n          top: 0,\r\n          'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\r\n        });\r\n        element.width = width;\r\n        element.height = height;\r\n        fabric.util.makeElementUnselectable(element);\r\n      },\r\n\r\n      /**\r\n       * Copy the entire inline style from one element (fromEl) to another (toEl)\r\n       * @private\r\n       * @param {Element} fromEl Element style is copied from\r\n       * @param {Element} toEl Element copied style is applied to\r\n       */\r\n      _copyCanvasStyle: function (fromEl, toEl) {\r\n        toEl.style.cssText = fromEl.style.cssText;\r\n      },\r\n\r\n      /**\r\n       * Returns context of canvas where object selection is drawn\r\n       * @return {CanvasRenderingContext2D}\r\n       */\r\n      getSelectionContext: function() {\r\n        return this.contextTop;\r\n      },\r\n\r\n      /**\r\n       * Returns &lt;canvas> element on which object selection is drawn\r\n       * @return {HTMLCanvasElement}\r\n       */\r\n      getSelectionElement: function () {\r\n        return this.upperCanvasEl;\r\n      },\r\n\r\n      /**\r\n       * Returns currently active object\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObject: function () {\r\n        return this._activeObject;\r\n      },\r\n\r\n      /**\r\n       * Returns an array with the current selected objects\r\n       * @return {fabric.Object} active object\r\n       */\r\n      getActiveObjects: function () {\r\n        var active = this._activeObject;\r\n        if (active) {\r\n          if (active.type === 'activeSelection' && active._objects) {\r\n            return active._objects.slice(0);\r\n          }\r\n          else {\r\n            return [active];\r\n          }\r\n        }\r\n        return [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {fabric.Object} obj Object that was removed\r\n       */\r\n      _onObjectRemoved: function(obj) {\r\n        // removing active object should fire \"selection:cleared\" events\r\n        if (obj === this._activeObject) {\r\n          this.fire('before:selection:cleared', { target: obj });\r\n          this._discardActiveObject();\r\n          this.fire('selection:cleared', { target: obj });\r\n          obj.fire('deselected');\r\n        }\r\n        if (this._hoveredTarget === obj) {\r\n          this._hoveredTarget = null;\r\n        }\r\n        this.callSuper('_onObjectRemoved', obj);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Compares the old activeObject with the current one and fires correct events\r\n       * @param {fabric.Object} obj old activeObject\r\n       */\r\n      _fireSelectionEvents: function(oldObjects, e) {\r\n        var somethingChanged = false, objects = this.getActiveObjects(),\r\n            added = [], removed = [], opt = { e: e };\r\n        oldObjects.forEach(function(oldObject) {\r\n          if (objects.indexOf(oldObject) === -1) {\r\n            somethingChanged = true;\r\n            oldObject.fire('deselected', opt);\r\n            removed.push(oldObject);\r\n          }\r\n        });\r\n        objects.forEach(function(object) {\r\n          if (oldObjects.indexOf(object) === -1) {\r\n            somethingChanged = true;\r\n            object.fire('selected', opt);\r\n            added.push(object);\r\n          }\r\n        });\r\n        if (oldObjects.length > 0 && objects.length > 0) {\r\n          opt.selected = added;\r\n          opt.deselected = removed;\r\n          // added for backward compatibility\r\n          opt.updated = added[0] || removed[0];\r\n          opt.target = this._activeObject;\r\n          somethingChanged && this.fire('selection:updated', opt);\r\n        }\r\n        else if (objects.length > 0) {\r\n          // deprecated event\r\n          if (objects.length === 1) {\r\n            opt.target = added[0];\r\n            this.fire('object:selected', opt);\r\n          }\r\n          opt.selected = added;\r\n          // added for backward compatibility\r\n          opt.target = this._activeObject;\r\n          this.fire('selection:created', opt);\r\n        }\r\n        else if (oldObjects.length > 0) {\r\n          opt.deselected = removed;\r\n          this.fire('selection:cleared', opt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets given object as the only active object on canvas\r\n       * @param {fabric.Object} object Object to set as an active one\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      setActiveObject: function (object, e) {\r\n        var currentActives = this.getActiveObjects();\r\n        this._setActiveObject(object, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object to set as active\r\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n       * @return {Boolean} true if the selection happened\r\n       */\r\n      _setActiveObject: function(object, e) {\r\n        if (this._activeObject === object) {\r\n          return false;\r\n        }\r\n        if (!this._discardActiveObject(e, object)) {\r\n          return false;\r\n        }\r\n        if (object.onSelect({ e: e })) {\r\n          return false;\r\n        }\r\n        this._activeObject = object;\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _discardActiveObject: function(e, object) {\r\n        var obj = this._activeObject;\r\n        if (obj) {\r\n          // onDeselect return TRUE to cancel selection;\r\n          if (obj.onDeselect({ e: e, object: object })) {\r\n            return false;\r\n          }\r\n          this._activeObject = null;\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Discards currently active object and fire events. If the function is called by fabric\r\n       * as a consequence of a mouse event, the event is passed as a parameter and\r\n       * sent to the fire function for the custom events. When used as a method the\r\n       * e param does not have any application.\r\n       * @param {event} e\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      discardActiveObject: function (e) {\r\n        var currentActives = this.getActiveObjects();\r\n        if (currentActives.length) {\r\n          this.fire('before:selection:cleared', { target: currentActives[0], e: e });\r\n        }\r\n        this._discardActiveObject(e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears a canvas element and removes all event listeners\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      dispose: function () {\r\n        var wrapper = this.wrapperEl;\r\n        this.removeListeners();\r\n        wrapper.removeChild(this.upperCanvasEl);\r\n        wrapper.removeChild(this.lowerCanvasEl);\r\n        this.contextCache = null;\r\n        this.contextTop = null;\r\n        ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n        if (wrapper.parentNode) {\r\n          wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\r\n        }\r\n        delete this.wrapperEl;\r\n        fabric.StaticCanvas.prototype.dispose.call(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Clears all contexts (background, main, top) of an instance\r\n       * @return {fabric.Canvas} thisArg\r\n       * @chainable\r\n       */\r\n      clear: function () {\r\n        // this.discardActiveGroup();\r\n        this.discardActiveObject();\r\n        this.clearContext(this.contextTop);\r\n        return this.callSuper('clear');\r\n      },\r\n\r\n      /**\r\n       * Draws objects' controls (borders/controls)\r\n       * @param {CanvasRenderingContext2D} ctx Context to render controls on\r\n       */\r\n      drawControls: function(ctx) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (activeObject) {\r\n          activeObject._renderControls(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _toObject: function(instance, methodName, propertiesToInclude) {\r\n        //If the object is part of the current selection group, it should\r\n        //be transformed appropriately\r\n        //i.e. it should be serialised as it would appear if the selection group\r\n        //were to be destroyed.\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance),\r\n            object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\r\n        //Undo the damage we did by changing all of its properties\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Realises an object's group transformation on it\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to transform (gets mutated)\r\n       * @returns the original values of instance which were changed\r\n       */\r\n      _realizeGroupTransformOnObject: function(instance) {\r\n        if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\r\n          var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\r\n          //Copy all the positionally relevant properties across now\r\n          var originalValues = {};\r\n          layoutProps.forEach(function(prop) {\r\n            originalValues[prop] = instance[prop];\r\n          });\r\n          this._activeObject.realizeTransform(instance);\r\n          return originalValues;\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Restores the changed properties of instance\r\n       * @private\r\n       * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\r\n       * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\r\n       */\r\n      _unwindGroupTransformOnObject: function(instance, originalValues) {\r\n        if (originalValues) {\r\n          instance.set(originalValues);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setSVGObject: function(markup, instance, reviver) {\r\n        //If the object is in a selection group, simulate what would happen to that\r\n        //object when the group is deselected\r\n        var originalProperties = this._realizeGroupTransformOnObject(instance);\r\n        this.callSuper('_setSVGObject', markup, instance, reviver);\r\n        this._unwindGroupTransformOnObject(instance, originalProperties);\r\n      },\r\n\r\n      setViewportTransform: function (vpt) {\r\n        if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\r\n          this._activeObject.clearContextTop();\r\n        }\r\n        fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\r\n      }\r\n    });\r\n\r\n    // copying static properties manually to work around Opera's bug,\r\n    // where \"prototype\" property is enumerable and overrides existing prototype\r\n    for (var prop in fabric.StaticCanvas) {\r\n      if (prop !== 'prototype') {\r\n        fabric.Canvas[prop] = fabric.StaticCanvas[prop];\r\n      }\r\n    }\r\n\r\n    if (fabric.isTouchSupported) {\r\n      /** @ignore */\r\n      fabric.Canvas.prototype._setCursorFromEvent = function() { };\r\n    }\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var cursorOffset = {\r\n          mt: 0, // n\r\n          tr: 1, // ne\r\n          mr: 2, // e\r\n          br: 3, // se\r\n          mb: 4, // s\r\n          bl: 5, // sw\r\n          ml: 6, // w\r\n          tl: 7 // nw\r\n        },\r\n        addListener = fabric.util.addListener,\r\n        removeListener = fabric.util.removeListener,\r\n        RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\r\n        addEventOptions = { passive: false };\r\n\r\n    function checkClick(e, value) {\r\n      return 'which' in e ? e.which === value : e.button === value - 1;\r\n    }\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * Map of cursor style values for each of the object controls\r\n       * @private\r\n       */\r\n      cursorMap: [\r\n        'n-resize',\r\n        'ne-resize',\r\n        'e-resize',\r\n        'se-resize',\r\n        's-resize',\r\n        'sw-resize',\r\n        'w-resize',\r\n        'nw-resize'\r\n      ],\r\n\r\n      /**\r\n       * Adds mouse listeners to canvas\r\n       * @private\r\n       */\r\n      _initEventListeners: function () {\r\n        // in case we initialized the class twice. This should not happen normally\r\n        // but in some kind of applications where the canvas element may be changed\r\n        // this is a workaround to having double listeners.\r\n        this.removeListeners();\r\n        this._bindEvents();\r\n        this.addOrRemove(addListener, 'add');\r\n      },\r\n\r\n      addOrRemove: function(functor, eventjsFunctor) {\r\n        functor(fabric.window, 'resize', this._onResize);\r\n        functor(this.upperCanvasEl, 'mousedown', this._onMouseDown);\r\n        functor(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\r\n        functor(this.upperCanvasEl, 'mouseout', this._onMouseOut);\r\n        functor(this.upperCanvasEl, 'mouseenter', this._onMouseEnter);\r\n        functor(this.upperCanvasEl, 'wheel', this._onMouseWheel);\r\n        functor(this.upperCanvasEl, 'contextmenu', this._onContextMenu);\r\n        functor(this.upperCanvasEl, 'dblclick', this._onDoubleClick);\r\n        functor(this.upperCanvasEl, 'touchstart', this._onMouseDown, addEventOptions);\r\n        functor(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\r\n        functor(this.upperCanvasEl, 'dragover', this._onDragOver);\r\n        functor(this.upperCanvasEl, 'dragenter', this._onDragEnter);\r\n        functor(this.upperCanvasEl, 'dragleave', this._onDragLeave);\r\n        functor(this.upperCanvasEl, 'drop', this._onDrop);\r\n        if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\r\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'gesture', this._onGesture);\r\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'drag', this._onDrag);\r\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'orientation', this._onOrientationChange);\r\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'shake', this._onShake);\r\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'longpress', this._onLongPress);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Removes all event listeners\r\n       */\r\n      removeListeners: function() {\r\n        this.addOrRemove(removeListener, 'remove');\r\n        // if you dispose on a mouseDown, before mouse up, you need to clean document to...\r\n        removeListener(fabric.document, 'mouseup', this._onMouseUp);\r\n        removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\r\n        removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _bindEvents: function() {\r\n        if (this.eventsBound) {\r\n          // for any reason we pass here twice we do not want to bind events twice.\r\n          return;\r\n        }\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onResize = this._onResize.bind(this);\r\n        this._onGesture = this._onGesture.bind(this);\r\n        this._onDrag = this._onDrag.bind(this);\r\n        this._onShake = this._onShake.bind(this);\r\n        this._onLongPress = this._onLongPress.bind(this);\r\n        this._onOrientationChange = this._onOrientationChange.bind(this);\r\n        this._onMouseWheel = this._onMouseWheel.bind(this);\r\n        this._onMouseOut = this._onMouseOut.bind(this);\r\n        this._onMouseEnter = this._onMouseEnter.bind(this);\r\n        this._onContextMenu = this._onContextMenu.bind(this);\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onDragOver = this._onDragOver.bind(this);\r\n        this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\r\n        this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\r\n        this._onDrop = this._simpleEventHandler.bind(this, 'drop');\r\n        this.eventsBound = true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js gesture\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onGesture: function(e, self) {\r\n        this.__onTransformGesture && this.__onTransformGesture(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js drag\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onDrag: function(e, self) {\r\n        this.__onDrag && this.__onDrag(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on wheel event\r\n       */\r\n      _onMouseWheel: function(e) {\r\n        this.__onMouseWheel(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseOut: function(e) {\r\n        var target = this._hoveredTarget;\r\n        this.fire('mouse:out', { target: target, e: e });\r\n        this._hoveredTarget = null;\r\n        target && target.fire('mouseout', { e: e });\r\n        if (this._iTextInstances) {\r\n          this._iTextInstances.forEach(function(obj) {\r\n            if (obj.isEditing) {\r\n              obj.hiddenTextarea.focus();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseenter\r\n       */\r\n      _onMouseEnter: function(e) {\r\n        if (!this.findTarget(e)) {\r\n          this.fire('mouse:over', { target: null, e: e });\r\n          this._hoveredTarget = null;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js orientation change\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onOrientationChange: function(e, self) {\r\n        this.__onOrientationChange && this.__onOrientationChange(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onShake: function(e, self) {\r\n        this.__onShake && this.__onShake(e, self);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       * @param {Event} [self] Inner Event object\r\n       */\r\n      _onLongPress: function(e, self) {\r\n        this.__onLongPress && this.__onLongPress(e, self);\r\n      },\r\n\r\n      /**\r\n       * prevent default to allow drop event to be fired\r\n       * @private\r\n       * @param {Event} [e] Event object fired on Event.js shake\r\n       */\r\n      _onDragOver: function(e) {\r\n        e.preventDefault();\r\n        var target = this._simpleEventHandler('dragover', e);\r\n        this._fireEnterLeaveEvents(target, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onContextMenu: function (e) {\r\n        if (this.stopContextMenu) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onDoubleClick: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'dblclick');\r\n        this._resetTransformEventData(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDown: function (e) {\r\n        this.__onMouseDown(e);\r\n        this._resetTransformEventData();\r\n        addListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\r\n        addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n\r\n        removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\r\n        removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\r\n\r\n        if (e.type === 'touchstart') {\r\n          // Unbind mousedown to prevent double triggers from touch devices\r\n          removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\r\n        }\r\n        else {\r\n          addListener(fabric.document, 'mouseup', this._onMouseUp);\r\n          addListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUp: function (e) {\r\n        this.__onMouseUp(e);\r\n        this._resetTransformEventData();\r\n        removeListener(fabric.document, 'mouseup', this._onMouseUp);\r\n        removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\r\n\r\n        removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\r\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n\r\n        addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\r\n        addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\r\n\r\n        if (e.type === 'touchend') {\r\n          // Wait 400ms before rebinding mousedown to prevent double triggers\r\n          // from touch devices\r\n          var _this = this;\r\n          setTimeout(function() {\r\n            addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\r\n          }, 400);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMove: function (e) {\r\n        !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\r\n        this.__onMouseMove(e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onResize: function () {\r\n        this.calcOffset();\r\n      },\r\n\r\n      /**\r\n       * Decides whether the canvas should be redrawn in mouseup and mousedown events.\r\n       * @private\r\n       * @param {Object} target\r\n       * @param {Object} pointer\r\n       */\r\n      _shouldRender: function(target, pointer) {\r\n        var activeObject = this._activeObject;\r\n\r\n        if (activeObject && activeObject.isEditing && target === activeObject) {\r\n          // if we mouse up/down over a editing textbox a cursor change,\r\n          // there is no need to re render\r\n          return false;\r\n        }\r\n        return !!(\r\n          (target && (\r\n            target.isMoving ||\r\n            target !== activeObject))\r\n          ||\r\n          (!target && !!activeObject)\r\n          ||\r\n          (!target && !activeObject && !this._groupSelector)\r\n          ||\r\n          (pointer &&\r\n            this._previousPointer &&\r\n            this.selection && (\r\n              pointer.x !== this._previousPointer.x ||\r\n            pointer.y !== this._previousPointer.y))\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is released on canvas.\r\n       * The method resets the currentTransform parameters, store the image corner\r\n       * position in the image object and render the canvas on top.\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseUp: function (e) {\r\n        var target, transform = this._currentTransform,\r\n            groupSelector = this._groupSelector,\r\n            isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\r\n        this._cacheTransformEventData(e);\r\n        target = this._target;\r\n        this._handleEvent(e, 'up:before');\r\n        // if right/middle click just fire events and return\r\n        // target undefined will make the _handleEvent search the target\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\r\n          }\r\n          this._resetTransformEventData();\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n          this._onMouseUpInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        if (transform) {\r\n          this._finalizeCurrentTransform(e);\r\n        }\r\n\r\n        var shouldRender = this._shouldRender(target, this._absolutePointer);\r\n\r\n        if (target || !isClick) {\r\n          this._maybeGroupObjects(e);\r\n        }\r\n        if (target) {\r\n          target.isMoving = false;\r\n        }\r\n        this._setCursorFromEvent(e, target);\r\n        this._handleEvent(e, 'up', LEFT_CLICK, isClick);\r\n        this._groupSelector = null;\r\n        this._currentTransform = null;\r\n        target && (target.__corner = 0);\r\n        shouldRender && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @return {Fabric.Object} target return the the target found, for internal reasons.\r\n       */\r\n      _simpleEventHandler: function(eventType, e) {\r\n        var target = this.findTarget(e),\r\n            targets = this.targets,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n            };\r\n        this.fire(eventType, options);\r\n        target && target.fire(eventType, options);\r\n        if (!targets) {\r\n          return target;\r\n        }\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire(eventType, options);\r\n        }\r\n        return target;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Handle event firing for target and subtargets\r\n       * @param {Event} e event from mouse\r\n       * @param {String} eventType event to fire (up, down or move)\r\n       * @param {fabric.Object} targetObj receiving event\r\n       * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\r\n       * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\r\n       */\r\n      _handleEvent: function(e, eventType, button, isClick) {\r\n        var target = this._target,\r\n            targets = this.targets || [],\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              subTargets: targets,\r\n              button: button || LEFT_CLICK,\r\n              isClick: isClick || false,\r\n              pointer: this._pointer,\r\n              absolutePointer: this._absolutePointer,\r\n              transform: this._currentTransform\r\n            };\r\n        this.fire('mouse:' + eventType, options);\r\n        target && target.fire('mouse' + eventType, options);\r\n        for (var i = 0; i < targets.length; i++) {\r\n          targets[i].fire('mouse' + eventType, options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\r\n       */\r\n      _finalizeCurrentTransform: function(e) {\r\n\r\n        var transform = this._currentTransform,\r\n            target = transform.target,\r\n            eventName,\r\n            options = {\r\n              e: e,\r\n              target: target,\r\n              transform: transform,\r\n            };\r\n\r\n        if (target._scaling) {\r\n          target._scaling = false;\r\n        }\r\n\r\n        target.setCoords();\r\n\r\n        if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\r\n          if (transform.actionPerformed) {\r\n            eventName = this._addEventOptions(options, transform);\r\n            this._fire(eventName, options);\r\n          }\r\n          this._fire('modified', options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Mutate option object in order to add by property and give back the event name.\r\n       * @private\r\n       * @param {Object} options to mutate\r\n       * @param {Object} transform to inspect action from\r\n       */\r\n      _addEventOptions: function(options, transform) {\r\n        // we can probably add more details at low cost\r\n        // scale change, rotation changes, translation changes\r\n        var eventName, by;\r\n        switch (transform.action) {\r\n          case 'scaleX':\r\n            eventName = 'scaled';\r\n            by = 'x';\r\n            break;\r\n          case 'scaleY':\r\n            eventName = 'scaled';\r\n            by = 'y';\r\n            break;\r\n          case 'skewX':\r\n            eventName = 'skewed';\r\n            by = 'x';\r\n            break;\r\n          case 'skewY':\r\n            eventName = 'skewed';\r\n            by = 'y';\r\n            break;\r\n          case 'scale':\r\n            eventName = 'scaled';\r\n            by = 'equally';\r\n            break;\r\n          case 'rotate':\r\n            eventName = 'rotated';\r\n            break;\r\n          case 'drag':\r\n            eventName = 'moved';\r\n            break;\r\n        }\r\n        options.by = by;\r\n        return eventName;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      _onMouseDownInDrawingMode: function(e) {\r\n        this._isCurrentlyDrawing = true;\r\n        if (this.getActiveObject()) {\r\n          this.discardActiveObject(e).requestRenderAll();\r\n        }\r\n        if (this.clipTo) {\r\n          fabric.util.clipContext(this, this.contextTop);\r\n        }\r\n        var pointer = this.getPointer(e);\r\n        this.freeDrawingBrush.onMouseDown(pointer);\r\n        this._handleEvent(e, 'down');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      _onMouseMoveInDrawingMode: function(e) {\r\n        if (this._isCurrentlyDrawing) {\r\n          var pointer = this.getPointer(e);\r\n          this.freeDrawingBrush.onMouseMove(pointer);\r\n        }\r\n        this.setCursor(this.freeDrawingCursor);\r\n        this._handleEvent(e, 'move');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      _onMouseUpInDrawingMode: function(e) {\r\n        this._isCurrentlyDrawing = false;\r\n        if (this.clipTo) {\r\n          this.contextTop.restore();\r\n        }\r\n        this.freeDrawingBrush.onMouseUp();\r\n        this._handleEvent(e, 'up');\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is clicked on canvas.\r\n       * The method inits the currentTransform parameters and renders all the\r\n       * canvas so the current image can be placed on the top canvas and the rest\r\n       * in on the container one.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousedown\r\n       */\r\n      __onMouseDown: function (e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'down:before');\r\n        var target = this._target;\r\n        // if right click just fire events\r\n        if (checkClick(e, RIGHT_CLICK)) {\r\n          if (this.fireRightClick) {\r\n            this._handleEvent(e, 'down', RIGHT_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (checkClick(e, MIDDLE_CLICK)) {\r\n          if (this.fireMiddleClick) {\r\n            this._handleEvent(e, 'down', MIDDLE_CLICK);\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseDownInDrawingMode(e);\r\n          return;\r\n        }\r\n\r\n        // ignore if some object is being transformed at this moment\r\n        if (this._currentTransform) {\r\n          return;\r\n        }\r\n\r\n        var pointer = this._pointer;\r\n        // save pointer for check in __onMouseUp event\r\n        this._previousPointer = pointer;\r\n        var shouldRender = this._shouldRender(target, pointer),\r\n            shouldGroup = this._shouldGroup(e, target);\r\n        if (this._shouldClearSelection(e, target)) {\r\n          this.discardActiveObject(e);\r\n        }\r\n        else if (shouldGroup) {\r\n          this._handleGrouping(e, target);\r\n          target = this._activeObject;\r\n        }\r\n\r\n        if (this.selection && (!target ||\r\n          (!target.selectable && !target.isEditing && target !== this._activeObject))) {\r\n          this._groupSelector = {\r\n            ex: pointer.x,\r\n            ey: pointer.y,\r\n            top: 0,\r\n            left: 0\r\n          };\r\n        }\r\n\r\n        if (target) {\r\n          if (target.selectable) {\r\n            this.setActiveObject(target, e);\r\n          }\r\n          if (target === this._activeObject && (target.__corner || !shouldGroup)) {\r\n            this._setupCurrentTransform(e, target);\r\n          }\r\n        }\r\n        this._handleEvent(e, 'down');\r\n        // we must renderAll so that we update the visuals\r\n        shouldRender && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * reset cache form common information needed during event processing\r\n       * @private\r\n       */\r\n      _resetTransformEventData: function() {\r\n        this._target = null;\r\n        this._pointer = null;\r\n        this._absolutePointer = null;\r\n      },\r\n\r\n      /**\r\n       * Cache common information needed during event processing\r\n       * @private\r\n       * @param {Event} e Event object fired on event\r\n       */\r\n      _cacheTransformEventData: function(e) {\r\n        // reset in order to avoid stale caching\r\n        this._resetTransformEventData();\r\n        this._pointer = this.getPointer(e, true);\r\n        this._absolutePointer = this.restorePointerVpt(this._pointer);\r\n        this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeTransform: function(e) {\r\n        var t = this._currentTransform;\r\n        this.stateful && t.target.saveState();\r\n        this.fire('before:transform', {\r\n          e: e,\r\n          transform: t,\r\n        });\r\n        // determine if it's a drag or rotate case\r\n        if (t.corner) {\r\n          this.onBeforeScaleRotate(t.target);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines the actions when mouse is hovering the canvas.\r\n       * The currentTransform parameter will definde whether the user is rotating/scaling/translating\r\n       * an image or neither of them (only hovering). A group selection is also possible and would cancel\r\n       * all any other type of action.\r\n       * In case of an image transformation only the top canvas will be rendered.\r\n       * @private\r\n       * @param {Event} e Event object fired on mousemove\r\n       */\r\n      __onMouseMove: function (e) {\r\n        this._handleEvent(e, 'move:before');\r\n        this._cacheTransformEventData(e);\r\n        var target, pointer;\r\n\r\n        if (this.isDrawingMode) {\r\n          this._onMouseMoveInDrawingMode(e);\r\n          return;\r\n        }\r\n        if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\r\n          return;\r\n        }\r\n\r\n        var groupSelector = this._groupSelector;\r\n\r\n        // We initially clicked in an empty area, so we draw a box for multiple selection\r\n        if (groupSelector) {\r\n          pointer = this._pointer;\r\n\r\n          groupSelector.left = pointer.x - groupSelector.ex;\r\n          groupSelector.top = pointer.y - groupSelector.ey;\r\n\r\n          this.renderTop();\r\n        }\r\n        else if (!this._currentTransform) {\r\n          target = this.findTarget(e) || null;\r\n          this._setCursorFromEvent(e, target);\r\n          this._fireOverOutEvents(target, e);\r\n        }\r\n        else {\r\n          this._transformObject(e);\r\n        }\r\n        this._handleEvent(e, 'move');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * Manage the mouseout, mouseover events for the fabric object on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the mousemove event\r\n       * @param {Event} e Event object fired on mousemove\r\n       * @private\r\n       */\r\n      _fireOverOutEvents: function(target, e) {\r\n        this.fireSynteticInOutEvents(target, e, {\r\n          targetName: '_hoveredTarget',\r\n          canvasEvtOut: 'mouse:out',\r\n          evtOut: 'mouseout',\r\n          canvasEvtIn: 'mouse:over',\r\n          evtIn: 'mouseover',\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the onDrag event\r\n       * @param {Event} e Event object fired on ondrag\r\n       * @private\r\n       */\r\n      _fireEnterLeaveEvents: function(target, e) {\r\n        this.fireSynteticInOutEvents(target, e, {\r\n          targetName: '_draggedoverTarget',\r\n          evtOut: 'dragleave',\r\n          evtIn: 'dragenter',\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Manage the syntetic in/out events for the fabric objects on the canvas\r\n       * @param {Fabric.Object} target the target where the target from the supported events\r\n       * @param {Event} e Event object fired\r\n       * @param {Object} config configuration for the function to work\r\n       * @param {String} config.targetName property on the canvas where the old target is stored\r\n       * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\r\n       * @param {String} config.evtOut name of the event to fire for out\r\n       * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\r\n       * @param {String} config.evtIn name of the event to fire for in\r\n       * @private\r\n       */\r\n      fireSynteticInOutEvents: function(target, e, config) {\r\n        var inOpt, outOpt, oldTarget = this[config.targetName], outFires, inFires,\r\n            targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\r\n        if (targetChanged) {\r\n          inOpt = { e: e, target: target, previousTarget: oldTarget };\r\n          outOpt = { e: e, target: oldTarget, nextTarget: target };\r\n          this[config.targetName] = target;\r\n        }\r\n        inFires = target && targetChanged;\r\n        outFires = oldTarget && targetChanged;\r\n        if (outFires) {\r\n          canvasEvtOut && this.fire(canvasEvtOut, outOpt);\r\n          oldTarget.fire(config.evtOut, outOpt);\r\n        }\r\n        if (inFires) {\r\n          canvasEvtIn && this.fire(canvasEvtIn, inOpt);\r\n          target.fire(config.evtIn, inOpt);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Method that defines actions when an Event Mouse Wheel\r\n       * @param {Event} e Event object fired on mouseup\r\n       */\r\n      __onMouseWheel: function(e) {\r\n        this._cacheTransformEventData(e);\r\n        this._handleEvent(e, 'wheel');\r\n        this._resetTransformEventData();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event fired on mousemove\r\n       */\r\n      _transformObject: function(e) {\r\n        var pointer = this.getPointer(e),\r\n            transform = this._currentTransform;\r\n\r\n        transform.reset = false;\r\n        transform.target.isMoving = true;\r\n        transform.shiftKey = e.shiftKey;\r\n        transform.altKey = e[this.centeredKey];\r\n\r\n        this._beforeScaleTransform(e, transform);\r\n        this._performTransformAction(e, transform, pointer);\r\n\r\n        transform.actionPerformed && this.requestRenderAll();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _performTransformAction: function(e, transform, pointer) {\r\n        var x = pointer.x,\r\n            y = pointer.y,\r\n            action = transform.action,\r\n            actionPerformed = false,\r\n            options = {\r\n              target: transform.target,\r\n              e: e,\r\n              transform: transform,\r\n              pointer: pointer\r\n            };\r\n\r\n        if (action === 'rotate') {\r\n          (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\r\n        }\r\n        else if (action === 'scale') {\r\n          (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleX') {\r\n          (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'scaleY') {\r\n          (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\r\n        }\r\n        else if (action === 'skewX') {\r\n          (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\r\n        }\r\n        else if (action === 'skewY') {\r\n          (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\r\n        }\r\n        else {\r\n          actionPerformed = this._translateObject(x, y);\r\n          if (actionPerformed) {\r\n            this._fire('moving', options);\r\n            this.setCursor(options.target.moveCursor || this.moveCursor);\r\n          }\r\n        }\r\n        transform.actionPerformed = transform.actionPerformed || actionPerformed;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fire: function(eventName, options) {\r\n        this.fire('object:' + eventName, options);\r\n        options.target.fire(eventName, options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _beforeScaleTransform: function(e, transform) {\r\n        if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\r\n          var centerTransform = this._shouldCenterTransform(transform.target);\r\n\r\n          // Switch from a normal resize to center-based\r\n          if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\r\n             // Switch from center-based resize to normal one\r\n             (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\r\n          ) {\r\n            this._resetCurrentTransform();\r\n            transform.reset = true;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {Object} transform current tranform\r\n       * @param {Number} x mouse position x from origin\r\n       * @param {Number} y mouse poistion y from origin\r\n       * @return {Boolean} true if the scaling occurred\r\n       */\r\n      _onScale: function(e, transform, x, y) {\r\n        if (this._isUniscalePossible(e, transform.target)) {\r\n          transform.currentAction = 'scale';\r\n          return this._scaleObject(x, y);\r\n        }\r\n        else {\r\n          // Switch from a normal resize to proportional\r\n          if (!transform.reset && transform.currentAction === 'scale') {\r\n            this._resetCurrentTransform();\r\n          }\r\n\r\n          transform.currentAction = 'scaleEqually';\r\n          return this._scaleObject(x, y, 'equally');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target current target\r\n       * @return {Boolean} true if unproportional scaling is possible\r\n       */\r\n      _isUniscalePossible: function(e, target) {\r\n        return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\r\n      },\r\n\r\n      /**\r\n       * Sets the cursor depending on where the canvas is being hovered.\r\n       * Note: very buggy in Opera\r\n       * @param {Event} e Event object\r\n       * @param {Object} target Object that the mouse is hovering, if so.\r\n       */\r\n      _setCursorFromEvent: function (e, target) {\r\n        if (!target) {\r\n          this.setCursor(this.defaultCursor);\r\n          return false;\r\n        }\r\n\r\n        var hoverCursor = target.hoverCursor || this.hoverCursor,\r\n            activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\r\n              this._activeObject : null,\r\n            // only show proper corner when group selection is not active\r\n            corner = (!activeSelection || !activeSelection.contains(target))\r\n                      && target._findTargetCorner(this.getPointer(e, true));\r\n\r\n        if (!corner) {\r\n          this.setCursor(hoverCursor);\r\n        }\r\n        else {\r\n          this.setCursor(this.getCornerCursor(corner, target, e));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      getCornerCursor: function(corner, target, e) {\r\n        if (this.actionIsDisabled(corner, target, e)) {\r\n          return this.notAllowedCursor;\r\n        }\r\n        else if (corner in cursorOffset) {\r\n          return this._getRotatedCornerCursor(corner, target, e);\r\n        }\r\n        else if (corner === 'mtr' && target.hasRotatingPoint) {\r\n          return this.rotationCursor;\r\n        }\r\n        else {\r\n          return this.defaultCursor;\r\n        }\r\n      },\r\n\r\n      actionIsDisabled: function(corner, target, e) {\r\n        if (corner === 'mt' || corner === 'mb') {\r\n          return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\r\n        }\r\n        else if (corner === 'ml' || corner === 'mr') {\r\n          return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\r\n        }\r\n        else if (corner === 'mtr') {\r\n          return target.lockRotation;\r\n        }\r\n        else {\r\n          return this._isUniscalePossible(e, target) ?\r\n            target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getRotatedCornerCursor: function(corner, target, e) {\r\n        var n = Math.round((target.angle % 360) / 45);\r\n\r\n        if (n < 0) {\r\n          n += 8; // full circle ahead\r\n        }\r\n        n += cursorOffset[corner];\r\n        if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\r\n          //if we are holding shift and we are on a mx corner...\r\n          n += 2;\r\n        }\r\n        // normalize n to be from 0 to 7\r\n        n %= 8;\r\n\r\n        return this.cursorMap[n];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var min = Math.min,\r\n        max = Math.max;\r\n\r\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       * @return {Boolean}\r\n       */\r\n      _shouldGroup: function(e, target) {\r\n        var activeObject = this._activeObject;\r\n\r\n        return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\r\n              (activeObject !== target || activeObject.type === 'activeSelection');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e Event object\r\n       * @param {fabric.Object} target\r\n       */\r\n      _handleGrouping: function (e, target) {\r\n        var activeObject = this._activeObject;\r\n        if (activeObject.__corner) {\r\n          return;\r\n        }\r\n        if (target === activeObject) {\r\n          // if it's a group, find target again, using activeGroup objects\r\n          target = this.findTarget(e, true);\r\n          // if even object is not found or we are on activeObjectCorner, bail out\r\n          if (!target) {\r\n            return;\r\n          }\r\n        }\r\n        if (activeObject && activeObject.type === 'activeSelection') {\r\n          this._updateActiveSelection(target, e);\r\n        }\r\n        else {\r\n          this._createActiveSelection(target, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateActiveSelection: function(target, e) {\r\n        var activeSelection = this._activeObject,\r\n            currentActiveObjects = activeSelection._objects.slice(0);\r\n        if (activeSelection.contains(target)) {\r\n          activeSelection.removeWithUpdate(target);\r\n          this._hoveredTarget = target;\r\n          if (activeSelection.size() === 1) {\r\n            // activate last remaining object\r\n            this._setActiveObject(activeSelection.item(0), e);\r\n          }\r\n        }\r\n        else {\r\n          activeSelection.addWithUpdate(target);\r\n          this._hoveredTarget = activeSelection;\r\n        }\r\n        this._fireSelectionEvents(currentActiveObjects, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createActiveSelection: function(target, e) {\r\n        var currentActives = this.getActiveObjects(), group = this._createGroup(target);\r\n        this._hoveredTarget = group;\r\n        this._setActiveObject(group, e);\r\n        this._fireSelectionEvents(currentActives, e);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} target\r\n       */\r\n      _createGroup: function(target) {\r\n        var objects = this._objects,\r\n            isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\r\n            groupObjects = isActiveLower\r\n              ? [this._activeObject, target]\r\n              : [target, this._activeObject];\r\n        this._activeObject.isEditing && this._activeObject.exitEditing();\r\n        return new fabric.ActiveSelection(groupObjects, {\r\n          canvas: this\r\n        });\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Event} e mouse event\r\n       */\r\n      _groupSelectedObjects: function (e) {\r\n\r\n        var group = this._collectObjects(),\r\n            aGroup;\r\n\r\n        // do not create group for 1 element only\r\n        if (group.length === 1) {\r\n          this.setActiveObject(group[0], e);\r\n        }\r\n        else if (group.length > 1) {\r\n          aGroup = new fabric.ActiveSelection(group.reverse(), {\r\n            canvas: this\r\n          });\r\n          this.setActiveObject(aGroup, e);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _collectObjects: function() {\r\n        var group = [],\r\n            currentObject,\r\n            x1 = this._groupSelector.ex,\r\n            y1 = this._groupSelector.ey,\r\n            x2 = x1 + this._groupSelector.left,\r\n            y2 = y1 + this._groupSelector.top,\r\n            selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\r\n            selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\r\n            allowIntersect = !this.selectionFullyContained,\r\n            isClick = x1 === x2 && y1 === y2;\r\n        // we iterate reverse order to collect top first in case of click.\r\n        for (var i = this._objects.length; i--; ) {\r\n          currentObject = this._objects[i];\r\n\r\n          if (!currentObject || !currentObject.selectable || !currentObject.visible) {\r\n            continue;\r\n          }\r\n\r\n          if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\r\n              currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\r\n              (allowIntersect && currentObject.containsPoint(selectionX2Y2))\r\n          ) {\r\n            group.push(currentObject);\r\n\r\n            // only add one object if it's a click\r\n            if (isClick) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _maybeGroupObjects: function(e) {\r\n        if (this.selection && this._groupSelector) {\r\n          this._groupSelectedObjects(e);\r\n        }\r\n        this.setCursor(this.defaultCursor);\r\n        // clear selection and current transformation\r\n        this._groupSelector = null;\r\n      }\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function () {\r\n\r\n    var supportQuality = fabric.StaticCanvas.supports('toDataURLWithQuality');\r\n\r\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n      /**\r\n       * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\r\n       * @example <caption>Generate jpeg dataURL with lower quality</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'jpeg',\r\n       *   quality: 0.8\r\n       * });\r\n       * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   left: 100,\r\n       *   top: 100,\r\n       *   width: 200,\r\n       *   height: 200\r\n       * });\r\n       * @example <caption>Generate double scaled png dataURL</caption>\r\n       * var dataURL = canvas.toDataURL({\r\n       *   format: 'png',\r\n       *   multiplier: 2\r\n       * });\r\n       */\r\n      toDataURL: function (options) {\r\n        options || (options = { });\r\n\r\n        var format = options.format || 'png',\r\n            quality = options.quality || 1,\r\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? 1 : 1 / this.getRetinaScaling()),\r\n            cropping = {\r\n              left: options.left || 0,\r\n              top: options.top || 0,\r\n              width: options.width || 0,\r\n              height: options.height || 0,\r\n            };\r\n        return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\r\n\r\n        var origWidth = this.width,\r\n            origHeight = this.height,\r\n            scaledWidth = (cropping.width || this.width) * multiplier,\r\n            scaledHeight = (cropping.height || this.height) * multiplier,\r\n            zoom = this.getZoom(),\r\n            newZoom = zoom * multiplier,\r\n            vp = this.viewportTransform,\r\n            translateX = (vp[4] - cropping.left) * multiplier,\r\n            translateY = (vp[5] - cropping.top) * multiplier,\r\n            newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\r\n            originalInteractive = this.interactive,\r\n            originalSkipOffScreen = this.skipOffscreen,\r\n            needsResize = origWidth !== scaledWidth || origHeight !== scaledHeight;\r\n\r\n        this.viewportTransform = newVp;\r\n        this.skipOffscreen = false;\r\n        // setting interactive to false avoid exporting controls\r\n        this.interactive = false;\r\n        if (needsResize) {\r\n          this.setDimensions({ width: scaledWidth, height: scaledHeight }, { backstoreOnly: true });\r\n        }\r\n        // call a renderAll to force sync update. This will cancel the scheduled requestRenderAll\r\n        // from setDimensions\r\n        this.renderAll();\r\n        var data = this.__toDataURL(format, quality, cropping);\r\n        this.interactive = originalInteractive;\r\n        this.skipOffscreen = originalSkipOffScreen;\r\n        this.viewportTransform = vp;\r\n        //setDimensions with no option object is taking care of:\r\n        //this.width, this.height, this.requestRenderAll()\r\n        if (needsResize) {\r\n          this.setDimensions({ width: origWidth, height: origHeight }, { backstoreOnly: true });\r\n        }\r\n        this.renderAll();\r\n        return data;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __toDataURL: function(format, quality) {\r\n\r\n        var canvasEl = this.contextContainer.canvas;\r\n        // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\r\n        if (format === 'jpg') {\r\n          format = 'jpeg';\r\n        }\r\n\r\n        var data = supportQuality\r\n          ? canvasEl.toDataURL('image/' + format, quality)\r\n          : canvasEl.toDataURL('image/' + format);\r\n\r\n        return data;\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Populates canvas with data from the specified dataless JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\r\n     * @deprecated since 1.2.2\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     */\r\n    loadFromDatalessJSON: function (json, callback, reviver) {\r\n      return this.loadFromJSON(json, callback, reviver);\r\n    },\r\n\r\n    /**\r\n     * Populates canvas with data from the specified JSON.\r\n     * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\r\n     * @param {String|Object} json JSON string or object\r\n     * @param {Function} callback Callback, invoked when json is parsed\r\n     *                            and corresponding objects (e.g: {@link fabric.Image})\r\n     *                            are initialized\r\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n     * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\r\n     * @example <caption>loadFromJSON</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\r\n     * @example <caption>loadFromJSON with reviver</caption>\r\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\r\n     *   // `o` = json object\r\n     *   // `object` = fabric.Object instance\r\n     *   // ... do some stuff ...\r\n     * });\r\n     */\r\n    loadFromJSON: function (json, callback, reviver) {\r\n      if (!json) {\r\n        return;\r\n      }\r\n\r\n      // serialize if it wasn't already\r\n      var serialized = (typeof json === 'string')\r\n        ? JSON.parse(json)\r\n        : fabric.util.object.clone(json);\r\n\r\n      var _this = this,\r\n          renderOnAddRemove = this.renderOnAddRemove;\r\n      this.renderOnAddRemove = false;\r\n\r\n      this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\r\n        _this.clear();\r\n        _this._setBgOverlay(serialized, function () {\r\n          enlivenedObjects.forEach(function(obj, index) {\r\n            // we splice the array just in case some custom classes restored from JSON\r\n            // will add more object to canvas at canvas init.\r\n            _this.insertAt(obj, index);\r\n          });\r\n          _this.renderOnAddRemove = renderOnAddRemove;\r\n          // remove parts i cannot set as options\r\n          delete serialized.objects;\r\n          delete serialized.backgroundImage;\r\n          delete serialized.overlayImage;\r\n          delete serialized.background;\r\n          delete serialized.overlay;\r\n          // this._initOptions does too many things to just\r\n          // call it. Normally loading an Object from JSON\r\n          // create the Object instance. Here the Canvas is\r\n          // already an instance and we are just loading things over it\r\n          _this._setOptions(serialized);\r\n          _this.renderAll();\r\n          callback && callback();\r\n        });\r\n      }, reviver);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} serialized Object with background and overlay information\r\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n     */\r\n    _setBgOverlay: function(serialized, callback) {\r\n      var loaded = {\r\n        backgroundColor: false,\r\n        overlayColor: false,\r\n        backgroundImage: false,\r\n        overlayImage: false\r\n      };\r\n\r\n      if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      var cbIfLoaded = function () {\r\n        if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\r\n          callback && callback();\r\n        }\r\n      };\r\n\r\n      this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\r\n      this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\r\n     * @param {(Object|String)} value Value to set\r\n     * @param {Object} loaded Set loaded property to true if property is set\r\n     * @param {Object} callback Callback function to invoke after property is set\r\n     */\r\n    __setBgOverlay: function(property, value, loaded, callback) {\r\n      var _this = this;\r\n\r\n      if (!value) {\r\n        loaded[property] = true;\r\n        callback && callback();\r\n        return;\r\n      }\r\n\r\n      if (property === 'backgroundImage' || property === 'overlayImage') {\r\n        fabric.util.enlivenObjects([value], function(enlivedObject){\r\n          _this[property] = enlivedObject[0];\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n      else {\r\n        this['set' + fabric.util.string.capitalize(property, true)](value, function() {\r\n          loaded[property] = true;\r\n          callback && callback();\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} objects\r\n     * @param {Function} callback\r\n     * @param {Function} [reviver]\r\n     */\r\n    _enlivenObjects: function (objects, callback, reviver) {\r\n      if (!objects || objects.length === 0) {\r\n        callback && callback([]);\r\n        return;\r\n      }\r\n\r\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n        callback && callback(enlivenedObjects);\r\n      }, null, reviver);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURL: function (format, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURL(format));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} format\r\n     * @param {Number} multiplier\r\n     * @param {Function} callback\r\n     */\r\n    _toDataURLWithMultiplier: function (format, multiplier, callback) {\r\n      this.clone(function (clone) {\r\n        callback(clone.toDataURLWithMultiplier(format, multiplier));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     * @param {Array} [properties] Array of properties to include in the cloned canvas and children\r\n     */\r\n    clone: function (callback, properties) {\r\n      var data = JSON.stringify(this.toJSON(properties));\r\n      this.cloneWithoutData(function(clone) {\r\n        clone.loadFromJSON(data, function() {\r\n          callback && callback(clone);\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Clones canvas instance without cloning existing data.\r\n     * This essentially copies canvas dimensions, clipping properties, etc.\r\n     * but leaves data empty (so that you can populate it with your own)\r\n     * @param {Object} [callback] Receives cloned instance as a first argument\r\n     */\r\n    cloneWithoutData: function(callback) {\r\n      var el = fabric.util.createCanvasElement();\r\n\r\n      el.width = this.width;\r\n      el.height = this.height;\r\n\r\n      var clone = new fabric.Canvas(el);\r\n      clone.clipTo = this.clipTo;\r\n      if (this.backgroundImage) {\r\n        clone.setBackgroundImage(this.backgroundImage.src, function() {\r\n          clone.renderAll();\r\n          callback && callback(clone);\r\n        });\r\n        clone.backgroundImageOpacity = this.backgroundImageOpacity;\r\n        clone.backgroundImageStretch = this.backgroundImageStretch;\r\n      }\r\n      else {\r\n        callback && callback(clone);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        toFixed = fabric.util.toFixed,\r\n        capitalize = fabric.util.string.capitalize,\r\n        degreesToRadians = fabric.util.degreesToRadians,\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\r\n        objectCaching = !fabric.isLikelyNode,\r\n        ALIASING_LIMIT = 2;\r\n\r\n    if (fabric.Object) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Root object class from which all 2d shape classes inherit from\r\n     * @class fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\r\n     * @see {@link fabric.Object#initialize} for constructor definition\r\n     *\r\n     * @fires added\r\n     * @fires removed\r\n     *\r\n     * @fires selected\r\n     * @fires deselected\r\n     * @fires modified\r\n     * @fires modified\r\n     * @fires moved\r\n     * @fires scaled\r\n     * @fires rotated\r\n     * @fires skewed\r\n     *\r\n     * @fires rotating\r\n     * @fires scaling\r\n     * @fires moving\r\n     * @fires skewing\r\n     *\r\n     * @fires mousedown\r\n     * @fires mouseup\r\n     * @fires mouseover\r\n     * @fires mouseout\r\n     * @fires mousewheel\r\n     * @fires mousedblclick\r\n     *\r\n     * @fires dragover\r\n     * @fires dragenter\r\n     * @fires dragleave\r\n     * @fires drop\r\n     */\r\n    fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Type of an object (rect, circle, path, etc.).\r\n       * Note that this property is meant to be read-only and not meant to be modified.\r\n       * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                     'object',\r\n\r\n      /**\r\n       * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originX:                  'left',\r\n\r\n      /**\r\n       * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\r\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n       * @type String\r\n       * @default\r\n       */\r\n      originY:                  'top',\r\n\r\n      /**\r\n       * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      top:                      0,\r\n\r\n      /**\r\n       * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\r\n       * @type Number\r\n       * @default\r\n       */\r\n      left:                     0,\r\n\r\n      /**\r\n       * Object width\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width:                    0,\r\n\r\n      /**\r\n       * Object height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height:                   0,\r\n\r\n      /**\r\n       * Object scale factor (horizontal)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleX:                   1,\r\n\r\n      /**\r\n       * Object scale factor (vertical)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      scaleY:                   1,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped horizontally\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipX:                    false,\r\n\r\n      /**\r\n       * When true, an object is rendered as flipped vertically\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      flipY:                    false,\r\n\r\n      /**\r\n       * Opacity of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      opacity:                  1,\r\n\r\n      /**\r\n       * Angle of rotation of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      angle:                    0,\r\n\r\n      /**\r\n       * Angle of skew on x axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewX:                    0,\r\n\r\n      /**\r\n       * Angle of skew on y axes of an object (in degrees)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      skewY:                    0,\r\n\r\n      /**\r\n       * Size of object's controlling corners (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cornerSize:               13,\r\n\r\n      /**\r\n       * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      transparentCorners:       true,\r\n\r\n      /**\r\n       * Default cursor value used when hovering over this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      hoverCursor:              null,\r\n\r\n      /**\r\n       * Default cursor value used when moving this object on canvas\r\n       * @type String\r\n       * @default\r\n       */\r\n      moveCursor:               null,\r\n\r\n      /**\r\n       * Padding between object and its controlling borders (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      padding:                  0,\r\n\r\n      /**\r\n       * Color of controlling borders of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      borderColor:              'rgba(102,153,255,0.75)',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's borders (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      borderDashArray:          null,\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerColor:              'rgba(102,153,255,0.5)',\r\n\r\n      /**\r\n       * Color of controlling corners of an object (when it's active and transparentCorners false)\r\n       * @since 1.6.2\r\n       * @type String\r\n       * @default\r\n       */\r\n      cornerStrokeColor:        null,\r\n\r\n      /**\r\n       * Specify style of control, 'rect' or 'circle'\r\n       * @since 1.6.2\r\n       * @type String\r\n       */\r\n      cornerStyle:          'rect',\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's control (hasBorder must be true)\r\n       * @since 1.6.2\r\n       * @type Array\r\n       */\r\n      cornerDashArray:          null,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being scaled via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredScaling:          false,\r\n\r\n      /**\r\n       * When true, this object will use center point as the origin of transformation\r\n       * when being rotated via the controls.\r\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n       * @since 1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      centeredRotation:         true,\r\n\r\n      /**\r\n       * Color of object's fill\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      fill:                     'rgb(0,0,0)',\r\n\r\n      /**\r\n       * Fill rule used to fill an object\r\n       * accepted values are nonzero, evenodd\r\n       * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\r\n       * @type String\r\n       * @default\r\n       */\r\n      fillRule:                 'nonzero',\r\n\r\n      /**\r\n       * Composite rule used for canvas globalCompositeOperation\r\n       * @type String\r\n       * @default\r\n       */\r\n      globalCompositeOperation: 'source-over',\r\n\r\n      /**\r\n       * Background color of an object.\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      backgroundColor:          '',\r\n\r\n      /**\r\n       * Selection Background color of an object. colored layer behind the object when it is active.\r\n       * does not mix good with globalCompositeOperation methods.\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionBackgroundColor:          '',\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color\r\n       * takes css colors https://www.w3.org/TR/css-color-3/\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:                   null,\r\n\r\n      /**\r\n       * Width of a stroke used to render this object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth:              1,\r\n\r\n      /**\r\n       * Array specifying dash pattern of an object's stroke (stroke must be defined)\r\n       * @type Array\r\n       */\r\n      strokeDashArray:          null,\r\n\r\n      /**\r\n       * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineCap:            'butt',\r\n\r\n      /**\r\n       * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      strokeLineJoin:           'miter',\r\n\r\n      /**\r\n       * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeMiterLimit:         4,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:                   null,\r\n\r\n      /**\r\n       * Opacity of object's controlling borders when object is active and moving\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderOpacityWhenMoving:  0.4,\r\n\r\n      /**\r\n       * Scale factor of object's controlling borders\r\n       * @type Number\r\n       * @default\r\n       */\r\n      borderScaleFactor:        1,\r\n\r\n      /**\r\n       * Transform matrix (similar to SVG's transform matrix)\r\n       * @type Array\r\n       */\r\n      transformMatrix:          null,\r\n\r\n      /**\r\n       * Minimum allowed scale value of an object\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minScaleLimit:            0,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\r\n       * But events still fire on it.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      selectable:               true,\r\n\r\n      /**\r\n       * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      evented:                  true,\r\n\r\n      /**\r\n       * When set to `false`, an object is not rendered on canvas\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      visible:                  true,\r\n\r\n      /**\r\n       * When set to `false`, object's controls are not displayed and can not be used to manipulate object\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasControls:              true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling borders are not rendered\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasBorders:               true,\r\n\r\n      /**\r\n       * When set to `false`, object's controlling rotating point will not be visible or selectable\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      hasRotatingPoint:         true,\r\n\r\n      /**\r\n       * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rotatingPointOffset:      40,\r\n\r\n      /**\r\n       * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      perPixelTargetFind:       false,\r\n\r\n      /**\r\n       * When `false`, default object's values are not included in its serialization\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      includeDefaultValues:     true,\r\n\r\n      /**\r\n       * Function that determines clipping of an object (context is passed as a first argument).\r\n       * If you are using code minification, ctx argument can be minified/manglied you should use\r\n       * as a workaround `var ctx = arguments[0];` in the function;\r\n       * Note that context origin is at the object's center point (not left/top corner)\r\n       * @deprecated since 2.0.0\r\n       * @type Function\r\n       */\r\n      clipTo:                   null,\r\n\r\n      /**\r\n       * When `true`, object horizontal movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementX:            false,\r\n\r\n      /**\r\n       * When `true`, object vertical movement is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockMovementY:            false,\r\n\r\n      /**\r\n       * When `true`, object rotation is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockRotation:             false,\r\n\r\n      /**\r\n       * When `true`, object horizontal scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingY:             false,\r\n\r\n      /**\r\n       * When `true`, object non-uniform scaling is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockUniScaling:           false,\r\n\r\n      /**\r\n       * When `true`, object horizontal skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingX:             false,\r\n\r\n      /**\r\n       * When `true`, object vertical skewing is locked\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockSkewingY:             false,\r\n\r\n      /**\r\n       * When `true`, object cannot be flipped by scaling into negative values\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      lockScalingFlip:          false,\r\n\r\n      /**\r\n       * When `true`, object is not exported in OBJECT/JSON\r\n       * since 1.6.3\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      excludeFromExport:        false,\r\n\r\n      /**\r\n       * When `true`, object is cached on an additional canvas.\r\n       * default to true\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      objectCaching:            objectCaching,\r\n\r\n      /**\r\n       * When `true`, object properties are checked for cache invalidation. In some particular\r\n       * situation you may want this to be disabled ( spray brush, very big, groups)\r\n       * or if your application does not allow you to modify properties for groups child you want\r\n       * to disable it for groups.\r\n       * default to false\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default false\r\n       */\r\n      statefullCache:            false,\r\n\r\n      /**\r\n       * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\r\n       * too much and will be redrawn with correct details at the end of scaling.\r\n       * this setting is performance and application dependant.\r\n       * default to true\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      noScaleCache:              true,\r\n\r\n      /**\r\n       * When set to `true`, object's cache will be rerendered next render call.\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default true\r\n       */\r\n      dirty:                true,\r\n\r\n      /**\r\n       * keeps the value of the last hovered coner during mouse move.\r\n       * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\r\n       * It should be private, but there is no harm in using it as\r\n       * a read-only property.\r\n       * @type number|string|any\r\n       * @default 0\r\n       */\r\n      __corner: 0,\r\n\r\n      /**\r\n       * Determins if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\r\n       * @type String\r\n       * @default\r\n       */\r\n      paintFirst:           'fill',\r\n\r\n      /**\r\n       * List of properties to consider when checking if state\r\n       * of an object is changed (fabric.Object#hasStateChanged)\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: (\r\n        'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\r\n        'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\r\n        'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\r\n        'skewX skewY fillRule paintFirst'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n       * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n       * and refreshed at the next render\r\n       * @type Array\r\n       */\r\n      cacheProperties: (\r\n        'fill stroke strokeWidth strokeDashArray width height paintFirst' +\r\n        ' strokeLineCap strokeLineJoin strokeMiterLimit backgroundColor'\r\n      ).split(' '),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        if (options) {\r\n          this.setOptions(options);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a the canvas used to keep the cached copy of the object\r\n       * @private\r\n       */\r\n      _createCacheCanvas: function() {\r\n        this._cacheProperties = {};\r\n        this._cacheCanvas = fabric.util.createCanvasElement();\r\n        this._cacheContext = this._cacheCanvas.getContext('2d');\r\n        this._updateCacheCanvas();\r\n        // if canvas gets created, is empty, so dirty.\r\n        this.dirty = true;\r\n      },\r\n\r\n      /**\r\n       * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\r\n       * and each side do not cross fabric.cacheSideLimit\r\n       * those numbers are configurable so that you can get as much detail as you want\r\n       * making bargain with performances.\r\n       * @param {Object} dims\r\n       * @param {Object} dims.width width of canvas\r\n       * @param {Object} dims.height height of canvas\r\n       * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _limitCacheSize: function(dims) {\r\n        var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\r\n            width = dims.width, height = dims.height,\r\n            max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\r\n        if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\r\n          if (width < min) {\r\n            dims.width = min;\r\n          }\r\n          if (height < min) {\r\n            dims.height = min;\r\n          }\r\n          return dims;\r\n        }\r\n        var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\r\n            capValue = fabric.util.capValue,\r\n            x = capValue(min, limitedDims.x, max),\r\n            y = capValue(min, limitedDims.y, max);\r\n        if (width > x) {\r\n          dims.zoomX /= width / x;\r\n          dims.width = x;\r\n          dims.capped = true;\r\n        }\r\n        if (height > y) {\r\n          dims.zoomY /= height / y;\r\n          dims.height = y;\r\n          dims.capped = true;\r\n        }\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @param {Object} dim.x width of object to be cached\r\n       * @param {Object} dim.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var objectScale = this.getTotalObjectScaling(),\r\n            dim = this._getNonTransformedDimensions(),\r\n            zoomX = objectScale.scaleX,\r\n            zoomY = objectScale.scaleY,\r\n            width = dim.x * zoomX,\r\n            height = dim.y * zoomY;\r\n        return {\r\n          // for sure this ALIASING_LIMIT is slightly crating problem\r\n          // in situation in wich the cache canvas gets an upper limit\r\n          width: width + ALIASING_LIMIT,\r\n          height: height + ALIASING_LIMIT,\r\n          zoomX: zoomX,\r\n          zoomY: zoomY,\r\n          x: dim.x,\r\n          y: dim.y\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Update width and height of the canvas for cache\r\n       * returns true or false if canvas needed resize.\r\n       * @private\r\n       * @return {Boolean} true if the canvas has been resized\r\n       */\r\n      _updateCacheCanvas: function() {\r\n        if (this.noScaleCache && this.canvas && this.canvas._currentTransform) {\r\n          var target = this.canvas._currentTransform.target,\r\n              action = this.canvas._currentTransform.action;\r\n          if (this === target && action.slice && action.slice(0, 5) === 'scale') {\r\n            return false;\r\n          }\r\n        }\r\n        var canvas = this._cacheCanvas,\r\n            dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n            minCacheSize = fabric.minCacheSideLimit,\r\n            width = dims.width, height = dims.height, drawingWidth, drawingHeight,\r\n            zoomX = dims.zoomX, zoomY = dims.zoomY,\r\n            dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\r\n            zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\r\n            shouldRedraw = dimensionsChanged || zoomChanged,\r\n            additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\r\n        if (dimensionsChanged) {\r\n          var canvasWidth = this._cacheCanvas.width,\r\n              canvasHeight = this._cacheCanvas.height,\r\n              sizeGrowing = width > canvasWidth || height > canvasHeight,\r\n              sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\r\n                canvasWidth > minCacheSize && canvasHeight > minCacheSize;\r\n          shouldResizeCanvas = sizeGrowing || sizeShrinking;\r\n          if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\r\n            additionalWidth = width * 0.1;\r\n            additionalHeight = height * 0.1;\r\n          }\r\n        }\r\n        if (shouldRedraw) {\r\n          if (shouldResizeCanvas) {\r\n            canvas.width = Math.ceil(width + additionalWidth);\r\n            canvas.height = Math.ceil(height + additionalHeight);\r\n          }\r\n          else {\r\n            this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\r\n            this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\r\n          }\r\n          drawingWidth = dims.x * zoomX / 2;\r\n          drawingHeight = dims.y * zoomY / 2;\r\n          this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\r\n          this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\r\n          this.cacheWidth = width;\r\n          this.cacheHeight = height;\r\n          this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\r\n          this._cacheContext.scale(zoomX, zoomY);\r\n          this.zoomX = zoomX;\r\n          this.zoomY = zoomY;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets object's properties from options\r\n       * @param {Object} [options] Options object\r\n       */\r\n      setOptions: function(options) {\r\n        this._setOptions(options);\r\n        this._initGradient(options.fill, 'fill');\r\n        this._initGradient(options.stroke, 'stroke');\r\n        this._initClipping(options);\r\n        this._initPattern(options.fill, 'fill');\r\n        this._initPattern(options.stroke, 'stroke');\r\n      },\r\n\r\n      /**\r\n       * Transforms context when rendering an object\r\n       * @param {CanvasRenderingContext2D} ctx Context\r\n       */\r\n      transform: function(ctx) {\r\n        var m;\r\n        if (this.group && !this.group._transformDone) {\r\n          m = this.calcTransformMatrix();\r\n        }\r\n        else {\r\n          m = this.calcOwnMatrix();\r\n        }\r\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n      },\r\n\r\n      /**\r\n       * Returns an object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n\r\n            object = {\r\n              type:                     this.type,\r\n              version:                  fabric.version,\r\n              originX:                  this.originX,\r\n              originY:                  this.originY,\r\n              left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\r\n              top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\r\n              width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\r\n              height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\r\n              fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\r\n              stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\r\n              strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\r\n              strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\r\n              strokeLineCap:            this.strokeLineCap,\r\n              strokeLineJoin:           this.strokeLineJoin,\r\n              strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\r\n              scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\r\n              scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\r\n              angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\r\n              flipX:                    this.flipX,\r\n              flipY:                    this.flipY,\r\n              opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\r\n              shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\r\n              visible:                  this.visible,\r\n              clipTo:                   this.clipTo && String(this.clipTo),\r\n              backgroundColor:          this.backgroundColor,\r\n              fillRule:                 this.fillRule,\r\n              paintFirst:               this.paintFirst,\r\n              globalCompositeOperation: this.globalCompositeOperation,\r\n              transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\r\n              skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\r\n              skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS)\r\n            };\r\n\r\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n        if (!this.includeDefaultValues) {\r\n          object = this._removeDefaultValues(object);\r\n        }\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns (dataless) object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        // will be overwritten by subclasses\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       */\r\n      _removeDefaultValues: function(object) {\r\n        var prototype = fabric.util.getKlass(object.type).prototype,\r\n            stateProperties = prototype.stateProperties;\r\n        stateProperties.forEach(function(prop) {\r\n          if (object[prop] === prototype[prop]) {\r\n            delete object[prop];\r\n          }\r\n          var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\r\n                        Object.prototype.toString.call(prototype[prop]) === '[object Array]';\r\n\r\n          // basically a check for [] === []\r\n          if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\r\n            delete object[prop];\r\n          }\r\n        });\r\n\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns a string representation of an instance\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.' + capitalize(this.type) + '>';\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getObjectScaling: function() {\r\n        var scaleX = this.scaleX, scaleY = this.scaleY;\r\n        if (this.group) {\r\n          var scaling = this.group.getObjectScaling();\r\n          scaleX *= scaling.scaleX;\r\n          scaleY *= scaling.scaleY;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object scale factor counting also the group scaling, zoom and retina\r\n       * @return {Object} object with scaleX and scaleY properties\r\n       */\r\n      getTotalObjectScaling: function() {\r\n        var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\r\n        if (this.canvas) {\r\n          var zoom = this.canvas.getZoom();\r\n          var retina = this.canvas.getRetinaScaling();\r\n          scaleX *= zoom * retina;\r\n          scaleY *= zoom * retina;\r\n        }\r\n        return { scaleX: scaleX, scaleY: scaleY };\r\n      },\r\n\r\n      /**\r\n       * Return the object opacity counting also the group property\r\n       * @return {Number}\r\n       */\r\n      getObjectOpacity: function() {\r\n        var opacity = this.opacity;\r\n        if (this.group) {\r\n          opacity *= this.group.getObjectOpacity();\r\n        }\r\n        return opacity;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\r\n            isChanged = this[key] !== value, groupNeedsUpdate = false;\r\n\r\n        if (shouldConstrainValue) {\r\n          value = this._constrainScale(value);\r\n        }\r\n        if (key === 'scaleX' && value < 0) {\r\n          this.flipX = !this.flipX;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'scaleY' && value < 0) {\r\n          this.flipY = !this.flipY;\r\n          value *= -1;\r\n        }\r\n        else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\r\n          value = new fabric.Shadow(value);\r\n        }\r\n        else if (key === 'dirty' && this.group) {\r\n          this.group.set('dirty', value);\r\n        }\r\n\r\n        this[key] = value;\r\n\r\n        if (isChanged) {\r\n          groupNeedsUpdate = this.group && this.group.isOnACache();\r\n          if (this.cacheProperties.indexOf(key) > -1) {\r\n            this.dirty = true;\r\n            groupNeedsUpdate && this.group.set('dirty', true);\r\n          }\r\n          else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\r\n            this.group.set('dirty', true);\r\n          }\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called by the parent group of an object every\r\n       * time a non-delegated property changes on the group. It is passed the key\r\n       * and value as parameters. Not adding in this function's signature to avoid\r\n       * Travis build error about unused variables.\r\n       */\r\n      setOnGroup: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n      /**\r\n       * Retrieves viewportTransform from Object's canvas if possible\r\n       * @method getViewportTransform\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Boolean}\r\n       */\r\n      getViewportTransform: function() {\r\n        if (this.canvas && this.canvas.viewportTransform) {\r\n          return this.canvas.viewportTransform;\r\n        }\r\n        return fabric.iMatrix.concat();\r\n      },\r\n\r\n      /*\r\n       * @private\r\n       * return if the object would be visible in rendering\r\n       * @memberOf fabric.Object.prototype\r\n       * @return {Boolean}\r\n       */\r\n      isNotVisible: function() {\r\n        return this.opacity === 0 || (this.width === 0 && this.height === 0) || !this.visible;\r\n      },\r\n\r\n      /**\r\n       * Renders an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if width/height are zeros or object is not visible\r\n        if (this.isNotVisible()) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        ctx.save();\r\n        this._setupCompositeOperation(ctx);\r\n        this.drawSelectionBackground(ctx);\r\n        this.transform(ctx);\r\n        this._setOpacity(ctx);\r\n        this._setShadow(ctx, this);\r\n        if (this.transformMatrix) {\r\n          ctx.transform.apply(ctx, this.transformMatrix);\r\n        }\r\n        this.clipTo && fabric.util.clipContext(this, ctx);\r\n        if (this.shouldCache()) {\r\n          if (!this._cacheCanvas) {\r\n            this._createCacheCanvas();\r\n\r\n          }\r\n          if (this.isCacheDirty()) {\r\n            this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\r\n            this.drawObject(this._cacheContext);\r\n            this.dirty = false;\r\n          }\r\n          this.drawCacheOnCanvas(ctx);\r\n        }\r\n        else {\r\n          this._removeCacheCanvas();\r\n          this.dirty = false;\r\n          this.drawObject(ctx);\r\n          if (this.objectCaching && this.statefullCache) {\r\n            this.saveState({ propertySet: 'cacheProperties' });\r\n          }\r\n        }\r\n        this.clipTo && ctx.restore();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Remove cacheCanvas and its dimensions from the objects\r\n       */\r\n      _removeCacheCanvas: function() {\r\n        this._cacheCanvas = null;\r\n        this.cacheWidth = 0;\r\n        this.cacheHeight = 0;\r\n      },\r\n\r\n      /**\r\n       * When set to `true`, force the object to have its own cache, even if it is inside a group\r\n       * it may be needed when your object behave in a particular way on the cache and always needs\r\n       * its own isolated canvas to render correctly.\r\n       * Created to be overridden\r\n       * since 1.7.12\r\n       * @returns false\r\n       */\r\n      needsItsOwnCache: function() {\r\n        if (this.paintFirst === 'stroke' && typeof this.shadow === 'object') {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        this.ownCaching = this.objectCaching &&\r\n        (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\r\n        return this.ownCaching;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * used by Group.shouldCache to know if child has a shadow recursively\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx) {\r\n        this._renderBackground(ctx);\r\n        this._setStrokeStyles(ctx, this);\r\n        this._setFillStyles(ctx, this);\r\n        this._render(ctx);\r\n      },\r\n\r\n      /**\r\n       * Paint the cached copy of the object on the target context.\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawCacheOnCanvas: function(ctx) {\r\n        ctx.scale(1 / this.zoomX, 1 / this.zoomY);\r\n        ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       * @param {Boolean} skipCanvas skip canvas checks because this object is painted\r\n       * on parent canvas.\r\n       */\r\n      isCacheDirty: function(skipCanvas) {\r\n        if (this.isNotVisible()) {\r\n          return false;\r\n        }\r\n        if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\r\n          // in this case the context is already cleared.\r\n          return true;\r\n        }\r\n        else {\r\n          if (this.dirty || (this.statefullCache && this.hasStateChanged('cacheProperties'))) {\r\n            if (this._cacheCanvas && !skipCanvas) {\r\n              var width = this.cacheWidth / this.zoomX;\r\n              var height = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Draws a background for the object big as its untrasformed dimensions\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderBackground: function(ctx) {\r\n        if (!this.backgroundColor) {\r\n          return;\r\n        }\r\n        var dim = this._getNonTransformedDimensions();\r\n        ctx.fillStyle = this.backgroundColor;\r\n\r\n        ctx.fillRect(\r\n          -dim.x / 2,\r\n          -dim.y / 2,\r\n          dim.x,\r\n          dim.y\r\n        );\r\n        // if there is background color no other shadows\r\n        // should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setOpacity: function(ctx) {\r\n        if (this.group && !this.group._transformDone) {\r\n          ctx.globalAlpha = this.getObjectOpacity();\r\n        }\r\n        else {\r\n          ctx.globalAlpha *= this.opacity;\r\n        }\r\n      },\r\n\r\n      _setStrokeStyles: function(ctx, decl) {\r\n        if (decl.stroke) {\r\n          ctx.lineWidth = decl.strokeWidth;\r\n          ctx.lineCap = decl.strokeLineCap;\r\n          ctx.lineJoin = decl.strokeLineJoin;\r\n          ctx.miterLimit = decl.strokeMiterLimit;\r\n          ctx.strokeStyle = decl.stroke.toLive\r\n            ? decl.stroke.toLive(ctx, this)\r\n            : decl.stroke;\r\n        }\r\n      },\r\n\r\n      _setFillStyles: function(ctx, decl) {\r\n        if (decl.fill) {\r\n          ctx.fillStyle = decl.fill.toLive\r\n            ? decl.fill.toLive(ctx, this)\r\n            : decl.fill;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Sets line dash\r\n       * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\r\n       * @param {Array} dashArray array representing dashes\r\n       * @param {Function} alternative function to call if browaser does not support lineDash\r\n       */\r\n      _setLineDash: function(ctx, dashArray, alternative) {\r\n        if (!dashArray) {\r\n          return;\r\n        }\r\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\r\n        if (1 & dashArray.length) {\r\n          dashArray.push.apply(dashArray, dashArray);\r\n        }\r\n        if (supportsLineDash) {\r\n          ctx.setLineDash(dashArray);\r\n        }\r\n        else {\r\n          alternative && alternative(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       */\r\n      _renderControls: function(ctx, styleOverride) {\r\n        var vpt = this.getViewportTransform(),\r\n            matrix = this.calcTransformMatrix(),\r\n            options, drawBorders, drawControls;\r\n        styleOverride = styleOverride || { };\r\n        drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\r\n        drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\r\n        matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\r\n        options = fabric.util.qrDecompose(matrix);\r\n        ctx.save();\r\n        ctx.translate(options.translateX, options.translateY);\r\n        ctx.lineWidth = 1 * this.borderScaleFactor;\r\n        if (!this.group) {\r\n          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        }\r\n        if (styleOverride.forActiveSelection) {\r\n          ctx.rotate(degreesToRadians(options.angle));\r\n          drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\r\n        }\r\n        else {\r\n          ctx.rotate(degreesToRadians(this.angle));\r\n          drawBorders && this.drawBorders(ctx, styleOverride);\r\n        }\r\n        drawControls && this.drawControls(ctx, styleOverride);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _setShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\r\n            multY = (this.canvas && this.canvas.viewportTransform[3]) || 1,\r\n            scaling = this.getObjectScaling();\r\n        if (this.canvas && this.canvas._isRetinaScaling()) {\r\n          multX *= fabric.devicePixelRatio;\r\n          multY *= fabric.devicePixelRatio;\r\n        }\r\n        ctx.shadowColor = this.shadow.color;\r\n        ctx.shadowBlur = this.shadow.blur * fabric.browserShadowBlurConstant *\r\n          (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\r\n        ctx.shadowOffsetX = this.shadow.offsetX * multX * scaling.scaleX;\r\n        ctx.shadowOffsetY = this.shadow.offsetY * multY * scaling.scaleY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _removeShadow: function(ctx) {\r\n        if (!this.shadow) {\r\n          return;\r\n        }\r\n\r\n        ctx.shadowColor = '';\r\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n       */\r\n      _applyPatternGradientTransform: function(ctx, filler) {\r\n        if (!filler || !filler.toLive) {\r\n          return { offsetX: 0, offsetY: 0 };\r\n        }\r\n        var t = filler.gradientTransform || filler.patternTransform;\r\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n            offsetY = -this.height / 2 + filler.offsetY || 0;\r\n        ctx.translate(offsetX, offsetY);\r\n        if (t) {\r\n          ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\r\n        }\r\n        return { offsetX: offsetX, offsetY: offsetY };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderPaintInOrder: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderStroke(ctx);\r\n          this._renderFill(ctx);\r\n        }\r\n        else {\r\n          this._renderFill(ctx);\r\n          this._renderStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderFill: function(ctx) {\r\n        if (!this.fill) {\r\n          return;\r\n        }\r\n\r\n        ctx.save();\r\n        this._applyPatternGradientTransform(ctx, this.fill);\r\n        if (this.fillRule === 'evenodd') {\r\n          ctx.fill('evenodd');\r\n        }\r\n        else {\r\n          ctx.fill();\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      _renderStroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\r\n        this._applyPatternGradientTransform(ctx, this.stroke);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it decoompose the transformMatrix\r\n       * and assign properties to object.\r\n       * untransformed coordinates\r\n       * @private\r\n       * @chainable\r\n       */\r\n      _assignTransformMatrixProps: function() {\r\n        if (this.transformMatrix) {\r\n          var options = fabric.util.qrDecompose(this.transformMatrix);\r\n          this.flipX = false;\r\n          this.flipY = false;\r\n          this.set('scaleX', options.scaleX);\r\n          this.set('scaleY', options.scaleY);\r\n          this.angle = options.angle;\r\n          this.skewX = options.skewX;\r\n          this.skewY = 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it removes the transform matrix\r\n       * and set to object properties that fabricjs can handle\r\n       * @private\r\n       * @param {Object} preserveAspectRatioOptions\r\n       * @return {thisArg}\r\n       */\r\n      _removeTransformMatrix: function(preserveAspectRatioOptions) {\r\n        var center = this._findCenterFromElement();\r\n        if (this.transformMatrix) {\r\n          this._assignTransformMatrixProps();\r\n          center = fabric.util.transformPoint(center, this.transformMatrix);\r\n        }\r\n        this.transformMatrix = null;\r\n        if (preserveAspectRatioOptions) {\r\n          this.scaleX *= preserveAspectRatioOptions.scaleX;\r\n          this.scaleY *= preserveAspectRatioOptions.scaleY;\r\n          this.cropX = preserveAspectRatioOptions.cropX;\r\n          this.cropY = preserveAspectRatioOptions.cropY;\r\n          center.x += preserveAspectRatioOptions.offsetLeft;\r\n          center.y += preserveAspectRatioOptions.offsetTop;\r\n          this.width = preserveAspectRatioOptions.width;\r\n          this.height = preserveAspectRatioOptions.height;\r\n        }\r\n        this.setPositionByOrigin(center, 'center', 'center');\r\n      },\r\n\r\n      /**\r\n       * Clones an instance, using a callback method will work for every object.\r\n       * @param {Function} callback Callback is invoked with a clone as a first argument\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       */\r\n      clone: function(callback, propertiesToInclude) {\r\n        var objectForm = this.toObject(propertiesToInclude);\r\n        if (this.constructor.fromObject) {\r\n          this.constructor.fromObject(objectForm, callback);\r\n        }\r\n        else {\r\n          fabric.Object._fromObject('Object', objectForm, callback);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Creates an instance of fabric.Image out of an object\r\n       * @param {Function} callback callback, invoked with an instance as a first argument\r\n       * @param {Object} [options] for clone as image, passed to toDataURL\r\n       * @param {Boolean} [options.enableRetinaScaling] enable retina scaling for the cloned image\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      cloneAsImage: function(callback, options) {\r\n        var dataUrl = this.toDataURL(options);\r\n        fabric.util.loadImage(dataUrl, function(img) {\r\n          if (callback) {\r\n            callback(new fabric.Image(img));\r\n          }\r\n        });\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Converts an object into a data-url-like string\r\n       * @param {Object} options Options object\r\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n       */\r\n      toDataURL: function(options) {\r\n        options || (options = { });\r\n\r\n        var origParams = fabric.util.saveObjectTransform(this);\r\n\r\n        if (options.withoutTransform) {\r\n          fabric.util.resetObjectTransform(this);\r\n        }\r\n\r\n        var el = fabric.util.createCanvasElement(),\r\n            // skip canvas zoom and calculate with setCoords now.\r\n            boundingRect = this.getBoundingRect(true, true);\r\n\r\n        el.width = boundingRect.width;\r\n        el.height = boundingRect.height;\r\n        var canvas = new fabric.StaticCanvas(el, {\r\n          enableRetinaScaling: options.enableRetinaScaling,\r\n          renderOnAddRemove: false,\r\n          skipOffscreen: false,\r\n        });\r\n        // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\r\n        if (options.format === 'jpg') {\r\n          options.format = 'jpeg';\r\n        }\r\n\r\n        if (options.format === 'jpeg') {\r\n          canvas.backgroundColor = '#fff';\r\n        }\r\n\r\n        this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\r\n\r\n        var originalCanvas = this.canvas;\r\n        canvas.add(this);\r\n        var data = canvas.toDataURL(options);\r\n        this.set(origParams).setCoords();\r\n        this.canvas = originalCanvas;\r\n        // canvas.dispose will call image.dispose that will nullify the elements\r\n        // since this canvas is a simple element for the process, we remove references\r\n        // to objects in this way in order to avoid object trashing.\r\n        canvas._objects = [];\r\n        canvas.dispose();\r\n        canvas = null;\r\n\r\n        return data;\r\n      },\r\n\r\n      /**\r\n       * Returns true if specified type is identical to the type of an instance\r\n       * @param {String} type Type to check against\r\n       * @return {Boolean}\r\n       */\r\n      isType: function(type) {\r\n        return this.type === type;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance (is 1 unless subclassed)\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      },\r\n\r\n      /**\r\n       * Returns a JSON representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} JSON\r\n       */\r\n      toJSON: function(propertiesToInclude) {\r\n        // delegate, not alias\r\n        return this.toObject(propertiesToInclude);\r\n      },\r\n\r\n      /**\r\n       * Sets gradient (fill or stroke) of an object\r\n       * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\r\n       * @param {String} property Property name 'stroke' or 'fill'\r\n       * @param {Object} [options] Options object\r\n       * @param {String} [options.type] Type of gradient 'radial' or 'linear'\r\n       * @param {Number} [options.x1=0] x-coordinate of start point\r\n       * @param {Number} [options.y1=0] y-coordinate of start point\r\n       * @param {Number} [options.x2=0] x-coordinate of end point\r\n       * @param {Number} [options.y2=0] y-coordinate of end point\r\n       * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\r\n       * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\r\n       * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\r\n       * @param {Object} [options.gradientTransform] transforMatrix for gradient\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\r\n       * @example <caption>Set linear gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'linear',\r\n       *   x1: -object.width / 2,\r\n       *   y1: 0,\r\n       *   x2: object.width / 2,\r\n       *   y2: 0,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       * @example <caption>Set radial gradient</caption>\r\n       * object.setGradient('fill', {\r\n       *   type: 'radial',\r\n       *   x1: 0,\r\n       *   y1: 0,\r\n       *   x2: 0,\r\n       *   y2: 0,\r\n       *   r1: object.width / 2,\r\n       *   r2: 10,\r\n       *   colorStops: {\r\n       *     0: 'red',\r\n       *     0.5: '#005555',\r\n       *     1: 'rgba(0,0,255,0.5)'\r\n       *   }\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setGradient: function(property, options) {\r\n        options || (options = { });\r\n\r\n        var gradient = { colorStops: [] };\r\n\r\n        gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\r\n        gradient.coords = {\r\n          x1: options.x1,\r\n          y1: options.y1,\r\n          x2: options.x2,\r\n          y2: options.y2\r\n        };\r\n\r\n        if (options.r1 || options.r2) {\r\n          gradient.coords.r1 = options.r1;\r\n          gradient.coords.r2 = options.r2;\r\n        }\r\n\r\n        gradient.gradientTransform = options.gradientTransform;\r\n        fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\r\n\r\n        return this.set(property, fabric.Gradient.forObject(this, gradient));\r\n      },\r\n\r\n      /**\r\n       * Sets pattern fill of an object\r\n       * @param {Object} options Options object\r\n       * @param {(String|HTMLImageElement)} options.source Pattern source\r\n       * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\r\n       * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\r\n       * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\r\n       * @param {Function} [callback] Callback to invoke when image set as a pattern\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\r\n       * @example <caption>Set pattern</caption>\r\n       * object.setPatternFill({\r\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n       *   repeat: 'repeat'\r\n       * },canvas.renderAll.bind(canvas));\r\n       */\r\n      setPatternFill: function(options, callback) {\r\n        return this.set('fill', new fabric.Pattern(options, callback));\r\n      },\r\n\r\n      /**\r\n       * Sets {@link fabric.Object#shadow|shadow} of an object\r\n       * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\r\n       * @param {String} [options.color=rgb(0,0,0)] Shadow color\r\n       * @param {Number} [options.blur=0] Shadow blur\r\n       * @param {Number} [options.offsetX=0] Shadow horizontal offset\r\n       * @param {Number} [options.offsetY=0] Shadow vertical offset\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\r\n       * @example <caption>Set shadow with string notation</caption>\r\n       * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\r\n       * canvas.renderAll();\r\n       * @example <caption>Set shadow with object notation</caption>\r\n       * object.setShadow({\r\n       *   color: 'red',\r\n       *   blur: 10,\r\n       *   offsetX: 20,\r\n       *   offsetY: 20\r\n       * });\r\n       * canvas.renderAll();\r\n       */\r\n      setShadow: function(options) {\r\n        return this.set('shadow', options ? new fabric.Shadow(options) : null);\r\n      },\r\n\r\n      /**\r\n       * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\r\n       * @param {String} color Color value\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setColor: function(color) {\r\n        this.set('fill', color);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets \"angle\" of an instance with centered rotation\r\n       * @param {Number} angle Angle value (in degrees)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      rotate: function(angle) {\r\n        var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._setOriginToCenter();\r\n        }\r\n\r\n        this.set('angle', angle);\r\n\r\n        if (shouldCenterOrigin) {\r\n          this._resetOrigin();\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerH: function () {\r\n        this.canvas && this.canvas.centerObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object horizontally on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterH: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectH(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      centerV: function () {\r\n        this.canvas && this.canvas.centerObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenterV: function () {\r\n        this.canvas && this.canvas.viewportCenterObjectV(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object vertically and horizontally on canvas to which is was added last\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      center: function () {\r\n        this.canvas && this.canvas.centerObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Centers object on current viewport of canvas to which it was added last.\r\n       * You might need to call `setCoords` on an object after centering, to update controls area.\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      viewportCenter: function () {\r\n        this.canvas && this.canvas.viewportCenterObject(this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of a pointer relative to an object\r\n       * @param {Event} e Event to operate upon\r\n       * @param {Object} [pointer] Pointer to operate upon (instead of event)\r\n       * @return {Object} Coordinates of a pointer (x, y)\r\n       */\r\n      getLocalPointer: function(e, pointer) {\r\n        pointer = pointer || this.canvas.getPointer(e);\r\n        var pClicked = new fabric.Point(pointer.x, pointer.y),\r\n            objectLeftTop = this._getLeftTopCoords();\r\n        if (this.angle) {\r\n          pClicked = fabric.util.rotatePoint(\r\n            pClicked, objectLeftTop, degreesToRadians(-this.angle));\r\n        }\r\n        return {\r\n          x: pClicked.x - objectLeftTop.x,\r\n          y: pClicked.y - objectLeftTop.y\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Sets canvas globalCompositeOperation for specific object\r\n       * custom composition operation for the particular object can be specifed using globalCompositeOperation property\r\n       * @param {CanvasRenderingContext2D} ctx Rendering canvas context\r\n       */\r\n      _setupCompositeOperation: function (ctx) {\r\n        if (this.globalCompositeOperation) {\r\n          ctx.globalCompositeOperation = this.globalCompositeOperation;\r\n        }\r\n      }\r\n    });\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\r\n\r\n    extend(fabric.Object.prototype, fabric.Observable);\r\n\r\n    /**\r\n     * Defines the number of fraction digits to use when serializing object values.\r\n     * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @constant\r\n     * @type Number\r\n     */\r\n    fabric.Object.NUM_FRACTION_DIGITS = 2;\r\n\r\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\r\n      var klass = fabric[className];\r\n      object = clone(object, true);\r\n      fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\r\n        if (typeof patterns[0] !== 'undefined') {\r\n          object.fill = patterns[0];\r\n        }\r\n        if (typeof patterns[1] !== 'undefined') {\r\n          object.stroke = patterns[1];\r\n        }\r\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\r\n        callback && callback(instance);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Unique id used internally when creating SVG elements\r\n     * @static\r\n     * @memberOf fabric.Object\r\n     * @type Number\r\n     */\r\n    fabric.Object.__uid = 0;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        originXOffset = {\r\n          left: -0.5,\r\n          center: 0,\r\n          right: 0.5\r\n        },\r\n        originYOffset = {\r\n          top: -0.5,\r\n          center: 0,\r\n          bottom: 0.5\r\n        };\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Translates the coordinates from a set of origin to another (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\r\n        var x = point.x,\r\n            y = point.y,\r\n            offsetX, offsetY, dim;\r\n\r\n        if (typeof fromOriginX === 'string') {\r\n          fromOriginX = originXOffset[fromOriginX];\r\n        }\r\n        else {\r\n          fromOriginX -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginX === 'string') {\r\n          toOriginX = originXOffset[toOriginX];\r\n        }\r\n        else {\r\n          toOriginX -= 0.5;\r\n        }\r\n\r\n        offsetX = toOriginX - fromOriginX;\r\n\r\n        if (typeof fromOriginY === 'string') {\r\n          fromOriginY = originYOffset[fromOriginY];\r\n        }\r\n        else {\r\n          fromOriginY -= 0.5;\r\n        }\r\n\r\n        if (typeof toOriginY === 'string') {\r\n          toOriginY = originYOffset[toOriginY];\r\n        }\r\n        else {\r\n          toOriginY -= 0.5;\r\n        }\r\n\r\n        offsetY = toOriginY - fromOriginY;\r\n\r\n        if (offsetX || offsetY) {\r\n          dim = this._getTransformedDimensions();\r\n          x = point.x + offsetX * dim.x;\r\n          y = point.y + offsetY * dim.y;\r\n        }\r\n\r\n        return new fabric.Point(x, y);\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToCenterPoint: function(point, originX, originY) {\r\n        var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\r\n       * @param {fabric.Point} center The point which corresponds to center of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      translateToOriginPoint: function(center, originX, originY) {\r\n        var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        if (this.angle) {\r\n          return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\r\n        }\r\n        return p;\r\n      },\r\n\r\n      /**\r\n       * Returns the real center coordinates of the object\r\n       * @return {fabric.Point}\r\n       */\r\n      getCenterPoint: function() {\r\n        var leftTop = new fabric.Point(this.left, this.top);\r\n        return this.translateToCenterPoint(leftTop, this.originX, this.originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the coordinates of the object based on center coordinates\r\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n       * @return {fabric.Point}\r\n       */\r\n      // getOriginPoint: function(center) {\r\n      //   return this.translateToOriginPoint(center, this.originX, this.originY);\r\n      // },\r\n\r\n      /**\r\n       * Returns the coordinates of the object as if it has a different origin\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      getPointByOrigin: function(originX, originY) {\r\n        var center = this.getCenterPoint();\r\n        return this.translateToOriginPoint(center, originX, originY);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in local coordinates\r\n       * @param {fabric.Point} point The point relative to the global coordinate system\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {fabric.Point}\r\n       */\r\n      toLocalPoint: function(point, originX, originY) {\r\n        var center = this.getCenterPoint(),\r\n            p, p2;\r\n\r\n        if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\r\n          p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n        }\r\n        else {\r\n          p = new fabric.Point(this.left, this.top);\r\n        }\r\n\r\n        p2 = new fabric.Point(point.x, point.y);\r\n        if (this.angle) {\r\n          p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\r\n        }\r\n        return p2.subtractEquals(p);\r\n      },\r\n\r\n      /**\r\n       * Returns the point in global coordinates\r\n       * @param {fabric.Point} The point relative to the local coordinate system\r\n       * @return {fabric.Point}\r\n       */\r\n      // toGlobalPoint: function(point) {\r\n      //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\r\n      // },\r\n\r\n      /**\r\n       * Sets the position of the object taking into consideration the object's origin\r\n       * @param {fabric.Point} pos The new position of the object\r\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n       * @return {void}\r\n       */\r\n      setPositionByOrigin: function(pos, originX, originY) {\r\n        var center = this.translateToCenterPoint(pos, originX, originY),\r\n            position = this.translateToOriginPoint(center, this.originX, this.originY);\r\n        this.set('left', position.x);\r\n        this.set('top', position.y);\r\n      },\r\n\r\n      /**\r\n       * @param {String} to One of 'left', 'center', 'right'\r\n       */\r\n      adjustPosition: function(to) {\r\n        var angle = degreesToRadians(this.angle),\r\n            hypotFull = this.getScaledWidth(),\r\n            xFull = fabric.util.cos(angle) * hypotFull,\r\n            yFull = fabric.util.sin(angle) * hypotFull,\r\n            offsetFrom, offsetTo;\r\n\r\n        //TODO: this function does not consider mixed situation like top, center.\r\n        if (typeof this.originX === 'string') {\r\n          offsetFrom = originXOffset[this.originX];\r\n        }\r\n        else {\r\n          offsetFrom = this.originX - 0.5;\r\n        }\r\n        if (typeof to === 'string') {\r\n          offsetTo = originXOffset[to];\r\n        }\r\n        else {\r\n          offsetTo = to - 0.5;\r\n        }\r\n        this.left += xFull * (offsetTo - offsetFrom);\r\n        this.top += yFull * (offsetTo - offsetFrom);\r\n        this.setCoords();\r\n        this.originX = to;\r\n      },\r\n\r\n      /**\r\n       * Sets the origin/position of the object to it's center point\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _setOriginToCenter: function() {\r\n        this._originalOriginX = this.originX;\r\n        this._originalOriginY = this.originY;\r\n\r\n        var center = this.getCenterPoint();\r\n\r\n        this.originX = 'center';\r\n        this.originY = 'center';\r\n\r\n        this.left = center.x;\r\n        this.top = center.y;\r\n      },\r\n\r\n      /**\r\n       * Resets the origin/position of the object to it's original origin\r\n       * @private\r\n       * @return {void}\r\n       */\r\n      _resetOrigin: function() {\r\n        var originPoint = this.translateToOriginPoint(\r\n          this.getCenterPoint(),\r\n          this._originalOriginX,\r\n          this._originalOriginY);\r\n\r\n        this.originX = this._originalOriginX;\r\n        this.originY = this._originalOriginY;\r\n\r\n        this.left = originPoint.x;\r\n        this.top = originPoint.y;\r\n\r\n        this._originalOriginX = null;\r\n        this._originalOriginY = null;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getLeftTopCoords: function() {\r\n        return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\r\n      },\r\n    });\r\n\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function getCoords(coords) {\r\n      return [\r\n        new fabric.Point(coords.tl.x, coords.tl.y),\r\n        new fabric.Point(coords.tr.x, coords.tr.y),\r\n        new fabric.Point(coords.br.x, coords.br.y),\r\n        new fabric.Point(coords.bl.x, coords.bl.y)\r\n      ];\r\n    }\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians,\r\n        multiplyMatrices = fabric.util.multiplyTransformMatrices,\r\n        transformPoint = fabric.util.transformPoint;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Describe object's corner position in canvas element coordinates.\r\n       * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\r\n       * each property is an object with x, y and corner.\r\n       * The `corner` property contains in a similar manner the 4 points of the\r\n       * interactive area of the corner.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords;\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      oCoords: null,\r\n\r\n      /**\r\n       * Describe object's corner position in canvas object absolute coordinates\r\n       * properties are tl,tr,bl,br and describe the four main corner.\r\n       * each property is an object with x, y, instance of Fabric.Point.\r\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n       * skewX, skewY, angle, strokeWidth, top, left.\r\n       * Those coordinates are usefull to understand where an object is. They get updated\r\n       * with oCoords but they do not need to be updated when zoom or panning change.\r\n       * The coordinates get updated with @method setCoords.\r\n       * You can calculate them without updating with @method calcCoords(true);\r\n       * @memberOf fabric.Object.prototype\r\n       */\r\n      aCoords: null,\r\n\r\n      /**\r\n       * storage for object transform matrix\r\n       */\r\n      ownMatrixCache: null,\r\n\r\n      /**\r\n       * storage for object full transform matrix\r\n       */\r\n      matrixCache: null,\r\n\r\n      /**\r\n       * return correct set of coordinates for intersection\r\n       */\r\n      getCoords: function(absolute, calculate) {\r\n        if (!this.oCoords) {\r\n          this.setCoords();\r\n        }\r\n        var coords = absolute ? this.aCoords : this.oCoords;\r\n        return getCoords(calculate ? this.calcCoords(absolute) : coords);\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with an area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with an area formed by 2 points\r\n       */\r\n      intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate),\r\n            intersection = fabric.Intersection.intersectPolygonRectangle(\r\n              coords,\r\n              pointTL,\r\n              pointBR\r\n            );\r\n        return intersection.status === 'Intersection';\r\n      },\r\n\r\n      /**\r\n       * Checks if object intersects with another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object intersects with another object\r\n       */\r\n      intersectsWithObject: function(other, absolute, calculate) {\r\n        var intersection = fabric.Intersection.intersectPolygonPolygon(\r\n          this.getCoords(absolute, calculate),\r\n          other.getCoords(absolute, calculate)\r\n        );\r\n\r\n        return intersection.status === 'Intersection'\r\n          || other.isContainedWithinObject(this, absolute, calculate)\r\n          || this.isContainedWithinObject(other, absolute, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area of another object\r\n       * @param {Object} other Object to test\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area of another object\r\n       */\r\n      isContainedWithinObject: function(other, absolute, calculate) {\r\n        var points = this.getCoords(absolute, calculate),\r\n            i = 0, lines = other._getImageLines(\r\n              calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\r\n            );\r\n        for (; i < 4; i++) {\r\n          if (!other.containsPoint(points[i], lines)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is fully contained within area formed by 2 points\r\n       * @param {Object} pointTL top-left point of area\r\n       * @param {Object} pointBR bottom-right point of area\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully contained within area formed by 2 points\r\n       */\r\n      isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\r\n        var boundingRect = this.getBoundingRect(absolute, calculate);\r\n\r\n        return (\r\n          boundingRect.left >= pointTL.x &&\r\n          boundingRect.left + boundingRect.width <= pointBR.x &&\r\n          boundingRect.top >= pointTL.y &&\r\n          boundingRect.top + boundingRect.height <= pointBR.y\r\n        );\r\n      },\r\n\r\n      /**\r\n       * Checks if point is inside the object\r\n       * @param {fabric.Point} point Point to check against\r\n       * @param {Object} [lines] object returned from @method _getImageLines\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if point is inside the object\r\n       */\r\n      containsPoint: function(point, lines, absolute, calculate) {\r\n        var lines = lines || this._getImageLines(\r\n              calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\r\n            ),\r\n            xPoints = this._findCrossPoints(point, lines);\r\n\r\n        // if xPoints is odd then point is inside the object\r\n        return (xPoints !== 0 && xPoints % 2 === 1);\r\n      },\r\n\r\n      /**\r\n       * Checks if object is contained within the canvas with current viewportTransform\r\n       * the check is done stopping at first point that appears on screen\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is fully or partially contained within canvas\r\n       */\r\n      isOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        var points = this.getCoords(true, calculate), point;\r\n        for (var i = 0; i < 4; i++) {\r\n          point = points[i];\r\n          if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\r\n            return true;\r\n          }\r\n        }\r\n        // no points on screen, check intersection with absolute coordinates\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Checks if the object contains the midpoint between canvas extremities\r\n       * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\r\n       * @private\r\n       * @param {Fabric.Point} pointTL Top Left point\r\n       * @param {Fabric.Point} pointBR Top Right point\r\n       * @param {Boolean} calculate use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if the objects containe the point\r\n       */\r\n      _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\r\n        // worst case scenario the object is so big that contains the screen\r\n        var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\r\n        if (this.containsPoint(centerPoint, null, true, calculate)) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Checks if object is partially contained within the canvas with current viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n       * @return {Boolean} true if object is partially contained within canvas\r\n       */\r\n      isPartiallyOnScreen: function(calculate) {\r\n        if (!this.canvas) {\r\n          return false;\r\n        }\r\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n          return true;\r\n        }\r\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n      },\r\n\r\n      /**\r\n       * Method that returns an object with the object edges in it, given the coordinates of the corners\r\n       * @private\r\n       * @param {Object} oCoords Coordinates of the object corners\r\n       */\r\n      _getImageLines: function(oCoords) {\r\n        return {\r\n          topline: {\r\n            o: oCoords.tl,\r\n            d: oCoords.tr\r\n          },\r\n          rightline: {\r\n            o: oCoords.tr,\r\n            d: oCoords.br\r\n          },\r\n          bottomline: {\r\n            o: oCoords.br,\r\n            d: oCoords.bl\r\n          },\r\n          leftline: {\r\n            o: oCoords.bl,\r\n            d: oCoords.tl\r\n          }\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Helper method to determine how many cross points are between the 4 object edges\r\n       * and the horizontal line determined by a point on canvas\r\n       * @private\r\n       * @param {fabric.Point} point Point to check\r\n       * @param {Object} lines Coordinates of the object being evaluated\r\n       */\r\n      // remove yi, not used but left code here just in case.\r\n      _findCrossPoints: function(point, lines) {\r\n        var b1, b2, a1, a2, xi, // yi,\r\n            xcount = 0,\r\n            iLine;\r\n\r\n        for (var lineKey in lines) {\r\n          iLine = lines[lineKey];\r\n          // optimisation 1: line below point. no cross\r\n          if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 2: line above point. no cross\r\n          if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\r\n            continue;\r\n          }\r\n          // optimisation 3: vertical line case\r\n          if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\r\n            xi = iLine.o.x;\r\n            // yi = point.y;\r\n          }\r\n          // calculate the intersection point\r\n          else {\r\n            b1 = 0;\r\n            b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\r\n            a1 = point.y - b1 * point.x;\r\n            a2 = iLine.o.y - b2 * iLine.o.x;\r\n\r\n            xi = -(a1 - a2) / (b1 - b2);\r\n            // yi = a1 + b1 * xi;\r\n          }\r\n          // dont count xi < point.x cases\r\n          if (xi >= point.x) {\r\n            xcount += 1;\r\n          }\r\n          // optimisation 4: specific for square images\r\n          if (xcount === 2) {\r\n            break;\r\n          }\r\n        }\r\n        return xcount;\r\n      },\r\n\r\n      /**\r\n       * Returns coordinates of object's bounding rectangle (left, top, width, height)\r\n       * the box is intented as aligned to axis of canvas.\r\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\r\n       * @return {Object} Object with left, top, width, height properties\r\n       */\r\n      getBoundingRect: function(absolute, calculate) {\r\n        var coords = this.getCoords(absolute, calculate);\r\n        return fabric.util.makeBoundingBoxFromPoints(coords);\r\n      },\r\n\r\n      /**\r\n       * Returns width of an object bounding box counting transformations\r\n       * before 2.0 it was named getWidth();\r\n       * @return {Number} width value\r\n       */\r\n      getScaledWidth: function() {\r\n        return this._getTransformedDimensions().x;\r\n      },\r\n\r\n      /**\r\n       * Returns height of an object bounding box counting transformations\r\n       * before 2.0 it was named getHeight();\r\n       * @return {Number} height value\r\n       */\r\n      getScaledHeight: function() {\r\n        return this._getTransformedDimensions().y;\r\n      },\r\n\r\n      /**\r\n       * Makes sure the scale is valid and modifies it if necessary\r\n       * @private\r\n       * @param {Number} value\r\n       * @return {Number}\r\n       */\r\n      _constrainScale: function(value) {\r\n        if (Math.abs(value) < this.minScaleLimit) {\r\n          if (value < 0) {\r\n            return -this.minScaleLimit;\r\n          }\r\n          else {\r\n            return this.minScaleLimit;\r\n          }\r\n        }\r\n        else if (value === 0) {\r\n          return 0.0001;\r\n        }\r\n        return value;\r\n      },\r\n\r\n      /**\r\n       * Scales an object (equally by x and y)\r\n       * @param {Number} value Scale factor\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scale: function(value) {\r\n        this._set('scaleX', value);\r\n        this._set('scaleY', value);\r\n        return this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New width value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToWidth: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\r\n        return this.scale(value / this.width / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\r\n       * @param {Number} value New height value\r\n       * @param {Boolean} absolute ignore viewport\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      scaleToHeight: function(value, absolute) {\r\n        // adjust to bounding rect factor so that rotated shapes would fit as well\r\n        var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\r\n        return this.scale(value / this.height / boundingRectFactor);\r\n      },\r\n\r\n      /**\r\n       * Calculate and returns the .coords of an object.\r\n       * @return {Object} Object with tl, tr, br, bl ....\r\n       * @chainable\r\n       */\r\n      calcCoords: function(absolute) {\r\n        var rotateMatrix = this._calcRotateMatrix(),\r\n            translateMatrix = this._calcTranslateMatrix(),\r\n            startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\r\n            vpt = this.getViewportTransform(),\r\n            finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\r\n            dim = this._getTransformedDimensions(),\r\n            w = dim.x / 2, h = dim.y / 2,\r\n            tl = transformPoint({ x: -w, y: -h }, finalMatrix),\r\n            tr = transformPoint({ x: w, y: -h }, finalMatrix),\r\n            bl = transformPoint({ x: -w, y: h }, finalMatrix),\r\n            br = transformPoint({ x: w, y: h }, finalMatrix);\r\n        if (!absolute) {\r\n          var padding = this.padding, angle = degreesToRadians(this.angle),\r\n              cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\r\n              cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\r\n              cosPMinusSinP = cosP - sinP;\r\n          if (padding) {\r\n            tl.x -= cosPMinusSinP;\r\n            tl.y -= cosPSinP;\r\n            tr.x += cosPSinP;\r\n            tr.y -= cosPMinusSinP;\r\n            bl.x -= cosPSinP;\r\n            bl.y += cosPMinusSinP;\r\n            br.x += cosPMinusSinP;\r\n            br.y += cosPSinP;\r\n          }\r\n          var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\r\n              mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\r\n              mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\r\n              mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\r\n              mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\r\n        }\r\n\r\n        // if (!absolute) {\r\n        //   var canvas = this.canvas;\r\n        //   setTimeout(function() {\r\n        //     canvas.contextTop.clearRect(0, 0, 700, 700);\r\n        //     canvas.contextTop.fillStyle = 'green';\r\n        //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\r\n        //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\r\n        //   }, 50);\r\n        // }\r\n\r\n        var coords = {\r\n          // corners\r\n          tl: tl, tr: tr, br: br, bl: bl,\r\n        };\r\n        if (!absolute) {\r\n          // middle\r\n          coords.ml = ml;\r\n          coords.mt = mt;\r\n          coords.mr = mr;\r\n          coords.mb = mb;\r\n          // rotating point\r\n          coords.mtr = mtr;\r\n        }\r\n        return coords;\r\n      },\r\n\r\n      /**\r\n       * Sets corner position coordinates based on current angle, width and height.\r\n       * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\r\n       * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\r\n       * @param {Boolean} [skipAbsolute] skip calculation of aCoords, usefull in setViewportTransform\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setCoords: function(ignoreZoom, skipAbsolute) {\r\n        this.oCoords = this.calcCoords(ignoreZoom);\r\n        if (!skipAbsolute) {\r\n          this.aCoords = this.calcCoords(true);\r\n        }\r\n\r\n        // set coordinates of the draggable boxes in the corners used to scale/rotate the image\r\n        ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * calculate rotation matrix of an object\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcRotateMatrix: function() {\r\n        if (this.angle) {\r\n          var theta = degreesToRadians(this.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\r\n          return [cos, sin, -sin, cos, 0, 0];\r\n        }\r\n        return fabric.iMatrix.concat();\r\n      },\r\n\r\n      /**\r\n       * calculate the translation matrix for an object transform\r\n       * @return {Array} rotation matrix for the object\r\n       */\r\n      _calcTranslateMatrix: function() {\r\n        var center = this.getCenterPoint();\r\n        return [1, 0, 0, 1, center.x, center.y];\r\n      },\r\n\r\n      transformMatrixKey: function(skipGroup) {\r\n        var sep = '_', prefix = '';\r\n        if (!skipGroup && this.group) {\r\n          prefix = this.group.transformMatrixKey(skipGroup) + sep;\r\n        };\r\n        return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\r\n          sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\r\n          sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\r\n      },\r\n\r\n      /**\r\n       * calculate trasform Matrix that represent current transformation from\r\n       * object properties.\r\n       * @param {Boolean} [skipGroup] return transformMatrix for object and not go upward with parents\r\n       * @return {Array} matrix Transform Matrix for the object\r\n       */\r\n      calcTransformMatrix: function(skipGroup) {\r\n        if (skipGroup) {\r\n          return this.calcOwnMatrix();\r\n        }\r\n        var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var matrix = this.calcOwnMatrix();\r\n        if (this.group) {\r\n          matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\r\n        }\r\n        cache.key = key;\r\n        cache.value = matrix;\r\n        return matrix;\r\n      },\r\n\r\n      calcOwnMatrix: function() {\r\n        var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\r\n        if (cache.key === key) {\r\n          return cache.value;\r\n        }\r\n        var matrix = this._calcTranslateMatrix(),\r\n            rotateMatrix,\r\n            dimensionMatrix = this._calcDimensionsTransformMatrix(this.skewX, this.skewY, true);\r\n        if (this.angle) {\r\n          rotateMatrix = this._calcRotateMatrix();\r\n          matrix = multiplyMatrices(matrix, rotateMatrix);\r\n        }\r\n        matrix = multiplyMatrices(matrix, dimensionMatrix);\r\n        cache.key = key;\r\n        cache.value = matrix;\r\n        return matrix;\r\n      },\r\n\r\n      _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\r\n        var skewMatrix,\r\n            scaleX = this.scaleX * (flipping && this.flipX ? -1 : 1),\r\n            scaleY = this.scaleY * (flipping && this.flipY ? -1 : 1),\r\n            scaleMatrix = [scaleX, 0, 0, scaleY, 0, 0];\r\n        if (skewX) {\r\n          skewMatrix = [1, 0, Math.tan(degreesToRadians(skewX)), 1];\r\n          scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\r\n        }\r\n        if (skewY) {\r\n          skewMatrix = [1, Math.tan(degreesToRadians(skewY)), 0, 1];\r\n          scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\r\n        }\r\n        return scaleMatrix;\r\n      },\r\n\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var strokeWidth = this.strokeWidth,\r\n            w = this.width + strokeWidth,\r\n            h = this.height + strokeWidth;\r\n        return { x: w, y: h };\r\n      },\r\n\r\n      /*\r\n       * Calculate object bounding boxdimensions from its properties scale, skew.\r\n       * @private\r\n       * @return {Object} .x width dimension\r\n       * @return {Object} .y height dimension\r\n       */\r\n      _getTransformedDimensions: function(skewX, skewY) {\r\n        if (typeof skewX === 'undefined') {\r\n          skewX = this.skewX;\r\n        }\r\n        if (typeof skewY === 'undefined') {\r\n          skewY = this.skewY;\r\n        }\r\n        var dimensions = this._getNonTransformedDimensions();\r\n        if (skewX === 0 && skewY === 0) {\r\n          return { x: dimensions.x * this.scaleX, y: dimensions.y * this.scaleY };\r\n        }\r\n        var dimX = dimensions.x / 2, dimY = dimensions.y / 2,\r\n            points = [\r\n              {\r\n                x: -dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: -dimY\r\n              },\r\n              {\r\n                x: -dimX,\r\n                y: dimY\r\n              },\r\n              {\r\n                x: dimX,\r\n                y: dimY\r\n              }],\r\n            i, transformMatrix = this._calcDimensionsTransformMatrix(skewX, skewY, false),\r\n            bbox;\r\n        for (i = 0; i < points.length; i++) {\r\n          points[i] = fabric.util.transformPoint(points[i], transformMatrix);\r\n        }\r\n        bbox = fabric.util.makeBoundingBoxFromPoints(points);\r\n        return { x: bbox.width, y: bbox.height };\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions for controls. include padding and canvas zoom\r\n       * private\r\n       */\r\n      _calculateCurrentDimensions: function()  {\r\n        var vpt = this.getViewportTransform(),\r\n            dim = this._getTransformedDimensions(),\r\n            p = fabric.util.transformPoint(dim, vpt, true);\r\n\r\n        return p.scalarAdd(2 * this.padding);\r\n      },\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Moves an object to the bottom of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendToBack: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.sendToBack(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to the top of the stack of drawn objects\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringToFront: function() {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\r\n      }\r\n      else {\r\n        this.canvas.bringToFront(this);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object down in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    sendBackwards: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.sendBackwards(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object up in stack of drawn objects\r\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    bringForward: function(intersecting) {\r\n      if (this.group) {\r\n        fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\r\n      }\r\n      else {\r\n        this.canvas.bringForward(this, intersecting);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to specified level in stack of drawn objects\r\n     * @param {Number} index New position of object\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    moveTo: function(index) {\r\n      if (this.group && this.group.type !== 'activeSelection') {\r\n        fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\r\n      }\r\n      else {\r\n        this.canvas.moveTo(this, index);\r\n      }\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    function getSvgColorString(prop, value) {\r\n      if (!value) {\r\n        return prop + ': none; ';\r\n      }\r\n      else if (value.toLive) {\r\n        return prop + ': url(#SVGID_' + value.id + '); ';\r\n      }\r\n      else {\r\n        var color = new fabric.Color(value),\r\n            str = prop + ': ' + color.toRgb() + '; ',\r\n            opacity = color.getAlpha();\r\n        if (opacity !== 1) {\r\n          //change the color in rgb + opacity\r\n          str += prop + '-opacity: ' + opacity.toString() + '; ';\r\n        }\r\n        return str;\r\n      }\r\n    }\r\n\r\n    var toFixed = fabric.util.toFixed;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n\r\n        var fillRule = this.fillRule,\r\n            strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\r\n            strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\r\n            strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\r\n            strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\r\n            strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\r\n            opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\r\n            visibility = this.visible ? '' : ' visibility: hidden;',\r\n            filter = skipShadow ? '' : this.getSvgFilter(),\r\n            fill = getSvgColorString('fill', this.fill),\r\n            stroke = getSvgColorString('stroke', this.stroke);\r\n\r\n        return [\r\n          stroke,\r\n          'stroke-width: ', strokeWidth, '; ',\r\n          'stroke-dasharray: ', strokeDashArray, '; ',\r\n          'stroke-linecap: ', strokeLineCap, '; ',\r\n          'stroke-linejoin: ', strokeLineJoin, '; ',\r\n          'stroke-miterlimit: ', strokeMiterLimit, '; ',\r\n          fill,\r\n          'fill-rule: ', fillRule, '; ',\r\n          'opacity: ', opacity, ';',\r\n          filter,\r\n          visibility\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\r\n       * @return {String}\r\n       */\r\n      getSvgSpanStyles: function(style, useWhiteSpace) {\r\n        var term = '; ';\r\n        var fontFamily = style.fontFamily ?\r\n          'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\r\n            '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\r\n        var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\r\n            fontFamily = fontFamily,\r\n            fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\r\n            fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\r\n            fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\r\n            fill = style.fill ? getSvgColorString('fill', style.fill) : '',\r\n            stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\r\n            textDecoration = this.getSvgTextDecoration(style),\r\n            deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\r\n        if (textDecoration) {\r\n          textDecoration = 'text-decoration: ' + textDecoration + term;\r\n        }\r\n\r\n        return [\r\n          stroke,\r\n          strokeWidth,\r\n          fontFamily,\r\n          fontSize,\r\n          fontStyle,\r\n          fontWeight,\r\n          textDecoration,\r\n          fill,\r\n          deltaY,\r\n          useWhiteSpace ? 'white-space: pre; ' : ''\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns text-decoration property for svg-export\r\n       * @param {Object} style the object from which to retrieve style properties\r\n       * @return {String}\r\n       */\r\n      getSvgTextDecoration: function(style) {\r\n        if ('overline' in style || 'underline' in style || 'linethrough' in style) {\r\n          return (style.overline ? 'overline ' : '') +\r\n            (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\r\n        }\r\n        return '';\r\n      },\r\n\r\n      /**\r\n       * Returns filter for svg shadow\r\n       * @return {String}\r\n       */\r\n      getSvgFilter: function() {\r\n        return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\r\n      },\r\n\r\n      /**\r\n       * Returns id attribute for svg output\r\n       * @return {String}\r\n       */\r\n      getSvgId: function() {\r\n        return this.id ? 'id=\"' + this.id + '\" ' : '';\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export\r\n       * @return {String}\r\n       */\r\n      getSvgTransform: function() {\r\n        var angle = this.angle,\r\n            skewX = (this.skewX % 360),\r\n            skewY = (this.skewY % 360),\r\n            center = this.getCenterPoint(),\r\n\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n\r\n            translatePart = 'translate(' +\r\n                              toFixed(center.x, NUM_FRACTION_DIGITS) +\r\n                              ' ' +\r\n                              toFixed(center.y, NUM_FRACTION_DIGITS) +\r\n                            ')',\r\n\r\n            anglePart = angle !== 0\r\n              ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\r\n              : '',\r\n\r\n            scalePart = (this.scaleX === 1 && this.scaleY === 1)\r\n              ? '' :\r\n              (' scale(' +\r\n                toFixed(this.scaleX, NUM_FRACTION_DIGITS) +\r\n                ' ' +\r\n                toFixed(this.scaleY, NUM_FRACTION_DIGITS) +\r\n              ')'),\r\n\r\n            skewXPart = skewX !== 0 ? ' skewX(' + toFixed(skewX, NUM_FRACTION_DIGITS) + ')' : '',\r\n\r\n            skewYPart = skewY !== 0 ? ' skewY(' + toFixed(skewY, NUM_FRACTION_DIGITS) + ')' : '',\r\n\r\n            flipXPart = this.flipX ? ' matrix(-1 0 0 1 0 0) ' : '',\r\n\r\n            flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 0)' : '';\r\n\r\n        return [\r\n          translatePart, anglePart, scalePart, flipXPart, flipYPart, skewXPart, skewYPart\r\n        ].join('');\r\n      },\r\n\r\n      /**\r\n       * Returns transform-string for svg-export from the transform matrix of single elements\r\n       * @return {String}\r\n       */\r\n      getSvgTransformMatrix: function() {\r\n        return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\r\n      },\r\n\r\n      _setSVGBg: function(textBgRects) {\r\n        if (this.backgroundColor) {\r\n          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n          textBgRects.push(\r\n            '\\t\\t<rect ',\r\n            this._getFillAttributes(this.backgroundColor),\r\n            ' x=\"',\r\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\r\n            '\" y=\"',\r\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\r\n            '\" width=\"',\r\n            toFixed(this.width, NUM_FRACTION_DIGITS),\r\n            '\" height=\"',\r\n            toFixed(this.height, NUM_FRACTION_DIGITS),\r\n            '\"></rect>\\n');\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createBaseSVGMarkup: function() {\r\n        var markup = [];\r\n\r\n        if (this.fill && this.fill.toLive) {\r\n          markup.push(this.fill.toSVG(this, false));\r\n        }\r\n        if (this.stroke && this.stroke.toLive) {\r\n          markup.push(this.stroke.toSVG(this, false));\r\n        }\r\n        if (this.shadow) {\r\n          markup.push(this.shadow.toSVG(this));\r\n        }\r\n        return markup;\r\n      },\r\n\r\n      addPaintOrder: function() {\r\n        return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\r\n      }\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function() {\r\n\r\n    var extend = fabric.util.object.extend,\r\n        originalSet = 'stateProperties';\r\n\r\n    /*\r\n      Depends on `stateProperties`\r\n    */\r\n    function saveProps(origin, destination, props) {\r\n      var tmpObj = { }, deep = true;\r\n      props.forEach(function(prop) {\r\n        tmpObj[prop] = origin[prop];\r\n      });\r\n      extend(origin[destination], tmpObj, deep);\r\n    }\r\n\r\n    function _isEqual(origValue, currentValue, firstPass) {\r\n      if (origValue === currentValue) {\r\n        // if the objects are identical, return\r\n        return true;\r\n      }\r\n      else if (Array.isArray(origValue)) {\r\n        if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = origValue.length; i < len; i++) {\r\n          if (!_isEqual(origValue[i], currentValue[i])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      else if (origValue && typeof origValue === 'object') {\r\n        var keys = Object.keys(origValue), key;\r\n        if (!currentValue ||\r\n            typeof currentValue !== 'object' ||\r\n            (!firstPass && keys.length !== Object.keys(currentValue).length)\r\n        ) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = keys.length; i < len; i++) {\r\n          key = keys[i];\r\n          if (!_isEqual(origValue[key], currentValue[key])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * Returns true if object state (one of its state properties) was changed\r\n       * @param {String} [propertySet] optional name for the set of property we want to save\r\n       * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\r\n       */\r\n      hasStateChanged: function(propertySet) {\r\n        propertySet = propertySet || originalSet;\r\n        var dashedPropertySet = '_' + propertySet;\r\n        if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\r\n          return true;\r\n        }\r\n        return !_isEqual(this[dashedPropertySet], this, true);\r\n      },\r\n\r\n      /**\r\n       * Saves state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      saveState: function(options) {\r\n        var propertySet = options && options.propertySet || originalSet,\r\n            destination = '_' + propertySet;\r\n        if (!this[destination]) {\r\n          return this.setupState(options);\r\n        }\r\n        saveProps(this, destination, this[propertySet]);\r\n        if (options && options.stateProperties) {\r\n          saveProps(this, destination, options.stateProperties);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Setups state of an object\r\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n       * @return {fabric.Object} thisArg\r\n       */\r\n      setupState: function(options) {\r\n        options = options || { };\r\n        var propertySet = options.propertySet || originalSet;\r\n        options.propertySet = propertySet;\r\n        this['_' + propertySet] = { };\r\n        this.saveState(options);\r\n        return this;\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var degreesToRadians = fabric.util.degreesToRadians;\r\n\r\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n      /**\r\n       * The object interactivity controls.\r\n       * @private\r\n       */\r\n      _controlsVisibility: null,\r\n\r\n      /**\r\n       * Determines which corner has been clicked\r\n       * @private\r\n       * @param {Object} pointer The pointer indicating the mouse position\r\n       * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\r\n       */\r\n      _findTargetCorner: function(pointer) {\r\n        // objects in group, anykind, are not self modificable,\r\n        // must not return an hovered corner.\r\n        if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\r\n          return false;\r\n        }\r\n\r\n        var ex = pointer.x,\r\n            ey = pointer.y,\r\n            xPoints,\r\n            lines;\r\n        this.__corner = 0;\r\n        for (var i in this.oCoords) {\r\n\r\n          if (!this.isControlVisible(i)) {\r\n            continue;\r\n          }\r\n\r\n          if (i === 'mtr' && !this.hasRotatingPoint) {\r\n            continue;\r\n          }\r\n\r\n          if (this.get('lockUniScaling') &&\r\n             (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\r\n            continue;\r\n          }\r\n\r\n          lines = this._getImageLines(this.oCoords[i].corner);\r\n\r\n          // debugging\r\n\r\n          // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\r\n\r\n          // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\r\n          // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\r\n\r\n          xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\r\n          if (xPoints !== 0 && xPoints % 2 === 1) {\r\n            this.__corner = i;\r\n            return i;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Sets the coordinates of the draggable boxes in the corners of\r\n       * the image used to scale/rotate it.\r\n       * @private\r\n       */\r\n      _setCornerCoords: function() {\r\n        var coords = this.oCoords,\r\n            newTheta = degreesToRadians(45 - this.angle),\r\n            /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\r\n            /* 0.707106 stands for sqrt(2)/2 */\r\n            cornerHypotenuse = this.cornerSize * 0.707106,\r\n            cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\r\n            sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\r\n            x, y;\r\n\r\n        for (var point in coords) {\r\n          x = coords[point].x;\r\n          y = coords[point].y;\r\n          coords[point].corner = {\r\n            tl: {\r\n              x: x - sinHalfOffset,\r\n              y: y - cosHalfOffset\r\n            },\r\n            tr: {\r\n              x: x + cosHalfOffset,\r\n              y: y - sinHalfOffset\r\n            },\r\n            bl: {\r\n              x: x - cosHalfOffset,\r\n              y: y + sinHalfOffset\r\n            },\r\n            br: {\r\n              x: x + sinHalfOffset,\r\n              y: y + cosHalfOffset\r\n            }\r\n          };\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Draws a colored layer behind the object, inside its selection borders.\r\n       * Requires public options: padding, selectionBackgroundColor\r\n       * this function is called when the context is transformed\r\n       * has checks to be skipped when the object is on a staticCanvas\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawSelectionBackground: function(ctx) {\r\n        if (!this.selectionBackgroundColor ||\r\n          (this.canvas && !this.canvas.interactive) ||\r\n          (this.canvas && this.canvas._activeObject !== this)\r\n        ) {\r\n          return this;\r\n        }\r\n        ctx.save();\r\n        var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\r\n            vpt = this.canvas.viewportTransform;\r\n        ctx.translate(center.x, center.y);\r\n        ctx.scale(1 / vpt[0], 1 / vpt[3]);\r\n        ctx.rotate(degreesToRadians(this.angle));\r\n        ctx.fillStyle = this.selectionBackgroundColor;\r\n        ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBorders: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth,\r\n            drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            hasControls = typeof styleOverride.hasControls !== 'undefined' ?\r\n              styleOverride.hasControls : this.hasControls,\r\n            rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\r\n              styleOverride.rotatingPointOffset : this.rotatingPointOffset;\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\r\n\r\n          var rotateHeight = -height / 2;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(0, rotateHeight);\r\n          ctx.lineTo(0, rotateHeight - rotatingPointOffset);\r\n          ctx.stroke();\r\n        }\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws borders of an object's bounding box when it is inside a group.\r\n       * Requires public properties: width, height\r\n       * Requires public options: padding, borderColor\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {object} options object representing current object parameters\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawBordersInGroup: function(ctx, options, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var p = this._getNonTransformedDimensions(),\r\n            matrix = fabric.util.customTransformMatrix(options.scaleX, options.scaleY, options.skewX),\r\n            wh = fabric.util.transformPoint(p, matrix),\r\n            strokeWidth = 1 / this.borderScaleFactor,\r\n            width = wh.x + strokeWidth,\r\n            height = wh.y + strokeWidth;\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\r\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n\r\n        ctx.strokeRect(\r\n          -width / 2,\r\n          -height / 2,\r\n          width,\r\n          height\r\n        );\r\n\r\n        ctx.restore();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Draws corners of an object's bounding box.\r\n       * Requires public properties: width, height\r\n       * Requires public options: cornerSize, padding\r\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n       * @param {Object} styleOverride object to override the object style\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      drawControls: function(ctx, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        var wh = this._calculateCurrentDimensions(),\r\n            width = wh.x,\r\n            height = wh.y,\r\n            scaleOffset = styleOverride.cornerSize || this.cornerSize,\r\n            left = -(width + scaleOffset) / 2,\r\n            top = -(height + scaleOffset) / 2,\r\n            transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\r\n              styleOverride.transparentCorners : this.transparentCorners,\r\n            hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\r\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\r\n            methodName = transparentCorners ? 'stroke' : 'fill';\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\r\n        if (!this.transparentCorners) {\r\n          ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\r\n        }\r\n        this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\r\n\r\n        // top-left\r\n        this._drawControl('tl', ctx, methodName,\r\n          left,\r\n          top, styleOverride);\r\n\r\n        // top-right\r\n        this._drawControl('tr', ctx, methodName,\r\n          left + width,\r\n          top, styleOverride);\r\n\r\n        // bottom-left\r\n        this._drawControl('bl', ctx, methodName,\r\n          left,\r\n          top + height, styleOverride);\r\n\r\n        // bottom-right\r\n        this._drawControl('br', ctx, methodName,\r\n          left + width,\r\n          top + height, styleOverride);\r\n\r\n        if (!this.get('lockUniScaling')) {\r\n\r\n          // middle-top\r\n          this._drawControl('mt', ctx, methodName,\r\n            left + width / 2,\r\n            top, styleOverride);\r\n\r\n          // middle-bottom\r\n          this._drawControl('mb', ctx, methodName,\r\n            left + width / 2,\r\n            top + height, styleOverride);\r\n\r\n          // middle-right\r\n          this._drawControl('mr', ctx, methodName,\r\n            left + width,\r\n            top + height / 2, styleOverride);\r\n\r\n          // middle-left\r\n          this._drawControl('ml', ctx, methodName,\r\n            left,\r\n            top + height / 2, styleOverride);\r\n        }\r\n\r\n        // middle-top-rotate\r\n        if (hasRotatingPoint) {\r\n          this._drawControl('mtr', ctx, methodName,\r\n            left + width / 2,\r\n            top - this.rotatingPointOffset, styleOverride);\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\r\n        styleOverride = styleOverride || {};\r\n        if (!this.isControlVisible(control)) {\r\n          return;\r\n        }\r\n        var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\r\n        switch (styleOverride.cornerStyle || this.cornerStyle) {\r\n          case 'circle':\r\n            ctx.beginPath();\r\n            ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\r\n            ctx[methodName]();\r\n            if (stroke) {\r\n              ctx.stroke();\r\n            }\r\n            break;\r\n          default:\r\n            this.transparentCorners || ctx.clearRect(left, top, size, size);\r\n            ctx[methodName + 'Rect'](left, top, size, size);\r\n            if (stroke) {\r\n              ctx.strokeRect(left, top, size, size);\r\n            }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns true if the specified control is visible, false otherwise.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @returns {Boolean} true if the specified control is visible, false otherwise\r\n       */\r\n      isControlVisible: function(controlName) {\r\n        return this._getControlsVisibility()[controlName];\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility of the specified control.\r\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n       * @param {Boolean} visible true to set the specified control visible, false otherwise\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlVisible: function(controlName, visible) {\r\n        this._getControlsVisibility()[controlName] = visible;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Sets the visibility state of object controls.\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\r\n       * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\r\n       * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\r\n       * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\r\n       * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\r\n       * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\r\n       * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\r\n       * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\r\n       * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      setControlsVisibility: function(options) {\r\n        options || (options = { });\r\n\r\n        for (var p in options) {\r\n          this.setControlVisible(p, options[p]);\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns the instance of the control visibility set for this object.\r\n       * @private\r\n       * @returns {Object}\r\n       */\r\n      _getControlsVisibility: function() {\r\n        if (!this._controlsVisibility) {\r\n          this._controlsVisibility = {\r\n            tl: true,\r\n            tr: true,\r\n            br: true,\r\n            bl: true,\r\n            ml: true,\r\n            mt: true,\r\n            mr: true,\r\n            mb: true,\r\n            mtr: true\r\n          };\r\n        }\r\n        return this._controlsVisibility;\r\n      },\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to deselect this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onDeselect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      },\r\n\r\n\r\n      /**\r\n       * This callback function is called every time _discardActiveObject or _setActiveObject\r\n       * try to to select this object. If the function returns true, the process is cancelled\r\n       * @param {Object} [options] options sent from the upper functions\r\n       * @param {Event} [options.e] event if the process is generated by an event\r\n       */\r\n      onSelect: function() {\r\n        // implemented by sub-classes, as needed.\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Animation duration (in ms) for fx* methods\r\n     * @type Number\r\n     * @default\r\n     */\r\n    FX_DURATION: 500,\r\n\r\n    /**\r\n     * Centers object horizontally with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectH: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.left,\r\n        endValue: this.getCenter().left,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('left', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically with animation.\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxCenterObjectV: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.top,\r\n        endValue: this.getCenter().top,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('top', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          object.setCoords();\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as `fabric.Canvas#remove` but animated\r\n     * @param {fabric.Object} object Object to remove\r\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxRemove: function (object, callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: object.opacity,\r\n        endValue: 0,\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          object.set('opacity', value);\r\n          _this.requestRenderAll();\r\n          onChange();\r\n        },\r\n        onComplete: function () {\r\n          _this.remove(object);\r\n          onComplete();\r\n        }\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n    /**\r\n     * Animates object's properties\r\n     * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\r\n     * @param {Number|Object} value Value to animate property to (if string was given first) or options object\r\n     * @return {fabric.Object} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\r\n     * @chainable\r\n     *\r\n     * As object — multiple properties\r\n     *\r\n     * object.animate({ left: ..., top: ... });\r\n     * object.animate({ left: ..., top: ... }, { duration: ... });\r\n     *\r\n     * As string — one property\r\n     *\r\n     * object.animate('left', ...);\r\n     * object.animate('left', { duration: ... });\r\n     *\r\n     */\r\n    animate: function() {\r\n      if (arguments[0] && typeof arguments[0] === 'object') {\r\n        var propsToAnimate = [], prop, skipCallbacks;\r\n        for (prop in arguments[0]) {\r\n          propsToAnimate.push(prop);\r\n        }\r\n        for (var i = 0, len = propsToAnimate.length; i < len; i++) {\r\n          prop = propsToAnimate[i];\r\n          skipCallbacks = i !== len - 1;\r\n          this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\r\n        }\r\n      }\r\n      else {\r\n        this._animate.apply(this, arguments);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to animate\r\n     * @param {String} to Value to animate to\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\r\n     */\r\n    _animate: function(property, to, options, skipCallbacks) {\r\n      var _this = this, propPair;\r\n\r\n      to = to.toString();\r\n\r\n      if (!options) {\r\n        options = { };\r\n      }\r\n      else {\r\n        options = fabric.util.object.clone(options);\r\n      }\r\n\r\n      if (~property.indexOf('.')) {\r\n        propPair = property.split('.');\r\n      }\r\n\r\n      var currentValue = propPair\r\n        ? this.get(propPair[0])[propPair[1]]\r\n        : this.get(property);\r\n\r\n      if (!('from' in options)) {\r\n        options.from = currentValue;\r\n      }\r\n\r\n      if (~to.indexOf('=')) {\r\n        to = currentValue + parseFloat(to.replace('=', ''));\r\n      }\r\n      else {\r\n        to = parseFloat(to);\r\n      }\r\n\r\n      fabric.util.animate({\r\n        startValue: options.from,\r\n        endValue: to,\r\n        byValue: options.by,\r\n        easing: options.easing,\r\n        duration: options.duration,\r\n        abort: options.abort && function() {\r\n          return options.abort.call(_this);\r\n        },\r\n        onChange: function(value, valueProgress, timeProgress) {\r\n          if (propPair) {\r\n            _this[propPair[0]][propPair[1]] = value;\r\n          }\r\n          else {\r\n            _this.set(property, value);\r\n          }\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n          options.onChange && options.onChange(value, valueProgress, timeProgress);\r\n        },\r\n        onComplete: function(value, valueProgress, timeProgress) {\r\n          if (skipCallbacks) {\r\n            return;\r\n          }\r\n\r\n          _this.setCoords();\r\n          options.onComplete && options.onComplete(value, valueProgress, timeProgress);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        clone = fabric.util.object.clone,\r\n        coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\r\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\r\n\r\n    if (fabric.Line) {\r\n      fabric.warn('fabric.Line is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Line class\r\n     * @class fabric.Line\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Line#initialize} for constructor definition\r\n     */\r\n    fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'line',\r\n\r\n      /**\r\n       * x value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x1: 0,\r\n\r\n      /**\r\n       * y value or first line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y1: 0,\r\n\r\n      /**\r\n       * x value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      x2: 0,\r\n\r\n      /**\r\n       * y value or second line edge\r\n       * @type Number\r\n       * @default\r\n       */\r\n      y2: 0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} [points] Array of points\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Line} thisArg\r\n       */\r\n      initialize: function(points, options) {\r\n        if (!points) {\r\n          points = [0, 0, 0, 0];\r\n        }\r\n\r\n        this.callSuper('initialize', options);\r\n\r\n        this.set('x1', points[0]);\r\n        this.set('y1', points[1]);\r\n        this.set('x2', points[2]);\r\n        this.set('y2', points[3]);\r\n\r\n        this._setWidthHeight(options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n\r\n        this.width = Math.abs(this.x2 - this.x1);\r\n        this.height = Math.abs(this.y2 - this.y1);\r\n\r\n        this.left = 'left' in options\r\n          ? options.left\r\n          : this._getLeftToOriginX();\r\n\r\n        this.top = 'top' in options\r\n          ? options.top\r\n          : this._getTopToOriginY();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        if (typeof coordProps[key] !== 'undefined') {\r\n          this._setWidthHeight();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\r\n       */\r\n      _getLeftToOriginX: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originX',\r\n          axis1: 'x1',\r\n          axis2: 'x2',\r\n          dimension: 'width'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'left',\r\n          center: 'center',\r\n          farthest: 'right'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\r\n       */\r\n      _getTopToOriginY: makeEdgeToOriginGetter(\r\n        { // property names\r\n          origin: 'originY',\r\n          axis1: 'y1',\r\n          axis2: 'y2',\r\n          dimension: 'height'\r\n        },\r\n        { // possible values of origin\r\n          nearest: 'top',\r\n          center: 'center',\r\n          farthest: 'bottom'\r\n        }\r\n      ),\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n\r\n        if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\r\n          // move from center (of virtual box) to its left/top corner\r\n          // we can't assume x1, y1 is top left and x2, y2 is bottom right\r\n          var p = this.calcLinePoints();\r\n          ctx.moveTo(p.x1, p.y1);\r\n          ctx.lineTo(p.x2, p.y2);\r\n        }\r\n\r\n        ctx.lineWidth = this.strokeWidth;\r\n\r\n        // TODO: test this\r\n        // make sure setting \"fill\" changes color of a line\r\n        // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\r\n        var origStrokeStyle = ctx.strokeStyle;\r\n        ctx.strokeStyle = this.stroke || ctx.fillStyle;\r\n        this.stroke && this._renderStroke(ctx);\r\n        ctx.strokeStyle = origStrokeStyle;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p = this.calcLinePoints();\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * This function is an helper for svg import. it returns the center of the object in the svg\r\n       * untransformed coordinates\r\n       * @private\r\n       * @return {Object} center point from element coordinates\r\n       */\r\n      _findCenterFromElement: function() {\r\n        return {\r\n          x: (this.x1 + this.x2) / 2,\r\n          y: (this.y1 + this.y2) / 2,\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @methd toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\r\n      },\r\n\r\n      /*\r\n       * Calculate object dimensions from its properties\r\n       * @private\r\n       */\r\n      _getNonTransformedDimensions: function() {\r\n        var dim = this.callSuper('_getNonTransformedDimensions');\r\n        if (this.strokeLineCap === 'butt') {\r\n          if (this.width === 0) {\r\n            dim.y -= this.strokeWidth;\r\n          }\r\n          if (this.height === 0) {\r\n            dim.x -= this.strokeWidth;\r\n          }\r\n        }\r\n        return dim;\r\n      },\r\n\r\n      /**\r\n       * Recalculates line points given width and height\r\n       * @private\r\n       */\r\n      calcLinePoints: function() {\r\n        var xMult = this.x1 <= this.x2 ? -1 : 1,\r\n            yMult = this.y1 <= this.y2 ? -1 : 1,\r\n            x1 = (xMult * this.width * 0.5),\r\n            y1 = (yMult * this.height * 0.5),\r\n            x2 = (xMult * this.width * -0.5),\r\n            y2 = (yMult * this.height * -0.5);\r\n\r\n        return {\r\n          x1: x1,\r\n          x2: x2,\r\n          y1: y1,\r\n          y2: y2\r\n        };\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(),\r\n            p = this.calcLinePoints();\r\n        markup.push(\r\n          '<line ', this.getSvgId(),\r\n          'x1=\"', p.x1,\r\n          '\" y1=\"', p.y1,\r\n          '\" x2=\"', p.x2,\r\n          '\" y2=\"', p.y2,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(),\r\n          this.getSvgTransformMatrix(),\r\n          '\"/>\\n'\r\n        );\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\r\n     */\r\n    fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] callback function invoked after parsing\r\n     */\r\n    fabric.Line.fromElement = function(element, callback, options) {\r\n      options = options || { };\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\r\n          points = [\r\n            parsedAttributes.x1 || 0,\r\n            parsedAttributes.y1 || 0,\r\n            parsedAttributes.x2 || 0,\r\n            parsedAttributes.y2 || 0\r\n          ];\r\n      callback(new fabric.Line(points, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Line instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Line\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Line.fromObject = function(object, callback) {\r\n      function _callback(instance) {\r\n        delete instance.points;\r\n        callback && callback(instance);\r\n      };\r\n      var options = clone(object, true);\r\n      options.points = [object.x1, object.y1, object.x2, object.y2];\r\n      fabric.Object._fromObject('Line', options, _callback, 'points');\r\n    };\r\n\r\n    /**\r\n     * Produces a function that calculates distance from canvas edge to Line origin.\r\n     */\r\n    function makeEdgeToOriginGetter(propertyNames, originValues) {\r\n      var origin = propertyNames.origin,\r\n          axis1 = propertyNames.axis1,\r\n          axis2 = propertyNames.axis2,\r\n          dimension = propertyNames.dimension,\r\n          nearest = originValues.nearest,\r\n          center = originValues.center,\r\n          farthest = originValues.farthest;\r\n\r\n      return function() {\r\n        switch (this.get(origin)) {\r\n          case nearest:\r\n            return Math.min(this.get(axis1), this.get(axis2));\r\n          case center:\r\n            return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\r\n          case farthest:\r\n            return Math.max(this.get(axis1), this.get(axis2));\r\n        }\r\n      };\r\n\r\n    }\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        pi = Math.PI;\r\n\r\n    if (fabric.Circle) {\r\n      fabric.warn('fabric.Circle is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Circle class\r\n     * @class fabric.Circle\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Circle#initialize} for constructor definition\r\n     */\r\n    fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'circle',\r\n\r\n      /**\r\n       * Radius of this circle\r\n       * @type Number\r\n       * @default\r\n       */\r\n      radius: 0,\r\n\r\n      /**\r\n       * Start angle of the circle, moving clockwise\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 0\r\n       */\r\n      startAngle: 0,\r\n\r\n      /**\r\n       * End angle of the circle\r\n       * deprectated type, this should be in degree, this was an oversight.\r\n       * probably will change to degrees in next major version\r\n       * @type Number\r\n       * @default 2Pi\r\n       */\r\n      endAngle: pi * 2,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n\r\n        if (key === 'radius') {\r\n          this.setRadius(value);\r\n        }\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\r\n            angle = (this.endAngle - this.startAngle) % ( 2 * pi);\r\n\r\n        if (angle === 0) {\r\n          markup.push(\r\n            '<circle ', this.getSvgId(),\r\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\r\n            'r=\"', this.radius,\r\n            '\" style=\"', this.getSvgStyles(),\r\n            '\" transform=\"', this.getSvgTransform(),\r\n            ' ', this.getSvgTransformMatrix(), '\"',\r\n            this.addPaintOrder(),\r\n            '/>\\n'\r\n          );\r\n        }\r\n        else {\r\n          var startX = fabric.util.cos(this.startAngle) * this.radius,\r\n              startY = fabric.util.sin(this.startAngle) * this.radius,\r\n              endX = fabric.util.cos(this.endAngle) * this.radius,\r\n              endY = fabric.util.sin(this.endAngle) * this.radius,\r\n              largeFlag = angle > pi ? '1' : '0';\r\n\r\n          markup.push(\r\n            '<path d=\"M ' + startX + ' ' + startY,\r\n            ' A ' + this.radius + ' ' + this.radius,\r\n            ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\r\n            '\" style=\"', this.getSvgStyles(),\r\n            '\" transform=\"', this.getSvgTransform(),\r\n            ' ', this.getSvgTransformMatrix(), '\"',\r\n            this.addPaintOrder(),\r\n            '/>\\n'\r\n          );\r\n        }\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.radius,\r\n          this.startAngle,\r\n          this.endAngle, false);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusX: function() {\r\n        return this.get('radius') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRadiusY: function() {\r\n        return this.get('radius') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Sets radius of an object (and updates width accordingly)\r\n       * @return {fabric.Circle} thisArg\r\n       */\r\n      setRadius: function(value) {\r\n        this.radius = value;\r\n        return this.set('width', value * 2).set('height', value * 2);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\r\n     */\r\n    fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @param {Object} [options] Options object\r\n     * @throws {Error} If value of `r` attribute is missing or invalid\r\n     */\r\n    fabric.Circle.fromElement = function(element, callback) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\r\n\r\n      if (!isValidRadius(parsedAttributes)) {\r\n        throw new Error('value of `r` attribute is required and can not be negative');\r\n      }\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\r\n      callback(new fabric.Circle(parsedAttributes));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function isValidRadius(attributes) {\r\n      return (('radius' in attributes) && (attributes.radius >= 0));\r\n    }\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Circle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Circle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {Object} Instance of fabric.Circle\r\n     */\r\n    fabric.Circle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Circle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    //var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.Triangle) {\r\n      fabric.warn('fabric.Triangle is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Triangle class\r\n     * @class fabric.Triangle\r\n     * @extends fabric.Object\r\n     * @return {fabric.Triangle} thisArg\r\n     * @see {@link fabric.Triangle#initialize} for constructor definition\r\n     */\r\n    fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'triangle',\r\n\r\n      /**\r\n       * Width is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      width: 100,\r\n\r\n      /**\r\n       * Height is set to 100 to compensate the old initialize code that was setting it to 100\r\n       * @type Number\r\n       * @default\r\n       */\r\n      height: 100,\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(-widthBy2, heightBy2);\r\n        ctx.lineTo(0, -heightBy2);\r\n        ctx.lineTo(widthBy2, heightBy2);\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(),\r\n            widthBy2 = this.width / 2,\r\n            heightBy2 = this.height / 2,\r\n            points = [\r\n              -widthBy2 + ' ' + heightBy2,\r\n              '0 ' + -heightBy2,\r\n              widthBy2 + ' ' + heightBy2\r\n            ]\r\n              .join(',');\r\n\r\n        markup.push(\r\n          '<polygon ', this.getSvgId(),\r\n          'points=\"', points,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(), '\"',\r\n          this.addPaintOrder(),\r\n          '/>'\r\n        );\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Triangle} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Triangle\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     */\r\n    fabric.Triangle.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Triangle', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        piBy2   = Math.PI * 2;\r\n\r\n    if (fabric.Ellipse) {\r\n      fabric.warn('fabric.Ellipse is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Ellipse class\r\n     * @class fabric.Ellipse\r\n     * @extends fabric.Object\r\n     * @return {fabric.Ellipse} thisArg\r\n     * @see {@link fabric.Ellipse#initialize} for constructor definition\r\n     */\r\n    fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'ellipse',\r\n\r\n      /**\r\n       * Horizontal radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this.set('rx', options && options.rx || 0);\r\n        this.set('ry', options && options.ry || 0);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} key\r\n       * @param {*} value\r\n       * @return {fabric.Ellipse} thisArg\r\n       */\r\n      _set: function(key, value) {\r\n        this.callSuper('_set', key, value);\r\n        switch (key) {\r\n\r\n          case 'rx':\r\n            this.rx = value;\r\n            this.set('width', value * 2);\r\n            break;\r\n\r\n          case 'ry':\r\n            this.ry = value;\r\n            this.set('height', value * 2);\r\n            break;\r\n\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns horizontal radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRx: function() {\r\n        return this.get('rx') * this.get('scaleX');\r\n      },\r\n\r\n      /**\r\n       * Returns Vertical radius of an object (according to how an object is scaled)\r\n       * @return {Number}\r\n       */\r\n      getRy: function() {\r\n        return this.get('ry') * this.get('scaleY');\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup();\r\n        markup.push(\r\n          '<ellipse ', this.getSvgId(),\r\n          'cx=\"0\" cy=\"0\" ',\r\n          'rx=\"', this.rx,\r\n          '\" ry=\"', this.ry,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(),\r\n          this.getSvgTransformMatrix(), '\"',\r\n          this.addPaintOrder(),\r\n          '/>\\n'\r\n        );\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        ctx.beginPath();\r\n        ctx.save();\r\n        ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\r\n        ctx.arc(\r\n          0,\r\n          0,\r\n          this.rx,\r\n          0,\r\n          piBy2,\r\n          false);\r\n        ctx.restore();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\r\n     */\r\n    fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromElement = function(element, callback) {\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\r\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\r\n      callback(new fabric.Ellipse(parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Ellipse} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Ellipse\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as first argument\r\n     * @return {fabric.Ellipse}\r\n     */\r\n    fabric.Ellipse.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Ellipse', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend;\r\n\r\n    if (fabric.Rect) {\r\n      fabric.warn('fabric.Rect is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Rectangle class\r\n     * @class fabric.Rect\r\n     * @extends fabric.Object\r\n     * @return {fabric.Rect} thisArg\r\n     * @see {@link fabric.Rect#initialize} for constructor definition\r\n     */\r\n    fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\r\n\r\n      /**\r\n       * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'rect',\r\n\r\n      /**\r\n       * Horizontal border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      rx:   0,\r\n\r\n      /**\r\n       * Vertical border radius\r\n       * @type Number\r\n       * @default\r\n       */\r\n      ry:   0,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        this._initRxRy();\r\n      },\r\n\r\n      /**\r\n       * Initializes rx/ry attributes\r\n       * @private\r\n       */\r\n      _initRxRy: function() {\r\n        if (this.rx && !this.ry) {\r\n          this.ry = this.rx;\r\n        }\r\n        else if (this.ry && !this.rx) {\r\n          this.rx = this.ry;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n\r\n        // optimize 1x1 case (used in spray brush)\r\n        if (this.width === 1 && this.height === 1) {\r\n          ctx.fillRect(-0.5, -0.5, 1, 1);\r\n          return;\r\n        }\r\n\r\n        var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\r\n            ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\r\n            w = this.width,\r\n            h = this.height,\r\n            x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            isRounded = rx !== 0 || ry !== 0,\r\n            /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\r\n            k = 1 - 0.5522847498;\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(x + rx, y);\r\n\r\n        ctx.lineTo(x + w - rx, y);\r\n        isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\r\n\r\n        ctx.lineTo(x + w, y + h - ry);\r\n        isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\r\n\r\n        ctx.lineTo(x + rx, y + h);\r\n        isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\r\n\r\n        ctx.lineTo(x, y + ry);\r\n        isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\r\n\r\n        ctx.closePath();\r\n\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(), x = -this.width / 2, y = -this.height / 2;\r\n        markup.push(\r\n          '<rect ', this.getSvgId(),\r\n          'x=\"', x, '\" y=\"', y,\r\n          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\r\n          '\" width=\"', this.width, '\" height=\"', this.height,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(),\r\n          this.getSvgTransformMatrix(), '\"',\r\n          this.addPaintOrder(),\r\n          '/>\\n');\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\r\n     */\r\n    fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Rect.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n      options = options || { };\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\r\n\r\n      parsedAttributes.left = parsedAttributes.left || 0;\r\n      parsedAttributes.top  = parsedAttributes.top  || 0;\r\n      var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n      rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\r\n      callback(rect);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns {@link fabric.Rect} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Rect\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\r\n     */\r\n    fabric.Rect.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Rect', object, callback);\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        toFixed = fabric.util.toFixed;\r\n\r\n    if (fabric.Polyline) {\r\n      fabric.warn('fabric.Polyline is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polyline class\r\n     * @class fabric.Polyline\r\n     * @extends fabric.Object\r\n     * @see {@link fabric.Polyline#initialize} for constructor definition\r\n     */\r\n    fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polyline',\r\n\r\n      /**\r\n       * Points array\r\n       * @type Array\r\n       * @default\r\n       */\r\n      points: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array} points Array of points (where each point is an object with x and y)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Polyline} thisArg\r\n       * @example\r\n       * var poly = new fabric.Polyline([\r\n       *     { x: 10, y: 10 },\r\n       *     { x: 50, y: 30 },\r\n       *     { x: 40, y: 70 },\r\n       *     { x: 60, y: 50 },\r\n       *     { x: 100, y: 150 },\r\n       *     { x: 40, y: 100 }\r\n       *   ], {\r\n       *   stroke: 'red',\r\n       *   left: 100,\r\n       *   top: 100\r\n       * });\r\n       */\r\n      initialize: function(points, options) {\r\n        options = options || {};\r\n        this.points = points || [];\r\n        this.callSuper('initialize', options);\r\n        var calcDim = this._calcDimensions();\r\n        if (typeof options.left === 'undefined') {\r\n          this.left = calcDim.left;\r\n        }\r\n        if (typeof options.top === 'undefined') {\r\n          this.top = calcDim.top;\r\n        }\r\n        this.width = calcDim.width;\r\n        this.height = calcDim.height;\r\n        this.pathOffset = {\r\n          x: calcDim.left + this.width / 2,\r\n          y: calcDim.top + this.height / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Calculate the polygon min and max point from points array,\r\n       * returning an object with left, top, widht, height to measure the\r\n       * polygon size\r\n       * @return {Object} object.left X coordinate of the polygon leftmost point\r\n       * @return {Object} object.top Y coordinate of the polygon topmost point\r\n       * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\r\n       * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\r\n       * @private\r\n       */\r\n      _calcDimensions: function() {\r\n\r\n        var points = this.points,\r\n            minX = min(points, 'x') || 0,\r\n            minY = min(points, 'y') || 0,\r\n            maxX = max(points, 'x') || 0,\r\n            maxY = max(points, 'y') || 0,\r\n            width = (maxX - minX),\r\n            height = (maxY - minY);\r\n\r\n        return {\r\n          left: minX,\r\n          top: minY,\r\n          width: width,\r\n          height: height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return extend(this.callSuper('toObject', propertiesToInclude), {\r\n          points: this.points.concat()\r\n        });\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\r\n            markup = this._createBaseSVGMarkup(),\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          points.push(\r\n            toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\r\n            toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\r\n          );\r\n        }\r\n        markup.push(\r\n          '<', this.type, ' ', this.getSvgId(),\r\n          'points=\"', points.join(''),\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(),\r\n          ' ', this.getSvgTransformMatrix(), '\"',\r\n          this.addPaintOrder(),\r\n          '/>\\n'\r\n        );\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      commonRender: function(ctx) {\r\n        var point, len = this.points.length,\r\n            x = this.pathOffset.x,\r\n            y = this.pathOffset.y;\r\n\r\n        if (!len || isNaN(this.points[len - 1].y)) {\r\n          // do not draw if no points or odd points\r\n          // NaN comes from parseFloat of a empty string in parser\r\n          return false;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\r\n        for (var i = 0; i < len; i++) {\r\n          point = this.points[i];\r\n          ctx.lineTo(point.x - x, point.y - y);\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var p1, p2;\r\n\r\n        ctx.beginPath();\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n          p1 = this.points[i];\r\n          p2 = this.points[i + 1] || p1;\r\n          fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.get('points').length;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\r\n     */\r\n    fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {SVGElement} element Element to parser\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polyline.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n      options || (options = { });\r\n\r\n      var points = fabric.parsePointsAttribute(element.getAttribute('points')),\r\n          parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\r\n\r\n      callback(new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polyline instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polyline\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polyline.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polyline', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend;\r\n\r\n    if (fabric.Polygon) {\r\n      fabric.warn('fabric.Polygon is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Polygon class\r\n     * @class fabric.Polygon\r\n     * @extends fabric.Polyline\r\n     * @see {@link fabric.Polygon#initialize} for constructor definition\r\n     */\r\n    fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'polygon',\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (!this.commonRender(ctx)) {\r\n          return;\r\n        }\r\n        ctx.closePath();\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        this.callSuper('_renderDashedStroke', ctx);\r\n        ctx.closePath();\r\n      },\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\r\n     */\r\n    fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\r\n\r\n    /**\r\n     * Returns {@link fabric.Polygon} instance from an SVG element\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Polygon.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n\r\n      options || (options = { });\r\n\r\n      var points = fabric.parsePointsAttribute(element.getAttribute('points')),\r\n          parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\r\n\r\n      callback(new fabric.Polygon(points, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Polygon instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Polygon\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Polygon.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Polygon', object, callback, 'points');\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max,\r\n        extend = fabric.util.object.extend,\r\n        _toString = Object.prototype.toString,\r\n        drawArc = fabric.util.drawArc,\r\n        commandLengths = {\r\n          m: 2,\r\n          l: 2,\r\n          h: 1,\r\n          v: 1,\r\n          c: 6,\r\n          s: 4,\r\n          q: 4,\r\n          t: 2,\r\n          a: 7\r\n        },\r\n        repeatedCommands = {\r\n          m: 'l',\r\n          M: 'L'\r\n        };\r\n\r\n    if (fabric.Path) {\r\n      fabric.warn('fabric.Path is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Path class\r\n     * @class fabric.Path\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\r\n     * @see {@link fabric.Path#initialize} for constructor definition\r\n     */\r\n    fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'path',\r\n\r\n      /**\r\n       * Array of path points\r\n       * @type Array\r\n       * @default\r\n       */\r\n      path: null,\r\n\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\r\n\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Path} thisArg\r\n       */\r\n      initialize: function(path, options) {\r\n        options = options || { };\r\n        this.callSuper('initialize', options);\r\n\r\n        if (!path) {\r\n          path = [];\r\n        }\r\n\r\n        var fromArray = _toString.call(path) === '[object Array]';\r\n\r\n        this.path = fromArray\r\n          ? path\r\n          // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\r\n          : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\r\n\r\n        if (!this.path) {\r\n          return;\r\n        }\r\n\r\n        if (!fromArray) {\r\n          this.path = this._parsePath();\r\n        }\r\n\r\n        this._setPositionDimensions(options);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} options Options object\r\n       */\r\n      _setPositionDimensions: function(options) {\r\n        var calcDim = this._parseDimensions();\r\n\r\n        this.width = calcDim.width;\r\n        this.height = calcDim.height;\r\n\r\n        if (typeof options.left === 'undefined') {\r\n          this.left = calcDim.left;\r\n        }\r\n\r\n        if (typeof options.top === 'undefined') {\r\n          this.top = calcDim.top;\r\n        }\r\n\r\n        this.pathOffset = this.pathOffset || {\r\n          x: calcDim.left + this.width / 2,\r\n          y: calcDim.top + this.height / 2\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _renderPathCommands: function(ctx) {\r\n        var current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            l = -this.pathOffset.x,\r\n            t = -this.pathOffset.y;\r\n\r\n        ctx.beginPath();\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              ctx.lineTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              ctx.moveTo(x + l, y + t);\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              ctx.bezierCurveTo(\r\n                x + current[1] + l, // x1\r\n                y + current[2] + t, // y1\r\n                controlX + l, // x2\r\n                controlY + t, // y2\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              x = current[5];\r\n              y = current[6];\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              ctx.bezierCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                controlX + l,\r\n                controlY + t,\r\n                x + l,\r\n                y + t\r\n              );\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                x + current[1] + l,\r\n                y + current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.bezierCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n\r\n              ctx.quadraticCurveTo(\r\n                current[1] + l,\r\n                current[2] + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              ctx.quadraticCurveTo(\r\n                controlX + l,\r\n                controlY + t,\r\n                tempX + l,\r\n                tempY + t\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x + l,\r\n                current[7] + y + t\r\n              ]);\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              drawArc(ctx, x + l, y + t, [\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + l,\r\n                current[7] + t\r\n              ]);\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              ctx.closePath();\r\n              break;\r\n          }\r\n          previous = current;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx context to render path on\r\n       */\r\n      _render: function(ctx) {\r\n        this._renderPathCommands(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} string representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Path (' + this.complexity() +\r\n          '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var o = extend(this.callSuper('toObject', propertiesToInclude), {\r\n          path: this.path.map(function(item) { return item.slice(); }),\r\n          top: this.top,\r\n          left: this.left,\r\n        });\r\n        return o;\r\n      },\r\n\r\n      /**\r\n       * Returns dataless object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\r\n        if (o.sourcePath) {\r\n          delete o.path;\r\n        }\r\n        return o;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var chunks = [],\r\n            markup = this._createBaseSVGMarkup(), addTransform = '';\r\n\r\n        for (var i = 0, len = this.path.length; i < len; i++) {\r\n          chunks.push(this.path[i].join(' '));\r\n        }\r\n        var path = chunks.join(' ');\r\n        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\r\n        markup.push(\r\n          '<path ', this.getSvgId(),\r\n          'd=\"', path,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          '\" transform=\"', this.getSvgTransform(), addTransform,\r\n          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\r\n          this.addPaintOrder(),\r\n          '/>\\n'\r\n        );\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns number representation of an instance complexity\r\n       * @return {Number} complexity of this instance\r\n       */\r\n      complexity: function() {\r\n        return this.path.length;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _parsePath: function() {\r\n        var result = [],\r\n            coords = [],\r\n            currentPath,\r\n            parsed,\r\n            re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\r\n            match,\r\n            coordsStr;\r\n\r\n        for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\r\n          currentPath = this.path[i];\r\n\r\n          coordsStr = currentPath.slice(1).trim();\r\n          coords.length = 0;\r\n\r\n          while ((match = re.exec(coordsStr))) {\r\n            coords.push(match[0]);\r\n          }\r\n\r\n          coordsParsed = [currentPath.charAt(0)];\r\n\r\n          for (var j = 0, jlen = coords.length; j < jlen; j++) {\r\n            parsed = parseFloat(coords[j]);\r\n            if (!isNaN(parsed)) {\r\n              coordsParsed.push(parsed);\r\n            }\r\n          }\r\n\r\n          var command = coordsParsed[0],\r\n              commandLength = commandLengths[command.toLowerCase()],\r\n              repeatedCommand = repeatedCommands[command] || command;\r\n\r\n          if (coordsParsed.length - 1 > commandLength) {\r\n            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\r\n              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\r\n              command = repeatedCommand;\r\n            }\r\n          }\r\n          else {\r\n            result.push(coordsParsed);\r\n          }\r\n        }\r\n\r\n        return result;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _parseDimensions: function() {\r\n\r\n        var aX = [],\r\n            aY = [],\r\n            current, // current instruction\r\n            previous = null,\r\n            subpathStartX = 0,\r\n            subpathStartY = 0,\r\n            x = 0, // current x\r\n            y = 0, // current y\r\n            controlX = 0, // current control point x\r\n            controlY = 0, // current control point y\r\n            tempX,\r\n            tempY,\r\n            bounds;\r\n\r\n        for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n          current = this.path[i];\r\n\r\n          switch (current[0]) { // first letter\r\n\r\n            case 'l': // lineto, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'L': // lineto, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'h': // horizontal lineto, relative\r\n              x += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'H': // horizontal lineto, absolute\r\n              x = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'v': // vertical lineto, relative\r\n              y += current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'V': // verical lineto, absolute\r\n              y = current[1];\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'm': // moveTo, relative\r\n              x += current[1];\r\n              y += current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'M': // moveTo, absolute\r\n              x = current[1];\r\n              y = current[2];\r\n              subpathStartX = x;\r\n              subpathStartY = y;\r\n              bounds = [];\r\n              break;\r\n\r\n            case 'c': // bezierCurveTo, relative\r\n              tempX = x + current[5];\r\n              tempY = y + current[6];\r\n              controlX = x + current[3];\r\n              controlY = y + current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                x + current[1], // x1\r\n                y + current[2], // y1\r\n                controlX, // x2\r\n                controlY, // y2\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'C': // bezierCurveTo, absolute\r\n              controlX = current[3];\r\n              controlY = current[4];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                current[1],\r\n                current[2],\r\n                controlX,\r\n                controlY,\r\n                current[5],\r\n                current[6]\r\n              );\r\n              x = current[5];\r\n              y = current[6];\r\n              break;\r\n\r\n            case 's': // shorthand cubic bezierCurveTo, relative\r\n\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                x + current[1],\r\n                y + current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'S': // shorthand cubic bezierCurveTo, absolute\r\n              tempX = current[3];\r\n              tempY = current[4];\r\n              if (previous[0].match(/[CcSs]/) === null) {\r\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n                // the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control points\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                current[1],\r\n                current[2],\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              // set control point to 2nd one of this command\r\n              // \"... the first control point is assumed to be\r\n              // the reflection of the second control point on\r\n              // the previous command relative to the current point.\"\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              break;\r\n\r\n            case 'q': // quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[3];\r\n              tempY = y + current[4];\r\n              controlX = x + current[1];\r\n              controlY = y + current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'Q': // quadraticCurveTo, absolute\r\n              controlX = current[1];\r\n              controlY = current[2];\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                current[3],\r\n                current[4]\r\n              );\r\n              x = current[3];\r\n              y = current[4];\r\n              break;\r\n\r\n            case 't': // shorthand quadraticCurveTo, relative\r\n              // transform to absolute x,y\r\n              tempX = x + current[1];\r\n              tempY = y + current[2];\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n\r\n              break;\r\n\r\n            case 'T':\r\n              tempX = current[1];\r\n              tempY = current[2];\r\n\r\n              if (previous[0].match(/[QqTt]/) === null) {\r\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n                // assume the control point is coincident with the current point\r\n                controlX = x;\r\n                controlY = y;\r\n              }\r\n              else {\r\n                // calculate reflection of previous control point\r\n                controlX = 2 * x - controlX;\r\n                controlY = 2 * y - controlY;\r\n              }\r\n              bounds = fabric.util.getBoundsOfCurve(x, y,\r\n                controlX,\r\n                controlY,\r\n                controlX,\r\n                controlY,\r\n                tempX,\r\n                tempY\r\n              );\r\n              x = tempX;\r\n              y = tempY;\r\n              break;\r\n\r\n            case 'a':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6] + x,\r\n                current[7] + y\r\n              );\r\n              x += current[6];\r\n              y += current[7];\r\n              break;\r\n\r\n            case 'A':\r\n              // TODO: optimize this\r\n              bounds = fabric.util.getBoundsOfArc(x, y,\r\n                current[1],\r\n                current[2],\r\n                current[3],\r\n                current[4],\r\n                current[5],\r\n                current[6],\r\n                current[7]\r\n              );\r\n              x = current[6];\r\n              y = current[7];\r\n              break;\r\n\r\n            case 'z':\r\n            case 'Z':\r\n              x = subpathStartX;\r\n              y = subpathStartY;\r\n              break;\r\n          }\r\n          previous = current;\r\n          bounds.forEach(function (point) {\r\n            aX.push(point.x);\r\n            aY.push(point.y);\r\n          });\r\n          aX.push(x);\r\n          aY.push(y);\r\n        }\r\n\r\n        var minX = min(aX) || 0,\r\n            minY = min(aY) || 0,\r\n            maxX = max(aX) || 0,\r\n            maxY = max(aY) || 0,\r\n            deltaX = maxX - minX,\r\n            deltaY = maxY - minY,\r\n\r\n            o = {\r\n              left: minX,\r\n              top: minY,\r\n              width: deltaX,\r\n              height: deltaY\r\n            };\r\n\r\n        return o;\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an object\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {Object} object\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n     */\r\n    fabric.Path.fromObject = function(object, callback) {\r\n      if (typeof object.sourcePath === 'string') {\r\n        var pathUrl = object.sourcePath;\r\n        fabric.loadSVGFromURL(pathUrl, function (elements) {\r\n          var path = elements[0];\r\n          path.setOptions(object);\r\n          callback && callback(path);\r\n        });\r\n      }\r\n      else {\r\n        fabric.Object._fromObject('Path', object, callback, 'path');\r\n      }\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @see http://www.w3.org/TR/SVG/paths.html#PathElement\r\n     */\r\n    fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\r\n\r\n    /**\r\n     * Creates an instance of fabric.Path from an SVG <path> element\r\n     * @static\r\n     * @memberOf fabric.Path\r\n     * @param {SVGElement} element to parse\r\n     * @param {Function} callback Callback to invoke when an fabric.Path instance is created\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} [callback] Options callback invoked after parsing is finished\r\n     */\r\n    fabric.Path.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\r\n      callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        min = fabric.util.array.min,\r\n        max = fabric.util.array.max;\r\n\r\n    if (fabric.Group) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.Group\r\n     * @extends fabric.Object\r\n     * @mixes fabric.Collection\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.Group#initialize} for constructor definition\r\n     */\r\n    fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'group',\r\n\r\n      /**\r\n       * Width of stroke\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * Indicates if click events should also check for subtargets\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      subTargetCheck: false,\r\n\r\n      /**\r\n       * Groups are container, do not render anything on theyr own, ence no cache properties\r\n       * @type Array\r\n       * @default\r\n       */\r\n      cacheProperties: [],\r\n\r\n      /**\r\n       * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\r\n       * available setting this boolean to true.\r\n       * @type Boolean\r\n       * @since 2.0.0\r\n       * @default\r\n       */\r\n      useSetOnGroup: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects Group objects\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options, isAlreadyGrouped) {\r\n        options = options || {};\r\n        this._objects = [];\r\n        // if objects enclosed in a group have been grouped already,\r\n        // we cannot change properties of objects.\r\n        // Thus we need to set options to group without objects,\r\n        isAlreadyGrouped && this.callSuper('initialize', options);\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (!isAlreadyGrouped) {\r\n          var center = options && options.centerPoint;\r\n          // we want to set origins before calculating the bounding box.\r\n          // so that the topleft can be set with that in mind.\r\n          // if specific top and left are passed, are overwritten later\r\n          // with the callSuper('initialize', options)\r\n          if (options.originX !== undefined) {\r\n            this.originX = options.originX;\r\n          }\r\n          if (options.originY !== undefined) {\r\n            this.originY = options.originY;\r\n          }\r\n          // if coming from svg i do not want to calc bounds.\r\n          // i assume width and height are passed along options\r\n          center || this._calcBounds();\r\n          this._updateObjectsCoords(center);\r\n          delete options.centerPoint;\r\n          this.callSuper('initialize', options);\r\n        }\r\n        else {\r\n          this._updateObjectsACoords();\r\n        }\r\n\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsACoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        for (var i = this._objects.length; i--; ){\r\n          this._objects[i].setCoords(ignoreZoom, skipAbsolute);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n       */\r\n      _updateObjectsCoords: function(center) {\r\n        var center = center || this.getCenterPoint();\r\n        for (var i = this._objects.length; i--; ){\r\n          this._updateObjectCoords(this._objects[i], center);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} object\r\n       * @param {fabric.Point} center, current center of group.\r\n       */\r\n      _updateObjectCoords: function(object, center) {\r\n        var objectLeft = object.left,\r\n            objectTop = object.top,\r\n            ignoreZoom = true, skipAbsolute = true;\r\n\r\n        object.set({\r\n          left: objectLeft - center.x,\r\n          top: objectTop - center.y\r\n        });\r\n        object.group = this;\r\n        object.setCoords(ignoreZoom, skipAbsolute);\r\n      },\r\n\r\n      /**\r\n       * Returns string represenation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Group: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Adds an object to a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      addWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n        if (object) {\r\n          this._objects.push(object);\r\n          object.group = this;\r\n          object._set('canvas', this.canvas);\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Removes an object from a group; Then recalculates group's dimension, position.\r\n       * @param {Object} object\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      removeWithUpdate: function(object) {\r\n        this._restoreObjectsState();\r\n        fabric.util.resetObjectTransform(this);\r\n\r\n        this.remove(object);\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        this.setCoords();\r\n        this.dirty = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectAdded: function(object) {\r\n        this.dirty = true;\r\n        object.group = this;\r\n        object._set('canvas', this.canvas);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onObjectRemoved: function(object) {\r\n        this.dirty = true;\r\n        delete object.group;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _set: function(key, value) {\r\n        var i = this._objects.length;\r\n        if (this.useSetOnGroup) {\r\n          while (i--) {\r\n            this._objects[i].setOnGroup(key, value);\r\n          }\r\n        }\r\n        if (key === 'canvas') {\r\n          while (i--) {\r\n            this._objects[i]._set(key, value);\r\n          }\r\n        }\r\n        fabric.Object.prototype._set.call(this, key, value);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var objsToObject = this._objects.map(function(obj) {\r\n          var originalDefaults = obj.includeDefaultValues;\r\n          obj.includeDefaultValues = obj.group.includeDefaultValues;\r\n          var _obj = obj.toObject(propertiesToInclude);\r\n          obj.includeDefaultValues = originalDefaults;\r\n          return _obj;\r\n        });\r\n        var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance, in dataless mode.\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toDatalessObject: function(propertiesToInclude) {\r\n        var objsToObject, sourcePath = this.sourcePath;\r\n        if (sourcePath) {\r\n          objsToObject = sourcePath;\r\n        }\r\n        else {\r\n          objsToObject = this._objects.map(function(obj) {\r\n            var originalDefaults = obj.includeDefaultValues;\r\n            obj.includeDefaultValues = obj.group.includeDefaultValues;\r\n            var _obj = obj.toDatalessObject(propertiesToInclude);\r\n            obj.includeDefaultValues = originalDefaults;\r\n            return _obj;\r\n          });\r\n        }\r\n        var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\r\n        obj.objects = objsToObject;\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Renders instance on a given context\r\n       * @param {CanvasRenderingContext2D} ctx context to render instance on\r\n       */\r\n      render: function(ctx) {\r\n        this._transformDone = true;\r\n        this.callSuper('render', ctx);\r\n        this._transformDone = false;\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        var ownCache = this.objectCaching && (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\r\n        this.ownCaching = ownCache;\r\n        if (ownCache) {\r\n          for (var i = 0, len = this._objects.length; i < len; i++) {\r\n            if (this._objects[i].willDrawShadow()) {\r\n              this.ownCaching = false;\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return ownCache;\r\n      },\r\n\r\n      /**\r\n       * Check if this object or a child object will cast a shadow\r\n       * @return {Boolean}\r\n       */\r\n      willDrawShadow: function() {\r\n        if (this.shadow) {\r\n          return fabric.Object.prototype.willDrawShadow.call(this);\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].willDrawShadow()) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return this.ownCaching || (this.group && this.group.isOnACache());\r\n      },\r\n\r\n      /**\r\n       * Execute the drawing operation for an object on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      drawObject: function(ctx) {\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i].render(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Check if cache is dirty\r\n       */\r\n      isCacheDirty: function() {\r\n        if (this.callSuper('isCacheDirty')) {\r\n          return true;\r\n        }\r\n        if (!this.statefullCache) {\r\n          return false;\r\n        }\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].isCacheDirty(true)) {\r\n            if (this._cacheCanvas) {\r\n              // if this group has not a cache canvas there is nothing to clean\r\n              var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\r\n              this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Retores original state of each of group objects (original state is that which was before group was created).\r\n       * @private\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      _restoreObjectsState: function() {\r\n        this._objects.forEach(this._restoreObjectState, this);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Realises the transform from this group onto the supplied object\r\n       * i.e. it tells you what would happen if the supplied object was in\r\n       * the group, and then the group was destroyed. It mutates the supplied\r\n       * object.\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Object} transformedObject\r\n       */\r\n      realizeTransform: function(object) {\r\n        var matrix = object.calcTransformMatrix(),\r\n            options = fabric.util.qrDecompose(matrix),\r\n            center = new fabric.Point(options.translateX, options.translateY);\r\n        object.flipX = false;\r\n        object.flipY = false;\r\n        object.set('scaleX', options.scaleX);\r\n        object.set('scaleY', options.scaleY);\r\n        object.skewX = options.skewX;\r\n        object.skewY = options.skewY;\r\n        object.angle = options.angle;\r\n        object.setPositionByOrigin(center, 'center', 'center');\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Restores original state of a specified object in group\r\n       * @private\r\n       * @param {fabric.Object} object\r\n       * @return {fabric.Group} thisArg\r\n       */\r\n      _restoreObjectState: function(object) {\r\n        this.realizeTransform(object);\r\n        object.setCoords();\r\n        delete object.group;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      destroy: function() {\r\n        // when group is destroyed objects needs to get a repaint to be eventually\r\n        // displayed on canvas.\r\n        this._objects.forEach(function(object) {\r\n          object.set('dirty', true);\r\n        });\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * make a group an active selection, remove the group from canvas\r\n       * the group has to be on canvas for this to work.\r\n       * @return {fabric.ActiveSelection} thisArg\r\n       * @chainable\r\n       */\r\n      toActiveSelection: function() {\r\n        if (!this.canvas) {\r\n          return;\r\n        }\r\n        var objects = this._objects, canvas = this.canvas;\r\n        this._objects = [];\r\n        var options = this.toObject();\r\n        delete options.objects;\r\n        var activeSelection = new fabric.ActiveSelection([]);\r\n        activeSelection.set(options);\r\n        activeSelection.type = 'activeSelection';\r\n        canvas.remove(this);\r\n        objects.forEach(function(object) {\r\n          object.group = activeSelection;\r\n          object.dirty = true;\r\n          canvas.add(object);\r\n        });\r\n        activeSelection.canvas = canvas;\r\n        activeSelection._objects = objects;\r\n        canvas._activeObject = activeSelection;\r\n        activeSelection.setCoords();\r\n        return activeSelection;\r\n      },\r\n\r\n      /**\r\n       * Destroys a group (restoring state of its objects)\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      ungroupOnCanvas: function() {\r\n        return this._restoreObjectsState();\r\n      },\r\n\r\n      /**\r\n       * Sets coordinates of all objects inside group\r\n       * @return {fabric.Group} thisArg\r\n       * @chainable\r\n       */\r\n      setObjectsCoords: function() {\r\n        var ignoreZoom = true, skipAbsolute = true;\r\n        this.forEachObject(function(object) {\r\n          object.setCoords(ignoreZoom, skipAbsolute);\r\n        });\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _calcBounds: function(onlyWidthHeight) {\r\n        var aX = [],\r\n            aY = [],\r\n            o, prop,\r\n            props = ['tr', 'br', 'bl', 'tl'],\r\n            i = 0, iLen = this._objects.length,\r\n            j, jLen = props.length,\r\n            ignoreZoom = true;\r\n\r\n        for ( ; i < iLen; ++i) {\r\n          o = this._objects[i];\r\n          o.setCoords(ignoreZoom);\r\n          for (j = 0; j < jLen; j++) {\r\n            prop = props[j];\r\n            aX.push(o.oCoords[prop].x);\r\n            aY.push(o.oCoords[prop].y);\r\n          }\r\n        }\r\n\r\n        this._getBounds(aX, aY, onlyWidthHeight);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getBounds: function(aX, aY, onlyWidthHeight) {\r\n        var minXY = new fabric.Point(min(aX), min(aY)),\r\n            maxXY = new fabric.Point(max(aX), max(aY)),\r\n            top = minXY.y || 0, left = minXY.x || 0,\r\n            width = (maxXY.x - minXY.x) || 0,\r\n            height = (maxXY.y - minXY.y) || 0;\r\n        this.width = width;\r\n        this.height = height;\r\n        if (!onlyWidthHeight) {\r\n          // the bounding box always finds the topleft most corner.\r\n          // whatever is the group origin, we set up here the left/top position.\r\n          this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\r\n        }\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns svg representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup();\r\n        markup.push(\r\n          '<g ', this.getSvgId(), 'transform=\"',\r\n          /* avoiding styles intentionally */\r\n          this.getSvgTransform(),\r\n          this.getSvgTransformMatrix(),\r\n          '\" style=\"',\r\n          this.getSvgFilter(),\r\n          '\">\\n'\r\n        );\r\n\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          markup.push('\\t', this._objects[i].toSVG(reviver));\r\n        }\r\n\r\n        markup.push('</g>\\n');\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.Group} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Group\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an group instance is created\r\n     */\r\n    fabric.Group.fromObject = function(object, callback) {\r\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\r\n        var options = fabric.util.object.clone(object, true);\r\n        delete options.objects;\r\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    //var fabric = global.fabric || (global.fabric = { });\r\n\r\n    if (fabric.ActiveSelection) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Group class\r\n     * @class fabric.ActiveSelection\r\n     * @extends fabric.Group\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n     * @see {@link fabric.ActiveSelection#initialize} for constructor definition\r\n     */\r\n    fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'activeSelection',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} objects ActiveSelection objects\r\n       * @param {Object} [options] Options object\r\n       * @return {Object} thisArg\r\n       */\r\n      initialize: function(objects, options) {\r\n        options = options || {};\r\n        this._objects = objects || [];\r\n        for (var i = this._objects.length; i--; ) {\r\n          this._objects[i].group = this;\r\n        }\r\n\r\n        if (options.originX) {\r\n          this.originX = options.originX;\r\n        }\r\n        if (options.originY) {\r\n          this.originY = options.originY;\r\n        }\r\n        this._calcBounds();\r\n        this._updateObjectsCoords();\r\n        fabric.Object.prototype.initialize.call(this, options);\r\n        this.setCoords();\r\n      },\r\n\r\n      /**\r\n       * Change te activeSelection to a normal group,\r\n       * High level function that automatically adds it to canvas as\r\n       * active object. no events fired.\r\n       * @since 2.0.0\r\n       * @return {fabric.Group}\r\n       */\r\n      toGroup: function() {\r\n        var objects = this._objects.concat();\r\n        this._objects = [];\r\n        var options = fabric.Object.prototype.toObject.call(this);\r\n        var newGroup = new fabric.Group([]);\r\n        delete options.type;\r\n        newGroup.set(options);\r\n        objects.forEach(function(object) {\r\n          object.canvas.remove(object);\r\n          object.group = newGroup;\r\n        });\r\n        newGroup._objects = objects;\r\n        if (!this.canvas) {\r\n          return newGroup;\r\n        }\r\n        var canvas = this.canvas;\r\n        canvas.add(newGroup);\r\n        canvas._activeObject = newGroup;\r\n        newGroup.setCoords();\r\n        return newGroup;\r\n      },\r\n\r\n      /**\r\n       * If returns true, deselection is cancelled.\r\n       * @since 2.0.0\r\n       * @return {Boolean} [cancel]\r\n       */\r\n      onDeselect: function() {\r\n        this.destroy();\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of a group\r\n       * @return {String}\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\r\n      },\r\n\r\n      /**\r\n       * Decide if the object should cache or not. Create its own cache level\r\n       * objectCaching is a global flag, wins over everything\r\n       * needsItsOwnCache should be used when the object drawing method requires\r\n       * a cache step. None of the fabric classes requires it.\r\n       * Generally you do not cache objects in groups because the group outside is cached.\r\n       * @return {Boolean}\r\n       */\r\n      shouldCache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if this group or its parent group are caching, recursively up\r\n       * @return {Boolean}\r\n       */\r\n      isOnACache: function() {\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Renders controls and borders for the object\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [styleOverride] properties to override the object style\r\n       * @param {Object} [childrenOverride] properties to override the children overrides\r\n       */\r\n      _renderControls: function(ctx, styleOverride, childrenOverride) {\r\n        ctx.save();\r\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n        this.callSuper('_renderControls', ctx, styleOverride);\r\n        childrenOverride = childrenOverride || { };\r\n        if (typeof childrenOverride.hasControls === 'undefined') {\r\n          childrenOverride.hasControls = false;\r\n        }\r\n        if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\r\n          childrenOverride.hasRotatingPoint = false;\r\n        }\r\n        childrenOverride.forActiveSelection = true;\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          this._objects[i]._renderControls(ctx, childrenOverride);\r\n        }\r\n        ctx.restore();\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns {@link fabric.ActiveSelection} instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.ActiveSelection\r\n     * @param {Object} object Object to create a group from\r\n     * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\r\n     */\r\n    fabric.ActiveSelection.fromObject = function(object, callback) {\r\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\r\n        delete object.objects;\r\n        callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var extend = fabric.util.object.extend;\r\n\r\n    //if (!global.fabric) {\r\n    //  global.fabric = { };\r\n    //}\r\n\r\n    //if (global.fabric.Image) {\r\n    if (fabric.Image) {\r\n      fabric.warn('fabric.Image is already defined.');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Image class\r\n     * @class fabric.Image\r\n     * @extends fabric.Object\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\r\n     * @see {@link fabric.Image#initialize} for constructor definition\r\n     */\r\n    fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'image',\r\n\r\n      /**\r\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n       * @type String\r\n       * @default\r\n       */\r\n      crossOrigin: '',\r\n\r\n      /**\r\n       * Width of a stroke.\r\n       * For image quality a stroke multiple of 2 gives better results.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      strokeWidth: 0,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleX to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaleY to detect\r\n       * if the Image got resized after the last Render\r\n       * @type Number\r\n       */\r\n      _lastScaleY: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingX: 1,\r\n\r\n      /**\r\n       * private\r\n       * contains last value of scaling applied by the apply filter chain\r\n       * @type Number\r\n       */\r\n      _filterScalingY: 1,\r\n\r\n      /**\r\n       * minimum scale factor under which any resizeFilter is triggered to resize the image\r\n       * 0 will disable the automatic resize. 1 will trigger automatically always.\r\n       * number bigger than 1 are not implemented yet.\r\n       * @type Number\r\n       */\r\n      minimumScaleTrigger: 0.5,\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\r\n\r\n      /**\r\n       * When `true`, object is cached on an additional canvas.\r\n       * default to false for images\r\n       * since 1.7.0\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      objectCaching: false,\r\n\r\n      /**\r\n       * key used to retrieve the texture representing this image\r\n       * since 2.0.0\r\n       * @type String\r\n       * @default\r\n       */\r\n      cacheKey: '',\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropX: 0,\r\n\r\n      /**\r\n       * Image crop in pixels from original image size.\r\n       * since 2.0.0\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cropY: 0,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {HTMLImageElement | String} element Image element\r\n       * @param {Object} [options] Options object\r\n       * @param {function} [callback] callback function to call after eventual filters applied.\r\n       * @return {fabric.Image} thisArg\r\n       */\r\n      initialize: function(element, options) {\r\n        options || (options = { });\r\n        this.filters = [];\r\n        this.cacheKey = 'texture' + fabric.Object.__uid++;\r\n        this.callSuper('initialize', options);\r\n        this._initElement(element, options);\r\n      },\r\n\r\n      /**\r\n       * Returns image element which this instance if based on\r\n       * @return {HTMLImageElement} Image element\r\n       */\r\n      getElement: function() {\r\n        return this._element || {};\r\n      },\r\n\r\n      /**\r\n       * Sets image element for this instance to a specified one.\r\n       * If filters defined they are applied to new image.\r\n       * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\r\n       * @param {HTMLImageElement} element\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setElement: function(element, options) {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._element = element;\r\n        this._originalElement = element;\r\n        this._initConfig(options);\r\n        if (this.resizeFilter) {\r\n          this.applyResizeFilters();\r\n        }\r\n        if (this.filters.length !== 0) {\r\n          this.applyFilters();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Delete a single texture if in webgl mode\r\n       */\r\n      removeTexture: function(key) {\r\n        var backend = fabric.filterBackend;\r\n        if (backend && backend.evictCachesForKey) {\r\n          backend.evictCachesForKey(key);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Delete textures, reference to elements and eventually JSDOM cleanup\r\n       */\r\n      dispose: function() {\r\n        this.removeTexture(this.cacheKey);\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n        this._cacheContext = undefined;\r\n        ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\r\n          fabric.util.cleanUpJsdomNode(this[element]);\r\n          this[element] = undefined;\r\n        }).bind(this));\r\n      },\r\n\r\n      /**\r\n       * Sets crossOrigin value (on an instance and corresponding image element)\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setCrossOrigin: function(value) {\r\n        this.crossOrigin = value;\r\n        this._element.crossOrigin = value;\r\n\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns original size of an image\r\n       * @return {Object} Object with \"width\" and \"height\" properties\r\n       */\r\n      getOriginalSize: function() {\r\n        var element = this.getElement();\r\n        return {\r\n          width: element.naturalWidth || element.width,\r\n          height: element.naturalHeight || element.height\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _stroke: function(ctx) {\r\n        if (!this.stroke || this.strokeWidth === 0) {\r\n          return;\r\n        }\r\n        var w = this.width / 2, h = this.height / 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(-w, -h);\r\n        ctx.lineTo(w, -h);\r\n        ctx.lineTo(w, h);\r\n        ctx.lineTo(-w, h);\r\n        ctx.lineTo(-w, -h);\r\n        ctx.closePath();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderDashedStroke: function(ctx) {\r\n        var x = -this.width / 2,\r\n            y = -this.height / 2,\r\n            w = this.width,\r\n            h = this.height;\r\n\r\n        ctx.save();\r\n        this._setStrokeStyles(ctx, this);\r\n\r\n        ctx.beginPath();\r\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\r\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var filters = [];\r\n\r\n        this.filters.forEach(function(filterObj) {\r\n          if (filterObj) {\r\n            filters.push(filterObj.toObject());\r\n          }\r\n        });\r\n        var object = extend(\r\n          this.callSuper(\r\n            'toObject',\r\n            ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\r\n          ), {\r\n            src: this.getSrc(),\r\n            filters: filters,\r\n          });\r\n        if (this.resizeFilter) {\r\n          object.resizeFilter = this.resizeFilter.toObject();\r\n        }\r\n        return object;\r\n      },\r\n\r\n      /**\r\n       * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\r\n       * @return {Boolean}\r\n       */\r\n      hasCrop: function() {\r\n        return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\r\n      },\r\n\r\n      /* _TO_SVG_START_ */\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(), x = -this.width / 2, y = -this.height / 2, clipPath = '';\r\n        if (this.hasCrop()) {\r\n          var clipPathId = fabric.Object.__uid++;\r\n          markup.push(\r\n            '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\r\n            '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\r\n            '</clipPath>\\n'\r\n          );\r\n          clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\r\n        }\r\n        markup.push('<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n');\r\n        var imageMarkup = ['\\t<image ', this.getSvgId(), 'xlink:href=\"', this.getSvgSrc(true),\r\n          '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\r\n          '\" style=\"', this.getSvgStyles(),\r\n          // we're essentially moving origin of transformation from top/left corner to the center of the shape\r\n          // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\r\n          // so that object's center aligns with container's left/top\r\n          '\" width=\"', this._element.width || this._element.naturalWidth,\r\n          '\" height=\"', this._element.height || this._element.height,\r\n          '\"', clipPath,\r\n          '></image>\\n'];\r\n        if (this.paintFirst === 'fill') {\r\n          Array.prototype.push.apply(markup, imageMarkup);\r\n        }\r\n        if (this.stroke || this.strokeDashArray) {\r\n          var origFill = this.fill;\r\n          this.fill = null;\r\n          markup.push(\r\n            '\\t<rect ',\r\n            'x=\"', x, '\" y=\"', y,\r\n            '\" width=\"', this.width, '\" height=\"', this.height,\r\n            '\" style=\"', this.getSvgStyles(),\r\n            '\"/>\\n'\r\n          );\r\n          this.fill = origFill;\r\n        }\r\n        if (this.paintFirst !== 'fill') {\r\n          Array.prototype.push.apply(markup, imageMarkup);\r\n        }\r\n        markup.push('</g>\\n');\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n      /* _TO_SVG_END_ */\r\n\r\n      /**\r\n       * Returns source of an image\r\n       * @param {Boolean} filtered indicates if the src is needed for svg\r\n       * @return {String} Source of an image\r\n       */\r\n      getSrc: function(filtered) {\r\n        var element = filtered ? this._element : this._originalElement;\r\n        if (element) {\r\n          if (element.toDataURL) {\r\n            return element.toDataURL();\r\n          }\r\n          return element.src;\r\n        }\r\n        else {\r\n          return this.src || '';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets source of an image\r\n       * @param {String} src Source string (URL)\r\n       * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Image} thisArg\r\n       * @chainable\r\n       */\r\n      setSrc: function(src, callback, options) {\r\n        fabric.util.loadImage(src, function(img) {\r\n          this.setElement(img, options);\r\n          this._setWidthHeight();\r\n          callback(this);\r\n        }, this, options && options.crossOrigin);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of an instance\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\r\n      },\r\n\r\n      applyResizeFilters: function() {\r\n        var filter = this.resizeFilter,\r\n            minimumScale = this.minimumScaleTrigger,\r\n            objectScale = this.getTotalObjectScaling(),\r\n            scaleX = objectScale.scaleX,\r\n            scaleY = objectScale.scaleY,\r\n            elementToFilter = this._filteredEl || this._originalElement;\r\n        if (this.group) {\r\n          this.set('dirty', true);\r\n        }\r\n        if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\r\n          this._element = elementToFilter;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          this._lastScaleX = scaleX;\r\n          this._lastScaleY = scaleY;\r\n          return;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        var canvasEl = fabric.util.createCanvasElement(),\r\n            cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\r\n            sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\r\n        canvasEl.width = sourceWidth;\r\n        canvasEl.height = sourceHeight;\r\n        this._element = canvasEl;\r\n        this._lastScaleX = filter.scaleX = scaleX;\r\n        this._lastScaleY = filter.scaleY = scaleY;\r\n        fabric.filterBackend.applyFilters(\r\n          [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\r\n        this._filterScalingX = canvasEl.width / this._originalElement.width;\r\n        this._filterScalingY = canvasEl.height / this._originalElement.height;\r\n      },\r\n\r\n      /**\r\n       * Applies filters assigned to this image (from \"filters\" array) or from filter param\r\n       * @method applyFilters\r\n       * @param {Array} filters to be applied\r\n       * @param {Boolean} forResizing specify if the filter operation is a resize operation\r\n       * @return {thisArg} return the fabric.Image object\r\n       * @chainable\r\n       */\r\n      applyFilters: function(filters) {\r\n\r\n        filters = filters || this.filters || [];\r\n        filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\r\n        if (this.group) {\r\n          this.set('dirty', true);\r\n        }\r\n\r\n        // needs to clear out or WEBGL will not resize correctly\r\n        this.removeTexture(this.cacheKey + '_filtered');\r\n\r\n        if (filters.length === 0) {\r\n          this._element = this._originalElement;\r\n          this._filteredEl = null;\r\n          this._filterScalingX = 1;\r\n          this._filterScalingY = 1;\r\n          return this;\r\n        }\r\n\r\n        var imgElement = this._originalElement,\r\n            sourceWidth = imgElement.naturalWidth || imgElement.width,\r\n            sourceHeight = imgElement.naturalHeight || imgElement.height;\r\n\r\n        if (this._element === this._originalElement) {\r\n          // if the element is the same we need to create a new element\r\n          var canvasEl = fabric.util.createCanvasElement();\r\n          canvasEl.width = sourceWidth;\r\n          canvasEl.height = sourceHeight;\r\n          this._element = canvasEl;\r\n          this._filteredEl = canvasEl;\r\n        }\r\n        else {\r\n          // clear the existing element to get new filter data\r\n          // also dereference the eventual resized _element\r\n          this._element = this._filteredEl;\r\n          this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\r\n          // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\r\n          this._lastScaleX = 1;\r\n          this._lastScaleY = 1;\r\n        }\r\n        if (!fabric.filterBackend) {\r\n          fabric.filterBackend = fabric.initFilterBackend();\r\n        }\r\n        fabric.filterBackend.applyFilters(\r\n          filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\r\n        if (this._originalElement.width !== this._element.width ||\r\n          this._originalElement.height !== this._element.height) {\r\n          this._filterScalingX = this._element.width / this._originalElement.width;\r\n          this._filterScalingY = this._element.height / this._originalElement.height;\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\r\n          this.applyResizeFilters();\r\n        }\r\n        this._stroke(ctx);\r\n        this._renderPaintInOrder(ctx);\r\n      },\r\n\r\n      _renderFill: function(ctx) {\r\n        var w = this.width, h = this.height, sW = w * this._filterScalingX, sH = h * this._filterScalingY,\r\n            x = -w / 2, y = -h / 2, elementToDraw = this._element;\r\n        elementToDraw && ctx.drawImage(elementToDraw,\r\n          this.cropX * this._filterScalingX,\r\n          this.cropY * this._filterScalingY,\r\n          sW,\r\n          sH,\r\n          x, y, w, h);\r\n      },\r\n\r\n      /**\r\n       * @private, needed to check if image needs resize\r\n       */\r\n      _needsResize: function() {\r\n        var scale = this.getTotalObjectScaling();\r\n        return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _resetWidthHeight: function() {\r\n        this.set(this.getOriginalSize());\r\n      },\r\n\r\n      /**\r\n       * The Image class's initialization method. This method is automatically\r\n       * called by the constructor.\r\n       * @private\r\n       * @param {HTMLImageElement|String} element The element representing the image\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initElement: function(element, options) {\r\n        this.setElement(fabric.util.getById(element), options);\r\n        fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} [options] Options object\r\n       */\r\n      _initConfig: function(options) {\r\n        options || (options = { });\r\n        this.setOptions(options);\r\n        this._setWidthHeight(options);\r\n        if (this._element && this.crossOrigin) {\r\n          this._element.crossOrigin = this.crossOrigin;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Array} filters to be initialized\r\n       * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\r\n       */\r\n      _initFilters: function(filters, callback) {\r\n        if (filters && filters.length) {\r\n          fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\r\n            callback && callback(enlivenedObjects);\r\n          }, 'fabric.Image.filters');\r\n        }\r\n        else {\r\n          callback && callback();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Set the width and the height of the image object, using the element or the\r\n       * options.\r\n       * @param {Object} [options] Object with width/height properties\r\n       */\r\n      _setWidthHeight: function(options) {\r\n        options || (options = { });\r\n        var el = this.getElement();\r\n        this.width = options.width || el.naturalWidth || el.width || 0;\r\n        this.height = options.height || el.naturalHeight || el.height || 0;\r\n      },\r\n\r\n      /**\r\n       * Calculate offset for center and scale factor for the image in order to respect\r\n       * the preserveAspectRatio attribute\r\n       * @private\r\n       * @return {Object}\r\n       */\r\n      parsePreserveAspectRatioAttribute: function() {\r\n        var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\r\n            rWidth = this._element.width, rHeight = this._element.height,\r\n            scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\r\n            offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\r\n        if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\r\n          if (pAR.meetOrSlice === 'meet') {\r\n            scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\r\n            offset = (pWidth - rWidth * scaleX) / 2;\r\n            if (pAR.alignX === 'Min') {\r\n              offsetLeft = -offset;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              offsetLeft = offset;\r\n            }\r\n            offset = (pHeight - rHeight * scaleY) / 2;\r\n            if (pAR.alignY === 'Min') {\r\n              offsetTop = -offset;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              offsetTop = offset;\r\n            }\r\n          }\r\n          if (pAR.meetOrSlice === 'slice') {\r\n            scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\r\n            offset = rWidth - pWidth / scaleX;\r\n            if (pAR.alignX === 'Mid') {\r\n              cropX = offset / 2;\r\n            }\r\n            if (pAR.alignX === 'Max') {\r\n              cropX = offset;\r\n            }\r\n            offset = rHeight - pHeight / scaleY;\r\n            if (pAR.alignY === 'Mid') {\r\n              cropY = offset / 2;\r\n            }\r\n            if (pAR.alignY === 'Max') {\r\n              cropY = offset;\r\n            }\r\n            rWidth = pWidth / scaleX;\r\n            rHeight = pHeight / scaleY;\r\n          }\r\n        }\r\n        else {\r\n          scaleX = pWidth / rWidth;\r\n          scaleY = pHeight / rHeight;\r\n        }\r\n        return {\r\n          width: rWidth,\r\n          height: rHeight,\r\n          scaleX: scaleX,\r\n          scaleY: scaleY,\r\n          offsetLeft: offsetLeft,\r\n          offsetTop: offsetTop,\r\n          cropX: cropX,\r\n          cropY: cropY\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Default CSS class name for canvas\r\n     * @static\r\n     * @type String\r\n     * @default\r\n     */\r\n    fabric.Image.CSS_CANVAS = 'canvas-img';\r\n\r\n    /**\r\n     * Alias for getSrc\r\n     * @static\r\n     */\r\n    fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from its object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} callback Callback to invoke when an image instance is created\r\n     */\r\n    fabric.Image.fromObject = function(_object, callback) {\r\n      var object = fabric.util.object.clone(_object);\r\n      fabric.util.loadImage(object.src, function(img, error) {\r\n        if (error) {\r\n          callback && callback(null, error);\r\n          return;\r\n        }\r\n        fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\r\n          object.filters = filters || [];\r\n          fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\r\n            object.resizeFilter = resizeFilters[0];\r\n            var image = new fabric.Image(img, object);\r\n            callback(image);\r\n          });\r\n        });\r\n      }, null, object.crossOrigin);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image from an URL string\r\n     * @static\r\n     * @param {String} url URL to create an image from\r\n     * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\r\n     * @param {Object} [imgOptions] Options object\r\n     */\r\n    fabric.Image.fromURL = function(url, callback, imgOptions) {\r\n      fabric.util.loadImage(url, function(img) {\r\n        callback && callback(new fabric.Image(img, imgOptions));\r\n      }, null, imgOptions && imgOptions.crossOrigin);\r\n    };\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\r\n     * @static\r\n     * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\r\n     */\r\n    fabric.Image.ATTRIBUTE_NAMES =\r\n      fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\r\n\r\n    /**\r\n     * Returns {@link fabric.Image} instance from an SVG element\r\n     * @static\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Object} [options] Options object\r\n     * @param {Function} callback Callback to execute when fabric.Image object is created\r\n     * @return {fabric.Image} Instance of fabric.Image\r\n     */\r\n    fabric.Image.fromElement = function(element, callback, options) {\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\r\n      fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\r\n        extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} angle value\r\n     */\r\n    _getAngleValueForStraighten: function() {\r\n      var angle = this.angle % 360;\r\n      if (angle > 0) {\r\n        return Math.round((angle - 1) / 90) * 90;\r\n      }\r\n      return Math.round(angle / 90) * 90;\r\n    },\r\n\r\n    /**\r\n     * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    straighten: function() {\r\n      this.rotate(this._getAngleValueForStraighten());\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Object.prototype.straighten} but with animation\r\n     * @param {Object} callbacks Object with callback functions\r\n     * @param {Function} [callbacks.onComplete] Invoked on completion\r\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraighten: function(callbacks) {\r\n      callbacks = callbacks || { };\r\n\r\n      var empty = function() { },\r\n          onComplete = callbacks.onComplete || empty,\r\n          onChange = callbacks.onChange || empty,\r\n          _this = this;\r\n\r\n      fabric.util.animate({\r\n        startValue: this.get('angle'),\r\n        endValue: this._getAngleValueForStraighten(),\r\n        duration: this.FX_DURATION,\r\n        onChange: function(value) {\r\n          _this.rotate(value);\r\n          onChange();\r\n        },\r\n        onComplete: function() {\r\n          _this.setCoords();\r\n          onComplete();\r\n        },\r\n      });\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Straightens object, then rerenders canvas\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    straightenObject: function (object) {\r\n      object.straighten();\r\n      this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\r\n     * @param {fabric.Object} object Object to straighten\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    fxStraightenObject: function (object) {\r\n      object.fxStraighten({\r\n        onChange: this.requestRenderAllBound\r\n      });\r\n      return this;\r\n    }\r\n  });\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Tests if webgl supports certain precision\r\n     * @param {WebGL} Canvas WebGL context to test on\r\n     * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\r\n     * @returns {Boolean} Whether the user's browser WebGL supports given precision.\r\n     */\r\n    function testPrecision(gl, precision){\r\n      var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Indicate whether this filtering backend is supported by the user's browser.\r\n     * @param {Number} tileSize check if the tileSize is supported\r\n     * @returns {Boolean} Whether the user's browser supports WebGL.\r\n     */\r\n    fabric.isWebglSupported = function(tileSize) {\r\n      if (fabric.isLikelyNode) {\r\n        return false;\r\n      }\r\n      tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\r\n      var canvas = document.createElement('canvas');\r\n      var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n      var isSupported = false;\r\n      // eslint-disable-next-line\r\n      if (gl) {\r\n        fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n        isSupported = fabric.maxTextureSize >= tileSize;\r\n        var precisions = ['highp', 'mediump', 'lowp'];\r\n        for (var i = 0; i < 3; i++){\r\n          if (testPrecision(gl, precisions[i])){\r\n            fabric.webGlPrecision = precisions[i];\r\n            break;\r\n          };\r\n        }\r\n      }\r\n      this.isSupported = isSupported;\r\n      return isSupported;\r\n    };\r\n\r\n    fabric.WebglFilterBackend = WebglFilterBackend;\r\n\r\n    /**\r\n     * WebGL filter backend.\r\n     */\r\n    function WebglFilterBackend(options) {\r\n      if (options && options.tileSize) {\r\n        this.tileSize = options.tileSize;\r\n      }\r\n      this.setupGLContext(this.tileSize, this.tileSize);\r\n      this.captureGPUInfo();\r\n    };\r\n\r\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\r\n\r\n      tileSize: 2048,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you problably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\r\n       */\r\n      setupGLContext: function(width, height) {\r\n        this.dispose();\r\n        this.createWebGLCanvas(width, height);\r\n        // eslint-disable-next-line\r\n        this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\r\n        this.chooseFastestCopyGLTo2DMethod(width, height);\r\n      },\r\n\r\n      /**\r\n       * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\r\n       * putImageData is faster than drawImage for that specific operation.\r\n       */\r\n      chooseFastestCopyGLTo2DMethod: function(width, height) {\r\n        var canMeasurePerf = typeof window.performance !== 'undefined';\r\n        var canUseImageData;\r\n        try {\r\n          new ImageData(1, 1);\r\n          canUseImageData = true;\r\n        }\r\n        catch (e) {\r\n          canUseImageData = false;\r\n        }\r\n        // eslint-disable-next-line no-undef\r\n        var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\r\n        // eslint-disable-next-line no-undef\r\n        var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\r\n\r\n        if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\r\n          return;\r\n        }\r\n\r\n        var targetCanvas = fabric.util.createCanvasElement();\r\n        // eslint-disable-next-line no-undef\r\n        var imageBuffer = new ArrayBuffer(width * height * 4);\r\n        var testContext = {\r\n          imageBuffer: imageBuffer,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var startTime, drawImageTime, putImageDataTime;\r\n        targetCanvas.width = width;\r\n        targetCanvas.height = height;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\r\n        drawImageTime = window.performance.now() - startTime;\r\n\r\n        startTime = window.performance.now();\r\n        copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\r\n        putImageDataTime = window.performance.now() - startTime;\r\n\r\n        if (drawImageTime > putImageDataTime) {\r\n          this.imageBuffer = imageBuffer;\r\n          this.copyGLTo2D = copyGLTo2DPutImageData;\r\n        }\r\n        else {\r\n          this.copyGLTo2D = copyGLTo2DDrawImage;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Create a canvas element and associated WebGL context and attaches them as\r\n       * class properties to the GLFilterBackend class.\r\n       */\r\n      createWebGLCanvas: function(width, height) {\r\n        var canvas = fabric.util.createCanvasElement();\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        var glOptions = {\r\n              alpha: true,\r\n              premultipliedAlpha: false,\r\n              depth: false,\r\n              stencil: false,\r\n              antialias: false\r\n            },\r\n            gl = canvas.getContext('webgl', glOptions);\r\n        if (!gl) {\r\n          gl = canvas.getContext('experimental-webgl', glOptions);\r\n        }\r\n        if (!gl) {\r\n          return;\r\n        }\r\n        gl.clearColor(0, 0, 0, 0);\r\n        // this canvas can fire webglcontextlost and webglcontextrestored\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n      },\r\n\r\n      /**\r\n       * Attempts to apply the requested filters to the source provided, drawing the filtered output\r\n       * to the provided target canvas.\r\n       *\r\n       * @param {Array} filters The filters to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\r\n       * @param {Number} width The width of the source input.\r\n       * @param {Number} height The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\r\n       * omitted, caching will be skipped.\r\n       */\r\n      applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\r\n        var gl = this.gl;\r\n        var cachedTexture;\r\n        if (cacheKey) {\r\n          cachedTexture = this.getCachedTexture(cacheKey, source);\r\n        }\r\n        var pipelineState = {\r\n          originalWidth: source.width || source.originalWidth,\r\n          originalHeight: source.height || source.originalHeight,\r\n          sourceWidth: width,\r\n          sourceHeight: height,\r\n          destinationWidth: width,\r\n          destinationHeight: height,\r\n          context: gl,\r\n          sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\r\n          targetTexture: this.createTexture(gl, width, height),\r\n          originalTexture: cachedTexture ||\r\n            this.createTexture(gl, width, height, !cachedTexture && source),\r\n          passes: filters.length,\r\n          webgl: true,\r\n          aPosition: this.aPosition,\r\n          programCache: this.programCache,\r\n          pass: 0,\r\n          filterBackend: this,\r\n          targetCanvas: targetCanvas\r\n        };\r\n        var tempFbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\r\n        filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\r\n        resizeCanvasIfNeeded(pipelineState);\r\n        this.copyGLTo2D(gl, pipelineState);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(pipelineState.sourceTexture);\r\n        gl.deleteTexture(pipelineState.targetTexture);\r\n        gl.deleteFramebuffer(tempFbo);\r\n        targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n      /**\r\n       * The same as the applyFilter method but with additional logging of WebGL\r\n       * errors.\r\n       */\r\n      applyFiltersDebug: function(filters, source, width, height, targetCanvas, cacheKey) {\r\n        // The following code is useful when debugging a specific issue but adds ~10x slowdown.\r\n        var gl = this.gl;\r\n        var ret = this.applyFilters(filters, source, width, height, targetCanvas, cacheKey);\r\n        var glError = gl.getError();\r\n        if (glError !== gl.NO_ERROR) {\r\n          var errorString = this.glErrorToString(gl, glError);\r\n          var error = new Error('WebGL Error ' + errorString);\r\n          error.glErrorCode = glError;\r\n          throw error;\r\n        }\r\n        return ret;\r\n      },\r\n\r\n      glErrorToString: function(context, errorCode) {\r\n        if (!context) {\r\n          return 'Context undefined for error code: ' + errorCode;\r\n        }\r\n        else if (typeof errorCode !== 'number') {\r\n          return 'Error code is not a number';\r\n        }\r\n        switch (errorCode) {\r\n          case context.NO_ERROR:\r\n            return 'NO_ERROR';\r\n          case context.INVALID_ENUM:\r\n            return 'INVALID_ENUM';\r\n          case context.INVALID_VALUE:\r\n            return 'INVALID_VALUE';\r\n          case context.INVALID_OPERATION:\r\n            return 'INVALID_OPERATION';\r\n          case context.INVALID_FRAMEBUFFER_OPERATION:\r\n            return 'INVALID_FRAMEBUFFER_OPERATION';\r\n          case context.OUT_OF_MEMORY:\r\n            return 'OUT_OF_MEMORY';\r\n          case context.CONTEXT_LOST_WEBGL:\r\n            return 'CONTEXT_LOST_WEBGL';\r\n          default:\r\n            return 'UNKNOWN_ERROR';\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Detach event listeners, remove references, and clean up caches.\r\n       */\r\n      dispose: function() {\r\n        if (this.canvas) {\r\n          this.canvas = null;\r\n          this.gl = null;\r\n        }\r\n        this.clearWebGLCaches();\r\n      },\r\n\r\n      /**\r\n       * Wipe out WebGL-related caches.\r\n       */\r\n      clearWebGLCaches: function() {\r\n        this.programCache = {};\r\n        this.textureCache = {};\r\n      },\r\n\r\n      /**\r\n       * Create a WebGL texture object.\r\n       *\r\n       * Accepts specific dimensions to initialize the textuer to or a source image.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\r\n       * @param {Number} width The width to initialize the texture at.\r\n       * @param {Number} height The height to initialize the texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\r\n       * @returns {WebGLTexture}\r\n       */\r\n      createTexture: function(gl, width, height, textureImageSource) {\r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        if (textureImageSource) {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\r\n        }\r\n        else {\r\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        }\r\n        return texture;\r\n      },\r\n\r\n      /**\r\n       * Can be optionally used to get a texture from the cache array\r\n       *\r\n       * If an existing texture is not found, a new texture is created and cached.\r\n       *\r\n       * @param {String} uniqueId A cache key to use to find an existing texture.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\r\n       * texture cache entry if one does not already exist.\r\n       */\r\n      getCachedTexture: function(uniqueId, textureImageSource) {\r\n        if (this.textureCache[uniqueId]) {\r\n          return this.textureCache[uniqueId];\r\n        }\r\n        else {\r\n          var texture = this.createTexture(\r\n            this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\r\n          this.textureCache[uniqueId] = texture;\r\n          return texture;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Clear out cached resources related to a source image that has been\r\n       * filtered previously.\r\n       *\r\n       * @param {String} cacheKey The cache key provided when the source image was filtered.\r\n       */\r\n      evictCachesForKey: function(cacheKey) {\r\n        if (this.textureCache[cacheKey]) {\r\n          this.gl.deleteTexture(this.textureCache[cacheKey]);\r\n          delete this.textureCache[cacheKey];\r\n        }\r\n      },\r\n\r\n      copyGLTo2D: copyGLTo2DDrawImage,\r\n\r\n      /**\r\n       * Attempt to extract GPU information strings from a WebGL context.\r\n       *\r\n       * Useful information when debugging or blacklisting specific GPUs.\r\n       *\r\n       * @returns {Object} A GPU info object with renderer and vendor strings.\r\n       */\r\n      captureGPUInfo: function() {\r\n        if (this.gpuInfo) {\r\n          return this.gpuInfo;\r\n        }\r\n        var gl = this.gl;\r\n        var ext = gl.getExtension('WEBGL_debug_renderer_info');\r\n        var gpuInfo = { renderer: '', vendor: '' };\r\n        if (ext) {\r\n          var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\r\n          var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\r\n          if (renderer) {\r\n            gpuInfo.renderer = renderer.toLowerCase();\r\n          }\r\n          if (vendor) {\r\n            gpuInfo.vendor = vendor.toLowerCase();\r\n          }\r\n        }\r\n        this.gpuInfo = gpuInfo;\r\n        return gpuInfo;\r\n      },\r\n    };\r\n  })();\r\n\r\n  function resizeCanvasIfNeeded(pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas,\r\n        width = targetCanvas.width, height = targetCanvas.height,\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight;\r\n\r\n    if (width !== dWidth || height !== dHeight) {\r\n      targetCanvas.width = dWidth;\r\n      targetCanvas.height = dHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas.\r\n   *\r\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\r\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DDrawImage(gl, pipelineState) {\r\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\r\n        ctx = targetCanvas.getContext('2d');\r\n    ctx.translate(0, targetCanvas.height); // move it down again\r\n    ctx.scale(1, -1); // vertical flip\r\n    // where is my image on the big glcanvas?\r\n    var sourceY = glCanvas.height - targetCanvas.height;\r\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\r\n      targetCanvas.width, targetCanvas.height);\r\n  }\r\n\r\n  /**\r\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\r\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\r\n   *\r\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n   */\r\n  function copyGLTo2DPutImageData(gl, pipelineState) {\r\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\r\n        dWidth = pipelineState.destinationWidth,\r\n        dHeight = pipelineState.destinationHeight,\r\n        numBytes = dWidth * dHeight * 4;\r\n\r\n    // eslint-disable-next-line no-undef\r\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\r\n    // eslint-disable-next-line no-undef\r\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\r\n\r\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\r\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\r\n    ctx.putImageData(imgData, 0, 0);\r\n  }\r\n\r\n\r\n  (function() {\r\n\r\n    'use strict';\r\n\r\n    var noop = function() {};\r\n\r\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\r\n\r\n    /**\r\n     * Canvas 2D filter backend.\r\n     */\r\n    function Canvas2dFilterBackend() {};\r\n\r\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\r\n      evictCachesForKey: noop,\r\n      dispose: noop,\r\n      clearWebGLCaches: noop,\r\n\r\n      /**\r\n       * Experimental. This object is a sort of repository of help layers used to avoid\r\n       * of recreating them during frequent filtering. If you are previewing a filter with\r\n       * a slider you probably do not want to create help layers every filter step.\r\n       * in this object there will be appended some canvases, created once, resized sometimes\r\n       * cleared never. Clearing is left to the developer.\r\n       **/\r\n      resources: {\r\n\r\n      },\r\n\r\n      /**\r\n       * Apply a set of filters against a source image and draw the filtered output\r\n       * to the provided destination canvas.\r\n       *\r\n       * @param {EnhancedFilter} filters The filter to apply.\r\n       * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\r\n       * @param {Number} sourceWidth The width of the source input.\r\n       * @param {Number} sourceHeight The height of the source input.\r\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n       */\r\n      applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\r\n        var ctx = targetCanvas.getContext('2d');\r\n        ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\r\n        var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n        var pipelineState = {\r\n          sourceWidth: sourceWidth,\r\n          sourceHeight: sourceHeight,\r\n          imageData: imageData,\r\n          originalEl: sourceElement,\r\n          originalImageData: originalImageData,\r\n          canvasEl: targetCanvas,\r\n          ctx: ctx,\r\n          filterBackend: this,\r\n        };\r\n        filters.forEach(function(filter) { filter.applyTo(pipelineState); });\r\n        if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\r\n          targetCanvas.width = pipelineState.imageData.width;\r\n          targetCanvas.height = pipelineState.imageData.height;\r\n        }\r\n        ctx.putImageData(pipelineState.imageData, 0, 0);\r\n        return pipelineState;\r\n      },\r\n\r\n    };\r\n  })();\r\n\r\n\r\n  /**\r\n   * @namespace fabric.Image.filters\r\n   * @memberOf fabric.Image\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   */\r\n  fabric.Image.filters = fabric.Image.filters || { };\r\n\r\n  /**\r\n   * Root filter class from which all filter classes inherit from\r\n   * @class fabric.Image.filters.BaseFilter\r\n   * @memberOf fabric.Image.filters\r\n   */\r\n  fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'BaseFilter',\r\n\r\n    /**\r\n     * Array of attributes to send with buffers. do not modify\r\n     * @private\r\n     */\r\n\r\n    vertexSource: 'attribute vec2 aPosition;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vTexCoord = aPosition;\\n' +\r\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n      '}',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'void main() {\\n' +\r\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      if (options) {\r\n        this.setOptions(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets filter's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    setOptions: function(options) {\r\n      for (var prop in options) {\r\n        this[prop] = options[prop];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Compile this filter's shader program.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\r\n     * @param {String} fragmentSource fragmentShader source for compilation\r\n     * @param {String} vertexSource vertexShader source for compilation\r\n     */\r\n    createProgram: function(gl, fragmentSource, vertexSource) {\r\n      fragmentSource = fragmentSource || this.fragmentSource;\r\n      vertexSource = vertexSource || this.vertexSource;\r\n      if (fabric.webGlPrecision !== 'highp'){\r\n        fragmentSource = fragmentSource.replace(\r\n          /precision highp float/g,\r\n          'precision ' + fabric.webGlPrecision + ' float'\r\n        );\r\n      }\r\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      gl.shaderSource(vertexShader, vertexSource);\r\n      gl.compileShader(vertexShader);\r\n      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Vertex shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(vertexShader)\r\n        );\r\n      }\r\n\r\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      gl.shaderSource(fragmentShader, fragmentSource);\r\n      gl.compileShader(fragmentShader);\r\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Fragment shader compile error for ' + this.type + ': ' +\r\n          gl.getShaderInfoLog(fragmentShader)\r\n        );\r\n      }\r\n\r\n      var program = gl.createProgram();\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        throw new Error(\r\n          // eslint-disable-next-line prefer-template\r\n          'Shader link error for \"${this.type}\" ' +\r\n          gl.getProgramInfoLog(program)\r\n        );\r\n      }\r\n\r\n      var attributeLocations = this.getAttributeLocations(gl, program);\r\n      var uniformLocations = this.getUniformLocations(gl, program) || { };\r\n      uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\r\n      uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\r\n      return {\r\n        program: program,\r\n        attributeLocations: attributeLocations,\r\n        uniformLocations: uniformLocations\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of attribute names to WebGLAttributeLocation objects.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\r\n     * @returns {Object} A map of attribute names to attribute locations.\r\n     */\r\n    getAttributeLocations: function(gl, program) {\r\n      return {\r\n        aPosition: gl.getAttribLocation(program, 'aPosition'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Return a map of uniform names to WebGLUniformLocation objects.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\r\n     * @returns {Object} A map of uniform names to uniform locations.\r\n     */\r\n    getUniformLocations: function (/* gl, program */) {\r\n      // in case i do not need any special uniform i need to return an empty object\r\n      return { };\r\n    },\r\n\r\n    /**\r\n     * Send attribute data from this filter to its shader program on the GPU.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} attributeLocations A map of shader attribute names to their locations.\r\n     */\r\n    sendAttributeData: function(gl, attributeLocations, aPositionData) {\r\n      var attributeLocation = attributeLocations.aPosition;\r\n      var buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(attributeLocation);\r\n      gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n      gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\r\n    },\r\n\r\n    _setupFrameBuffer: function(options) {\r\n      var gl = options.context, width, height;\r\n      if (options.passes > 1) {\r\n        width = options.destinationWidth;\r\n        height = options.destinationHeight;\r\n        if (options.sourceWidth !== width || options.sourceHeight !== height) {\r\n          gl.deleteTexture(options.targetTexture);\r\n          options.targetTexture = options.filterBackend.createTexture(gl, width, height);\r\n        }\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\r\n          options.targetTexture, 0);\r\n      }\r\n      else {\r\n        // draw last filter on canvas and not to framebuffer.\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.finish();\r\n      }\r\n    },\r\n\r\n    _swapTextures: function(options) {\r\n      options.passes--;\r\n      options.pass++;\r\n      var temp = options.targetTexture;\r\n      options.targetTexture = options.sourceTexture;\r\n      options.sourceTexture = temp;\r\n    },\r\n\r\n    /**\r\n     * Generic isNeutral implementation for one parameter based filters.\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\r\n     * @param {Object} options\r\n     **/\r\n    isNeutralState: function(/* options */) {\r\n      var main = this.mainParameter,\r\n          _class = fabric.Image.filters[this.type].prototype;\r\n      if (main) {\r\n        if (Array.isArray(_class[main])) {\r\n          for (var i = _class[main].length; i--;) {\r\n            if (this[main][i] !== _class[main][i]) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        }\r\n        else {\r\n          return _class[main] === this[main];\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply this filter to the input image data provided.\r\n     *\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyTo: function(options) {\r\n      if (options.webgl) {\r\n        this._setupFrameBuffer(options);\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n      }\r\n      else {\r\n        this.applyTo2d(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      if (!options.programCache.hasOwnProperty(this.type)) {\r\n        options.programCache[this.type] = this.createProgram(options.context);\r\n      }\r\n      return options.programCache[this.type];\r\n    },\r\n\r\n    /**\r\n     * Apply this filter using webgl.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.originalTexture The texture of the original input image.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyToWebGL: function(options) {\r\n      var gl = options.context;\r\n      var shader = this.retrieveShader(options);\r\n      if (options.pass === 0 && options.originalTexture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\r\n      }\r\n      else {\r\n        gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\r\n      }\r\n      gl.useProgram(shader.program);\r\n      this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\r\n\r\n      gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\r\n      gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\r\n\r\n      this.sendUniformData(gl, shader.uniformLocations);\r\n      gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    },\r\n\r\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      // reset active texture to 0 as usual\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    unbindAdditionalTexture: function(gl, textureUnit) {\r\n      gl.activeTexture(textureUnit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n    },\r\n\r\n    getMainParameter: function() {\r\n      return this[this.mainParameter];\r\n    },\r\n\r\n    setMainParameter: function(value) {\r\n      this[this.mainParameter] = value;\r\n    },\r\n\r\n    /**\r\n     * Send uniform data from this filter to its shader program on the GPU.\r\n     *\r\n     * Intended to be overridden by subclasses.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n     * @param {Object} uniformLocations A map of shader uniform names to their locations.\r\n     */\r\n    sendUniformData: function(/* gl, uniformLocations */) {\r\n      // Intentionally left blank.  Override me in subclasses.\r\n    },\r\n\r\n    /**\r\n     * If needed by a 2d filter, this functions can create an helper canvas to be used\r\n     * remember that options.targetCanvas is available for use till end of chain.\r\n     */\r\n    createHelpLayer: function(options) {\r\n      if (!options.helpLayer) {\r\n        var helpLayer = document.createElement('canvas');\r\n        helpLayer.width = options.sourceWidth;\r\n        helpLayer.height = options.sourceHeight;\r\n        options.helpLayer = helpLayer;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      var object = { type: this.type }, mainP = this.mainParameter;\r\n      if (mainP) {\r\n        object[mainP] = this[mainP];\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON representation of an instance\r\n     * @return {Object} JSON\r\n     */\r\n    toJSON: function() {\r\n      // delegate, not alias\r\n      return this.toObject();\r\n    }\r\n  });\r\n\r\n  fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\r\n    var filter = new fabric.Image.filters[object.type](object);\r\n    callback && callback(filter);\r\n    return filter;\r\n  };\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Matrix filter class\r\n     * @class fabric.Image.filters.ColorMatrix\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\r\n     * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\r\n     * @example <caption>Kodachrome filter</caption>\r\n     * var filter = new fabric.Image.filters.ColorMatrix({\r\n     *  matrix: [\r\n         1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n         -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n         -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n         0, 0, 0, 1, 0\r\n        ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'ColorMatrix',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'uniform mat4 uColorMatrix;\\n' +\r\n        'uniform vec4 uConstants;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color *= uColorMatrix;\\n' +\r\n          'color += uConstants;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Colormatrix for pixels.\r\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n       * outside the -1, 1 range.\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Array} matrix array of 20 numbers.\r\n       * @default\r\n       */\r\n      matrix: [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n\r\n      mainParameter: 'matrix',\r\n\r\n      /**\r\n       * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\r\n       * to save some calculation\r\n       */\r\n      colorsOnly: true,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.matrix = this.matrix.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = data.length,\r\n            m = this.matrix,\r\n            r, g, b, a, i, colorsOnly = this.colorsOnly;\r\n\r\n        for (i = 0; i < iLen; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          if (colorsOnly) {\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\r\n          }\r\n          else {\r\n            a = data[i + 3];\r\n            data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\r\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\r\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\r\n            data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\r\n          uConstants: gl.getUniformLocation(program, 'uConstants'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var m = this.matrix,\r\n            matrix = [\r\n              m[0], m[1], m[2], m[3],\r\n              m[5], m[6], m[7], m[8],\r\n              m[10], m[11], m[12], m[13],\r\n              m[15], m[16], m[17], m[18]\r\n            ],\r\n            constants = [m[4], m[9], m[14], m[19]];\r\n        gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\r\n        gl.uniform4fv(uniformLocations.uConstants, constants);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] function to invoke after filter creation\r\n     * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\r\n     */\r\n    fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Brightness filter class\r\n     * @class fabric.Image.filters.Brightness\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Brightness({\r\n     *   brightness: 0.05\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Brightness',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBrightness;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += uBrightness;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Brightness value, from -1 to 1.\r\n       * translated to -255 to 255 for 2d\r\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n       * @param {Number} brightness\r\n       * @default\r\n       */\r\n      brightness: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'brightness',\r\n\r\n      /**\r\n      * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n      *\r\n      * @param {Object} options\r\n      * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n      */\r\n      applyTo2d: function(options) {\r\n        if (this.brightness === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            brightness = Math.round(this.brightness * 255);\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = data[i] + brightness;\r\n          data[i + 1] = data[i + 1] + brightness;\r\n          data[i + 2] = data[i + 2] + brightness;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBrightness: gl.getUniformLocation(program, 'uBrightness'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBrightness, this.brightness);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\r\n     */\r\n    fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\r\n     * @class fabric.Image.filters.Convolute\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example <caption>Sharpen filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 0, -1,  0,\r\n     *            -1,  5, -1,\r\n     *             0, -1,  0 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Blur filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9,\r\n     *             1/9, 1/9, 1/9 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     * @example <caption>Emboss filter with opaqueness</caption>\r\n     * var filter = new fabric.Image.filters.Convolute({\r\n     *   opaque: true,\r\n     *   matrix: [ 1,   1,  1,\r\n     *             1, 0.7, -1,\r\n     *            -1,  -1, -1 ]\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Convolute',\r\n\r\n      /*\r\n       * Opaque value (true/false)\r\n       */\r\n      opaque: false,\r\n\r\n      /*\r\n       * matrix for the filter, max 9x9\r\n       */\r\n      matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: {\r\n        Convolute_3_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_3_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[9];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_5_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_5_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[25];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_7_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_7_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[49];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n        Convolute_9_1: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        Convolute_9_0: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform float uMatrix[81];\\n' +\r\n          'uniform float uStepW;\\n' +\r\n          'uniform float uStepH;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\r\n              '}\\n' +\r\n            '}\\n' +\r\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'gl_FragColor.a = alpha;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Convolute.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Boolean} [options.opaque=false] Opaque value (true/false)\r\n       * @param {Array} [options.matrix] Filter matrix\r\n       */\r\n\r\n\r\n      /**\r\n      * Retrieves the cached shader.\r\n      * @param {Object} options\r\n      * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n      * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n      */\r\n      retrieveShader: function(options) {\r\n        var size = Math.sqrt(this.matrix.length);\r\n        var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\r\n        var shaderSource = this.fragmentSource[cacheKey];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            weights = this.matrix,\r\n            side = Math.round(Math.sqrt(weights.length)),\r\n            halfSide = Math.floor(side / 2),\r\n            sw = imageData.width,\r\n            sh = imageData.height,\r\n            output = options.ctx.createImageData(sw, sh),\r\n            dst = output.data,\r\n            // go through the destination image pixels\r\n            alphaFac = this.opaque ? 1 : 0,\r\n            r, g, b, a, dstOff,\r\n            scx, scy, srcOff, wt,\r\n            x, y, cx, cy;\r\n\r\n        for (y = 0; y < sh; y++) {\r\n          for (x = 0; x < sw; x++) {\r\n            dstOff = (y * sw + x) * 4;\r\n            // calculate the weighed sum of the source image pixels that\r\n            // fall under the convolution matrix\r\n            r = 0; g = 0; b = 0; a = 0;\r\n\r\n            for (cy = 0; cy < side; cy++) {\r\n              for (cx = 0; cx < side; cx++) {\r\n                scy = y + cy - halfSide;\r\n                scx = x + cx - halfSide;\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\r\n                  continue;\r\n                }\r\n\r\n                srcOff = (scy * sw + scx) * 4;\r\n                wt = weights[cy * side + cx];\r\n\r\n                r += data[srcOff] * wt;\r\n                g += data[srcOff + 1] * wt;\r\n                b += data[srcOff + 2] * wt;\r\n                // eslint-disable-next-line max-depth\r\n                if (!alphaFac) {\r\n                  a += data[srcOff + 3] * wt;\r\n                }\r\n              }\r\n            }\r\n            dst[dstOff] = r;\r\n            dst[dstOff + 1] = g;\r\n            dst[dstOff + 2] = b;\r\n            if (!alphaFac) {\r\n              dst[dstOff + 3] = a;\r\n            }\r\n            else {\r\n              dst[dstOff + 3] = data[dstOff + 3];\r\n            }\r\n          }\r\n        }\r\n        options.imageData = output;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMatrix: gl.getUniformLocation(program, 'uMatrix'),\r\n          uOpaque: gl.getUniformLocation(program, 'uOpaque'),\r\n          uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\r\n          uSize: gl.getUniformLocation(program, 'uSize'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          opaque: this.opaque,\r\n          matrix: this.matrix\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\r\n     */\r\n    fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Grayscale image filter class\r\n     * @class fabric.Image.filters.Grayscale\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Grayscale();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Grayscale',\r\n\r\n      fragmentSource: {\r\n        average: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (color.r + color.b + color.g) / 3.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, color.a);\\n' +\r\n          '}',\r\n        lightness: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n        luminosity: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform int uMode;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n            'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\r\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n          '}',\r\n      },\r\n\r\n\r\n      /**\r\n       * Grayscale mode, between 'average', 'lightness', 'luminosity'\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      mode: 'average',\r\n\r\n      mainParameter: 'mode',\r\n\r\n      /**\r\n       * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length, value,\r\n            mode = this.mode;\r\n        for (i = 0; i < len; i += 4) {\r\n          if (mode === 'average') {\r\n            value = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n          }\r\n          else if (mode === 'lightness') {\r\n            value = (Math.min(data[i], data[i + 1], data[i + 2]) +\r\n              Math.max(data[i], data[i + 1], data[i + 2])) / 2;\r\n          }\r\n          else if (mode === 'luminosity') {\r\n            value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\r\n          }\r\n          data[i] = value;\r\n          data[i + 1] = value;\r\n          data[i + 2] = value;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var shaderSource = this.fragmentSource[this.mode];\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uMode: gl.getUniformLocation(program, 'uMode'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        // default average mode.\r\n        var mode = 1;\r\n        gl.uniform1i(uniformLocations.uMode, mode);\r\n      },\r\n\r\n      /**\r\n       * Grayscale filter isNeutralState implementation\r\n       * The filter is never neutral\r\n       * on the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return false;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\r\n     */\r\n    fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Invert filter class\r\n     * @class fabric.Image.filters.Invert\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Invert();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Invert',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform int uInvert;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if (uInvert == 1) {\\n' +\r\n            'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Filter invert. if false, does nothing\r\n       * @param {Boolean} invert\r\n       * @default\r\n       */\r\n      invert: true,\r\n\r\n      mainParameter: 'invert',\r\n\r\n      /**\r\n       * Apply the Invert operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            len = data.length;\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = 255 - data[i];\r\n          data[i + 1] = 255 - data[i + 1];\r\n          data[i + 2] = 255 - data[i + 2];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Invert filter isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function() {\r\n        return !this.invert;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uInvert: gl.getUniformLocation(program, 'uInvert'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1i(uniformLocations.uInvert, this.invert);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\r\n     */\r\n    fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Noise filter class\r\n     * @class fabric.Image.filters.Noise\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Noise({\r\n     *   noise: 700\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Noise',\r\n\r\n      /**\r\n       * Fragment source for the noise program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'uniform float uNoise;\\n' +\r\n        'uniform float uSeed;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'float rand(vec2 co, float seed, float vScale) {\\n' +\r\n          'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'noise',\r\n\r\n      /**\r\n       * Noise value, from\r\n       * @param {Number} noise\r\n       * @default\r\n       */\r\n      noise: 0,\r\n\r\n      /**\r\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.noise === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i, len = data.length,\r\n            noise = this.noise, rand;\r\n\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n\r\n          rand = (0.5 - Math.random()) * noise;\r\n\r\n          data[i] += rand;\r\n          data[i + 1] += rand;\r\n          data[i + 2] += rand;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uNoise: gl.getUniformLocation(program, 'uNoise'),\r\n          uSeed: gl.getUniformLocation(program, 'uSeed'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\r\n        gl.uniform1f(uniformLocations.uSeed, Math.random());\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          noise: this.noise\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\r\n     */\r\n    fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Pixelate filter class\r\n     * @class fabric.Image.filters.Pixelate\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Pixelate({\r\n     *   blocksize: 8\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Pixelate',\r\n\r\n      blocksize: 4,\r\n\r\n      mainParameter: 'blocksize',\r\n\r\n      /**\r\n       * Fragment source for the Pixelate program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uBlocksize;\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'float blockW = uBlocksize * uStepW;\\n' +\r\n          'float blockH = uBlocksize * uStepW;\\n' +\r\n          'int posX = int(vTexCoord.x / blockW);\\n' +\r\n          'int posY = int(vTexCoord.y / blockH);\\n' +\r\n          'float fposX = float(posX);\\n' +\r\n          'float fposY = float(posY);\\n' +\r\n          'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\r\n          'vec4 color = texture2D(uTexture, squareCoords);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data,\r\n            iLen = imageData.height,\r\n            jLen = imageData.width,\r\n            index, i, j, r, g, b, a,\r\n            _i, _j, _iLen, _jLen;\r\n\r\n        for (i = 0; i < iLen; i += this.blocksize) {\r\n          for (j = 0; j < jLen; j += this.blocksize) {\r\n\r\n            index = (i * 4) * jLen + (j * 4);\r\n\r\n            r = data[index];\r\n            g = data[index + 1];\r\n            b = data[index + 2];\r\n            a = data[index + 3];\r\n\r\n            _iLen = Math.min(i + this.blocksize, iLen);\r\n            _jLen = Math.min(j + this.blocksize, jLen);\r\n            for (_i = i; _i < _iLen; _i++) {\r\n              for (_j = j; _j < _jLen; _j++) {\r\n                index = (_i * 4) * jLen + (_j * 4);\r\n                data[index] = r;\r\n                data[index + 1] = g;\r\n                data[index + 2] = b;\r\n                data[index + 3] = a;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Indicate when the filter is not gonna apply changes to the image\r\n       **/\r\n      isNeutralState: function() {\r\n        return this.blocksize === 1;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\r\n          uStepW: gl.getUniformLocation(program, 'uStepW'),\r\n          uStepH: gl.getUniformLocation(program, 'uStepH'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\r\n     */\r\n    fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        extend = fabric.util.object.extend,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Remove white filter class\r\n     * @class fabric.Image.filters.RemoveColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.RemoveColor({\r\n     *   threshold: 0.2,\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'RemoveColor',\r\n\r\n      /**\r\n       * Color to remove, in any format understood by fabric.Color.\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      color: '#FFFFFF',\r\n\r\n      /**\r\n       * Fragment source for the brightness program\r\n       */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec4 uLow;\\n' +\r\n        'uniform vec4 uHigh;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n          'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\r\n            'gl_FragColor.a = 0.0;\\n' +\r\n          '}\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * distance to actual color, as value up or down from each r,g,b\r\n       * between 0 and 1\r\n       **/\r\n      distance: 0.02,\r\n\r\n      /**\r\n       * For color to remove inside distance, use alpha channel for a smoother deletion\r\n       * NOT IMPLEMENTED YET\r\n       **/\r\n      useAlpha: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.RemoveWhite.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.color=#RRGGBB] Threshold value\r\n       * @param {Number} [options.distance=10] Distance value\r\n       */\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, i,\r\n            distance = this.distance * 255,\r\n            r, g, b,\r\n            source = new fabric.Color(this.color).getSource(),\r\n            lowC = [\r\n              source[0] - distance,\r\n              source[1] - distance,\r\n              source[2] - distance,\r\n            ],\r\n            highC = [\r\n              source[0] + distance,\r\n              source[1] + distance,\r\n              source[2] + distance,\r\n            ];\r\n\r\n\r\n        for (i = 0; i < data.length; i += 4) {\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          if (r > lowC[0] &&\r\n              g > lowC[1] &&\r\n              b > lowC[2] &&\r\n              r < highC[0] &&\r\n              g < highC[1] &&\r\n              b < highC[2]) {\r\n            data[i + 3] = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uLow: gl.getUniformLocation(program, 'uLow'),\r\n          uHigh: gl.getUniformLocation(program, 'uHigh'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource(),\r\n            distance = parseFloat(this.distance),\r\n            lowC = [\r\n              0 + source[0] / 255 - distance,\r\n              0 + source[1] / 255 - distance,\r\n              0 + source[2] / 255 - distance,\r\n              1\r\n            ],\r\n            highC = [\r\n              source[0] / 255 + distance,\r\n              source[1] / 255 + distance,\r\n              source[2] / 255 + distance,\r\n              1\r\n            ];\r\n        gl.uniform4fv(uniformLocations.uLow, lowC);\r\n        gl.uniform4fv(uniformLocations.uHigh, highC);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return extend(this.callSuper('toObject'), {\r\n          color: this.color,\r\n          distance: this.distance\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\r\n     */\r\n    fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    var matrices = {\r\n      Brownie: [\r\n        0.59970,0.34553,-0.27082,0,0.186,\r\n        -0.03770,0.86095,0.15059,0,-0.1449,\r\n        0.24113,-0.07441,0.44972,0,-0.02965,\r\n        0,0,0,1,0\r\n      ],\r\n      Vintage: [\r\n        0.62793,0.32021,-0.03965,0,0.03784,\r\n        0.02578,0.64411,0.03259,0,0.02926,\r\n        0.04660,-0.08512,0.52416,0,0.02023,\r\n        0,0,0,1,0\r\n      ],\r\n      Kodachrome: [\r\n        1.12855,-0.39673,-0.03992,0,0.24991,\r\n        -0.16404,1.08352,-0.05498,0,0.09698,\r\n        -0.16786,-0.56034,1.60148,0,0.13972,\r\n        0,0,0,1,0\r\n      ],\r\n      Technicolor: [\r\n        1.91252,-0.85453,-0.09155,0,0.04624,\r\n        -0.30878,1.76589,-0.10601,0,-0.27589,\r\n        -0.23110,-0.75018,1.84759,0,0.12137,\r\n        0,0,0,1,0\r\n      ],\r\n      Polaroid: [\r\n        1.438,-0.062,-0.062,0,0,\r\n        -0.122,1.378,-0.122,0,0,\r\n        -0.016,-0.016,1.483,0,0,\r\n        0,0,0,1,0\r\n      ],\r\n      Sepia: [\r\n        0.393, 0.769, 0.189, 0, 0,\r\n        0.349, 0.686, 0.168, 0, 0,\r\n        0.272, 0.534, 0.131, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ],\r\n      BlackWhite: [\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        1.5, 1.5, 1.5, 0, -1,\r\n        0, 0, 0, 1, 0,\r\n      ]\r\n    };\r\n\r\n    for (var key in matrices) {\r\n      filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\r\n\r\n        /**\r\n         * Filter type\r\n         * @param {String} type\r\n         * @default\r\n         */\r\n        type: key,\r\n\r\n        /**\r\n         * Colormatrix for the effect\r\n         * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n         * outside the -1, 1 range.\r\n         * @param {Array} matrix array of 20 numbers.\r\n         * @default\r\n         */\r\n        matrix: matrices[key],\r\n\r\n        /**\r\n         * Lock the matrix export for this kind of static, parameter less filters.\r\n         */\r\n        mainParameter: false,\r\n        /**\r\n         * Lock the colormatrix on the color part, skipping alpha\r\n         */\r\n        colorsOnly: true,\r\n\r\n      });\r\n      fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n    }\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Color Blend filter class\r\n     * @class fabric.Image.filter.BlendColor\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\r\n      type: 'BlendColor',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      color: '#F95C63',\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend color operation.\r\n       **/\r\n      alpha: 1,\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\r\n        screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\r\n        add: 'gl_FragColor.rgb += uColor.rgb;\\n',\r\n        diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\r\n        subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\r\n        lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\r\n        exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\r\n        overlay: 'if (uColor.r < 0.5) {\\n' +\r\n            'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.g < 0.5) {\\n' +\r\n            'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\r\n          '}\\n' +\r\n          'if (uColor.b < 0.5) {\\n' +\r\n            'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\r\n          '} else {\\n' +\r\n            'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\r\n          '}\\n',\r\n        tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\r\n          'gl_FragColor.rgb += uColor.rgb;\\n',\r\n      },\r\n\r\n      /**\r\n       * build the fragment source for the filters, joining the common part with\r\n       * the specific one.\r\n       * @param {String} mode the mode of the filter, a key of this.fragmentSource\r\n       * @return {String} the source to be compiled\r\n       * @private\r\n       */\r\n      buildSource: function(mode) {\r\n        return 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n            'if (color.a > 0.0) {\\n' +\r\n              this.fragmentSource[mode] +\r\n            '}\\n' +\r\n          '}';\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode, shaderSource;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          shaderSource = this.buildSource(this.mode);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            data = imageData.data, iLen = data.length,\r\n            tr, tg, tb,\r\n            r, g, b,\r\n            source, alpha1 = 1 - this.alpha;\r\n\r\n        source = new fabric.Color(this.color).getSource();\r\n        tr = source[0] * this.alpha;\r\n        tg = source[1] * this.alpha;\r\n        tb = source[2] * this.alpha;\r\n\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              break;\r\n            case 'screen':\r\n              data[i] = 255 - (255 - r) * (255 - tr) / 255;\r\n              data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\r\n              data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\r\n              break;\r\n            case 'add':\r\n              data[i] = r + tr;\r\n              data[i + 1] = g + tg;\r\n              data[i + 2] = b + tb;\r\n              break;\r\n            case 'diff':\r\n            case 'difference':\r\n              data[i] = Math.abs(r - tr);\r\n              data[i + 1] = Math.abs(g - tg);\r\n              data[i + 2] = Math.abs(b - tb);\r\n              break;\r\n            case 'subtract':\r\n              data[i] = r - tr;\r\n              data[i + 1] = g - tg;\r\n              data[i + 2] = b - tb;\r\n              break;\r\n            case 'darken':\r\n              data[i] = Math.min(r, tr);\r\n              data[i + 1] = Math.min(g, tg);\r\n              data[i + 2] = Math.min(b, tb);\r\n              break;\r\n            case 'lighten':\r\n              data[i] = Math.max(r, tr);\r\n              data[i + 1] = Math.max(g, tg);\r\n              data[i + 2] = Math.max(b, tb);\r\n              break;\r\n            case 'overlay':\r\n              data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\r\n              data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\r\n              data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\r\n              break;\r\n            case 'exclusion':\r\n              data[i] = tr + r - ((2 * tr * r) / 255);\r\n              data[i + 1] = tg + g - ((2 * tg * g) / 255);\r\n              data[i + 2] = tb + b - ((2 * tb * b) / 255);\r\n              break;\r\n            case 'tint':\r\n              data[i] = tr + r * alpha1;\r\n              data[i + 1] = tg + g * alpha1;\r\n              data[i + 2] = tb + b * alpha1;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uColor: gl.getUniformLocation(program, 'uColor'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var source = new fabric.Color(this.color).getSource();\r\n        source[0] = this.alpha * source[0] / 255;\r\n        source[1] = this.alpha * source[1] / 255;\r\n        source[2] = this.alpha * source[2] / 255;\r\n        source[3] = this.alpha;\r\n        gl.uniform4fv(uniformLocations.uColor, source);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          color: this.color,\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\r\n     */\r\n    fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Image Blend filter class\r\n     * @class fabric.Image.filter.BlendImage\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @example\r\n     * var filter = new fabric.Image.filters.BlendColor({\r\n     *  color: '#000',\r\n     *  mode: 'multiply'\r\n     * });\r\n     *\r\n     * var filter = new fabric.Image.filters.BlendImage({\r\n     *  image: fabricImageObject,\r\n     *  mode: 'multiply',\r\n     *  alpha: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n\r\n    filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\r\n      type: 'BlendImage',\r\n\r\n      /**\r\n       * Color to make the blend operation with. default to a reddish color since black or white\r\n       * gives always strong result.\r\n       **/\r\n      image: null,\r\n\r\n      /**\r\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n       * darken, lighten, overlay, exclusion, tint.\r\n       **/\r\n      mode: 'multiply',\r\n\r\n      /**\r\n       * alpha value. represent the strength of the blend image operation.\r\n       * not implemented.\r\n       **/\r\n      alpha: 1,\r\n\r\n      vertexSource: 'attribute vec2 aPosition;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'varying vec2 vTexCoord2;\\n' +\r\n        'uniform mat3 uTransformMatrix;\\n' +\r\n        'void main() {\\n' +\r\n          'vTexCoord = aPosition;\\n' +\r\n          'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\r\n          'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Fragment source for the Multiply program\r\n       */\r\n      fragmentSource: {\r\n        multiply: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.rgba *= color2.rgba;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n        mask: 'precision highp float;\\n' +\r\n          'uniform sampler2D uTexture;\\n' +\r\n          'uniform sampler2D uImage;\\n' +\r\n          'uniform vec4 uColor;\\n' +\r\n          'varying vec2 vTexCoord;\\n' +\r\n          'varying vec2 vTexCoord2;\\n' +\r\n          'void main() {\\n' +\r\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n            'color.a = color2.a;\\n' +\r\n            'gl_FragColor = color;\\n' +\r\n          '}',\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var cacheKey = this.type + '_' + this.mode;\r\n        var shaderSource = this.fragmentSource[this.mode];\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      applyToWebGL: function(options) {\r\n        // load texture to blend.\r\n        var gl = options.context,\r\n            texture = this.createTexture(options.filterBackend, this.image);\r\n        this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\r\n        this.callSuper('applyToWebGL', options);\r\n        this.unbindAdditionalTexture(gl, gl.TEXTURE1);\r\n      },\r\n\r\n      createTexture: function(backend, image) {\r\n        return backend.getCachedTexture(image.cacheKey, image._element);\r\n      },\r\n\r\n      /**\r\n       * Calculate a transformMatrix to adapt the image to blend over\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      calculateMatrix: function() {\r\n        var image = this.image,\r\n            width = image._element.width,\r\n            height = image._element.height;\r\n        return [\r\n          1 / image.scaleX, 0, 0,\r\n          0, 1 / image.scaleY, 0,\r\n          -image.left / width, -image.top / height, 1\r\n        ];\r\n      },\r\n\r\n      /**\r\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            resources = options.filterBackend.resources,\r\n            data = imageData.data, iLen = data.length,\r\n            width = imageData.width,\r\n            height = imageData.height,\r\n            tr, tg, tb, ta,\r\n            r, g, b, a,\r\n            canvas1, context, image = this.image, blendData;\r\n\r\n        if (!resources.blendImage) {\r\n          resources.blendImage = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blendImage;\r\n        context = canvas1.getContext('2d');\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas1.width = width;\r\n          canvas1.height = height;\r\n        }\r\n        else {\r\n          context.clearRect(0, 0, width, height);\r\n        }\r\n        context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\r\n        context.drawImage(image._element, 0, 0, width, height);\r\n        blendData = context.getImageData(0, 0, width, height).data;\r\n        for (var i = 0; i < iLen; i += 4) {\r\n\r\n          r = data[i];\r\n          g = data[i + 1];\r\n          b = data[i + 2];\r\n          a = data[i + 3];\r\n\r\n          tr = blendData[i];\r\n          tg = blendData[i + 1];\r\n          tb = blendData[i + 2];\r\n          ta = blendData[i + 3];\r\n\r\n          switch (this.mode) {\r\n            case 'multiply':\r\n              data[i] = r * tr / 255;\r\n              data[i + 1] = g * tg / 255;\r\n              data[i + 2] = b * tb / 255;\r\n              data[i + 3] = a * ta / 255;\r\n              break;\r\n            case 'mask':\r\n              data[i + 3] = ta;\r\n              break;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\r\n          uImage: gl.getUniformLocation(program, 'uImage'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var matrix = this.calculateMatrix();\r\n        gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\r\n        gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          image: this.image && this.image.toObject(),\r\n          mode: this.mode,\r\n          alpha: this.alpha\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} callback to be invoked after filter creation\r\n     * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\r\n     */\r\n    fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\r\n      fabric.Image.fromObject(object.image, function(image) {\r\n        var options = fabric.util.object.clone(object);\r\n        options.image = image;\r\n        callback(new fabric.Image.filters.BlendImage(options));\r\n      });\r\n    };\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }), \r\n        pow = Math.pow, floor = Math.floor,\r\n        sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\r\n        ceil = Math.ceil,\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Resize image filter class\r\n     * @class fabric.Image.filters.Resize\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Resize();\r\n     * object.filters.push(filter);\r\n     * object.applyFilters(canvas.renderAll.bind(canvas));\r\n     */\r\n    filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Resize',\r\n\r\n      /**\r\n       * Resize type\r\n       * for webgl resizyType is just lanczos, for canvas2d can be:\r\n       * bilinear, hermite, sliceHacl, lanczos.\r\n       * @param {String} resizeType\r\n       * @default\r\n       */\r\n      resizeType: 'hermite',\r\n\r\n      /**\r\n       * Scale factor for resizing, x axis\r\n       * @param {Number} scaleX\r\n       * @default\r\n       */\r\n      scaleX: 1,\r\n\r\n      /**\r\n       * Scale factor for resizing, y axis\r\n       * @param {Number} scaleY\r\n       * @default\r\n       */\r\n      scaleY: 1,\r\n\r\n      /**\r\n       * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\r\n       * @param {Number} lanczosLobes\r\n       * @default\r\n       */\r\n      lanczosLobes: 3,\r\n\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uDelta: gl.getUniformLocation(program, 'uDelta'),\r\n          uTaps: gl.getUniformLocation(program, 'uTaps'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\r\n        gl.uniform1fv(uniformLocations.uTaps, this.taps);\r\n      },\r\n\r\n      /**\r\n       * Retrieves the cached shader.\r\n       * @param {Object} options\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      retrieveShader: function(options) {\r\n        var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\r\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n          var fragmentShader = this.generateShader(filterWindow);\r\n          options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\r\n        }\r\n        return options.programCache[cacheKey];\r\n      },\r\n\r\n      getFilterWindow: function() {\r\n        var scale = this.tempScale;\r\n        return Math.ceil(this.lanczosLobes / scale);\r\n      },\r\n\r\n      getTaps: function() {\r\n        var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\r\n            filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          taps[i - 1] = lobeFunction(i * scale);\r\n        }\r\n        return taps;\r\n      },\r\n\r\n      /**\r\n       * Generate vertex and shader sources from the necessary steps numbers\r\n       * @param {Number} filterWindow\r\n       */\r\n      generateShader: function(filterWindow) {\r\n        var offsets = new Array(filterWindow),\r\n            fragmentShader = this.fragmentSourceTOP, filterWindow;\r\n\r\n        for (var i = 1; i <= filterWindow; i++) {\r\n          offsets[i - 1] = i + '.0 * uDelta';\r\n        }\r\n\r\n        fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\r\n        fragmentShader += 'void main() {\\n';\r\n        fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\r\n        fragmentShader += '  float sum = 1.0;\\n';\r\n\r\n        offsets.forEach(function(offset, i) {\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\r\n          fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\r\n        });\r\n        fragmentShader += '  gl_FragColor = color / sum;\\n';\r\n        fragmentShader += '}';\r\n        return fragmentShader;\r\n      },\r\n\r\n      fragmentSourceTOP: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n',\r\n\r\n      /**\r\n       * Apply the resize filter to the image\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          options.passes++;\r\n          this.width = options.sourceWidth;\r\n          this.horizontal = true;\r\n          this.dW = Math.round(this.width * this.scaleX);\r\n          this.dH = options.sourceHeight;\r\n          this.tempScale = this.dW / this.width;\r\n          this.taps = this.getTaps();\r\n          options.destinationWidth = this.dW;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceWidth = options.destinationWidth;\r\n\r\n          this.height = options.sourceHeight;\r\n          this.horizontal = false;\r\n          this.dH = Math.round(this.height * this.scaleY);\r\n          this.tempScale = this.dH / this.height;\r\n          this.taps = this.getTaps();\r\n          options.destinationHeight = this.dH;\r\n          this._setupFrameBuffer(options);\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          options.sourceHeight = options.destinationHeight;\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return this.scaleX === 1 && this.scaleY === 1;\r\n      },\r\n\r\n      lanczosCreate: function(lobes) {\r\n        return function(x) {\r\n          if (x >= lobes || x <= -lobes) {\r\n            return 0.0;\r\n          }\r\n          if (x < 1.19209290E-07 && x > -1.19209290E-07) {\r\n            return 1.0;\r\n          }\r\n          x *= Math.PI;\r\n          var xx = x / lobes;\r\n          return (sin(x) / x) * sin(xx) / xx;\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Applies filter to canvas element\r\n       * @memberOf fabric.Image.filters.Resize.prototype\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} scaleX\r\n       * @param {Number} scaleY\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData,\r\n            scaleX = this.scaleX,\r\n            scaleY = this.scaleY;\r\n\r\n        this.rcpScaleX = 1 / scaleX;\r\n        this.rcpScaleY = 1 / scaleY;\r\n\r\n        var oW = imageData.width, oH = imageData.height,\r\n            dW = round(oW * scaleX), dH = round(oH * scaleY),\r\n            newData;\r\n\r\n        if (this.resizeType === 'sliceHack') {\r\n          newData = this.sliceByTwo(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'hermite') {\r\n          newData = this.hermiteFastResize(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'bilinear') {\r\n          newData = this.bilinearFiltering(options, oW, oH, dW, dH);\r\n        }\r\n        else if (this.resizeType === 'lanczos') {\r\n          newData = this.lanczosResize(options, oW, oH, dW, dH);\r\n        }\r\n        options.imageData = newData;\r\n      },\r\n\r\n      /**\r\n       * Filter sliceByTwo\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      sliceByTwo: function(options, oW, oH, dW, dH) {\r\n        var imageData = options.imageData,\r\n            mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\r\n            stepH = oH * mult, resources = fabric.filterBackend.resources,\r\n            tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\r\n        if (!resources.sliceByTwo) {\r\n          resources.sliceByTwo = document.createElement('canvas');\r\n        }\r\n        tmpCanvas = resources.sliceByTwo;\r\n        if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\r\n          tmpCanvas.width = oW * 1.5;\r\n          tmpCanvas.height = oH;\r\n        }\r\n        ctx = tmpCanvas.getContext('2d');\r\n        ctx.clearRect(0, 0, oW * 1.5, oH);\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        dW = floor(dW);\r\n        dH = floor(dH);\r\n\r\n        while (!doneW || !doneH) {\r\n          oW = stepW;\r\n          oH = stepH;\r\n          if (dW < floor(stepW * mult)) {\r\n            stepW = floor(stepW * mult);\r\n          }\r\n          else {\r\n            stepW = dW;\r\n            doneW = true;\r\n          }\r\n          if (dH < floor(stepH * mult)) {\r\n            stepH = floor(stepH * mult);\r\n          }\r\n          else {\r\n            stepH = dH;\r\n            doneH = true;\r\n          }\r\n          ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\r\n          sX = dX;\r\n          sY = dY;\r\n          dY += stepH;\r\n        }\r\n        return ctx.getImageData(sX, sY, dW, dH);\r\n      },\r\n\r\n      /**\r\n       * Filter lanczosResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      lanczosResize: function(options, oW, oH, dW, dH) {\r\n\r\n        function process(u) {\r\n          var v, i, weight, idx, a, red, green,\r\n              blue, alpha, fX, fY;\r\n          center.x = (u + 0.5) * ratioX;\r\n          icenter.x = floor(center.x);\r\n          for (v = 0; v < dH; v++) {\r\n            center.y = (v + 0.5) * ratioY;\r\n            icenter.y = floor(center.y);\r\n            a = 0; red = 0; green = 0; blue = 0; alpha = 0;\r\n            for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\r\n              if (i < 0 || i >= oW) {\r\n                continue;\r\n              }\r\n              fX = floor(1000 * abs(i - center.x));\r\n              if (!cacheLanc[fX]) {\r\n                cacheLanc[fX] = { };\r\n              }\r\n              for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\r\n                if (j < 0 || j >= oH) {\r\n                  continue;\r\n                }\r\n                fY = floor(1000 * abs(j - center.y));\r\n                if (!cacheLanc[fX][fY]) {\r\n                  cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\r\n                }\r\n                weight = cacheLanc[fX][fY];\r\n                if (weight > 0) {\r\n                  idx = (j * oW + i) * 4;\r\n                  a += weight;\r\n                  red += weight * srcData[idx];\r\n                  green += weight * srcData[idx + 1];\r\n                  blue += weight * srcData[idx + 2];\r\n                  alpha += weight * srcData[idx + 3];\r\n                }\r\n              }\r\n            }\r\n            idx = (v * dW + u) * 4;\r\n            destData[idx] = red / a;\r\n            destData[idx + 1] = green / a;\r\n            destData[idx + 2] = blue / a;\r\n            destData[idx + 3] = alpha / a;\r\n          }\r\n\r\n          if (++u < dW) {\r\n            return process(u);\r\n          }\r\n          else {\r\n            return destImg;\r\n          }\r\n        }\r\n\r\n        var srcData = options.imageData.data,\r\n            destImg = options.ctx.createImageData(dW, dH),\r\n            destData = destImg.data,\r\n            lanczos = this.lanczosCreate(this.lanczosLobes),\r\n            ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\r\n            rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\r\n            range2X = ceil(ratioX * this.lanczosLobes / 2),\r\n            range2Y = ceil(ratioY * this.lanczosLobes / 2),\r\n            cacheLanc = { }, center = { }, icenter = { };\r\n\r\n        return process(0);\r\n      },\r\n\r\n      /**\r\n       * bilinearFiltering\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      bilinearFiltering: function(options, oW, oH, dW, dH) {\r\n        var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\r\n            color, offset = 0, origPix, ratioX = this.rcpScaleX,\r\n            ratioY = this.rcpScaleY,\r\n            w4 = 4 * (oW - 1), img = options.imageData,\r\n            pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\r\n            destPixels = destImage.data;\r\n        for (i = 0; i < dH; i++) {\r\n          for (j = 0; j < dW; j++) {\r\n            x = floor(ratioX * j);\r\n            y = floor(ratioY * i);\r\n            xDiff = ratioX * j - x;\r\n            yDiff = ratioY * i - y;\r\n            origPix = 4 * (y * oW + x);\r\n\r\n            for (chnl = 0; chnl < 4; chnl++) {\r\n              a = pixels[origPix + chnl];\r\n              b = pixels[origPix + 4 + chnl];\r\n              c = pixels[origPix + w4 + chnl];\r\n              d = pixels[origPix + w4 + 4 + chnl];\r\n              color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\r\n                      c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\r\n              destPixels[offset++] = color;\r\n            }\r\n          }\r\n        }\r\n        return destImage;\r\n      },\r\n\r\n      /**\r\n       * hermiteFastResize\r\n       * @param {Object} canvasEl Canvas element to apply filter to\r\n       * @param {Number} oW Original Width\r\n       * @param {Number} oH Original Height\r\n       * @param {Number} dW Destination Width\r\n       * @param {Number} dH Destination Height\r\n       * @returns {ImageData}\r\n       */\r\n      hermiteFastResize: function(options, oW, oH, dW, dH) {\r\n        var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\r\n            ratioWHalf = ceil(ratioW / 2),\r\n            ratioHHalf = ceil(ratioH / 2),\r\n            img = options.imageData, data = img.data,\r\n            img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\r\n        for (var j = 0; j < dH; j++) {\r\n          for (var i = 0; i < dW; i++) {\r\n            var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\r\n                gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\r\n            for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\r\n              var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\r\n                  centerX = (i + 0.5) * ratioW, w0 = dy * dy;\r\n              for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\r\n                var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\r\n                    w = sqrt(w0 + dx * dx);\r\n                /* eslint-disable max-depth */\r\n                if (w > 1 && w < -1) {\r\n                  continue;\r\n                }\r\n                //hermite filter\r\n                weight = 2 * w * w * w - 3 * w * w + 1;\r\n                if (weight > 0) {\r\n                  dx = 4 * (xx + yy * oW);\r\n                  //alpha\r\n                  gxA += weight * data[dx + 3];\r\n                  weightsAlpha += weight;\r\n                  //colors\r\n                  if (data[dx + 3] < 255) {\r\n                    weight = weight * data[dx + 3] / 250;\r\n                  }\r\n                  gxR += weight * data[dx];\r\n                  gxG += weight * data[dx + 1];\r\n                  gxB += weight * data[dx + 2];\r\n                  weights += weight;\r\n                }\r\n                /* eslint-enable max-depth */\r\n              }\r\n            }\r\n            data2[x2] = gxR / weights;\r\n            data2[x2 + 1] = gxG / weights;\r\n            data2[x2 + 2] = gxB / weights;\r\n            data2[x2 + 3] = gxA / weightsAlpha;\r\n          }\r\n        }\r\n        return img2;\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function() {\r\n        return {\r\n          type: this.type,\r\n          scaleX: this.scaleX,\r\n          scaleY: this.scaleY,\r\n          resizeType: this.resizeType,\r\n          lanczosLobes: this.lanczosLobes\r\n        };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\r\n     */\r\n    fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Contrast filter class\r\n     * @class fabric.Image.filters.Contrast\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Contrast({\r\n     *   contrast: 40\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Contrast',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uContrast;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\r\n          'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      contrast: 0,\r\n\r\n      mainParameter: 'contrast',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Contrast.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\r\n       */\r\n\r\n      /**\r\n        * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\r\n        *\r\n        * @param {Object} options\r\n        * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n        */\r\n      applyTo2d: function(options) {\r\n        if (this.contrast === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData, i, len,\r\n            data = imageData.data, len = data.length,\r\n            contrast = Math.floor(this.contrast * 255),\r\n            contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          data[i] = contrastF * (data[i] - 128) + 128;\r\n          data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\r\n          data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uContrast: gl.getUniformLocation(program, 'uContrast'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uContrast, this.contrast);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\r\n     */\r\n    fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Saturate filter class\r\n     * @class fabric.Image.filters.Saturation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Saturation({\r\n     *   saturation: 100\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Saturation',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uSaturation;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float rgMax = max(color.r, color.g);\\n' +\r\n          'float rgbMax = max(rgMax, color.b);\\n' +\r\n          'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\r\n          'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\r\n          'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n\r\n      saturation: 0,\r\n\r\n      mainParameter: 'saturation',\r\n\r\n      /**\r\n       * Constructor\r\n       * @memberOf fabric.Image.filters.Saturate.prototype\r\n       * @param {Object} [options] Options object\r\n       * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\r\n       */\r\n\r\n      /**\r\n       * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        if (this.saturation === 0) {\r\n          return;\r\n        }\r\n        var imageData = options.imageData,\r\n            data = imageData.data, len = data.length,\r\n            adjust = -this.saturation, i, max;\r\n\r\n        for (i = 0; i < len; i += 4) {\r\n          max = Math.max(data[i], data[i + 1], data[i + 2]);\r\n          data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\r\n          data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\r\n          data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uSaturation: gl.getUniformLocation(program, 'uSaturation'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\r\n     */\r\n    fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Blur filter class\r\n     * @class fabric.Image.filters.Blur\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Blur({\r\n     *   blur: 0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     * canvas.renderAll();\r\n     */\r\n    filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\r\n\r\n      type: 'Blur',\r\n\r\n      /*\r\n  'gl_FragColor = vec4(0.0);',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\r\n  'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\r\n  */\r\n\r\n      /* eslint-disable max-len */\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec2 uDelta;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'const float nSamples = 15.0;\\n' +\r\n        'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\r\n        'float random(vec3 scale) {\\n' +\r\n          /* use the fragment position for a different seed per-pixel */\r\n          'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\r\n        '}\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0.0);\\n' +\r\n          'float total = 0.0;\\n' +\r\n          'float offset = random(v3offset);\\n' +\r\n          'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\r\n            'float percent = (t + offset - 0.5) / nSamples;\\n' +\r\n            'float weight = 1.0 - abs(percent);\\n' +\r\n            'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\r\n            'total += weight;\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color / total;\\n' +\r\n        '}',\r\n      /* eslint-enable max-len */\r\n\r\n      /**\r\n       * blur value, in percentage of image dimensions.\r\n       * specific to keep the image blur constant at different resolutions\r\n       * range bewteen 0 and 1.\r\n       */\r\n      blur: 0,\r\n\r\n      mainParameter: 'blur',\r\n\r\n      applyTo: function(options) {\r\n        if (options.webgl) {\r\n          // this aspectRatio is used to give the same blur to vertical and horizontal\r\n          this.aspectRatio = options.sourceWidth / options.sourceHeight;\r\n          options.passes++;\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = true;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n          this._setupFrameBuffer(options);\r\n          this.horizontal = false;\r\n          this.applyToWebGL(options);\r\n          this._swapTextures(options);\r\n        }\r\n        else {\r\n          this.applyTo2d(options);\r\n        }\r\n      },\r\n\r\n      applyTo2d: function(options) {\r\n        // paint canvasEl with current image data.\r\n        //options.ctx.putImageData(options.imageData, 0, 0);\r\n        options.imageData = this.simpleBlur(options);\r\n      },\r\n\r\n      simpleBlur: function(options) {\r\n        var resources = options.filterBackend.resources, canvas1, canvas2,\r\n            width = options.imageData.width,\r\n            height = options.imageData.height;\r\n\r\n        if (!resources.blurLayer1) {\r\n          resources.blurLayer1 = fabric.util.createCanvasElement();\r\n          resources.blurLayer2 = fabric.util.createCanvasElement();\r\n        }\r\n        canvas1 = resources.blurLayer1;\r\n        canvas2 = resources.blurLayer2;\r\n        if (canvas1.width !== width || canvas1.height !== height) {\r\n          canvas2.width = canvas1.width = width;\r\n          canvas2.height = canvas1.height = height;\r\n        }\r\n        var ctx1 = canvas1.getContext('2d'),\r\n            ctx2 = canvas2.getContext('2d'),\r\n            nSamples = 15,\r\n            random, percent, j, i,\r\n            blur = this.blur * 0.06 * 0.5;\r\n\r\n        // load first canvas\r\n        ctx1.putImageData(options.imageData, 0, 0);\r\n        ctx2.clearRect(0, 0, width, height);\r\n\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * width + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, j, random);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        for (i = -nSamples; i <= nSamples; i++) {\r\n          random = (Math.random() - 0.5) / 4;\r\n          percent = i / nSamples;\r\n          j = blur * percent * height + random;\r\n          ctx2.globalAlpha = 1 - Math.abs(percent);\r\n          ctx2.drawImage(canvas1, random, j);\r\n          ctx1.drawImage(canvas2, 0, 0);\r\n          ctx2.globalAlpha = 1;\r\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n        }\r\n        options.ctx.drawImage(canvas1, 0, 0);\r\n        var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\r\n        ctx1.globalAlpha = 1;\r\n        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n        return newImageData;\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          delta: gl.getUniformLocation(program, 'uDelta'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        var delta = this.chooseRightDelta();\r\n        gl.uniform2fv(uniformLocations.delta, delta);\r\n      },\r\n\r\n      /**\r\n       * choose right value of image percentage to blur with\r\n       * @returns {Array} a numeric array with delta values\r\n       */\r\n      chooseRightDelta: function() {\r\n        var blurScale = 1, delta = [0, 0], blur;\r\n        if (this.horizontal) {\r\n          if (this.aspectRatio > 1) {\r\n            // image is wide, i want to shrink radius horizontal\r\n            blurScale = 1 / this.aspectRatio;\r\n          }\r\n        }\r\n        else {\r\n          if (this.aspectRatio < 1) {\r\n            // image is tall, i want to shrink radius vertical\r\n            blurScale = this.aspectRatio;\r\n          }\r\n        }\r\n        blur = blurScale * this.blur * 0.12;\r\n        if (this.horizontal) {\r\n          delta[0] = blur;\r\n        }\r\n        else {\r\n          delta[1] = blur;\r\n        }\r\n        return delta;\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a BlurFilter into a concrete instance.\r\n     */\r\n    filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * Gamma filter class\r\n     * @class fabric.Image.filters.Gamma\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.Gamma({\r\n     *   brightness: 200\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'Gamma',\r\n\r\n      fragmentSource: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec3 uGamma;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'vec3 correction = (1.0 / uGamma);\\n' +\r\n          'color.r = pow(color.r, correction.r);\\n' +\r\n          'color.g = pow(color.g, correction.g);\\n' +\r\n          'color.b = pow(color.b, correction.b);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.rgb *= color.a;\\n' +\r\n        '}',\r\n\r\n      /**\r\n       * Gamma array value, from 0.01 to 2.2.\r\n       * @param {Array} gamma\r\n       * @default\r\n       */\r\n      gamma: [1, 1, 1],\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'gamma',\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.gamma = [1, 1, 1];\r\n        filters.BaseFilter.prototype.initialize.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\r\n       *\r\n       * @param {Object} options\r\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n       */\r\n      applyTo2d: function(options) {\r\n        var imageData = options.imageData, data = imageData.data,\r\n            gamma = this.gamma, len = data.length,\r\n            rInv = 1 / gamma[0], gInv = 1 / gamma[1],\r\n            bInv = 1 / gamma[2], i;\r\n\r\n        if (!this.rVals) {\r\n          // eslint-disable-next-line\r\n          this.rVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.gVals = new Uint8Array(256);\r\n          // eslint-disable-next-line\r\n          this.bVals = new Uint8Array(256);\r\n        }\r\n\r\n        // This is an optimization - pre-compute a look-up table for each color channel\r\n        // instead of performing these pow calls for each pixel in the image.\r\n        for (i = 0, len = 256; i < len; i++) {\r\n          this.rVals[i] = Math.pow(i / 255, rInv) * 255;\r\n          this.gVals[i] = Math.pow(i / 255, gInv) * 255;\r\n          this.bVals[i] = Math.pow(i / 255, bInv) * 255;\r\n        }\r\n        for (i = 0, len = data.length; i < len; i += 4) {\r\n          data[i] = this.rVals[data[i]];\r\n          data[i + 1] = this.gVals[data[i + 1]];\r\n          data[i + 2] = this.bVals[data[i + 2]];\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Return WebGL uniform locations for this filter's shader.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n       */\r\n      getUniformLocations: function(gl, program) {\r\n        return {\r\n          uGamma: gl.getUniformLocation(program, 'uGamma'),\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Send data from this filter to its shader program's uniforms.\r\n       *\r\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n       */\r\n      sendUniformData: function(gl, uniformLocations) {\r\n        gl.uniform3fv(uniformLocations.uGamma, this.gamma);\r\n      },\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\r\n     */\r\n    fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * A container class that knows how to apply a sequence of filters to an input image.\r\n     */\r\n    filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\r\n\r\n      type: 'Composed',\r\n\r\n      /**\r\n       * A non sparse array of filters to apply\r\n       */\r\n      subFilters: [],\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {Object} [options] Options object\r\n       */\r\n      initialize: function(options) {\r\n        this.callSuper('initialize', options);\r\n        // create a new array instead mutating the prototype with push\r\n        this.subFilters = this.subFilters.slice(0);\r\n      },\r\n\r\n      /**\r\n       * Apply this container's filters to the input image provided.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be applied.\r\n       */\r\n      applyTo: function(options) {\r\n        options.passes += this.subFilters.length - 1;\r\n        this.subFilters.forEach(function(filter) {\r\n          filter.applyTo(options);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Serialize this filter into JSON.\r\n       *\r\n       * @returns {Object} A JSON representation of this filter.\r\n       */\r\n      toObject: function() {\r\n        return fabric.util.object.extend(this.callSuper('toObject'), {\r\n          subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\r\n        });\r\n      },\r\n\r\n      isNeutralState: function() {\r\n        return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\r\n     */\r\n    fabric.Image.filters.Composed.fromObject = function(object, callback) {\r\n      var filters = object.subFilters || [],\r\n          subFilters = filters.map(function(filter) {\r\n            return new fabric.Image.filters[filter.type](filter);\r\n          }),\r\n          instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\r\n      callback && callback(instance);\r\n      return instance;\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric  = global.fabric || (global.fabric = { }),\r\n        filters = fabric.Image.filters,\r\n        createClass = fabric.util.createClass;\r\n\r\n    /**\r\n     * HueRotation filter class\r\n     * @class fabric.Image.filters.HueRotation\r\n     * @memberOf fabric.Image.filters\r\n     * @extends fabric.Image.filters.BaseFilter\r\n     * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\r\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n     * @example\r\n     * var filter = new fabric.Image.filters.HueRotation({\r\n     *   rotation: -0.5\r\n     * });\r\n     * object.filters.push(filter);\r\n     * object.applyFilters();\r\n     */\r\n    filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: 'HueRotation',\r\n\r\n      /**\r\n       * HueRotation value, from -1 to 1.\r\n       * the unit is radians\r\n       * @param {Number} myParameter\r\n       * @default\r\n       */\r\n      rotation: 0,\r\n\r\n      /**\r\n       * Describe the property that is the filter parameter\r\n       * @param {String} m\r\n       * @default\r\n       */\r\n      mainParameter: 'rotation',\r\n\r\n      calculateMatrix: function() {\r\n        var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\r\n            aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\r\n        this.matrix = [\r\n          1, 0, 0, 0, 0,\r\n          0, 1, 0, 0, 0,\r\n          0, 0, 1, 0, 0,\r\n          0, 0, 0, 1, 0\r\n        ];\r\n        this.matrix[0] = cos + OneMinusCos / 3;\r\n        this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[6] = cos + aThird * OneMinusCos;\r\n        this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\r\n        this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\r\n        this.matrix[12] = cos + aThird * OneMinusCos;\r\n      },\r\n\r\n      /**\r\n       * HueRotation isNeutralState implementation\r\n       * Used only in image applyFilters to discard filters that will not have an effect\r\n       * on the image\r\n       * @param {Object} options\r\n       **/\r\n      isNeutralState: function(options) {\r\n        this.calculateMatrix();\r\n        return filters.BaseFilter.prototype.isNeutralState.call(this, options);\r\n      },\r\n\r\n      /**\r\n       * Apply this filter to the input image data provided.\r\n       *\r\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n       *\r\n       * @param {Object} options\r\n       * @param {Number} options.passes The number of filters remaining to be executed\r\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n       */\r\n      applyTo: function(options) {\r\n        this.calculateMatrix();\r\n        filters.BaseFilter.prototype.applyTo.call(this, options);\r\n      },\r\n\r\n    });\r\n\r\n    /**\r\n     * Returns filter instance from an object representation\r\n     * @static\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] to be invoked after filter creation\r\n     * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\r\n     */\r\n    fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    var //fabric = global.fabric || (global.fabric = { }),\r\n        clone = fabric.util.object.clone;\r\n\r\n    if (fabric.Text) {\r\n      fabric.warn('fabric.Text is already defined');\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Text class\r\n     * @class fabric.Text\r\n     * @extends fabric.Object\r\n     * @return {fabric.Text} thisArg\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\r\n     * @see {@link fabric.Text#initialize} for constructor definition\r\n     */\r\n    fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Array\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: [\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontFamily',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'text',\r\n        'charSpacing',\r\n        'textAlign',\r\n        'styles',\r\n      ],\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reNewline: /\\r?\\n/,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespaces that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpacesAndTabs: /[ \\t\\r]/g,\r\n\r\n      /**\r\n       * Use this regular expression to filter for whitespace that is not a new line.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reSpaceAndTab: /[ \\t\\r]/,\r\n\r\n      /**\r\n       * Use this regular expression to filter consecutive groups of non spaces.\r\n       * Mostly used when text is 'justify' aligned.\r\n       * @private\r\n       */\r\n      _reWords: /\\S+/g,\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type:                 'text',\r\n\r\n      /**\r\n       * Font size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      fontSize:             40,\r\n\r\n      /**\r\n       * Font weight (e.g. bold, normal, 400, 600, 800)\r\n       * @type {(Number|String)}\r\n       * @default\r\n       */\r\n      fontWeight:           'normal',\r\n\r\n      /**\r\n       * Font family\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontFamily:           'Times New Roman',\r\n\r\n      /**\r\n       * Text decoration underline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      underline:       false,\r\n\r\n      /**\r\n       * Text decoration overline.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      overline:       false,\r\n\r\n      /**\r\n       * Text decoration linethrough.\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      linethrough:       false,\r\n\r\n      /**\r\n       * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\r\n       * \"justify-left\", \"justify-center\" or \"justify-right\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      textAlign:            'left',\r\n\r\n      /**\r\n       * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\r\n       * @type String\r\n       * @default\r\n       */\r\n      fontStyle:            'normal',\r\n\r\n      /**\r\n       * Line height\r\n       * @type Number\r\n       * @default\r\n       */\r\n      lineHeight:           1.16,\r\n\r\n      /**\r\n       * Superscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      superscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline: -0.35  // baseline-shift factor (upwards)\r\n      },\r\n\r\n      /**\r\n       * Subscript schema object (minimum overlap)\r\n       * @type {Object}\r\n       * @default\r\n       */\r\n      subscript: {\r\n        size:      0.60, // fontSize factor\r\n        baseline:  0.11  // baseline-shift factor (downwards)\r\n      },\r\n\r\n      /**\r\n       * Background color of text lines\r\n       * @type String\r\n       * @default\r\n       */\r\n      textBackgroundColor:  '',\r\n\r\n      /**\r\n       * List of properties to consider when checking if\r\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n       * as well as for history (undo/redo) purposes\r\n       * @type Array\r\n       */\r\n      stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * List of properties to consider when checking if cache needs refresh\r\n       * @type Array\r\n       */\r\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\r\n        'fontWeight',\r\n        'fontSize',\r\n        'text',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'textAlign',\r\n        'fontStyle',\r\n        'lineHeight',\r\n        'textBackgroundColor',\r\n        'charSpacing',\r\n        'styles'),\r\n\r\n      /**\r\n       * When defined, an object is rendered via stroke and this property specifies its color.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\r\n       * @type String\r\n       * @default\r\n       */\r\n      stroke:               null,\r\n\r\n      /**\r\n       * Shadow object representing shadow of this shape.\r\n       * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\r\n       * @type fabric.Shadow\r\n       * @default\r\n       */\r\n      shadow:               null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _fontSizeFraction: 0.222,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      offsets: {\r\n        underline: 0.10,\r\n        linethrough: -0.315,\r\n        overline: -0.88\r\n      },\r\n\r\n      /**\r\n       * Text Line proportion to font Size (in pixels)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      _fontSizeMult:             1.13,\r\n\r\n      /**\r\n       * additional space between characters\r\n       * expressed in thousands of em unit\r\n       * @type Number\r\n       * @default\r\n       */\r\n      charSpacing:             0,\r\n\r\n      /**\r\n       * Object containing character styles - top-level properties -> line numbers,\r\n       * 2nd-level properties - charater numbers\r\n       * @type Object\r\n       * @default\r\n       */\r\n      styles: null,\r\n\r\n      /**\r\n       * Reference to a context to measure text char or couple of chars\r\n       * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\r\n       * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\r\n       * text object created.\r\n       * @type {CanvasRenderingContext2D}\r\n       * @default\r\n       */\r\n      _measuringContext: null,\r\n\r\n      /**\r\n       * Baseline shift, stlyes only, keep at 0 for the main text object\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      deltaY: 0,\r\n\r\n      /**\r\n       * Array of properties that define a style unit (of 'styles').\r\n       * @type {Array}\r\n       * @default\r\n       */\r\n      _styleProperties: [\r\n        'stroke',\r\n        'strokeWidth',\r\n        'fill',\r\n        'fontFamily',\r\n        'fontSize',\r\n        'fontWeight',\r\n        'fontStyle',\r\n        'underline',\r\n        'overline',\r\n        'linethrough',\r\n        'deltaY',\r\n        'textBackgroundColor',\r\n      ],\r\n\r\n      /**\r\n       * contains characters bounding boxes\r\n       */\r\n      __charBounds: [],\r\n\r\n      /**\r\n       * use this size when measuring text. To avoid IE11 rounding errors\r\n       * @type {Number}\r\n       * @default\r\n       * @readonly\r\n       * @private\r\n       */\r\n      CACHE_FONT_SIZE: 400,\r\n\r\n      /**\r\n       * contains the min text width to avoid getting 0\r\n       * @type {Number}\r\n       * @default\r\n       */\r\n      MIN_TEXT_WIDTH: 2,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.styles = options ? (options.styles || { }) : { };\r\n        this.text = text;\r\n        this.__skipDimension = true;\r\n        this.callSuper('initialize', options);\r\n        this.__skipDimension = false;\r\n        this.initDimensions();\r\n        this.setCoords();\r\n        this.setupState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Return a contex for measurement of text string.\r\n       * if created it gets stored for reuse\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.Text} thisArg\r\n       */\r\n      getMeasuringContext: function() {\r\n        // if we did not return we have to measure something.\r\n        if (!fabric._measuringContext) {\r\n          fabric._measuringContext = this.canvas && this.canvas.contextCache ||\r\n            fabric.util.createCanvasElement().getContext('2d');\r\n        }\r\n        return fabric._measuringContext;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * Divides text into lines of text and lines of graphemes.\r\n       */\r\n      _splitText: function() {\r\n        var newLines = this._splitTextIntoLines(this.text);\r\n        this.textLines = newLines.lines;\r\n        this._textLines = newLines.graphemeLines;\r\n        this._unwrappedTextLines = newLines._unwrappedLines;\r\n        this._text = newLines.graphemeText;\r\n        return newLines;\r\n      },\r\n\r\n      /**\r\n       * Initialize or update text dimensions.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this._splitText();\r\n        this._clearCache();\r\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Enlarge space boxes and shift the others\r\n       */\r\n      enlargeSpaces: function() {\r\n        var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\r\n            continue;\r\n          }\r\n          accumulatedSpace = 0;\r\n          line = this._textLines[i];\r\n          currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\r\n            numberOfSpaces = spaces.length;\r\n            diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\r\n            for (var j = 0, jlen = line.length; j <= jlen; j++) {\r\n              charBound = this.__charBounds[i][j];\r\n              if (this._reSpaceAndTab.test(line[j])) {\r\n                charBound.width += diffSpace;\r\n                charBound.kernedWidth += diffSpace;\r\n                charBound.left += accumulatedSpace;\r\n                accumulatedSpace += diffSpace;\r\n              }\r\n              else {\r\n                charBound.left += accumulatedSpace;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        return lineIndex === this._textLines.length - 1;\r\n      },\r\n\r\n      /**\r\n       * Returns string representation of an instance\r\n       * @return {String} String representation of text object\r\n       */\r\n      toString: function() {\r\n        return '#<fabric.Text (' + this.complexity() +\r\n          '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\r\n      },\r\n\r\n      /**\r\n       * Return the dimension and the zoom level needed to create a cache canvas\r\n       * big enough to host the object to be cached.\r\n       * @private\r\n       * @param {Object} dim.x width of object to be cached\r\n       * @param {Object} dim.y height of object to be cached\r\n       * @return {Object}.width width of canvas\r\n       * @return {Object}.height height of canvas\r\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n       */\r\n      _getCacheCanvasDimensions: function() {\r\n        var dims = this.callSuper('_getCacheCanvasDimensions');\r\n        var fontSize = this.fontSize;\r\n        dims.width += fontSize * dims.zoomX;\r\n        dims.height += fontSize * dims.zoomY;\r\n        return dims;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this._setTextStyles(ctx);\r\n        this._renderTextLinesBackground(ctx);\r\n        this._renderTextDecoration(ctx, 'underline');\r\n        this._renderText(ctx);\r\n        this._renderTextDecoration(ctx, 'overline');\r\n        this._renderTextDecoration(ctx, 'linethrough');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderText: function(ctx) {\r\n        if (this.paintFirst === 'stroke') {\r\n          this._renderTextStroke(ctx);\r\n          this._renderTextFill(ctx);\r\n        }\r\n        else {\r\n          this._renderTextFill(ctx);\r\n          this._renderTextStroke(ctx);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the font parameter of the context with the object properties or with charStyle\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Object} [charStyle] object with font style properties\r\n       * @param {String} [charStyle.fontFamily] Font Family\r\n       * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\r\n       * @param {String} [charStyle.fontWeight] Font weight\r\n       * @param {String} [charStyle.fontStyle] Font style (italic|normal)\r\n       */\r\n      _setTextStyles: function(ctx, charStyle, forMeasuring) {\r\n        ctx.textBaseline = 'alphabetic';\r\n        ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\r\n      },\r\n\r\n      /**\r\n       * calculate and return the text Width measuring each line.\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @return {Number} Maximum width of fabric.Text object\r\n       */\r\n      calcTextWidth: function() {\r\n        var maxWidth = this.getLineWidth(0);\r\n\r\n        for (var i = 1, len = this._textLines.length; i < len; i++) {\r\n          var currentLineWidth = this.getLineWidth(i);\r\n          if (currentLineWidth > maxWidth) {\r\n            maxWidth = currentLineWidth;\r\n          }\r\n        }\r\n        return maxWidth;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Text to render\r\n       * @param {Number} left Left position of text\r\n       * @param {Number} top Top position of text\r\n       * @param {Number} lineIndex Index of a line in a text\r\n       */\r\n      _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\r\n        this._renderChars(method, ctx, line, left, top, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Renders the text background for lines, taking care of style\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextLinesBackground: function(ctx) {\r\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\r\n          return;\r\n        }\r\n        var lineTopOffset = 0, heightOfLine,\r\n            lineLeftOffset, originalFill = ctx.fillStyle,\r\n            line, lastColor,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(),\r\n            boxStart = 0, boxWidth = 0, charBox, currentColor;\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\r\n            lineTopOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxWidth = 0;\r\n          boxStart = 0;\r\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n            if (currentColor !== lastColor) {\r\n              ctx.fillStyle = lastColor;\r\n              lastColor && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                topOffset + lineTopOffset,\r\n                boxWidth,\r\n                heightOfLine / this.lineHeight\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastColor = currentColor;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          if (currentColor) {\r\n            ctx.fillStyle = currentColor;\r\n            ctx.fillRect(\r\n              leftOffset + lineLeftOffset + boxStart,\r\n              topOffset + lineTopOffset,\r\n              boxWidth,\r\n              heightOfLine / this.lineHeight\r\n            );\r\n          }\r\n          lineTopOffset += heightOfLine;\r\n        }\r\n        ctx.fillStyle = originalFill;\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} decl style declaration for cache\r\n       * @param {String} decl.fontFamily fontFamily\r\n       * @param {String} decl.fontStyle fontStyle\r\n       * @param {String} decl.fontWeight fontWeight\r\n       * @return {Object} reference to cache\r\n       */\r\n      getFontCache: function(decl) {\r\n        var fontFamily = decl.fontFamily.toLowerCase();\r\n        if (!fabric.charWidthsCache[fontFamily]) {\r\n          fabric.charWidthsCache[fontFamily] = { };\r\n        }\r\n        var cache = fabric.charWidthsCache[fontFamily],\r\n            cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\r\n        if (!cache[cacheProp]) {\r\n          cache[cacheProp] = { };\r\n        }\r\n        return cache[cacheProp];\r\n      },\r\n\r\n      /**\r\n       * apply all the character style to canvas for rendering\r\n       * @private\r\n       * @param {String} _char\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} [decl]\r\n       */\r\n      _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\r\n\r\n        this._setFillStyles(ctx, styleDeclaration);\r\n        this._setStrokeStyles(ctx, styleDeclaration);\r\n\r\n        ctx.font = this._getFontDeclaration(styleDeclaration);\r\n      },\r\n\r\n      /**\r\n       * measure and return the width of a single character.\r\n       * possibly overridden to accommodate different measure logic or\r\n       * to hook some external lib for character measurement\r\n       * @private\r\n       * @param {String} char to be measured\r\n       * @param {Object} charStyle style of char to be measured\r\n       * @param {String} [previousChar] previous char\r\n       * @param {Object} [prevCharStyle] style of previous char\r\n       */\r\n      _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\r\n        // first i try to return from cache\r\n        var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\r\n            previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\r\n            stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\r\n            fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\r\n\r\n        if (previousChar && fontCache[previousChar] !== undefined) {\r\n          previousWidth = fontCache[previousChar];\r\n        }\r\n        if (fontCache[_char] !== undefined) {\r\n          kernedWidth = width = fontCache[_char];\r\n        }\r\n        if (stylesAreEqual && fontCache[couple] !== undefined) {\r\n          coupleWidth = fontCache[couple];\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\r\n          var ctx = this.getMeasuringContext();\r\n          // send a TRUE to specify measuring font size CACHE_FONT_SIZE\r\n          this._setTextStyles(ctx, charStyle, true);\r\n        }\r\n        if (width === undefined) {\r\n          kernedWidth = width = ctx.measureText(_char).width;\r\n          fontCache[_char] = width;\r\n        }\r\n        if (previousWidth === undefined && stylesAreEqual && previousChar) {\r\n          previousWidth = ctx.measureText(previousChar).width;\r\n          fontCache[previousChar] = previousWidth;\r\n        }\r\n        if (stylesAreEqual && coupleWidth === undefined) {\r\n          // we can measure the kerning couple and subtract the width of the previous character\r\n          coupleWidth = ctx.measureText(couple).width;\r\n          fontCache[couple] = coupleWidth;\r\n          kernedWidth = coupleWidth - previousWidth;\r\n        }\r\n        return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\r\n      },\r\n\r\n      /**\r\n       * Computes height of character at given position\r\n       * @param {Number} line the line number\r\n       * @param {Number} char the character number\r\n       * @return {Number} fontSize of the character\r\n       */\r\n      getHeightOfChar: function(line, char) {\r\n        return this.getValueOfPropertyAt(line, char, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * measure a text line measuring all characters.\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      measureLine: function(lineIndex) {\r\n        var lineInfo = this._measureLine(lineIndex);\r\n        if (this.charSpacing !== 0) {\r\n          lineInfo.width -= this._getWidthOfCharSpacing();\r\n        }\r\n        if (lineInfo.width < 0) {\r\n          lineInfo.width = 0;\r\n        }\r\n        return lineInfo;\r\n      },\r\n\r\n      /**\r\n       * measure every grapheme of a line, populating __charBounds\r\n       * @param {Number} lineIndex\r\n       * @return {Object} object.width total width of characters\r\n       * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\r\n       */\r\n      _measureLine: function(lineIndex) {\r\n        var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\r\n            graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\r\n\r\n        this.__charBounds[lineIndex] = lineBounds;\r\n        for (i = 0; i < line.length; i++) {\r\n          grapheme = line[i];\r\n          graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\r\n          lineBounds[i] = graphemeInfo;\r\n          width += graphemeInfo.kernedWidth;\r\n          prevGrapheme = grapheme;\r\n        }\r\n        // this latest bound box represent the last character of the line\r\n        // to simplify cursor handling in interactive mode.\r\n        lineBounds[i] = {\r\n          left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\r\n          width: 0,\r\n          kernedWidth: 0,\r\n          height: this.fontSize\r\n        };\r\n        return { width: width, numOfSpaces: numOfSpaces };\r\n      },\r\n\r\n      /**\r\n       * Measure and return the info of a single grapheme.\r\n       * needs the the info of previous graphemes already filled\r\n       * @private\r\n       * @param {String} grapheme to be measured\r\n       * @param {Number} lineIndex index of the line where the char is\r\n       * @param {Number} charIndex position in the line\r\n       * @param {String} [prevGrapheme] character preceding the one to be measured\r\n       */\r\n      _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\r\n        var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\r\n            info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\r\n            kernedWidth = info.kernedWidth,\r\n            width = info.width, charSpacing;\r\n\r\n        if (this.charSpacing !== 0) {\r\n          charSpacing = this._getWidthOfCharSpacing();\r\n          width += charSpacing;\r\n          kernedWidth += charSpacing;\r\n        }\r\n\r\n        var box = {\r\n          width: width,\r\n          left: 0,\r\n          height: style.fontSize,\r\n          kernedWidth: kernedWidth,\r\n          deltaY: style.deltaY,\r\n        };\r\n        if (charIndex > 0 && !skipLeft) {\r\n          var previousBox = this.__charBounds[lineIndex][charIndex - 1];\r\n          box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\r\n        }\r\n        return box;\r\n      },\r\n\r\n      /**\r\n       * Calculate height of line at 'lineIndex'\r\n       * @param {Number} lineIndex index of line to calculate\r\n       * @return {Number}\r\n       */\r\n      getHeightOfLine: function(lineIndex) {\r\n        if (this.__lineHeights[lineIndex]) {\r\n          return this.__lineHeights[lineIndex];\r\n        }\r\n\r\n        var line = this._textLines[lineIndex],\r\n            // char 0 is measured before the line cycle because it nneds to char\r\n            // emptylines\r\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\r\n        for (var i = 1, len = line.length; i < len; i++) {\r\n          maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\r\n        }\r\n\r\n        return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\r\n      },\r\n\r\n      /**\r\n       * Calculate text box height\r\n       */\r\n      calcTextHeight: function() {\r\n        var lineHeight, height = 0;\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineHeight = this.getHeightOfLine(i);\r\n          height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\r\n        }\r\n        return height;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Left offset\r\n       */\r\n      _getLeftOffset: function() {\r\n        return -this.width / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Number} Top offset\r\n       */\r\n      _getTopOffset: function() {\r\n        return -this.height / 2;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n       */\r\n      _renderTextCommon: function(ctx, method) {\r\n        ctx.save();\r\n        var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\r\n            offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          var heightOfLine = this.getHeightOfLine(i),\r\n              maxHeight = heightOfLine / this.lineHeight,\r\n              leftOffset = this._getLineLeftOffset(i);\r\n          this._renderTextLine(\r\n            method,\r\n            ctx,\r\n            this._textLines[i],\r\n            left + leftOffset - offsets.offsetX,\r\n            top + lineHeights + maxHeight - offsets.offsetY,\r\n            i\r\n          );\r\n          lineHeights += heightOfLine;\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextFill: function(ctx) {\r\n        if (!this.fill && !this.styleHas('fill')) {\r\n          return;\r\n        }\r\n\r\n        this._renderTextCommon(ctx, 'fillText');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextStroke: function(ctx) {\r\n        if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\r\n          return;\r\n        }\r\n\r\n        if (this.shadow && !this.shadow.affectStroke) {\r\n          this._removeShadow(ctx);\r\n        }\r\n\r\n        ctx.save();\r\n        this._setLineDash(ctx, this.strokeDashArray);\r\n        ctx.beginPath();\r\n        this._renderTextCommon(ctx, 'strokeText');\r\n        ctx.closePath();\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {String} line Content of the line\r\n       * @param {Number} left\r\n       * @param {Number} top\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charOffset\r\n       */\r\n      _renderChars: function(method, ctx, line, left, top, lineIndex) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox,\r\n            boxWidth = 0,\r\n            timeToRender,\r\n            shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\r\n\r\n        ctx.save();\r\n        top -= lineHeight * this._fontSizeFraction / this.lineHeight;\r\n        if (shortCut) {\r\n          // render all the line in one pass without checking\r\n          this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\r\n          ctx.restore();\r\n          return;\r\n        }\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            left += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            left += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} method\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {String} _char\r\n       * @param {Number} left Left coordinate\r\n       * @param {Number} top Top coordinate\r\n       * @param {Number} lineHeight Height of the line\r\n       */\r\n      _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\r\n        var decl = this._getStyleDeclaration(lineIndex, charIndex),\r\n            fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n            shouldFill = method === 'fillText' && fullDecl.fill,\r\n            shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\r\n\r\n        if (!shouldStroke && !shouldFill) {\r\n          return;\r\n        }\r\n        decl && ctx.save();\r\n\r\n        this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\r\n\r\n        if (decl && decl.textBackgroundColor) {\r\n          this._removeShadow(ctx);\r\n        }\r\n        if (decl && decl.deltaY) {\r\n          top += decl.deltaY;\r\n        }\r\n\r\n        shouldFill && ctx.fillText(_char, left, top);\r\n        shouldStroke && ctx.strokeText(_char, left, top);\r\n        decl && ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Turns the character into a 'superior figure' (i.e. 'superscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSuperscript: function(start, end) {\r\n        return this._setScript(start, end, this.superscript);\r\n      },\r\n\r\n      /**\r\n       * Turns the character into an 'inferior figure' (i.e. 'subscript')\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      setSubscript: function(start, end) {\r\n        return this._setScript(start, end, this.subscript);\r\n      },\r\n\r\n      /**\r\n       * Applies 'schema' at given position\r\n       * @private\r\n       * @param {Number} start selection start\r\n       * @param {Number} end selection end\r\n       * @param {Number} schema\r\n       * @returns {fabric.Text} thisArg\r\n       * @chainable\r\n       */\r\n      _setScript: function(start, end, schema) {\r\n        var loc = this.get2DCursorLocation(start, true),\r\n            fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\r\n            dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\r\n            style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\r\n        this.setSelectionStyles(style, start, end);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChanged: function(prevStyle, thisStyle) {\r\n        return prevStyle.fill !== thisStyle.fill ||\r\n                prevStyle.stroke !== thisStyle.stroke ||\r\n                prevStyle.strokeWidth !== thisStyle.strokeWidth ||\r\n                prevStyle.fontSize !== thisStyle.fontSize ||\r\n                prevStyle.fontFamily !== thisStyle.fontFamily ||\r\n                prevStyle.fontWeight !== thisStyle.fontWeight ||\r\n                prevStyle.fontStyle !== thisStyle.fontStyle ||\r\n                prevStyle.deltaY !== thisStyle.deltaY;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Object} prevStyle\r\n       * @param {Object} thisStyle\r\n       */\r\n      _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\r\n        return this._hasStyleChanged(prevStyle, thisStyle) ||\r\n          prevStyle.overline !== thisStyle.overline ||\r\n          prevStyle.underline !== thisStyle.underline ||\r\n          prevStyle.linethrough !== thisStyle.linethrough;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} lineIndex index text line\r\n       * @return {Number} Line left offset\r\n       */\r\n      _getLineLeftOffset: function(lineIndex) {\r\n        var lineWidth = this.getLineWidth(lineIndex);\r\n        if (this.textAlign === 'center') {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'right') {\r\n          return this.width - lineWidth;\r\n        }\r\n        if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\r\n          return (this.width - lineWidth) / 2;\r\n        }\r\n        if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\r\n          return this.width - lineWidth;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _clearCache: function() {\r\n        this.__lineWidths = [];\r\n        this.__lineHeights = [];\r\n        this.__charBounds = [];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _shouldClearDimensionCache: function() {\r\n        var shouldClear = this._forceClearCache;\r\n        shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\r\n        if (shouldClear) {\r\n          this.dirty = true;\r\n          this._forceClearCache = false;\r\n        }\r\n        return shouldClear;\r\n      },\r\n\r\n      /**\r\n       * Measure a single line given its index. Used to calculate the initial\r\n       * text bounding box. The values are calculated and stored in __lineWidths cache.\r\n       * @private\r\n       * @param {Number} lineIndex line number\r\n       * @return {Number} Line width\r\n       */\r\n      getLineWidth: function(lineIndex) {\r\n        if (this.__lineWidths[lineIndex]) {\r\n          return this.__lineWidths[lineIndex];\r\n        }\r\n\r\n        var width, line = this._textLines[lineIndex], lineInfo;\r\n\r\n        if (line === '') {\r\n          width = 0;\r\n        }\r\n        else {\r\n          lineInfo = this.measureLine(lineIndex);\r\n          width = lineInfo.width;\r\n        }\r\n        this.__lineWidths[lineIndex] = width;\r\n        return width;\r\n      },\r\n\r\n      _getWidthOfCharSpacing: function() {\r\n        if (this.charSpacing !== 0) {\r\n          return this.fontSize * this.charSpacing / 1000;\r\n        }\r\n        return 0;\r\n      },\r\n\r\n      /**\r\n       * Retrieves the value of property at given character position\r\n       * @param {Number} lineIndex the line number\r\n       * @param {Number} charIndex the charater number\r\n       * @param {String} property the property name\r\n       * @returns the value of 'property'\r\n       */\r\n      getValueOfPropertyAt: function(lineIndex, charIndex, property) {\r\n        var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\r\n        if (charStyle && typeof charStyle[property] !== 'undefined') {\r\n          return charStyle[property];\r\n        }\r\n        return this[property];\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _renderTextDecoration: function(ctx, type) {\r\n        if (!this[type] && !this.styleHas(type)) {\r\n          return;\r\n        }\r\n        var heightOfLine, size, _size,\r\n            lineLeftOffset, dy, _dy,\r\n            line, lastDecoration,\r\n            leftOffset = this._getLeftOffset(),\r\n            topOffset = this._getTopOffset(), top,\r\n            boxStart, boxWidth, charBox, currentDecoration,\r\n            maxHeight, currentFill, lastFill,\r\n            charSpacing = this._getWidthOfCharSpacing();\r\n\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          heightOfLine = this.getHeightOfLine(i);\r\n          if (!this[type] && !this.styleHas(type, i)) {\r\n            topOffset += heightOfLine;\r\n            continue;\r\n          }\r\n          line = this._textLines[i];\r\n          maxHeight = heightOfLine / this.lineHeight;\r\n          lineLeftOffset = this._getLineLeftOffset(i);\r\n          boxStart = 0;\r\n          boxWidth = 0;\r\n          lastDecoration = this.getValueOfPropertyAt(i, 0, type);\r\n          lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\r\n          top = topOffset + maxHeight * (1 - this._fontSizeFraction);\r\n          size = this.getHeightOfChar(i, 0);\r\n          dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\r\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n            charBox = this.__charBounds[i][j];\r\n            currentDecoration = this.getValueOfPropertyAt(i, j, type);\r\n            currentFill = this.getValueOfPropertyAt(i, j, 'fill');\r\n            _size = this.getHeightOfChar(i, j);\r\n            _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\r\n            if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\r\n                boxWidth > 0) {\r\n              ctx.fillStyle = lastFill;\r\n              lastDecoration && lastFill && ctx.fillRect(\r\n                leftOffset + lineLeftOffset + boxStart,\r\n                top + this.offsets[type] * size + dy,\r\n                boxWidth,\r\n                this.fontSize / 15\r\n              );\r\n              boxStart = charBox.left;\r\n              boxWidth = charBox.width;\r\n              lastDecoration = currentDecoration;\r\n              lastFill = currentFill;\r\n              size = _size;\r\n              dy = _dy;\r\n            }\r\n            else {\r\n              boxWidth += charBox.kernedWidth;\r\n            }\r\n          }\r\n          ctx.fillStyle = currentFill;\r\n          currentDecoration && currentFill && ctx.fillRect(\r\n            leftOffset + lineLeftOffset + boxStart,\r\n            top + this.offsets[type] * size + dy,\r\n            boxWidth - charSpacing,\r\n            this.fontSize / 15\r\n          );\r\n          topOffset += heightOfLine;\r\n        }\r\n        // if there is text background color no\r\n        // other shadows should be casted\r\n        this._removeShadow(ctx);\r\n      },\r\n\r\n      /**\r\n       * return font declaration string for canvas context\r\n       * @param {Object} [styleObject] object\r\n       * @returns {String} font declaration formatted for canvas context.\r\n       */\r\n      _getFontDeclaration: function(styleObject, forMeasuring) {\r\n        var style = styleObject || this, family = this.fontFamily,\r\n            fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\r\n        var fontFamily = family === undefined ||\r\n        family.indexOf('\\'') > -1 ||\r\n        family.indexOf('\"') > -1 || fontIsGeneric\r\n          ? style.fontFamily : '\"' + style.fontFamily + '\"';\r\n        return [\r\n          // node-canvas needs \"weight style\", while browsers need \"style weight\"\r\n          (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\r\n          (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\r\n          forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\r\n          fontFamily\r\n        ].join(' ');\r\n      },\r\n\r\n      /**\r\n       * Renders text instance on a specified context\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        // do not render if object is not visible\r\n        if (!this.visible) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n          return;\r\n        }\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n        }\r\n        this.callSuper('render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Returns the text as an array of lines.\r\n       * @param {String} text text to split\r\n       * @returns {Array} Lines in the text\r\n       */\r\n      _splitTextIntoLines: function(text) {\r\n        var lines = text.split(this._reNewline),\r\n            newLines = new Array(lines.length),\r\n            newLine = ['\\n'],\r\n            newText = [];\r\n        for (var i = 0; i < lines.length; i++) {\r\n          newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\r\n          newText = newText.concat(newLines[i], newLine);\r\n        }\r\n        newText.pop();\r\n        return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} Object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        var additionalProperties = [\r\n          'text',\r\n          'fontSize',\r\n          'fontWeight',\r\n          'fontFamily',\r\n          'fontStyle',\r\n          'lineHeight',\r\n          'underline',\r\n          'overline',\r\n          'linethrough',\r\n          'textAlign',\r\n          'textBackgroundColor',\r\n          'charSpacing',\r\n        ].concat(propertiesToInclude);\r\n        var obj = this.callSuper('toObject', additionalProperties);\r\n        obj.styles = clone(this.styles, true);\r\n        return obj;\r\n      },\r\n\r\n      /**\r\n       * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n       * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n       * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n       * @return {fabric.Object} thisArg\r\n       * @chainable\r\n       */\r\n      set: function(key, value) {\r\n        this.callSuper('set', key, value);\r\n        var needsDims = false;\r\n        if (typeof key === 'object') {\r\n          for (var _key in key) {\r\n            needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\r\n          }\r\n        }\r\n        else {\r\n          needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\r\n        }\r\n        if (needsDims) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns complexity of an instance\r\n       * @return {Number} complexity\r\n       */\r\n      complexity: function() {\r\n        return 1;\r\n      }\r\n    });\r\n\r\n    /* _FROM_SVG_START_ */\r\n    /**\r\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @see: http://www.w3.org/TR/SVG/text.html#TextElement\r\n     */\r\n    fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\r\n      'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\r\n\r\n    /**\r\n     * Default SVG font size\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     */\r\n    fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {SVGElement} element Element to parse\r\n     * @param {Function} callback callback function invoked after parsing\r\n     * @param {Object} [options] Options object\r\n     */\r\n    fabric.Text.fromElement = function(element, callback, options) {\r\n      if (!element) {\r\n        return callback(null);\r\n      }\r\n\r\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\r\n          parsedAnchor = parsedAttributes.textAnchor || 'left';\r\n      options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\r\n\r\n      options.top = options.top || 0;\r\n      options.left = options.left || 0;\r\n      if (parsedAttributes.textDecoration) {\r\n        var textDecoration = parsedAttributes.textDecoration;\r\n        if (textDecoration.indexOf('underline') !== -1) {\r\n          options.underline = true;\r\n        }\r\n        if (textDecoration.indexOf('overline') !== -1) {\r\n          options.overline = true;\r\n        }\r\n        if (textDecoration.indexOf('line-through') !== -1) {\r\n          options.linethrough = true;\r\n        }\r\n        delete options.textDecoration;\r\n      }\r\n      if ('dx' in parsedAttributes) {\r\n        options.left += parsedAttributes.dx;\r\n      }\r\n      if ('dy' in parsedAttributes) {\r\n        options.top += parsedAttributes.dy;\r\n      }\r\n      if (!('fontSize' in options)) {\r\n        options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n      }\r\n\r\n      var textContent = '';\r\n\r\n      // The XML is not properly parsed in IE9 so a workaround to get\r\n      // textContent is through firstChild.data. Another workaround would be\r\n      // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\r\n      if (!('textContent' in element)) {\r\n        if ('firstChild' in element && element.firstChild !== null) {\r\n          if ('data' in element.firstChild && element.firstChild.data !== null) {\r\n            textContent = element.firstChild.data;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        textContent = element.textContent;\r\n      }\r\n\r\n      textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\r\n      var originalStrokeWidth = options.strokeWidth;\r\n      options.strokeWidth = 0;\r\n\r\n      var text = new fabric.Text(textContent, options),\r\n          textHeightScaleFactor = text.getScaledHeight() / text.height,\r\n          lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\r\n          scaledDiff = lineHeightDiff * textHeightScaleFactor,\r\n          textHeight = text.getScaledHeight() + scaledDiff,\r\n          offX = 0;\r\n      /*\r\n        Adjust positioning:\r\n          x/y attributes in SVG correspond to the bottom-left corner of text bounding box\r\n          fabric output by default at top, left.\r\n      */\r\n      if (parsedAnchor === 'center') {\r\n        offX = text.getScaledWidth() / 2;\r\n      }\r\n      if (parsedAnchor === 'right') {\r\n        offX = text.getScaledWidth();\r\n      }\r\n      text.set({\r\n        left: text.left - offX,\r\n        top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\r\n        strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\r\n      });\r\n      callback(text);\r\n    };\r\n    /* _FROM_SVG_END_ */\r\n\r\n    /**\r\n     * Returns fabric.Text instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Text\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\r\n     */\r\n    fabric.Text.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Text', object, callback, 'text');\r\n    };\r\n\r\n    fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\r\n\r\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\r\n\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        if (!this.styles) {\r\n          return true;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return true;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            for (var p3 in obj[p1][p2]) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it ina specified line\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n          return false;\r\n        }\r\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            if (typeof obj[p1][p2][property] !== 'undefined') {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n       * Check if characters in a text have a value for a property\r\n       * whose value matches the textbox's value for that property.  If so,\r\n       * the character-level property is deleted.  If the character\r\n       * has no other properties, then it is also deleted.  Finally,\r\n       * if the line containing that character has no other characters\r\n       * then it also is deleted.\r\n       *\r\n       * @param {string} property The property to compare between characters and text.\r\n       */\r\n      cleanStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return false;\r\n        }\r\n        var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\r\n            allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\r\n        // eslint-disable-next-line\r\n        for (var p1 in obj) {\r\n          letterCount = 0;\r\n          // eslint-disable-next-line\r\n          for (var p2 in obj[p1]) {\r\n            var styleObject = obj[p1][p2],\r\n                stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\r\n\r\n            stylesCount++;\r\n\r\n            if (stylePropertyHasBeenSet) {\r\n              if (!stylePropertyValue) {\r\n                stylePropertyValue = styleObject[property];\r\n              }\r\n              else if (styleObject[property] !== stylePropertyValue) {\r\n                allStyleObjectPropertiesMatch = false;\r\n              }\r\n\r\n              if (styleObject[property] === this[property]) {\r\n                delete styleObject[property];\r\n              }\r\n            }\r\n            else {\r\n              allStyleObjectPropertiesMatch = false;\r\n            }\r\n\r\n            if (Object.keys(styleObject).length !== 0) {\r\n              letterCount++;\r\n            }\r\n            else {\r\n              delete obj[p1][p2];\r\n            }\r\n          }\r\n\r\n          if (letterCount === 0) {\r\n            delete obj[p1];\r\n          }\r\n        }\r\n        // if every grapheme has the same style set then\r\n        // delete those styles and set it on the parent\r\n        for (var i = 0; i < this._textLines.length; i++) {\r\n          graphemeCount += this._textLines[i].length;\r\n        }\r\n        if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\r\n          this[property] = stylePropertyValue;\r\n          this.removeStyle(property);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Remove a style property or properties from all individual character styles\r\n       * in a text object.  Deletes the character style object if it contains no other style\r\n       * props.  Deletes a line style object if it contains no other character styles.\r\n       *\r\n       * @param {String} props The property to remove from character styles.\r\n       */\r\n      removeStyle: function(property) {\r\n        if (!this.styles || !property || property === '') {\r\n          return;\r\n        }\r\n        var obj = this.styles, line, lineNum, charNum;\r\n        for (lineNum in obj) {\r\n          line = obj[lineNum];\r\n          for (charNum in line) {\r\n            delete line[charNum][property];\r\n            if (Object.keys(line[charNum]).length === 0) {\r\n              delete line[charNum];\r\n            }\r\n          }\r\n          if (Object.keys(line).length === 0) {\r\n            delete obj[lineNum];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _extendStyles: function(index, styles) {\r\n        var loc = this.get2DCursorLocation(index);\r\n\r\n        if (!this._getLineStyle(loc.lineIndex)) {\r\n          this._setLineStyle(loc.lineIndex, {});\r\n        }\r\n\r\n        if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\r\n          this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\r\n        }\r\n\r\n        fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\r\n      },\r\n\r\n      /**\r\n       * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\r\n       * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\r\n       * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\r\n       */\r\n      get2DCursorLocation: function(selectionStart, skipWrapping) {\r\n        if (typeof selectionStart === 'undefined') {\r\n          selectionStart = this.selectionStart;\r\n        }\r\n        var lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\r\n        var len = lines.length;\r\n        for (var i = 0; i < len; i++) {\r\n          if (selectionStart <= lines[i].length) {\r\n            return {\r\n              lineIndex: i,\r\n              charIndex: selectionStart\r\n            };\r\n          }\r\n          selectionStart -= lines[i].length + 1;\r\n        }\r\n        return {\r\n          lineIndex: i - 1,\r\n          charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor (at the start position)\r\n       * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @param {Boolean} [complete] get full style or not\r\n       * @return {Array} styles an array with one, zero or more Style objects\r\n       */\r\n      getSelectionStyles: function(startIndex, endIndex, complete) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        var styles = [];\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          styles.push(this.getStyleAtPosition(i, complete));\r\n        }\r\n        return styles;\r\n      },\r\n\r\n      /**\r\n       * Gets style of a current selection/cursor position\r\n       * @param {Number} position  to get styles at\r\n       * @param {Boolean} [complete] full style if true\r\n       * @return {Object} style Style object at a specified index\r\n       * @private\r\n       */\r\n      getStyleAtPosition: function(position, complete) {\r\n        var loc = this.get2DCursorLocation(position),\r\n            style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\r\n              this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\r\n        return style || {};\r\n      },\r\n\r\n      /**\r\n       * Sets style of a current selection, if no selection exist, do not set anything.\r\n       * @param {Object} [styles] Styles object\r\n       * @param {Number} [startIndex] Start index to get styles at\r\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      setSelectionStyles: function(styles, startIndex, endIndex) {\r\n        if (typeof startIndex === 'undefined') {\r\n          startIndex = this.selectionStart || 0;\r\n        }\r\n        if (typeof endIndex === 'undefined') {\r\n          endIndex = this.selectionEnd || startIndex;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n          this._extendStyles(i, styles);\r\n        }\r\n        /* not included in _extendStyles to avoid clearing cache more than once */\r\n        this._forceClearCache = true;\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * get the reference, not a clone, of the style object for a given character\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @return {Object} style object\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        var lineStyle = this.styles && this.styles[lineIndex];\r\n        if (!lineStyle) {\r\n          return null;\r\n        }\r\n        return lineStyle[charIndex];\r\n      },\r\n\r\n      /**\r\n       * return a new object that contains all the style property for a character\r\n       * the object returned is newly created\r\n       * @param {Number} lineIndex of the line where the character is\r\n       * @param {Number} charIndex position of the character on the line\r\n       * @return {Object} style object\r\n       */\r\n      getCompleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\r\n            styleObject = { }, prop;\r\n        for (var i = 0; i < this._styleProperties.length; i++) {\r\n          prop = this._styleProperties[i];\r\n          styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\r\n        }\r\n        return styleObject;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        return this.styles[lineIndex];\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex, style) {\r\n        this.styles[lineIndex] = style;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _deleteLineStyle: function(lineIndex) {\r\n        delete this.styles[lineIndex];\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    function parseDecoration(object) {\r\n      if (object.textDecoration) {\r\n        object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\r\n        object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\r\n        object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\r\n        delete object.textDecoration;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\r\n     * prefix when observing canvas.\r\n     * @class fabric.IText\r\n     * @extends fabric.Text\r\n     * @mixes fabric.Observable\r\n     *\r\n     * @fires changed\r\n     * @fires selection:changed\r\n     * @fires editing:entered\r\n     * @fires editing:exited\r\n     *\r\n     * @return {fabric.IText} thisArg\r\n     * @see {@link fabric.IText#initialize} for constructor definition\r\n     *\r\n     * <p>Supported key combinations:</p>\r\n     * <pre>\r\n     *   Move cursor:                    left, right, up, down\r\n     *   Select character:               shift + left, shift + right\r\n     *   Select text vertically:         shift + up, shift + down\r\n     *   Move cursor by word:            alt + left, alt + right\r\n     *   Select words:                   shift + alt + left, shift + alt + right\r\n     *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\r\n     *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\r\n     *   Jump to start/end of text:      cmd + up, cmd + down\r\n     *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\r\n     *   Delete character:               backspace\r\n     *   Delete word:                    alt + backspace\r\n     *   Delete line:                    cmd + backspace\r\n     *   Forward delete:                 delete\r\n     *   Copy text:                      ctrl/cmd + c\r\n     *   Paste text:                     ctrl/cmd + v\r\n     *   Cut text:                       ctrl/cmd + x\r\n     *   Select entire text:             ctrl/cmd + a\r\n     *   Quit editing                    tab or esc\r\n     * </pre>\r\n     *\r\n     * <p>Supported mouse/touch combination</p>\r\n     * <pre>\r\n     *   Position cursor:                click/touch\r\n     *   Create selection:               click/touch & drag\r\n     *   Create selection:               click & shift + click\r\n     *   Select word:                    double click\r\n     *   Select line:                    triple click\r\n     * </pre>\r\n     */\r\n    fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'i-text',\r\n\r\n      /**\r\n       * Index where text selection starts (or where cursor is when there is no selection)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionStart: 0,\r\n\r\n      /**\r\n       * Index where text selection ends\r\n       * @type Number\r\n       * @default\r\n       */\r\n      selectionEnd: 0,\r\n\r\n      /**\r\n       * Color of text selection\r\n       * @type String\r\n       * @default\r\n       */\r\n      selectionColor: 'rgba(17,119,255,0.3)',\r\n\r\n      /**\r\n       * Indicates whether text is in editing mode\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      isEditing: false,\r\n\r\n      /**\r\n       * Indicates whether a text can be edited\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      editable: true,\r\n\r\n      /**\r\n       * Border color of text object while it's in editing mode\r\n       * @type String\r\n       * @default\r\n       */\r\n      editingBorderColor: 'rgba(102,153,255,0.25)',\r\n\r\n      /**\r\n       * Width of cursor (in px)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorWidth: 2,\r\n\r\n      /**\r\n       * Color of default cursor (when not overwritten by character style)\r\n       * @type String\r\n       * @default\r\n       */\r\n      cursorColor: '#333',\r\n\r\n      /**\r\n       * Delay between cursor blink (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDelay: 1000,\r\n\r\n      /**\r\n       * Duration of cursor fadein (in ms)\r\n       * @type Number\r\n       * @default\r\n       */\r\n      cursorDuration: 600,\r\n\r\n      /**\r\n       * Indicates whether internal text char widths can be cached\r\n       * @type Boolean\r\n       * @default\r\n       */\r\n      caching: true,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _reSpace: /\\s|\\n/,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _currentCursorOpacity: 0,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _selectionDirection: null,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _abortCursorAnimation: false,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      __widthOfSpace: [],\r\n\r\n      /**\r\n       * Helps determining when the text is in composition, so that the cursor\r\n       * rendering is altered.\r\n       */\r\n      inCompositionMode: false,\r\n\r\n      /**\r\n       * Constructor\r\n       * @param {String} text Text string\r\n       * @param {Object} [options] Options object\r\n       * @return {fabric.IText} thisArg\r\n       */\r\n      initialize: function(text, options) {\r\n        this.callSuper('initialize', text, options);\r\n        this.initBehavior();\r\n      },\r\n\r\n      /**\r\n       * Sets selection start (left boundary of a selection)\r\n       * @param {Number} index Index to set selection start to\r\n       */\r\n      setSelectionStart: function(index) {\r\n        index = Math.max(index, 0);\r\n        this._updateAndFire('selectionStart', index);\r\n      },\r\n\r\n      /**\r\n       * Sets selection end (right boundary of a selection)\r\n       * @param {Number} index Index to set selection end to\r\n       */\r\n      setSelectionEnd: function(index) {\r\n        index = Math.min(index, this.text.length);\r\n        this._updateAndFire('selectionEnd', index);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {String} property 'selectionStart' or 'selectionEnd'\r\n       * @param {Number} index new position of property\r\n       */\r\n      _updateAndFire: function(property, index) {\r\n        if (this[property] !== index) {\r\n          this._fireSelectionChanged();\r\n          this[property] = index;\r\n        }\r\n        this._updateTextarea();\r\n      },\r\n\r\n      /**\r\n       * Fires the even of selection changed\r\n       * @private\r\n       */\r\n      _fireSelectionChanged: function() {\r\n        this.fire('selection:changed');\r\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\r\n      },\r\n\r\n      /**\r\n       * Initialize text dimensions. Render all text on given context\r\n       * or on a offscreen canvas to get the text width with measureText.\r\n       * Updates this.width and this.height with the proper values.\r\n       * Does not return dimensions.\r\n       * @private\r\n       */\r\n      initDimensions: function() {\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this.callSuper('initDimensions');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      render: function(ctx) {\r\n        this.clearContextTop();\r\n        this.callSuper('render', ctx);\r\n        // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\r\n        // the correct position but not at every cursor animation.\r\n        this.cursorOffsetCache = { };\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx Context to render on\r\n       */\r\n      _render: function(ctx) {\r\n        this.callSuper('_render', ctx);\r\n      },\r\n\r\n      /**\r\n       * Prepare and clean the contextTop\r\n       */\r\n      clearContextTop: function(skipRestore) {\r\n        if (!this.isEditing) {\r\n          return;\r\n        }\r\n        if (this.canvas && this.canvas.contextTop) {\r\n          var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\r\n          ctx.save();\r\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n          this.transform(ctx);\r\n          this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\r\n          this._clearTextArea(ctx);\r\n          skipRestore || ctx.restore();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Renders cursor or selection (depending on what exists)\r\n       */\r\n      renderCursorOrSelection: function() {\r\n        if (!this.isEditing || !this.canvas) {\r\n          return;\r\n        }\r\n        var boundaries = this._getCursorBoundaries(), ctx;\r\n        if (this.canvas && this.canvas.contextTop) {\r\n          ctx = this.canvas.contextTop;\r\n          this.clearContextTop(true);\r\n        }\r\n        else {\r\n          ctx = this.canvas.contextContainer;\r\n          ctx.save();\r\n        }\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.renderCursor(boundaries, ctx);\r\n        }\r\n        else {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n        ctx.restore();\r\n      },\r\n\r\n      _clearTextArea: function(ctx) {\r\n        // we add 4 pixel, to be sure to do not leave any pixel out\r\n        var width = this.width + 4, height = this.height + 4;\r\n        ctx.clearRect(-width / 2, -height / 2, width, height);\r\n      },\r\n\r\n      /**\r\n       * Returns cursor boundaries (left, top, leftOffset, topOffset)\r\n       * @private\r\n       * @param {Array} chars Array of characters\r\n       * @param {String} typeOfBoundaries\r\n       */\r\n      _getCursorBoundaries: function(position) {\r\n\r\n        // left/top are left/top of entire text box\r\n        // leftOffset/topOffset are offset from that left/top point of a text box\r\n\r\n        if (typeof position === 'undefined') {\r\n          position = this.selectionStart;\r\n        }\r\n\r\n        var left = this._getLeftOffset(),\r\n            top = this._getTopOffset(),\r\n            offsets = this._getCursorBoundariesOffsets(position);\r\n\r\n        return {\r\n          left: left,\r\n          top: top,\r\n          leftOffset: offsets.left,\r\n          topOffset: offsets.top\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getCursorBoundariesOffsets: function(position) {\r\n        if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\r\n          return this.cursorOffsetCache;\r\n        }\r\n        var lineLeftOffset,\r\n            lineIndex,\r\n            charIndex,\r\n            topOffset = 0,\r\n            leftOffset = 0,\r\n            boundaries,\r\n            cursorPosition = this.get2DCursorLocation(position);\r\n        charIndex = cursorPosition.charIndex;\r\n        lineIndex = cursorPosition.lineIndex;\r\n        for (var i = 0; i < lineIndex; i++) {\r\n          topOffset += this.getHeightOfLine(i);\r\n        }\r\n        lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n        var bound = this.__charBounds[lineIndex][charIndex];\r\n        bound && (leftOffset = bound.left);\r\n        if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\r\n          leftOffset -= this._getWidthOfCharSpacing();\r\n        }\r\n        boundaries = {\r\n          top: topOffset,\r\n          left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\r\n        };\r\n        this.cursorOffsetCache = boundaries;\r\n        return this.cursorOffsetCache;\r\n      },\r\n\r\n      /**\r\n       * Renders cursor\r\n       * @param {Object} boundaries\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderCursor: function(boundaries, ctx) {\r\n        var cursorLocation = this.get2DCursorLocation(),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\r\n            multiplier = this.scaleX * this.canvas.getZoom(),\r\n            cursorWidth = this.cursorWidth / multiplier,\r\n            topOffset = boundaries.topOffset,\r\n            dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\r\n\r\n        topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\r\n          - charHeight * (1 - this._fontSizeFraction);\r\n\r\n        if (this.inCompositionMode) {\r\n          this.renderSelection(boundaries, ctx);\r\n        }\r\n\r\n        ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\r\n        ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\r\n        ctx.fillRect(\r\n          boundaries.left + boundaries.leftOffset - cursorWidth / 2,\r\n          topOffset + boundaries.top + dy,\r\n          cursorWidth,\r\n          charHeight);\r\n      },\r\n\r\n      /**\r\n       * Renders text selection\r\n       * @param {Object} boundaries Object with left/top/leftOffset/topOffset\r\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\r\n       */\r\n      renderSelection: function(boundaries, ctx) {\r\n\r\n        var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\r\n            selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            start = this.get2DCursorLocation(selectionStart),\r\n            end = this.get2DCursorLocation(selectionEnd),\r\n            startLine = start.lineIndex,\r\n            endLine = end.lineIndex,\r\n            startChar = start.charIndex < 0 ? 0 : start.charIndex,\r\n            endChar = end.charIndex < 0 ? 0 : end.charIndex;\r\n\r\n        for (var i = startLine; i <= endLine; i++) {\r\n          var lineOffset = this._getLineLeftOffset(i) || 0,\r\n              lineHeight = this.getHeightOfLine(i),\r\n              realLineHeight = 0, boxStart = 0, boxEnd = 0;\r\n\r\n          if (i === startLine) {\r\n            boxStart = this.__charBounds[startLine][startChar].left;\r\n          }\r\n          if (i >= startLine && i < endLine) {\r\n            boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\r\n          }\r\n          else if (i === endLine) {\r\n            if (endChar === 0) {\r\n              boxEnd = this.__charBounds[endLine][endChar].left;\r\n            }\r\n            else {\r\n              var charSpacing = this._getWidthOfCharSpacing();\r\n              boxEnd = this.__charBounds[endLine][endChar - 1].left\r\n                + this.__charBounds[endLine][endChar - 1].width - charSpacing;\r\n            }\r\n          }\r\n          realLineHeight = lineHeight;\r\n          if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\r\n            lineHeight /= this.lineHeight;\r\n          }\r\n          if (this.inCompositionMode) {\r\n            ctx.fillStyle = this.compositionColor || 'black';\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset + lineHeight,\r\n              boxEnd - boxStart,\r\n              1);\r\n          }\r\n          else {\r\n            ctx.fillStyle = this.selectionColor;\r\n            ctx.fillRect(\r\n              boundaries.left + lineOffset + boxStart,\r\n              boundaries.top + boundaries.topOffset,\r\n              boxEnd - boxStart,\r\n              lineHeight);\r\n          }\r\n\r\n\r\n          boundaries.topOffset += realLineHeight;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * High level function to know the height of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns fontSize of char at the current cursor\r\n       * @return {Number} Character font size\r\n       */\r\n      getCurrentCharFontSize: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\r\n      },\r\n\r\n      /**\r\n       * High level function to know the color of the cursor.\r\n       * the currentChar is the one that precedes the cursor\r\n       * Returns color (fill) of char at the current cursor\r\n       * @return {String} Character color (fill)\r\n       */\r\n      getCurrentCharColor: function() {\r\n        var cp = this._getCurrentCharIndex();\r\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\r\n      },\r\n\r\n      /**\r\n       * Returns the cursor position for the getCurrent.. functions\r\n       * @private\r\n       */\r\n      _getCurrentCharIndex: function() {\r\n        var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\r\n            charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\r\n        return { l: cursorPosition.lineIndex, c: charIndex };\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.IText instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.IText\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {function} [callback] invoked with new instance as argument\r\n     */\r\n    fabric.IText.fromObject = function(object, callback) {\r\n      parseDecoration(object);\r\n      if (object.styles) {\r\n        for (var i in object.styles) {\r\n          for (var j in object.styles[i]) {\r\n            parseDecoration(object.styles[i][j]);\r\n          }\r\n        }\r\n      }\r\n      fabric.Object._fromObject('IText', object, callback, 'text');\r\n    };\r\n  })();\r\n\r\n\r\n  (function() {\r\n\r\n    var clone = fabric.util.object.clone;\r\n\r\n    fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n      /**\r\n       * Initializes all the interactive behavior of IText\r\n       */\r\n      initBehavior: function() {\r\n        this.initAddedHandler();\r\n        this.initRemovedHandler();\r\n        this.initCursorSelectionHandlers();\r\n        this.initDoubleClickSimulation();\r\n        this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\r\n      },\r\n\r\n      onDeselect: function() {\r\n        this.isEditing && this.exitEditing();\r\n        this.selected = false;\r\n      },\r\n\r\n      /**\r\n       * Initializes \"added\" event handler\r\n       */\r\n      initAddedHandler: function() {\r\n        var _this = this;\r\n        this.on('added', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            if (!canvas._hasITextHandlers) {\r\n              canvas._hasITextHandlers = true;\r\n              _this._initCanvasHandlers(canvas);\r\n            }\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            canvas._iTextInstances.push(_this);\r\n          }\r\n        });\r\n      },\r\n\r\n      initRemovedHandler: function() {\r\n        var _this = this;\r\n        this.on('removed', function() {\r\n          var canvas = _this.canvas;\r\n          if (canvas) {\r\n            canvas._iTextInstances = canvas._iTextInstances || [];\r\n            fabric.util.removeFromArray(canvas._iTextInstances, _this);\r\n            if (canvas._iTextInstances.length === 0) {\r\n              canvas._hasITextHandlers = false;\r\n              _this._removeCanvasHandlers(canvas);\r\n            }\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * register canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _initCanvasHandlers: function(canvas) {\r\n        canvas._mouseUpITextHandler = function() {\r\n          if (canvas._iTextInstances) {\r\n            canvas._iTextInstances.forEach(function(obj) {\r\n              obj.__isMousedown = false;\r\n            });\r\n          }\r\n        };\r\n        canvas.on('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * remove canvas event to manage exiting on other instances\r\n       * @private\r\n       */\r\n      _removeCanvasHandlers: function(canvas) {\r\n        canvas.off('mouse:up', canvas._mouseUpITextHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _tick: function() {\r\n        this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\r\n\r\n        var tickState;\r\n\r\n        tickState = {\r\n          isAborted: false,\r\n          abort: function() {\r\n            this.isAborted = true;\r\n          },\r\n        };\r\n\r\n        obj.animate('_currentCursorOpacity', targetOpacity, {\r\n          duration: duration,\r\n          onComplete: function() {\r\n            if (!tickState.isAborted) {\r\n              obj[completeMethod]();\r\n            }\r\n          },\r\n          onChange: function() {\r\n            // we do not want to animate a selection, only cursor\r\n            if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\r\n              obj.renderCursorOrSelection();\r\n            }\r\n          },\r\n          abort: function() {\r\n            return tickState.isAborted;\r\n          }\r\n        });\r\n        return tickState;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _onTickComplete: function() {\r\n\r\n        var _this = this;\r\n\r\n        if (this._cursorTimeout1) {\r\n          clearTimeout(this._cursorTimeout1);\r\n        }\r\n        this._cursorTimeout1 = setTimeout(function() {\r\n          _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\r\n        }, 100);\r\n      },\r\n\r\n      /**\r\n       * Initializes delayed cursor\r\n       */\r\n      initDelayedCursor: function(restart) {\r\n        var _this = this,\r\n            delay = restart ? 0 : this.cursorDelay;\r\n\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this._cursorTimeout2 = setTimeout(function() {\r\n          _this._tick();\r\n        }, delay);\r\n      },\r\n\r\n      /**\r\n       * Aborts cursor animation and clears all timeouts\r\n       */\r\n      abortCursorAnimation: function() {\r\n        var shouldClear = this._currentTickState || this._currentTickCompleteState,\r\n            canvas = this.canvas;\r\n        this._currentTickState && this._currentTickState.abort();\r\n        this._currentTickCompleteState && this._currentTickCompleteState.abort();\r\n\r\n        clearTimeout(this._cursorTimeout1);\r\n        clearTimeout(this._cursorTimeout2);\r\n\r\n        this._currentCursorOpacity = 0;\r\n        // to clear just itext area we need to transform the context\r\n        // it may not be worth it\r\n        if (shouldClear && canvas) {\r\n          canvas.clearContext(canvas.contextTop || canvas.contextContainer);\r\n        }\r\n\r\n      },\r\n\r\n      /**\r\n       * Selects entire text\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectAll: function() {\r\n        this.selectionStart = 0;\r\n        this.selectionEnd = this._text.length;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Returns selected text\r\n       * @return {String}\r\n       */\r\n      getSelectedText: function() {\r\n        return this._text.slice(this.selectionStart, this.selectionEnd).join('');\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current word according to current selection index\r\n       * @param {Number} startFrom Surrent selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        // remove space before cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index--;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current word according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findWordBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        // remove space after cursor first\r\n        if (this._reSpace.test(this._text[index])) {\r\n          while (this._reSpace.test(this._text[index])) {\r\n            offset++;\r\n            index++;\r\n          }\r\n        }\r\n        while (/\\S/.test(this._text[index]) && index < this.text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing start of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryLeft: function(startFrom) {\r\n        var offset = 0, index = startFrom - 1;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index > -1) {\r\n          offset++;\r\n          index--;\r\n        }\r\n\r\n        return startFrom - offset;\r\n      },\r\n\r\n      /**\r\n       * Find new selection index representing end of current line according to current selection index\r\n       * @param {Number} startFrom Current selection index\r\n       * @return {Number} New selection index\r\n       */\r\n      findLineBoundaryRight: function(startFrom) {\r\n        var offset = 0, index = startFrom;\r\n\r\n        while (!/\\n/.test(this._text[index]) && index < this.text.length) {\r\n          offset++;\r\n          index++;\r\n        }\r\n\r\n        return startFrom + offset;\r\n      },\r\n\r\n      /**\r\n       * Finds index corresponding to beginning or end of a word\r\n       * @param {Number} selectionStart Index of a character\r\n       * @param {Number} direction 1 or -1\r\n       * @return {Number} Index of the beginning or end of a word\r\n       */\r\n      searchWordBoundary: function(selectionStart, direction) {\r\n        var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\r\n            _char     = this.text.charAt(index),\r\n            reNonWord = /[ \\n\\.,;!\\?\\-]/;\r\n\r\n        while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\r\n          index += direction;\r\n          _char = this.text.charAt(index);\r\n        }\r\n        if (reNonWord.test(_char) && _char !== '\\n') {\r\n          index += direction === 1 ? 0 : 1;\r\n        }\r\n        return index;\r\n      },\r\n\r\n      /**\r\n       * Selects a word based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       */\r\n      selectWord: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\r\n            newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        this.renderCursorOrSelection();\r\n      },\r\n\r\n      /**\r\n       * Selects a line based on the index\r\n       * @param {Number} selectionStart Index of a character\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      selectLine: function(selectionStart) {\r\n        selectionStart = selectionStart || this.selectionStart;\r\n        var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\r\n            newSelectionEnd = this.findLineBoundaryRight(selectionStart);\r\n\r\n        this.selectionStart = newSelectionStart;\r\n        this.selectionEnd = newSelectionEnd;\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * Enters editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      enterEditing: function(e) {\r\n        if (this.isEditing || !this.editable) {\r\n          return;\r\n        }\r\n\r\n        if (this.canvas) {\r\n          this.canvas.calcOffset();\r\n          this.exitEditingOnOthers(this.canvas);\r\n        }\r\n\r\n        this.isEditing = true;\r\n\r\n        this.initHiddenTextarea(e);\r\n        this.hiddenTextarea.focus();\r\n        this.hiddenTextarea.value = this.text;\r\n        this._updateTextarea();\r\n        this._saveEditingProps();\r\n        this._setEditingProps();\r\n        this._textBeforeEdit = this.text;\r\n\r\n        this._tick();\r\n        this.fire('editing:entered');\r\n        this._fireSelectionChanged();\r\n        if (!this.canvas) {\r\n          return this;\r\n        }\r\n        this.canvas.fire('text:editing:entered', { target: this });\r\n        this.initMouseMoveHandler();\r\n        this.canvas.requestRenderAll();\r\n        return this;\r\n      },\r\n\r\n      exitEditingOnOthers: function(canvas) {\r\n        if (canvas._iTextInstances) {\r\n          canvas._iTextInstances.forEach(function(obj) {\r\n            obj.selected = false;\r\n            if (obj.isEditing) {\r\n              obj.exitEditing();\r\n            }\r\n          });\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Initializes \"mousemove\" event handler\r\n       */\r\n      initMouseMoveHandler: function() {\r\n        this.canvas.on('mouse:move', this.mouseMoveHandler);\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      mouseMoveHandler: function(options) {\r\n        if (!this.__isMousedown || !this.isEditing) {\r\n          return;\r\n        }\r\n\r\n        var newSelectionStart = this.getSelectionStartFromPointer(options.e),\r\n            currentStart = this.selectionStart,\r\n            currentEnd = this.selectionEnd;\r\n        if (\r\n          (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\r\n          &&\r\n          (currentStart === newSelectionStart || currentEnd === newSelectionStart)\r\n        ) {\r\n          return;\r\n        }\r\n        if (newSelectionStart > this.__selectionStartOnMouseDown) {\r\n          this.selectionStart = this.__selectionStartOnMouseDown;\r\n          this.selectionEnd = newSelectionStart;\r\n        }\r\n        else {\r\n          this.selectionStart = newSelectionStart;\r\n          this.selectionEnd = this.__selectionStartOnMouseDown;\r\n        }\r\n        if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\r\n          this.restartCursorIfNeeded();\r\n          this._fireSelectionChanged();\r\n          this._updateTextarea();\r\n          this.renderCursorOrSelection();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _setEditingProps: function() {\r\n        this.hoverCursor = 'text';\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\r\n        }\r\n\r\n        this.borderColor = this.editingBorderColor;\r\n\r\n        this.hasControls = this.selectable = false;\r\n        this.lockMovementX = this.lockMovementY = true;\r\n      },\r\n\r\n      /**\r\n       * convert from textarea to grapheme indexes\r\n       */\r\n      fromStringToGraphemeSelection: function(start, end, text) {\r\n        var smallerTextStart = text.slice(0, start),\r\n            graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = text.slice(start, end),\r\n            graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * convert from fabric to textarea values\r\n       */\r\n      fromGraphemeToStringSelection: function(start, end, _text) {\r\n        var smallerTextStart = _text.slice(0, start),\r\n            graphemeStart = smallerTextStart.join('').length;\r\n        if (start === end) {\r\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\r\n        }\r\n        var smallerTextEnd = _text.slice(start, end),\r\n            graphemeEnd = smallerTextEnd.join('').length;\r\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _updateTextarea: function() {\r\n        this.cursorOffsetCache = { };\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        if (!this.inCompositionMode) {\r\n          var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\r\n          this.hiddenTextarea.selectionStart = newSelection.selectionStart;\r\n          this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateFromTextArea: function() {\r\n        if (!this.hiddenTextarea) {\r\n          return;\r\n        }\r\n        this.cursorOffsetCache = { };\r\n        this.text = this.hiddenTextarea.value;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        var newSelection = this.fromStringToGraphemeSelection(\r\n          this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\r\n        this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\r\n        if (!this.inCompositionMode) {\r\n          this.selectionStart = newSelection.selectionStart;\r\n        }\r\n        this.updateTextareaPosition();\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      updateTextareaPosition: function() {\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          var style = this._calcTextareaPosition();\r\n          this.hiddenTextarea.style.left = style.left;\r\n          this.hiddenTextarea.style.top = style.top;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @return {Object} style contains style for hiddenTextarea\r\n       */\r\n      _calcTextareaPosition: function() {\r\n        if (!this.canvas) {\r\n          return { x: 1, y: 1 };\r\n        }\r\n        var desiredPostion = this.inCompositionMode ? this.compositionStart : this.selectionStart,\r\n            boundaries = this._getCursorBoundaries(desiredPostion),\r\n            cursorLocation = this.get2DCursorLocation(desiredPostion),\r\n            lineIndex = cursorLocation.lineIndex,\r\n            charIndex = cursorLocation.charIndex,\r\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\r\n            leftOffset = boundaries.leftOffset,\r\n            m = this.calcTransformMatrix(),\r\n            p = {\r\n              x: boundaries.left + leftOffset,\r\n              y: boundaries.top + boundaries.topOffset + charHeight\r\n            },\r\n            upperCanvas = this.canvas.upperCanvasEl,\r\n            upperCanvasWidth = upperCanvas.width,\r\n            upperCanvasHeight = upperCanvas.height,\r\n            maxWidth = upperCanvasWidth - charHeight,\r\n            maxHeight = upperCanvasHeight - charHeight,\r\n            scaleX = upperCanvas.clientWidth / upperCanvasWidth,\r\n            scaleY = upperCanvas.clientHeight / upperCanvasHeight;\r\n\r\n        p = fabric.util.transformPoint(p, m);\r\n        p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\r\n        p.x *= scaleX;\r\n        p.y *= scaleY;\r\n        if (p.x < 0) {\r\n          p.x = 0;\r\n        }\r\n        if (p.x > maxWidth) {\r\n          p.x = maxWidth;\r\n        }\r\n        if (p.y < 0) {\r\n          p.y = 0;\r\n        }\r\n        if (p.y > maxHeight) {\r\n          p.y = maxHeight;\r\n        }\r\n\r\n        // add canvas offset on document\r\n        p.x += this.canvas._offset.left;\r\n        p.y += this.canvas._offset.top;\r\n\r\n        return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _saveEditingProps: function() {\r\n        this._savedProps = {\r\n          hasControls: this.hasControls,\r\n          borderColor: this.borderColor,\r\n          lockMovementX: this.lockMovementX,\r\n          lockMovementY: this.lockMovementY,\r\n          hoverCursor: this.hoverCursor,\r\n          defaultCursor: this.canvas && this.canvas.defaultCursor,\r\n          moveCursor: this.canvas && this.canvas.moveCursor\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _restoreEditingProps: function() {\r\n        if (!this._savedProps) {\r\n          return;\r\n        }\r\n\r\n        this.hoverCursor = this._savedProps.hoverCursor;\r\n        this.hasControls = this._savedProps.hasControls;\r\n        this.borderColor = this._savedProps.borderColor;\r\n        this.lockMovementX = this._savedProps.lockMovementX;\r\n        this.lockMovementY = this._savedProps.lockMovementY;\r\n\r\n        if (this.canvas) {\r\n          this.canvas.defaultCursor = this._savedProps.defaultCursor;\r\n          this.canvas.moveCursor = this._savedProps.moveCursor;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Exits from editing state\r\n       * @return {fabric.IText} thisArg\r\n       * @chainable\r\n       */\r\n      exitEditing: function() {\r\n        var isTextChanged = (this._textBeforeEdit !== this.text);\r\n        this.selected = false;\r\n        this.isEditing = false;\r\n        this.selectable = true;\r\n\r\n        this.selectionEnd = this.selectionStart;\r\n\r\n        if (this.hiddenTextarea) {\r\n          this.hiddenTextarea.blur && this.hiddenTextarea.blur();\r\n          this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\r\n          this.hiddenTextarea = null;\r\n        }\r\n\r\n        this.abortCursorAnimation();\r\n        this._restoreEditingProps();\r\n        this._currentCursorOpacity = 0;\r\n        if (this._shouldClearDimensionCache()) {\r\n          this.initDimensions();\r\n          this.setCoords();\r\n        }\r\n        this.fire('editing:exited');\r\n        isTextChanged && this.fire('modified');\r\n        if (this.canvas) {\r\n          this.canvas.off('mouse:move', this.mouseMoveHandler);\r\n          this.canvas.fire('text:editing:exited', { target: this });\r\n          isTextChanged && this.canvas.fire('object:modified', { target: this });\r\n        }\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _removeExtraneousStyles: function() {\r\n        for (var prop in this.styles) {\r\n          if (!this._textLines[prop]) {\r\n            delete this.styles[prop];\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * remove and reflow a style block from start to end.\r\n       * @param {Number} start linear start position for removal (included in removal)\r\n       * @param {Number} end linear end position for removal ( excluded from removal )\r\n       */\r\n      removeStyleFromTo: function(start, end) {\r\n        var cursorStart = this.get2DCursorLocation(start, true),\r\n            cursorEnd = this.get2DCursorLocation(end, true),\r\n            lineStart = cursorStart.lineIndex,\r\n            charStart = cursorStart.charIndex,\r\n            lineEnd = cursorEnd.lineIndex,\r\n            charEnd = cursorEnd.charIndex,\r\n            i, styleObj;\r\n        if (lineStart !== lineEnd) {\r\n          // step1 remove the trailing of lineStart\r\n          if (this.styles[lineStart]) {\r\n            for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\r\n              delete this.styles[lineStart][i];\r\n            }\r\n          }\r\n          // step2 move the trailing of lineEnd to lineStart if needed\r\n          if (this.styles[lineEnd]) {\r\n            for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\r\n              styleObj = this.styles[lineEnd][i];\r\n              if (styleObj) {\r\n                this.styles[lineStart] || (this.styles[lineStart] = { });\r\n                this.styles[lineStart][charStart + i - charEnd] = styleObj;\r\n              }\r\n            }\r\n          }\r\n          // step3 detects lines will be completely removed.\r\n          for (i = lineStart + 1; i <= lineEnd; i++) {\r\n            delete this.styles[i];\r\n          }\r\n          // step4 shift remaining lines.\r\n          this.shiftLineStyles(lineEnd, lineStart - lineEnd);\r\n        }\r\n        else {\r\n          // remove and shift left on the same line\r\n          if (this.styles[lineStart]) {\r\n            styleObj = this.styles[lineStart];\r\n            var diff = charEnd - charStart, numericChar, _char;\r\n            for (i = charStart; i < charEnd; i++) {\r\n              delete styleObj[i];\r\n            }\r\n            for (_char in this.styles[lineStart]) {\r\n              numericChar = parseInt(_char, 10);\r\n              if (numericChar >= charEnd) {\r\n                styleObj[numericChar - diff] = styleObj[_char];\r\n                delete styleObj[_char];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Shifts line styles up or down\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} offset Can any number?\r\n       */\r\n      shiftLineStyles: function(lineIndex, offset) {\r\n        // shift all line styles by offset upward or downward\r\n        // do not clone deep. we need new array, not new style objects\r\n        var clonedStyles = clone(this.styles);\r\n        for (var line in this.styles) {\r\n          var numericLine = parseInt(line, 10);\r\n          if (numericLine > lineIndex) {\r\n            this.styles[numericLine + offset] = clonedStyles[numericLine];\r\n            if (!clonedStyles[numericLine - offset]) {\r\n              delete this.styles[numericLine];\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      restartCursorIfNeeded: function() {\r\n        if (!this._currentTickState || this._currentTickState.isAborted\r\n          || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\r\n        ) {\r\n          this.initDelayedCursor();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts new style object\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} qty number of lines to add\r\n       * @param {Array} copiedStyle Array of objects styles\r\n       */\r\n      insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\r\n        var currentCharStyle,\r\n            newLineStyles = {},\r\n            somethingAdded = false;\r\n\r\n        qty || (qty = 1);\r\n        this.shiftLineStyles(lineIndex, qty);\r\n        if (this.styles[lineIndex]) {\r\n          currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\r\n        }\r\n\r\n        // we clone styles of all chars\r\n        // after cursor onto the current line\r\n        for (var index in this.styles[lineIndex]) {\r\n          var numIndex = parseInt(index, 10);\r\n          if (numIndex >= charIndex) {\r\n            somethingAdded = true;\r\n            newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\r\n            // remove lines from the previous line since they're on a new line now\r\n            delete this.styles[lineIndex][index];\r\n          }\r\n        }\r\n        if (somethingAdded) {\r\n          this.styles[lineIndex + qty] = newLineStyles;\r\n        }\r\n        else {\r\n          delete this.styles[lineIndex + qty];\r\n        }\r\n        // for the other lines\r\n        // we clone current char style onto the next (otherwise empty) line\r\n        while (qty > 1) {\r\n          qty--;\r\n          if (copiedStyle && copiedStyle[qty]) {\r\n            this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\r\n          }\r\n          else if (currentCharStyle) {\r\n            this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\r\n          }\r\n          else {\r\n            delete this.styles[lineIndex + qty];\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n      },\r\n\r\n      /**\r\n       * Inserts style object for a given line/char index\r\n       * @param {Number} lineIndex Index of a line\r\n       * @param {Number} charIndex Index of a char\r\n       * @param {Number} quantity number Style object to insert, if given\r\n       * @param {Array} copiedStyle array of style objecs\r\n       */\r\n      insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\r\n        if (!this.styles) {\r\n          this.styles = {};\r\n        }\r\n        var currentLineStyles       = this.styles[lineIndex],\r\n            currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\r\n\r\n        quantity || (quantity = 1);\r\n        // shift all char styles by quantity forward\r\n        // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\r\n        for (var index in currentLineStylesCloned) {\r\n          var numericIndex = parseInt(index, 10);\r\n          if (numericIndex >= charIndex) {\r\n            currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\r\n            // only delete the style if there was nothing moved there\r\n            if (!currentLineStylesCloned[numericIndex - quantity]) {\r\n              delete currentLineStyles[numericIndex];\r\n            }\r\n          }\r\n        }\r\n        this._forceClearCache = true;\r\n        if (copiedStyle) {\r\n          while (quantity--) {\r\n            if (!Object.keys(copiedStyle[quantity]).length) {\r\n              continue;\r\n            }\r\n            if (!this.styles[lineIndex]) {\r\n              this.styles[lineIndex] = {};\r\n            }\r\n            this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\r\n          }\r\n          return;\r\n        }\r\n        if (!currentLineStyles) {\r\n          return;\r\n        }\r\n        var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\r\n        while (newStyle && quantity--) {\r\n          this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Inserts style object(s)\r\n       * @param {Array} insertedText Characters at the location where style is inserted\r\n       * @param {Number} start cursor index for inserting style\r\n       * @param {Array} [copiedStyle] array of style objects to insert.\r\n       */\r\n      insertNewStyleBlock: function(insertedText, start, copiedStyle) {\r\n        var cursorLoc = this.get2DCursorLocation(start, true),\r\n            addedLines = [0], linesLenght = 0;\r\n        for (var i = 0; i < insertedText.length; i++) {\r\n          if (insertedText[i] === '\\n') {\r\n            linesLenght++;\r\n            addedLines[linesLenght] = 0;\r\n          }\r\n          else {\r\n            addedLines[linesLenght]++;\r\n          }\r\n        }\r\n        if (addedLines[0] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\r\n        }\r\n        linesLenght && this.insertNewlineStyleObject(\r\n          cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLenght);\r\n        for (var i = 1; i < linesLenght; i++) {\r\n          if (addedLines[i] > 0) {\r\n            this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n          }\r\n          else if (copiedStyle) {\r\n            this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\r\n          }\r\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\r\n        }\r\n        // we use i outside the loop to get it like linesLength\r\n        if (addedLines[i] > 0) {\r\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Set the selectionStart and selectionEnd according to the ne postion of cursor\r\n       * mimic the key - mouse navigation when shift is pressed.\r\n       */\r\n      setSelectionStartEndWithShift: function(start, end, newSelection) {\r\n        if (newSelection <= start) {\r\n          if (end === start) {\r\n            this._selectionDirection = 'left';\r\n          }\r\n          else if (this._selectionDirection === 'right') {\r\n            this._selectionDirection = 'left';\r\n            this.selectionEnd = start;\r\n          }\r\n          this.selectionStart = newSelection;\r\n        }\r\n        else if (newSelection > start && newSelection < end) {\r\n          if (this._selectionDirection === 'right') {\r\n            this.selectionEnd = newSelection;\r\n          }\r\n          else {\r\n            this.selectionStart = newSelection;\r\n          }\r\n        }\r\n        else {\r\n          // newSelection is > selection start and end\r\n          if (end === start) {\r\n            this._selectionDirection = 'right';\r\n          }\r\n          else if (this._selectionDirection === 'left') {\r\n            this._selectionDirection = 'right';\r\n            this.selectionStart = end;\r\n          }\r\n          this.selectionEnd = newSelection;\r\n        }\r\n      },\r\n\r\n      setSelectionInBoundaries: function() {\r\n        var length = this.text.length;\r\n        if (this.selectionStart > length) {\r\n          this.selectionStart = length;\r\n        }\r\n        else if (this.selectionStart < 0) {\r\n          this.selectionStart = 0;\r\n        }\r\n        if (this.selectionEnd > length) {\r\n          this.selectionEnd = length;\r\n        }\r\n        else if (this.selectionEnd < 0) {\r\n          this.selectionEnd = 0;\r\n        }\r\n      }\r\n    });\r\n  })();\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n    /**\r\n     * Initializes \"dbclick\" event handler\r\n     */\r\n    initDoubleClickSimulation: function() {\r\n\r\n      // for double click\r\n      this.__lastClickTime = +new Date();\r\n\r\n      // for triple click\r\n      this.__lastLastClickTime = +new Date();\r\n\r\n      this.__lastPointer = { };\r\n\r\n      this.on('mousedown', this.onMouseDown);\r\n    },\r\n\r\n    /**\r\n     * Default event handler to simulate triple click\r\n     * @private\r\n     */\r\n    onMouseDown: function(options) {\r\n      if (!this.canvas) {\r\n        return;\r\n      }\r\n      this.__newClickTime = +new Date();\r\n      var newPointer = options.pointer;\r\n      if (this.isTripleClick(newPointer)) {\r\n        this.fire('tripleclick', options);\r\n        this._stopEvent(options.e);\r\n      }\r\n      this.__lastLastClickTime = this.__lastClickTime;\r\n      this.__lastClickTime = this.__newClickTime;\r\n      this.__lastPointer = newPointer;\r\n      this.__lastIsEditing = this.isEditing;\r\n      this.__lastSelected = this.selected;\r\n    },\r\n\r\n    isTripleClick: function(newPointer) {\r\n      return this.__newClickTime - this.__lastClickTime < 500 &&\r\n          this.__lastClickTime - this.__lastLastClickTime < 500 &&\r\n          this.__lastPointer.x === newPointer.x &&\r\n          this.__lastPointer.y === newPointer.y;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _stopEvent: function(e) {\r\n      e.preventDefault && e.preventDefault();\r\n      e.stopPropagation && e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Initializes event handlers related to cursor or selection\r\n     */\r\n    initCursorSelectionHandlers: function() {\r\n      this.initMousedownHandler();\r\n      this.initMouseupHandler();\r\n      this.initClicks();\r\n    },\r\n\r\n    /**\r\n     * Initializes double and triple click event handlers\r\n     */\r\n    initClicks: function() {\r\n      this.on('mousedblclick', function(options) {\r\n        this.selectWord(this.getSelectionStartFromPointer(options.e));\r\n      });\r\n      this.on('tripleclick', function(options) {\r\n        this.selectLine(this.getSelectionStartFromPointer(options.e));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on _mouseDown\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: find the click position, set selectionStart\r\n     * find selectionEnd, initialize the drawing of either cursor or selection area\r\n     */\r\n    _mouseDownHandler: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      this.__isMousedown = true;\r\n\r\n      if (this.selected) {\r\n        this.setCursorByClick(options.e);\r\n      }\r\n\r\n      if (this.isEditing) {\r\n        this.__selectionStartOnMouseDown = this.selectionStart;\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.abortCursorAnimation();\r\n        }\r\n        this.renderCursorOrSelection();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Default event handler for the basic functionalities needed on mousedown:before\r\n     * can be overridden to do something different.\r\n     * Scope of this implementation is: verify the object is already selected when mousing down\r\n     */\r\n    _mouseDownHandlerBefore: function(options) {\r\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n      if (this === this.canvas._activeObject) {\r\n        this.selected = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mousedown\" event handler\r\n     */\r\n    initMousedownHandler: function() {\r\n      this.on('mousedown', this._mouseDownHandler);\r\n      this.on('mousedown:before', this._mouseDownHandlerBefore);\r\n    },\r\n\r\n    /**\r\n     * Initializes \"mouseup\" event handler\r\n     */\r\n    initMouseupHandler: function() {\r\n      this.on('mouseup', this.mouseUpHandler);\r\n    },\r\n\r\n    /**\r\n     * standard hander for mouse up, overridable\r\n     * @private\r\n     */\r\n    mouseUpHandler: function(options) {\r\n      this.__isMousedown = false;\r\n      if (!this.editable || this.group ||\r\n        (options.transform && options.transform.actionPerformed) ||\r\n        (options.e.button && options.e.button !== 1)) {\r\n        return;\r\n      }\r\n\r\n      if (this.__lastSelected && !this.__corner) {\r\n        this.selected = false;\r\n        this.__lastSelected = false;\r\n        this.enterEditing(options.e);\r\n        if (this.selectionStart === this.selectionEnd) {\r\n          this.initDelayedCursor(true);\r\n        }\r\n        else {\r\n          this.renderCursorOrSelection();\r\n        }\r\n      }\r\n      else {\r\n        this.selected = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Changes cursor location in a text depending on passed pointer (x/y) object\r\n     * @param {Event} e Event object\r\n     */\r\n    setCursorByClick: function(e) {\r\n      var newSelection = this.getSelectionStartFromPointer(e),\r\n          start = this.selectionStart, end = this.selectionEnd;\r\n      if (e.shiftKey) {\r\n        this.setSelectionStartEndWithShift(start, end, newSelection);\r\n      }\r\n      else {\r\n        this.selectionStart = newSelection;\r\n        this.selectionEnd = newSelection;\r\n      }\r\n      if (this.isEditing) {\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns index of a character corresponding to where an object was clicked\r\n     * @param {Event} e Event object\r\n     * @return {Number} Index of a character\r\n     */\r\n    getSelectionStartFromPointer: function(e) {\r\n      var mouseOffset = this.getLocalPointer(e),\r\n          prevWidth = 0,\r\n          width = 0,\r\n          height = 0,\r\n          charIndex = 0,\r\n          lineIndex = 0,\r\n          lineLeftOffset,\r\n          line;\r\n\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        if (height <= mouseOffset.y) {\r\n          height += this.getHeightOfLine(i) * this.scaleY;\r\n          lineIndex = i;\r\n          if (i > 0) {\r\n            charIndex += this._textLines[i - 1].length + 1;\r\n          }\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\r\n      width = lineLeftOffset * this.scaleX;\r\n      line = this._textLines[lineIndex];\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        prevWidth = width;\r\n        // i removed something about flipX here, check.\r\n        width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\r\n        if (width <= mouseOffset.x) {\r\n          charIndex++;\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\r\n      // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\r\n      var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\r\n          distanceBtwNextCharAndCursor = width - mouseOffset.x,\r\n          offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\r\n            distanceBtwNextCharAndCursor < 0 ? 0 : 1,\r\n          newSelectionStart = index + offset;\r\n      // if object is horizontally flipped, mirror cursor location from the end\r\n      if (this.flipX) {\r\n        newSelectionStart = jlen - newSelectionStart;\r\n      }\r\n\r\n      if (newSelectionStart > this._text.length) {\r\n        newSelectionStart = this._text.length;\r\n      }\r\n\r\n      return newSelectionStart;\r\n    }\r\n  });\r\n\r\n\r\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\r\n\r\n    /**\r\n     * Initializes hidden textarea (needed to bring up keyboard in iOS)\r\n     */\r\n    initHiddenTextarea: function() {\r\n      this.hiddenTextarea = fabric.document.createElement('textarea');\r\n      this.hiddenTextarea.setAttribute('autocapitalize', 'off');\r\n      this.hiddenTextarea.setAttribute('autocorrect', 'off');\r\n      this.hiddenTextarea.setAttribute('autocomplete', 'off');\r\n      this.hiddenTextarea.setAttribute('spellcheck', 'false');\r\n      this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\r\n      this.hiddenTextarea.setAttribute('wrap', 'off');\r\n      var style = this._calcTextareaPosition();\r\n      // line-height: 1px; was removed from the style to fix this:\r\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\r\n      this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\r\n      '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\r\n      ' paddingｰtop: ' + style.fontSize + ';';\r\n      fabric.document.body.appendChild(this.hiddenTextarea);\r\n\r\n      fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\r\n      fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\r\n\r\n      if (!this._clickHandlerInitialized && this.canvas) {\r\n        fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\r\n        this._clickHandlerInitialized = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown\r\n     * Map a special key to a function of the instance/prototype\r\n     * If you need different behaviour for ESC or TAB or arrows, you have to change\r\n     * this map setting the name of a function that you build on the fabric.Itext or\r\n     * your prototype.\r\n     * the map change will affect all Instances unless you need for only some text Instances\r\n     * in that case you have to clone this object and assign your Instance.\r\n     * this.keysMap = fabric.util.object.clone(this.keysMap);\r\n     * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\r\n     */\r\n    keysMap: {\r\n      9:  'exitEditing',\r\n      27: 'exitEditing',\r\n      33: 'moveCursorUp',\r\n      34: 'moveCursorDown',\r\n      35: 'moveCursorRight',\r\n      36: 'moveCursorLeft',\r\n      37: 'moveCursorLeft',\r\n      38: 'moveCursorUp',\r\n      39: 'moveCursorRight',\r\n      40: 'moveCursorDown',\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyUp + ctrl || cmd\r\n     */\r\n    ctrlKeysMapUp: {\r\n      67: 'copy',\r\n      88: 'cut'\r\n    },\r\n\r\n    /**\r\n     * For functionalities on keyDown + ctrl || cmd\r\n     */\r\n    ctrlKeysMapDown: {\r\n      65: 'selectAll'\r\n    },\r\n\r\n    onClick: function() {\r\n      // No need to trigger click event here, focus is enough to have the keyboard appear on Android\r\n      this.hiddenTextarea && this.hiddenTextarea.focus();\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyDown: function(e) {\r\n      if (!this.isEditing || this.inCompositionMode) {\r\n        return;\r\n      }\r\n      if (e.keyCode in this.keysMap) {\r\n        this[this.keysMap[e.keyCode]](e);\r\n      }\r\n      else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapDown[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      if (e.keyCode >= 33 && e.keyCode <= 40) {\r\n        // if i press an arrow key just update selection\r\n        this.clearContextTop();\r\n        this.renderCursorOrSelection();\r\n      }\r\n      else {\r\n        this.canvas && this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles keyup event\r\n     * We handle KeyUp because ie11 and edge have difficulties copy/pasting\r\n     * if a copy/cut event fired, keyup is dismissed\r\n     * @param {Event} e Event object\r\n     */\r\n    onKeyUp: function(e) {\r\n      if (!this.isEditing || this._copyDone || this.inCompositionMode) {\r\n        this._copyDone = false;\r\n        return;\r\n      }\r\n      if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\r\n        this[this.ctrlKeysMapUp[e.keyCode]](e);\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.canvas && this.canvas.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * Handles onInput event\r\n     * @param {Event} e Event object\r\n     */\r\n    onInput: function(e) {\r\n      var fromPaste = this.fromPaste;\r\n      this.fromPaste = false;\r\n      e && e.stopPropagation();\r\n      if (!this.isEditing) {\r\n        return;\r\n      }\r\n      // decisions about style changes.\r\n      var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\r\n          charCount = this._text.length,\r\n          nextCharCount = nextText.length,\r\n          removedText, insertedText,\r\n          charDiff = nextCharCount - charCount;\r\n      if (this.hiddenTextarea.value === '') {\r\n        this.styles = { };\r\n        this.updateFromTextArea();\r\n        this.fire('changed');\r\n        if (this.canvas) {\r\n          this.canvas.fire('text:changed', { target: this });\r\n          this.canvas.requestRenderAll();\r\n        }\r\n        return;\r\n      }\r\n\r\n      var textareaSelection = this.fromStringToGraphemeSelection(\r\n        this.hiddenTextarea.selectionStart,\r\n        this.hiddenTextarea.selectionEnd,\r\n        this.hiddenTextarea.value\r\n      );\r\n      var backDelete = this.selectionStart > textareaSelection.selectionStart;\r\n\r\n      if (this.selectionStart !== this.selectionEnd) {\r\n        removedText = this._text.slice(this.selectionStart, this.selectionEnd);\r\n        charDiff += this.selectionEnd - this.selectionStart;\r\n      }\r\n      else if (nextCharCount < charCount) {\r\n        if (backDelete) {\r\n          removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\r\n        }\r\n        else {\r\n          removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\r\n        }\r\n      }\r\n      insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\r\n      if (removedText && removedText.length) {\r\n        if (this.selectionStart !== this.selectionEnd) {\r\n          this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\r\n        }\r\n        else if (backDelete) {\r\n          // detect differencies between forwardDelete and backDelete\r\n          this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\r\n        }\r\n        else {\r\n          this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\r\n        }\r\n      }\r\n      if (insertedText.length) {\r\n        if (fromPaste && insertedText.join('') === fabric.copiedText) {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\r\n        }\r\n        else {\r\n          this.insertNewStyleBlock(insertedText, this.selectionStart);\r\n        }\r\n      }\r\n      this.updateFromTextArea();\r\n      this.fire('changed');\r\n      if (this.canvas) {\r\n        this.canvas.fire('text:changed', { target: this });\r\n        this.canvas.requestRenderAll();\r\n      }\r\n    },\r\n    /**\r\n     * Composition start\r\n     */\r\n    onCompositionStart: function() {\r\n      this.inCompositionMode = true;\r\n    },\r\n\r\n    /**\r\n     * Composition end\r\n     */\r\n    onCompositionEnd: function() {\r\n      this.inCompositionMode = false;\r\n    },\r\n\r\n    // /**\r\n    //  * Composition update\r\n    //  */\r\n    onCompositionUpdate: function(e) {\r\n      this.compositionStart = e.target.selectionStart;\r\n      this.compositionEnd = e.target.selectionEnd;\r\n      this.updateTextareaPosition();\r\n    },\r\n\r\n    /**\r\n     * Copies selected text\r\n     * @param {Event} e Event object\r\n     */\r\n    copy: function() {\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        //do not cut-copy if no selection\r\n        return;\r\n      }\r\n\r\n      fabric.copiedText = this.getSelectedText();\r\n      fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\r\n      this._copyDone = true;\r\n    },\r\n\r\n    /**\r\n     * Pastes text\r\n     * @param {Event} e Event object\r\n     */\r\n    paste: function() {\r\n      this.fromPaste = true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @return {Object} Clipboard data object\r\n     */\r\n    _getClipboardData: function(e) {\r\n      return (e && e.clipboardData) || fabric.window.clipboardData;\r\n    },\r\n\r\n    /**\r\n     * Finds the width in pixels before the cursor on the same line\r\n     * @private\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @return {Number} widthBeforeCursor width before cursor\r\n     */\r\n    _getWidthBeforeCursor: function(lineIndex, charIndex) {\r\n      var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\r\n\r\n      if (charIndex > 0) {\r\n        bound = this.__charBounds[lineIndex][charIndex - 1];\r\n        widthBeforeCursor += bound.left + bound.width;\r\n      }\r\n      return widthBeforeCursor;\r\n    },\r\n\r\n    /**\r\n     * Gets start offset of a selection\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getDownCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      // if on last line, down cursor goes to end of line\r\n      if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\r\n        // move to the end of a text\r\n        return this._text.length - selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\r\n          textAfterCursor = this._textLines[lineIndex].slice(charIndex);\r\n      return textAfterCursor.length + indexOnOtherLine + 2;\r\n    },\r\n\r\n    /**\r\n     * private\r\n     * Helps finding if the offset should be counted from Start or End\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    _getSelectionForOffset: function(e, isRight) {\r\n      if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\r\n        return this.selectionEnd;\r\n      }\r\n      else {\r\n        return this.selectionStart;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @param {Event} e Event object\r\n     * @param {Boolean} isRight\r\n     * @return {Number}\r\n     */\r\n    getUpCursorOffset: function(e, isRight) {\r\n      var selectionProp = this._getSelectionForOffset(e, isRight),\r\n          cursorLocation = this.get2DCursorLocation(selectionProp),\r\n          lineIndex = cursorLocation.lineIndex;\r\n      if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\r\n        // if on first line, up cursor goes to start of line\r\n        return -selectionProp;\r\n      }\r\n      var charIndex = cursorLocation.charIndex,\r\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\r\n          indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\r\n          textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex);\r\n      // return a negative offset\r\n      return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length;\r\n    },\r\n\r\n    /**\r\n     * for a given width it founds the matching character.\r\n     * @private\r\n     */\r\n    _getIndexOnLine: function(lineIndex, width) {\r\n\r\n      var line = this._textLines[lineIndex],\r\n          lineLeftOffset = this._getLineLeftOffset(lineIndex),\r\n          widthOfCharsOnLine = lineLeftOffset,\r\n          indexOnLine = 0, charWidth, foundMatch;\r\n\r\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n        charWidth = this.__charBounds[lineIndex][j].width;\r\n        widthOfCharsOnLine += charWidth;\r\n        if (widthOfCharsOnLine > width) {\r\n          foundMatch = true;\r\n          var leftEdge = widthOfCharsOnLine - charWidth,\r\n              rightEdge = widthOfCharsOnLine,\r\n              offsetFromLeftEdge = Math.abs(leftEdge - width),\r\n              offsetFromRightEdge = Math.abs(rightEdge - width);\r\n\r\n          indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // reached end\r\n      if (!foundMatch) {\r\n        indexOnLine = line.length - 1;\r\n      }\r\n\r\n      return indexOnLine;\r\n    },\r\n\r\n\r\n    /**\r\n     * Moves cursor down\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorDown: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Down', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorUp: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorUpOrDown('Up', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up or down, fires the events\r\n     * @param {String} direction 'Up' or 'Down'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorUpOrDown: function(direction, e) {\r\n      // getUpCursorOffset\r\n      // getDownCursorOffset\r\n      var action = 'get' + direction + 'CursorOffset',\r\n          offset = this[action](e, this._selectionDirection === 'right');\r\n      if (e.shiftKey) {\r\n        this.moveCursorWithShift(offset);\r\n      }\r\n      else {\r\n        this.moveCursorWithoutShift(offset);\r\n      }\r\n      if (offset !== 0) {\r\n        this.setSelectionInBoundaries();\r\n        this.abortCursorAnimation();\r\n        this._currentCursorOpacity = 1;\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor with shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithShift: function(offset) {\r\n      var newSelection = this._selectionDirection === 'left'\r\n        ? this.selectionStart + offset\r\n        : this.selectionEnd + offset;\r\n      this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor up without shift\r\n     * @param {Number} offset\r\n     */\r\n    moveCursorWithoutShift: function(offset) {\r\n      if (offset < 0) {\r\n        this.selectionStart += offset;\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionEnd += offset;\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return offset !== 0;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorLeft: function(e) {\r\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Left', e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Boolean} true if a change happened\r\n     */\r\n    _move: function(e, prop, direction) {\r\n      var newValue;\r\n      if (e.altKey) {\r\n        newValue = this['findWordBoundary' + direction](this[prop]);\r\n      }\r\n      else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\r\n        newValue = this['findLineBoundary' + direction](this[prop]);\r\n      }\r\n      else {\r\n        this[prop] += direction === 'Left' ? -1 : 1;\r\n        return true;\r\n      }\r\n      if (typeof newValue !== undefined && this[prop] !== newValue) {\r\n        this[prop] = newValue;\r\n        return true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveLeft: function(e, prop) {\r\n      return this._move(e, prop, 'Left');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _moveRight: function(e, prop) {\r\n      return this._move(e, prop, 'Right');\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left without keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithoutShift: function(e) {\r\n      var change = true;\r\n      this._selectionDirection = 'left';\r\n\r\n      // only move cursor when there is no selection,\r\n      // otherwise we discard it, and leave cursor on same place\r\n      if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\r\n        change = this._moveLeft(e, 'selectionStart');\r\n\r\n      }\r\n      this.selectionEnd = this.selectionStart;\r\n      return change;\r\n    },\r\n\r\n    /**\r\n     * Moves cursor left while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorLeftWithShift: function(e) {\r\n      if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveLeft(e, 'selectionEnd');\r\n      }\r\n      else if (this.selectionStart !== 0){\r\n        this._selectionDirection = 'left';\r\n        return this._moveLeft(e, 'selectionStart');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRight: function(e) {\r\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\r\n        return;\r\n      }\r\n      this._moveCursorLeftOrRight('Right', e);\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right or Left, fires event\r\n     * @param {String} direction 'Left', 'Right'\r\n     * @param {Event} e Event object\r\n     */\r\n    _moveCursorLeftOrRight: function(direction, e) {\r\n      var actionName = 'moveCursor' + direction + 'With';\r\n      this._currentCursorOpacity = 1;\r\n\r\n      if (e.shiftKey) {\r\n        actionName += 'Shift';\r\n      }\r\n      else {\r\n        actionName += 'outShift';\r\n      }\r\n      if (this[actionName](e)) {\r\n        this.abortCursorAnimation();\r\n        this.initDelayedCursor();\r\n        this._fireSelectionChanged();\r\n        this._updateTextarea();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right while keeping selection\r\n     * @param {Event} e\r\n     */\r\n    moveCursorRightWithShift: function(e) {\r\n      if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\r\n        return this._moveRight(e, 'selectionStart');\r\n      }\r\n      else if (this.selectionEnd !== this._text.length) {\r\n        this._selectionDirection = 'right';\r\n        return this._moveRight(e, 'selectionEnd');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves cursor right without keeping selection\r\n     * @param {Event} e Event object\r\n     */\r\n    moveCursorRightWithoutShift: function(e) {\r\n      var changed = true;\r\n      this._selectionDirection = 'right';\r\n\r\n      if (this.selectionStart === this.selectionEnd) {\r\n        changed = this._moveRight(e, 'selectionStart');\r\n        this.selectionEnd = this.selectionStart;\r\n      }\r\n      else {\r\n        this.selectionStart = this.selectionEnd;\r\n      }\r\n      return changed;\r\n    },\r\n\r\n    /**\r\n     * Removes characters from start/end\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    removeChars: function(start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start + 1;\r\n      }\r\n      this.removeStyleFromTo(start, end);\r\n      this._text.splice(start, end - start);\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n    /**\r\n     * insert characters at start position, before start position.\r\n     * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\r\n     * if style array is provided, it must be as the same length of text in graphemes\r\n     * if end is provided and is bigger than start, old text is replaced.\r\n     * start/end ar per grapheme position in _text array.\r\n     *\r\n     * @param {String} text text to insert\r\n     * @param {Array} style array of style objects\r\n     * @param {Number} start\r\n     * @param {Number} end default to start + 1\r\n     */\r\n    insertChars: function(text, style, start, end) {\r\n      if (typeof end === 'undefined') {\r\n        end = start;\r\n      }\r\n      if (end > start) {\r\n        this.removeStyleFromTo(start, end);\r\n      }\r\n      var graphemes = fabric.util.string.graphemeSplit(text);\r\n      this.insertNewStyleBlock(graphemes, start, style);\r\n      this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\r\n      this.text = this._text.join('');\r\n      this.set('dirty', true);\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      this._removeExtraneousStyles();\r\n    },\r\n\r\n  });\r\n\r\n\r\n  /* _TO_SVG_START_ */\r\n  (function() {\r\n    var toFixed = fabric.util.toFixed,\r\n        multipleSpacesRegex = /  +/g;\r\n\r\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n\r\n      /**\r\n       * Returns SVG representation of an instance\r\n       * @param {Function} [reviver] Method for further parsing of svg representation.\r\n       * @return {String} svg representation of an instance\r\n       */\r\n      toSVG: function(reviver) {\r\n        var markup = this._createBaseSVGMarkup(),\r\n            offsets = this._getSVGLeftTopOffsets(),\r\n            textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\r\n        this._wrapSVGTextAndBg(markup, textAndBg);\r\n\r\n        return reviver ? reviver(markup.join('')) : markup.join('');\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLeftTopOffsets: function() {\r\n        return {\r\n          textLeft: -this.width / 2,\r\n          textTop: -this.height / 2,\r\n          lineTop: this.getHeightOfLine(0)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _wrapSVGTextAndBg: function(markup, textAndBg) {\r\n        var noShadow = true, filter = this.getSvgFilter(),\r\n            style = filter === '' ? '' : ' style=\"' + filter + '\"',\r\n            textDecoration = this.getSvgTextDecoration(this);\r\n        markup.push(\r\n          '\\t<g ', this.getSvgId(), 'transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\"',\r\n          style, '>\\n',\r\n          textAndBg.textBgRects.join(''),\r\n          '\\t\\t<text xml:space=\"preserve\" ',\r\n          (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\r\n          (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\r\n          (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\r\n          (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\r\n          (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\r\n          'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\r\n          textAndBg.textSpans.join(''),\r\n          '</text>\\n',\r\n          '\\t</g>\\n'\r\n        );\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * @param {Number} textTopOffset Text top offset\r\n       * @param {Number} textLeftOffset Text left offset\r\n       * @return {Object}\r\n       */\r\n      _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\r\n        var textSpans = [],\r\n            textBgRects = [],\r\n            height = textTopOffset, lineOffset;\r\n        // bounding-box background\r\n        this._setSVGBg(textBgRects);\r\n\r\n        // text and text-background\r\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n          lineOffset = this._getLineLeftOffset(i);\r\n          if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\r\n            this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\r\n          }\r\n          this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\r\n          height += this.getHeightOfLine(i);\r\n        }\r\n\r\n        return {\r\n          textSpans: textSpans,\r\n          textBgRects: textBgRects\r\n        };\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _createTextCharSpan: function(_char, styleDecl, left, top) {\r\n        var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\r\n            styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\r\n            fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\r\n            dy = styleDecl.deltaY, dySpan = '',\r\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        if (dy) {\r\n          dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\r\n        }\r\n        return [\r\n          '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\r\n          fillStyles, '>',\r\n          fabric.util.string.escapeXml(_char),\r\n          '</tspan>'\r\n        ].join('');\r\n      },\r\n\r\n      _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\r\n        // set proper line offset\r\n        var lineHeight = this.getHeightOfLine(lineIndex),\r\n            isJustify = this.textAlign.indexOf('justify') !== -1,\r\n            actualStyle,\r\n            nextStyle,\r\n            charsToRender = '',\r\n            charBox, style,\r\n            boxWidth = 0,\r\n            line = this._textLines[lineIndex],\r\n            timeToRender;\r\n\r\n        textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\r\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n          timeToRender = i === len || this.charSpacing;\r\n          charsToRender += line[i];\r\n          charBox = this.__charBounds[lineIndex][i];\r\n          if (boxWidth === 0) {\r\n            textLeftOffset += charBox.kernedWidth - charBox.width;\r\n            boxWidth += charBox.width;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n          if (isJustify && !timeToRender) {\r\n            if (this._reSpaceAndTab.test(line[i])) {\r\n              timeToRender = true;\r\n            }\r\n          }\r\n          if (!timeToRender) {\r\n            // if we have charSpacing, we render char by char\r\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n            timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\r\n          }\r\n          if (timeToRender) {\r\n            style = this._getStyleDeclaration(lineIndex, i) || { };\r\n            textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\r\n            charsToRender = '';\r\n            actualStyle = nextStyle;\r\n            textLeftOffset += boxWidth;\r\n            boxWidth = 0;\r\n          }\r\n        }\r\n      },\r\n\r\n      _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\r\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\r\n        textBgRects.push(\r\n          '\\t\\t<rect ',\r\n          this._getFillAttributes(color),\r\n          ' x=\"',\r\n          toFixed(left, NUM_FRACTION_DIGITS),\r\n          '\" y=\"',\r\n          toFixed(top, NUM_FRACTION_DIGITS),\r\n          '\" width=\"',\r\n          toFixed(width, NUM_FRACTION_DIGITS),\r\n          '\" height=\"',\r\n          toFixed(height, NUM_FRACTION_DIGITS),\r\n          '\"></rect>\\n');\r\n      },\r\n\r\n      _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\r\n        var line = this._textLines[i],\r\n            heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\r\n            boxWidth = 0,\r\n            boxStart = 0,\r\n            charBox, currentColor,\r\n            lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n          charBox = this.__charBounds[i][j];\r\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n          if (currentColor !== lastColor) {\r\n            lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\r\n              textTopOffset, boxWidth, heightOfLine);\r\n            boxStart = charBox.left;\r\n            boxWidth = charBox.width;\r\n            lastColor = currentColor;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n        }\r\n        currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\r\n          textTopOffset, boxWidth, heightOfLine);\r\n      },\r\n\r\n      /**\r\n       * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\r\n       * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\r\n       *\r\n       * @private\r\n       * @param {*} value\r\n       * @return {String}\r\n       */\r\n      _getFillAttributes: function(value) {\r\n        var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\r\n        if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\r\n          return 'fill=\"' + value + '\"';\r\n        }\r\n        return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _getSVGLineTopOffset: function(lineIndex) {\r\n        var lineTopOffset = 0, lastHeight = 0;\r\n        for (var j = 0; j < lineIndex; j++) {\r\n          lineTopOffset += this.getHeightOfLine(j);\r\n        }\r\n        lastHeight = this.getHeightOfLine(j);\r\n        return {\r\n          lineTop: lineTopOffset,\r\n          offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\r\n        };\r\n      },\r\n\r\n      /**\r\n       * Returns styles-string for svg-export\r\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\r\n       * @return {String}\r\n       */\r\n      getSvgStyles: function(skipShadow) {\r\n        var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\r\n        return svgStyle + ' white-space: pre;';\r\n      },\r\n    });\r\n  })();\r\n  /* _TO_SVG_END_ */\r\n\r\n\r\n  (function(global) {\r\n\r\n    'use strict';\r\n\r\n    //var fabric = global.fabric || (global.fabric = {});\r\n\r\n    /**\r\n     * Textbox class, based on IText, allows the user to resize the text rectangle\r\n     * and wraps lines automatically. Textboxes have their Y scaling locked, the\r\n     * user can only change width. Height is adjusted automatically based on the\r\n     * wrapping of lines.\r\n     * @class fabric.Textbox\r\n     * @extends fabric.IText\r\n     * @mixes fabric.Observable\r\n     * @return {fabric.Textbox} thisArg\r\n     * @see {@link fabric.Textbox#initialize} for constructor definition\r\n     */\r\n    fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\r\n\r\n      /**\r\n       * Type of an object\r\n       * @type String\r\n       * @default\r\n       */\r\n      type: 'textbox',\r\n\r\n      /**\r\n       * Minimum width of textbox, in pixels.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      minWidth: 20,\r\n\r\n      /**\r\n       * Minimum calculated width of a textbox, in pixels.\r\n       * fixed to 2 so that an empty textbox cannot go to 0\r\n       * and is still selectable without text.\r\n       * @type Number\r\n       * @default\r\n       */\r\n      dynamicMinWidth: 2,\r\n\r\n      /**\r\n       * Cached array of text wrapping.\r\n       * @type Array\r\n       */\r\n      __cachedLines: null,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       */\r\n      lockScalingFlip: true,\r\n\r\n      /**\r\n       * Override standard Object class values\r\n       * Textbox needs this on false\r\n       */\r\n      noScaleCache: false,\r\n\r\n      /**\r\n       * Properties which when set cause object to change dimensions\r\n       * @type Object\r\n       * @private\r\n       */\r\n      _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\r\n\r\n      /**\r\n       * Unlike superclass's version of this function, Textbox does not update\r\n       * its width.\r\n       * @private\r\n       * @override\r\n       */\r\n      initDimensions: function() {\r\n        if (this.__skipDimension) {\r\n          return;\r\n        }\r\n        this.isEditing && this.initDelayedCursor();\r\n        this.clearContextTop();\r\n        this._clearCache();\r\n        // clear dynamicMinWidth as it will be different after we re-wrap line\r\n        this.dynamicMinWidth = 0;\r\n        // wrap lines\r\n        this._styleMap = this._generateStyleMap(this._splitText());\r\n        // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\r\n        if (this.dynamicMinWidth > this.width) {\r\n          this._set('width', this.dynamicMinWidth);\r\n        }\r\n        if (this.textAlign.indexOf('justify') !== -1) {\r\n          // once text is measured we need to make space fatter to make justified text.\r\n          this.enlargeSpaces();\r\n        }\r\n        // clear cache and re-calculate height\r\n        this.height = this.calcTextHeight();\r\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n      },\r\n\r\n      /**\r\n       * Generate an object that translates the style object so that it is\r\n       * broken up by visual lines (new lines and automatic wrapping).\r\n       * The original text styles object is broken up by actual lines (new lines only),\r\n       * which is only sufficient for Text / IText\r\n       * @private\r\n       */\r\n      _generateStyleMap: function(textInfo) {\r\n        var realLineCount     = 0,\r\n            realLineCharCount = 0,\r\n            charCount         = 0,\r\n            map               = {};\r\n\r\n        for (var i = 0; i < textInfo.graphemeLines.length; i++) {\r\n          if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\r\n            realLineCharCount = 0;\r\n            charCount++;\r\n            realLineCount++;\r\n          }\r\n          else if (this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\r\n            // this case deals with space's that are removed from end of lines when wrapping\r\n            realLineCharCount++;\r\n            charCount++;\r\n          }\r\n\r\n          map[i] = { line: realLineCount, offset: realLineCharCount };\r\n\r\n          charCount += textInfo.graphemeLines[i].length;\r\n          realLineCharCount += textInfo.graphemeLines[i].length;\r\n        }\r\n\r\n        return map;\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has a style property or has it ina specified line\r\n       * @param {Number} lineIndex\r\n       * @return {Boolean}\r\n       */\r\n      styleHas: function(property, lineIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (map) {\r\n            lineIndex = map.line;\r\n          }\r\n        }\r\n        return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\r\n      },\r\n\r\n      /**\r\n       * Returns true if object has no styling or no styling in a line\r\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n       * @return {Boolean}\r\n       */\r\n      isEmptyStyles: function(lineIndex) {\r\n        var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false;\r\n        var map = this._styleMap[lineIndex];\r\n        var mapNextLine = this._styleMap[lineIndex + 1];\r\n        if (map) {\r\n          lineIndex = map.line;\r\n          offset = map.offset;\r\n        }\r\n        if (mapNextLine) {\r\n          nextLineIndex = mapNextLine.line;\r\n          shouldLimit = nextLineIndex === lineIndex;\r\n          nextOffset = mapNextLine.offset;\r\n        }\r\n        obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n        for (var p1 in obj) {\r\n          for (var p2 in obj[p1]) {\r\n            if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\r\n              // eslint-disable-next-line no-unused-vars\r\n              for (var p3 in obj[p1][p2]) {\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _getStyleDeclaration: function(lineIndex, charIndex) {\r\n        if (this._styleMap && !this.isWrapping) {\r\n          var map = this._styleMap[lineIndex];\r\n          if (!map) {\r\n            return null;\r\n          }\r\n          lineIndex = map.line;\r\n          charIndex = map.offset + charIndex;\r\n        }\r\n        return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n\r\n        this.styles[lineIndex][charIndex] = style;\r\n      },\r\n\r\n      /**\r\n       * @param {Number} lineIndex\r\n       * @param {Number} charIndex\r\n       * @private\r\n       */\r\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        lineIndex = map.line;\r\n        charIndex = map.offset + charIndex;\r\n\r\n        delete this.styles[lineIndex][charIndex];\r\n      },\r\n\r\n      /**\r\n      * probably broken need a fix\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _getLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        return this.styles[map.line];\r\n      },\r\n\r\n      /**\r\n       * probably broken need a fix\r\n       * @param {Number} lineIndex\r\n       * @param {Object} style\r\n       * @private\r\n       */\r\n      _setLineStyle: function(lineIndex, style) {\r\n        var map = this._styleMap[lineIndex];\r\n        this.styles[map.line] = style;\r\n      },\r\n\r\n      /**\r\n       * probably broken need a fix\r\n       * @param {Number} lineIndex\r\n       * @private\r\n       */\r\n      _deleteLineStyle: function(lineIndex) {\r\n        var map = this._styleMap[lineIndex];\r\n        delete this.styles[map.line];\r\n      },\r\n\r\n      /**\r\n       * Wraps text using the 'width' property of Textbox. First this function\r\n       * splits text on newlines, so we preserve newlines entered by the user.\r\n       * Then it wraps each line using the width of the Textbox by calling\r\n       * _wrapLine().\r\n       * @param {Array} lines The string array of text that is split into lines\r\n       * @param {Number} desiredWidth width you want to wrap to\r\n       * @returns {Array} Array of lines\r\n       */\r\n      _wrapText: function(lines, desiredWidth) {\r\n        var wrapped = [], i;\r\n        this.isWrapping = true;\r\n        for (i = 0; i < lines.length; i++) {\r\n          wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\r\n        }\r\n        this.isWrapping = false;\r\n        return wrapped;\r\n      },\r\n\r\n      /**\r\n       * Helper function to measure a string of text, given its lineIndex and charIndex offset\r\n       * it gets called when charBounds are not available yet.\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {String} text\r\n       * @param {number} lineIndex\r\n       * @param {number} charOffset\r\n       * @returns {number}\r\n       * @private\r\n       */\r\n      _measureWord: function(word, lineIndex, charOffset) {\r\n        var width = 0, prevGrapheme, skipLeft = true;\r\n        charOffset = charOffset || 0;\r\n        for (var i = 0, len = word.length; i < len; i++) {\r\n          var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\r\n          width += box.kernedWidth;\r\n          prevGrapheme = word[i];\r\n        }\r\n        return width;\r\n      },\r\n\r\n      /**\r\n       * Wraps a line of text using the width of the Textbox and a context.\r\n       * @param {Array} line The grapheme array that represent the line\r\n       * @param {Number} lineIndex\r\n       * @param {Number} desiredWidth width you want to wrap the line to\r\n       * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\r\n       * @returns {Array} Array of line(s) into which the given text is wrapped\r\n       * to.\r\n       */\r\n      _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\r\n        var lineWidth        = 0,\r\n            graphemeLines    = [],\r\n            line             = [],\r\n            // spaces in different languges?\r\n            words            = _line.split(this._reSpaceAndTab),\r\n            word             = '',\r\n            offset           = 0,\r\n            infix            = ' ',\r\n            wordWidth        = 0,\r\n            infixWidth       = 0,\r\n            largestWordWidth = 0,\r\n            lineJustStarted = true,\r\n            additionalSpace = this._getWidthOfCharSpacing(),\r\n            reservedSpace = reservedSpace || 0;\r\n\r\n        desiredWidth -= reservedSpace;\r\n        for (var i = 0; i < words.length; i++) {\r\n          // i would avoid resplitting the graphemes\r\n          word = fabric.util.string.graphemeSplit(words[i]);\r\n          wordWidth = this._measureWord(word, lineIndex, offset);\r\n          offset += word.length;\r\n\r\n          lineWidth += infixWidth + wordWidth - additionalSpace;\r\n\r\n          if (lineWidth >= desiredWidth && !lineJustStarted) {\r\n            graphemeLines.push(line);\r\n            line = [];\r\n            lineWidth = wordWidth;\r\n            lineJustStarted = true;\r\n          }\r\n          else {\r\n            lineWidth += additionalSpace;\r\n          }\r\n\r\n          if (!lineJustStarted) {\r\n            line.push(infix);\r\n          }\r\n          line = line.concat(word);\r\n\r\n          infixWidth = this._measureWord([infix], lineIndex, offset);\r\n          offset++;\r\n          lineJustStarted = false;\r\n          // keep track of largest word\r\n          if (wordWidth > largestWordWidth) {\r\n            largestWordWidth = wordWidth;\r\n          }\r\n        }\r\n\r\n        i && graphemeLines.push(line);\r\n\r\n        if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\r\n          this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\r\n        }\r\n\r\n        return graphemeLines;\r\n      },\r\n\r\n      /**\r\n       * Detect if the text line is ended with an hard break\r\n       * text and itext do not have wrapping, return false\r\n       * @param {Number} lineIndex text to split\r\n       * @return {Boolean}\r\n       */\r\n      isEndOfWrapping: function(lineIndex) {\r\n        if (!this._styleMap[lineIndex + 1]) {\r\n          // is last line, return true;\r\n          return true;\r\n        }\r\n        if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\r\n          // this is last line before a line break, return true;\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n\r\n      /**\r\n      * Gets lines of text to render in the Textbox. This function calculates\r\n      * text wrapping on the fly every time it is called.\r\n      * @param {String} text text to split\r\n      * @returns {Array} Array of lines in the Textbox.\r\n      * @override\r\n      */\r\n      _splitTextIntoLines: function(text) {\r\n        var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\r\n            graphemeLines = this._wrapText(newText.lines, this.width),\r\n            lines = new Array(graphemeLines.length);\r\n\r\n        for (var i = 0; i < graphemeLines.length; i++) {\r\n          lines[i] = graphemeLines[i].join('');\r\n        }\r\n        newText.lines = lines;\r\n        newText.graphemeLines = graphemeLines;\r\n        return newText;\r\n      },\r\n\r\n      getMinWidth: function() {\r\n        return Math.max(this.minWidth, this.dynamicMinWidth);\r\n      },\r\n\r\n      /**\r\n       * Returns object representation of an instance\r\n       * @method toObject\r\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n       * @return {Object} object representation of an instance\r\n       */\r\n      toObject: function(propertiesToInclude) {\r\n        return this.callSuper('toObject', ['minWidth'].concat(propertiesToInclude));\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Returns fabric.Textbox instance from an object representation\r\n     * @static\r\n     * @memberOf fabric.Textbox\r\n     * @param {Object} object Object to create an instance from\r\n     * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\r\n     */\r\n    fabric.Textbox.fromObject = function(object, callback) {\r\n      return fabric.Object._fromObject('Textbox', object, callback, 'text');\r\n    };\r\n  })(typeof exports !== 'undefined' ? exports : this);\r\n\r\n\r\n  (function() {\r\n\r\n    /**\r\n     * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\r\n     * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\r\n     */\r\n    var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\r\n\r\n    fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\r\n      lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\r\n\r\n      var t = transform.target;\r\n      if (by === 'x' && t instanceof fabric.Textbox) {\r\n        var tw = t._getTransformedDimensions().x;\r\n        var w = t.width * (localMouse.x / tw);\r\n        if (w >= t.getMinWidth()) {\r\n          t.set('width', w);\r\n          return true;\r\n        }\r\n      }\r\n      else {\r\n        return setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\r\n          lockScalingX, lockScalingY, by, lockScalingFlip, _dim);\r\n      }\r\n    };\r\n\r\n    fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\r\n      /**\r\n       * @private\r\n       */\r\n      _removeExtraneousStyles: function() {\r\n        for (var prop in this._styleMap) {\r\n          if (!this._textLines[prop]) {\r\n            delete this.styles[this._styleMap[prop].line];\r\n          }\r\n        }\r\n      },\r\n\r\n    });\r\n\r\n  })();\r\n\r\n  return fabric;\r\n});\r\n\r\n\ndefine('skylark-graphics-canvas2d/Canvas',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Canvas = fabric.Canvas;\r\n});\ndefine('skylark-graphics-canvas2d/Circle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Circle = fabric.Circle;\r\n});\ndefine('skylark-graphics-canvas2d/Color',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Color = fabric.Color;\r\n});\ndefine('skylark-graphics-canvas2d/Ellipse',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Ellipse = fabric.Ellipse;\r\n});\ndefine('skylark-graphics-canvas2d/Group',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Group = fabric.Group;\r\n});\ndefine('skylark-graphics-canvas2d/Image',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Image = fabric.Image;\r\n});\ndefine('skylark-graphics-canvas2d/Line',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Line = fabric.Line;\r\n});\ndefine('skylark-graphics-canvas2d/Object',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n\tfabric.Object.remove = function() {\r\n        return this.canvas.remove(this);\r\n    };\r\n    \r\n    return canvas2d.Object = fabric.Object;\r\n});\ndefine('skylark-graphics-canvas2d/Path',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Path = fabric.Path;\r\n});\ndefine('skylark-graphics-canvas2d/Point',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Point = fabric.Point;\r\n});\ndefine('skylark-graphics-canvas2d/Polygon',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polygon = fabric.Polygon;\r\n});\ndefine('skylark-graphics-canvas2d/Polyline',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polyline = fabric.Polyline;\r\n});\ndefine('skylark-graphics-canvas2d/Rect',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Rect = fabric.Rect;\r\n});\ndefine('skylark-graphics-canvas2d/Text',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Text = fabric.Text;\r\n});\ndefine('skylark-graphics-canvas2d/Triangle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Triangle = fabric.Triangle;\r\n});\ndefine('skylark-graphics-canvas2d/util',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.util = fabric.util;\r\n});\ndefine('skylark-graphics-canvas2d/main',[\r\n    \"./canvas2d\",\r\n    \"./Canvas\",\r\n    \"./Circle\",\r\n    \"./Color\",\r\n    \"./Ellipse\",\r\n    \"./Group\",\r\n    \"./Image\",\r\n    \"./Line\",\r\n    \"./Object\",\r\n    \"./Path\",\r\n    \"./Point\",\r\n    \"./Polygon\",\r\n    \"./Polyline\",\r\n    \"./Rect\",\r\n    \"./Text\",\r\n    \"./Triangle\",\r\n    \"./util\"\r\n], function(canvas2d) {\r\n    return canvas2d;\r\n});\r\n\ndefine('skylark-graphics-canvas2d', ['skylark-graphics-canvas2d/main'], function (main) { return main; });\n\n"]}