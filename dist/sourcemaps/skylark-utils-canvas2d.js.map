{"version":3,"sources":["skylark-utils-canvas2d.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","canvas2d","resizeCanvasIfNeeded","pipelineState","targetCanvas","width","height","dWidth","destinationWidth","dHeight","destinationHeight","copyGLTo2DDrawImage","gl","glCanvas","canvas","ctx","getContext","translate","scale","sourceY","drawImage","copyGLTo2DPutImageData","numBytes","u8","Uint8Array","this","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","fabric","version","document","jsdom","decodeURIComponent","features","FetchExternalResources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","defaultView","DOMParser","isTouchSupported","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","fontPaths","iMatrix","canvasModule","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","prop","on","stopObserving","call","fire","options","listenersForEvent","len","filter","value","Observable","off","trigger","Collection","_objects","add","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","obj","_set","key","get","toggle","global","sqrt","Math","atan2","pow","abs","PiBy180","PI","PiBy2","cos","angle","angleSlice","sin","sign","removeFromArray","idx","getRandomInt","min","max","floor","random","degreesToRadians","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","rx","ry","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","xPoints","minX","maxX","yPoints","minY","maxY","left","top","invertTransform","a","r","toFixed","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","klass","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","x2","y2","da","dx","dy","rot","dc","di","draw","save","moveTo","rotate","restore","createCanvasElement","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","customTransformMatrix","skewMatrixX","tan","scaleMatrix","resetObjectTransform","target","flipX","flipY","saveObjectTransform","fn","String","match","isTransparent","tolerance","temp","_isTransparent","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","arcToSegments","toX","toY","large","sweep","rotateX","argsString","_join","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","result","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","Array","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","invoke","method","byProperty","find","value1","value2","k","condition","extend","deep","Element","clone","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","getWholeChar","str","code","charCodeAt","isNaN","next","prev","Subclass","callSuper","methodName","parentMethod","_this","constructor","superclass","superClassMethod","createClass","initialize","parent","shift","subclasses","addMethods","emptyFunction","IS_DONTENUM_BUGGY","returnValue","valueOf","areHostMethods","methodNames","test","createListener","uid","wrappedHandler","createWrappedHandler","e","getElement","event","createDispatcher","handlers","handlersForEvent","getPointer","element","srcElement","unknown","scroll","getScrollLeftTop","pointerX","pointerY","_getPointer","pageProp","clientProp","pointer","touchProp","eventTouchProp","setElement","getUniqueId","__uniqueID","addListener","removeListener","shouldUseAddListenerRemoveListener","documentElement","shouldUseAttachEventDetachEvent","listeners","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","clientX","clientY","setStyle","styles","elementStyle","cssText","setOpacity","normalizedProperty","styleFloat","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","es","currentStyle","hasLayout","zoom","getById","getElementById","makeElement","tagName","el","className","htmlFor","setAttribute","addClass","wrapElement","wrapper","replaceChild","docElement","body","scrollLeft","scrollTop","host","nodeType","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","attr","parseInt","getElementStyle","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","sliceCanConvertNodelists","_slice","toArray","arrayLike","childNodes","err","arr","getComputedStyle","undefined","makeElementUnselectable","onselectstart","selectProp","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","addParamToUrl","param","emptyFn","request","onComplete","xhr","makeXHR","parameters","open","setRequestHeader","send","factories","XMLHttpRequest","ActiveXObject","req","warn","noop","animate","requestAnimFrame","timestamp","time","start","Date","duration","finish","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","_requestAnimFrame","cancelAnimFrame","_cancelAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","clearTimeout","calculateColor","begin","end","pos","color","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","posValue","colorEasing","normalize","asin","elastic","opts","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","normalizeAttr","attributesMap","normalizeValue","parentAttributes","parsed","isArray","n","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","getSvgRegex","RegExp","_setStrokeFillOpacity","colorAttributes","setAlpha","getAlpha","toRgba","_getMultipleNodes","nodeNames","nodeName","nodeList","nodeArray","parseStyleString","oStyle","chunk","pair","trim","parseStyleObject","getGlobalStylesForElement","svgUid","rule","cssRules","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","doesSomeParentMatch","selector","matcher","classNames","getAttribute","elementById","node","nodelist","parseUseDirectives","attrs","xlink","substr","el2","cloneNode","currentTrans","oldLength","applyViewboxTransform","el3","nodeValue","firstChild","removeAttribute","viewBoxWidth","viewBoxHeight","matrix","viewBoxAttr","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","svgViewBoxElementsRegEx","reViewBoxAttrValue","missingDimAttr","toBeParsed","parsedDim","translateMatrix","widthDiff","heightDiff","hasAncestorWithNodeName","svgValidTagNames","svgViewBoxElements","svgInvalidAncestors","svgValidParents","display","visibility","transform","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","letter-spacing","paint-order","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","stroke","svgValidTagNamesRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","gradientDefs","rotateMatrix","multiplierX","multiplierY","skewMatrix","commaWsp","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","combinedMatrix","parseSVGDocument","parsingOptions","__uid","descendants","selectNodes","getGradientDefs","getCSSRules","parseElements","instances","reFontDeclaration","parseFontDeclaration","fontStyle","fontWeight","lineHeight","tagArray","elList","idsToXlinkMap","parseAttributes","ownAttributes","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","ElementsParser","parse","parsePointsAttribute","parsedPoints","rules","allRules","styleContents","textContent","text","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","numElements","createObjects","_obj","createObject","fromElement","_createObject","checkIfDone","createCallback","resolveGradient","Image","_removeTransformMatrix","instanceFillValue","gradientId","lastIndex","createAccessors","propName","capitalizedPropName","setterName","getterName","proto","stateProperties","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherAlpha","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","colorAlpha","keyValuePairs","getLinearCoords","getRadialCoords","_convertPercentUnitsToValues","gradientUnits","propValue","addFactor","multFactor","ellipseMatrix","scaleFactor","offsetX","offsetY","gradientTransform","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","sort","pathOffset","reverse","minRadius","maxRadius","percentageShift","colorStop","toLive","gradient","createLinearGradient","createRadialGradient","instance","colorStopEls","forObject","repeat","patternTransform","setOptions","NUM_FRACTION_DIGITS","toDataURL","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","BLUR_BOX","StaticCanvas","CANVAS_INIT_ERROR","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","canvasEl","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","ignoreVpt","skipAbsolute","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","_renderOverlay","render","_renderBackgroundOrOverlay","fillStyle","fillRect","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","setPositionByOrigin","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","excludeFromExport","_toObject","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","row","rowIndex","_char","charIndex","fontList","_setSVGObject","finalWidth","finalHeight","sendToBack","objs","activeSelection","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","contextTop","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","needsFullRender","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","lineTo","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","translateToGivenOrigin","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","PatternBrush","getPatternSrc","dotDistance","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","STROKE_OFFSET","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","getActiveObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","xy","ignoreZoom","_normalizePointer","_findTargetCorner","calcTransformMatrix","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","shouldCache","_cacheCanvas","normalizedPointer","targetRelativeX","cacheTranslationX","zoomX","targetRelativeY","cacheTranslationY","zoomY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","selectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","_setupCurrentTransform","ex","ey","lastX","lastY","theta","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","0","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByOrigin","constraintPosition","actualMouseByCenter","toLocalPoint","lastMouseByCenter","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","changeX","changeY","forbidScalingX","forbidScalingY","_scaleObjectEqually","newScaleX","newScaleY","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","targets","_searchPossibleTargets","_checkTarget","isEditing","subTarget","subTargetCheck","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","bottom","right","lowerCanvasClass","_copyCanvasStyle","class","touch-action","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_hoveredTarget","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","layoutProps","originalValues","realizeTransform","clearContextTop","_setCursorFromEvent","checkClick","which","button","cursorOffset","mr","mb","ml","RIGHT_CLICK","MIDDLE_CLICK","LEFT_CLICK","addEventOptions","passive","cursorMap","_bindEvents","addOrRemove","functor","eventjsFunctor","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","hiddenTextarea","focus","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","__onMouseDown","__onMouseUp","__onMouseMove","_shouldRender","isMoving","_previousPointer","isClick","_target","_onMouseUpInDrawingMode","_finalizeCurrentTransform","shouldRender","_maybeGroupObjects","__corner","eventType","subTargets","absolutePointer","_scaling","actionPerformed","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","shouldGroup","_shouldGroup","_handleGrouping","saveState","touches","_transformObject","_fireOverOutEvents","fireSynteticInOutEvents","targetName","canvasEvtOut","evtOut","canvasEvtIn","evtIn","config","inOpt","outOpt","outFires","inFires","oldTarget","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","supportQuality","format","quality","multiplier","cropping","__toDataURLWithMultiplier","origWidth","origHeight","scaledWidth","scaledHeight","newZoom","vp","newVp","originalInteractive","originalSkipOffScreen","needsResize","__toDataURL","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","ALIASING_LIMIT","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","fillRule","globalCompositeOperation","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","dirty","paintFirst","cacheProperties","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","_getNonTransformedDimensions","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","sizeShrinking","setTransform","_transformDone","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","isCacheDirty","propertySet","drawObject","drawCacheOnCanvas","_removeCacheCanvas","needsItsOwnCache","ownCaching","willDrawShadow","_setStrokeStyles","_setFillStyles","skipCanvas","_removeShadow","decl","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","dataUrl","origParams","withoutTransform","boundingRect","getBoundingRect","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","extraParam","originXOffset","originYOffset","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","getCoords","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","calculate","calcCoords","pointTL","pointBR","intersection","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","w","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","_setCornerCoords","transformMatrixKey","sep","prefix","cache","dimensionMatrix","_calcDimensionsTransformMatrix","flipping","bbox","dimX","dimY","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","term","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgId","getSvgTransform","translatePart","anglePart","scalePart","skewXPart","skewYPart","flipXPart","flipYPart","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","addPaintOrder","saveProps","props","tmpObj","_isEqual","origValue","currentValue","firstPass","keys","originalSet","dashedPropertySet","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","from","valueProgress","timeProgress","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","coordProps","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","_callback","isValidRadius","pi","startAngle","endAngle","setRadius","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","calcDim","_calcDimensions","diffX","diffY","commonRender","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","_parseDimensions","_renderPathCommands","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","chunks","addTransform","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","pathUrl","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","objsToObject","originalDefaults","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","toGroup","newGroup","childrenOverride","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","removeTexture","_originalElement","_initConfig","resizeFilter","applyResizeFilters","applyFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","clipPath","clipPathId","imageMarkup","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","sW","sH","elementToDraw","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","testPrecision","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","webGlPrecision","resources","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","startTime","drawImageTime","putImageDataTime","testContext","now","copyGLTo2D","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","originalWidth","originalHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","applyFiltersDebug","ret","glError","getError","NO_ERROR","errorString","glErrorToString","glErrorCode","errorCode","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","ext","getExtension","renderer","vendor","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","distance","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","mult","doneW","doneH","stepW","stepH","sX","sY","dX","dY","process","u","weight","fX","fY","ratioX","icenter","ratioY","range2X","cacheLanc","range2Y","lanczos","rcpRatioX","rcpRatioY","srcData","destData","destImg","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","nSamples","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThird","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","lineTopOffset","originalFill","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","char","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","numOfSpaces","lineBounds","_getGraphemeBox","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","isJustify","charsToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","lineHeightDiff","scaledDiff","textHeight","offX","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","lineOffset","realLineHeight","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPostion","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","styleObj","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLenght","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","9","27","33","34","35","36","37","38","39","40","ctrlKeysMapUp","67","88","ctrlKeysMapDown","65","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","removedText","nextText","charCount","nextCharCount","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","textAfterCursor","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","multipleSpacesRegex","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","noShadow","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","svgStyle","Textbox","minWidth","dynamicMinWidth","__cachedLines","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","infix","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","getMinWidth","setObjectScaleOverridden","tw"],"mappings":"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","file":"../skylark-utils-canvas2d.js","sourcesContent":["define('skylark-utils-canvas2d/canvas2d',[\r\n    \"skylark-utils/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.canvas2d = skylark.canvas2d || {};\r\n});\ndefine('skylark-utils-canvas2d/primitives/fabric',[], function() { \n  var fabric = fabric || { version: '2.3.6' };\n  if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n    fabric.document = document;\n    fabric.window = window;\n  }\n  else {\n    // assume we're running under node.js when document/window are not present\n    fabric.document = require('jsdom')\n      .jsdom(\n        decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\n        { features: {\n          FetchExternalResources: ['img']\n        }\n        });\n    fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\n    fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\n    fabric.window = fabric.document.defaultView;\n    DOMParser = require('xmldom').DOMParser;\n  }\n\n  /**\n   * True when in environment that supports touch events\n   * @type boolean\n   */\n  fabric.isTouchSupported = 'ontouchstart' in fabric.window;\n\n  /**\n   * True when in environment that's probably Node.js\n   * @type boolean\n   */\n  fabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                        typeof window === 'undefined';\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Attributes parsed from all SVG elements\n   * @type array\n   */\n  fabric.SHARED_ATTRIBUTES = [\n    \"display\",\n    \"transform\",\n    \"fill\", \"fill-opacity\", \"fill-rule\",\n    \"opacity\",\n    \"stroke\", \"stroke-dasharray\", \"stroke-linecap\",\n    \"stroke-linejoin\", \"stroke-miterlimit\",\n    \"stroke-opacity\", \"stroke-width\",\n    \"id\", \"paint-order\",\n    \"instantiated_by_use\"\n  ];\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  fabric.DPI = 96;\n  fabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\n  fabric.fontPaths = { };\n  fabric.iMatrix = [1, 0, 0, 1, 0, 0];\n  fabric.canvasModule = 'canvas';\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  fabric.perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  fabric.maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  fabric.minCacheSideLimit = 256;\n\n  /**\n   * Cache Object for widths of chars in text rendering.\n   */\n  fabric.charWidthsCache = { };\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  fabric.textureSize = 2048;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  fabric.enableGLFiltering = true;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  fabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                            fabric.window.webkitDevicePixelRatio ||\n                            fabric.window.mozDevicePixelRatio ||\n                            1;\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  fabric.browserShadowBlurConstant = 1;\n\n  /**\n   * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  fabric.arcToSegmentsCache = { };\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  fabric.boundsOfCurveCache = { };\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * @default true\n   */\n  fabric.cachesBoundsOfCurve = true;\n\n  fabric.initFilterBackend = function() {\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n      console.log('max texture size: ' + fabric.maxTextureSize);\n      return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\n    }\n    else if (fabric.Canvas2dFilterBackend) {\n      return (new fabric.Canvas2dFilterBackend());\n    }\n  };\n\n\n  //if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  //  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n  //  window.fabric = fabric;\n  //}\n\n\n  (function() {\n\n    /**\n     * @private\n     * @param {String} eventName\n     * @param {Function} handler\n     */\n    function _removeEventListener(eventName, handler) {\n      if (!this.__eventListeners[eventName]) {\n        return;\n      }\n      var eventListener = this.__eventListeners[eventName];\n      if (handler) {\n        eventListener[eventListener.indexOf(handler)] = false;\n      }\n      else {\n        fabric.util.array.fill(eventListener, false);\n      }\n    }\n\n    /**\n     * Observes specified event\n     * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n     * @memberOf fabric.Observable\n     * @alias on\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n     * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n     * @return {Self} thisArg\n     * @chainable\n     */\n    function observe(eventName, handler) {\n      if (!this.__eventListeners) {\n        this.__eventListeners = { };\n      }\n      // one object with key/value pairs was passed\n      if (arguments.length === 1) {\n        for (var prop in eventName) {\n          this.on(prop, eventName[prop]);\n        }\n      }\n      else {\n        if (!this.__eventListeners[eventName]) {\n          this.__eventListeners[eventName] = [];\n        }\n        this.__eventListeners[eventName].push(handler);\n      }\n      return this;\n    }\n\n    /**\n     * Stops event observing for a particular event handler. Calling this method\n     * without arguments removes all handlers for all events\n     * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n     * @memberOf fabric.Observable\n     * @alias off\n     * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n     * @param {Function} handler Function to be deleted from EventListeners\n     * @return {Self} thisArg\n     * @chainable\n     */\n    function stopObserving(eventName, handler) {\n      if (!this.__eventListeners) {\n        return;\n      }\n\n      // remove all key/value pairs (event name -> event handler)\n      if (arguments.length === 0) {\n        for (eventName in this.__eventListeners) {\n          _removeEventListener.call(this, eventName);\n        }\n      }\n      // one object with key/value pairs was passed\n      else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n        for (var prop in eventName) {\n          _removeEventListener.call(this, prop, eventName[prop]);\n        }\n      }\n      else {\n        _removeEventListener.call(this, eventName, handler);\n      }\n      return this;\n    }\n\n    /**\n     * Fires event with an optional options object\n     * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n     * @memberOf fabric.Observable\n     * @alias trigger\n     * @param {String} eventName Event name to fire\n     * @param {Object} [options] Options object\n     * @return {Self} thisArg\n     * @chainable\n     */\n    function fire(eventName, options) {\n      if (!this.__eventListeners) {\n        return;\n      }\n\n      var listenersForEvent = this.__eventListeners[eventName];\n      if (!listenersForEvent) {\n        return;\n      }\n\n      for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n        listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\n      }\n      this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n        return value !== false;\n      });\n      return this;\n    }\n\n    /**\n     * @namespace fabric.Observable\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n     * @see {@link http://fabricjs.com/events|Events demo}\n     */\n    fabric.Observable = {\n      observe: observe,\n      stopObserving: stopObserving,\n      fire: fire,\n\n      on: observe,\n      off: stopObserving,\n      trigger: fire\n    };\n  })();\n\n\n  /**\n   * @namespace fabric.Collection\n   */\n  fabric.Collection = {\n\n    _objects: [],\n\n    /**\n     * Adds objects to collection, Canvas or Group, then renders canvas\n     * (if `renderOnAddRemove` is not `false`).\n     * in case of Group no changes to bounding box are made.\n     * Objects should be instances of (or inherit from) fabric.Object\n     * Use of this function is highly discouraged for groups.\n     * you can add a bunch of objects with the add method but then you NEED\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n     * @param {...fabric.Object} object Zero or more fabric instances\n     * @return {Self} thisArg\n     * @chainable\n     */\n    add: function () {\n      this._objects.push.apply(this._objects, arguments);\n      if (this._onObjectAdded) {\n        for (var i = 0, length = arguments.length; i < length; i++) {\n          this._onObjectAdded(arguments[i]);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * An object should be an instance of (or inherit from) fabric.Object\n     * Use of this function is highly discouraged for groups.\n     * you can add a bunch of objects with the insertAt method but then you NEED\n     * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n     * @param {Object} object Object to insert\n     * @param {Number} index Index to insert object at\n     * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n     * @return {Self} thisArg\n     * @chainable\n     */\n    insertAt: function (object, index, nonSplicing) {\n      var objects = this._objects;\n      if (nonSplicing) {\n        objects[index] = object;\n      }\n      else {\n        objects.splice(index, 0, object);\n      }\n      this._onObjectAdded && this._onObjectAdded(object);\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @param {...fabric.Object} object Zero or more fabric instances\n     * @return {Self} thisArg\n     * @chainable\n     */\n    remove: function() {\n      var objects = this._objects,\n          index, somethingRemoved = false;\n\n      for (var i = 0, length = arguments.length; i < length; i++) {\n        index = objects.indexOf(arguments[i]);\n\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          somethingRemoved = true;\n          objects.splice(index, 1);\n          this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n        }\n      }\n\n      this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Executes given function for each object in this group\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     *                   Callback is invoked in a context of Global Object (e.g. `window`)\n     *                   when no `context` argument is given\n     *\n     * @param {Object} context Context (aka thisObject)\n     * @return {Self} thisArg\n     * @chainable\n     */\n    forEachObject: function(callback, context) {\n      var objects = this.getObjects();\n      for (var i = 0, len = objects.length; i < len; i++) {\n        callback.call(context, objects[i], i, objects);\n      }\n      return this;\n    },\n\n    /**\n     * Returns an array of children objects of this instance\n     * Type parameter introduced in 1.3.10\n     * since 2.3.5 this method return always a COPY of the array;\n     * @param {String} [type] When specified, only objects of this type are returned\n     * @return {Array}\n     */\n    getObjects: function(type) {\n      if (typeof type === 'undefined') {\n        return this._objects.concat();\n      }\n      return this._objects.filter(function(o) {\n        return o.type === type;\n      });\n    },\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Self} thisArg\n     */\n    item: function (index) {\n      return this._objects[index];\n    },\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty: function () {\n      return this._objects.length === 0;\n    },\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size: function() {\n      return this._objects.length;\n    },\n\n    /**\n     * Returns true if collection contains an object\n     * @param {Object} object Object to check against\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains: function(object) {\n      return this._objects.indexOf(object) > -1;\n    },\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity: function () {\n      return this._objects.reduce(function (memo, current) {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n  };\n\n\n  /**\n   * @namespace fabric.CommonMethods\n   */\n  fabric.CommonMethods = {\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    _setOptions: function(options) {\n      for (var prop in options) {\n        this.set(prop, options[prop]);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [filler] Options object\n     * @param {String} [property] property to set the Gradient to\n     */\n    _initGradient: function(filler, property) {\n      if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n        this.set(property, new fabric.Gradient(filler));\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [filler] Options object\n     * @param {String} [property] property to set the Pattern to\n     * @param {Function} [callback] callback to invoke after pattern load\n     */\n    _initPattern: function(filler, property, callback) {\n      if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n        this.set(property, new fabric.Pattern(filler, callback));\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initClipping: function(options) {\n      if (!options.clipTo || typeof options.clipTo !== 'string') {\n        return;\n      }\n\n      var functionBody = fabric.util.getFunctionBody(options.clipTo);\n      if (typeof functionBody !== 'undefined') {\n        this.clipTo = new Function('ctx', functionBody);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setObject: function(obj) {\n      for (var prop in obj) {\n        this._set(prop, obj[prop]);\n      }\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      if (typeof key === 'object') {\n        this._setObject(key);\n      }\n      else {\n        if (typeof value === 'function' && key !== 'clipTo') {\n          this._set(key, value(this.get(key)));\n        }\n        else {\n          this._set(key, value);\n        }\n      }\n      return this;\n    },\n\n    _set: function(key, value) {\n      this[key] = value;\n    },\n\n    /**\n     * Toggles specified property from `true` to `false` or from `false` to `true`\n     * @param {String} property Property to toggle\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    toggle: function(property) {\n      var value = this.get(property);\n      if (typeof value === 'boolean') {\n        this.set(property, !value);\n      }\n      return this;\n    },\n\n    /**\n     * Basic getter\n     * @param {String} property Property name\n     * @return {*} value of a property\n     */\n    get: function(property) {\n      return this[property];\n    }\n  };\n\n\n  (function(global) {\n\n    var sqrt = Math.sqrt,\n        atan2 = Math.atan2,\n        pow = Math.pow,\n        abs = Math.abs,\n        PiBy180 = Math.PI / 180,\n        PiBy2 = Math.PI / 2;\n\n    /**\n     * @namespace fabric.util\n     */\n    fabric.util = {\n\n      /**\n       * Calculate the cos of an angle, avoiding returning floats for known results\n       * @static\n       * @memberOf fabric.util\n       * @param {Number} angle the angle in radians or in degree\n       * @return {Number}\n       */\n      cos: function(angle) {\n        if (angle === 0) { return 1; }\n        if (angle < 0) {\n          // cos(a) = cos(-a)\n          angle = -angle;\n        }\n        var angleSlice = angle / PiBy2;\n        switch (angleSlice) {\n          case 1: case 3: return 0;\n          case 2: return -1;\n        }\n        return Math.cos(angle);\n      },\n\n      /**\n       * Calculate the sin of an angle, avoiding returning floats for known results\n       * @static\n       * @memberOf fabric.util\n       * @param {Number} angle the angle in radians or in degree\n       * @return {Number}\n       */\n      sin: function(angle) {\n        if (angle === 0) { return 0; }\n        var angleSlice = angle / PiBy2, sign = 1;\n        if (angle < 0) {\n          // sin(-a) = -sin(a)\n          sign = -1;\n        }\n        switch (angleSlice) {\n          case 1: return sign;\n          case 2: return 0;\n          case 3: return -sign;\n        }\n        return Math.sin(angle);\n      },\n\n      /**\n       * Removes value from an array.\n       * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n       * @static\n       * @memberOf fabric.util\n       * @param {Array} array\n       * @param {*} value\n       * @return {Array} original array\n       */\n      removeFromArray: function(array, value) {\n        var idx = array.indexOf(value);\n        if (idx !== -1) {\n          array.splice(idx, 1);\n        }\n        return array;\n      },\n\n      /**\n       * Returns random number between 2 specified ones.\n       * @static\n       * @memberOf fabric.util\n       * @param {Number} min lower limit\n       * @param {Number} max upper limit\n       * @return {Number} random value (between min and max)\n       */\n      getRandomInt: function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      },\n\n      /**\n       * Transforms degrees to radians.\n       * @static\n       * @memberOf fabric.util\n       * @param {Number} degrees value in degrees\n       * @return {Number} value in radians\n       */\n      degreesToRadians: function(degrees) {\n        return degrees * PiBy180;\n      },\n\n      /**\n       * Transforms radians to degrees.\n       * @static\n       * @memberOf fabric.util\n       * @param {Number} radians value in radians\n       * @return {Number} value in degrees\n       */\n      radiansToDegrees: function(radians) {\n        return radians / PiBy180;\n      },\n\n      /**\n       * Rotates `point` around `origin` with `radians`\n       * @static\n       * @memberOf fabric.util\n       * @param {fabric.Point} point The point to rotate\n       * @param {fabric.Point} origin The origin of the rotation\n       * @param {Number} radians The radians of the angle for the rotation\n       * @return {fabric.Point} The new rotated point\n       */\n      rotatePoint: function(point, origin, radians) {\n        point.subtractEquals(origin);\n        var v = fabric.util.rotateVector(point, radians);\n        return new fabric.Point(v.x, v.y).addEquals(origin);\n      },\n\n      /**\n       * Rotates `vector` with `radians`\n       * @static\n       * @memberOf fabric.util\n       * @param {Object} vector The vector to rotate (x and y)\n       * @param {Number} radians The radians of the angle for the rotation\n       * @return {Object} The new rotated point\n       */\n      rotateVector: function(vector, radians) {\n        var sin = fabric.util.sin(radians),\n            cos = fabric.util.cos(radians),\n            rx = vector.x * cos - vector.y * sin,\n            ry = vector.x * sin + vector.y * cos;\n        return {\n          x: rx,\n          y: ry\n        };\n      },\n\n      /**\n       * Apply transform t to point p\n       * @static\n       * @memberOf fabric.util\n       * @param  {fabric.Point} p The point to transform\n       * @param  {Array} t The transform\n       * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n       * @return {fabric.Point} The transformed point\n       */\n      transformPoint: function(p, t, ignoreOffset) {\n        if (ignoreOffset) {\n          return new fabric.Point(\n            t[0] * p.x + t[2] * p.y,\n            t[1] * p.x + t[3] * p.y\n          );\n        }\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y + t[4],\n          t[1] * p.x + t[3] * p.y + t[5]\n        );\n      },\n\n      /**\n       * Returns coordinates of points's bounding rectangle (left, top, width, height)\n       * @param {Array} points 4 points array\n       * @return {Object} Object with left, top, width, height properties\n       */\n      makeBoundingBoxFromPoints: function(points) {\n        var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\n            minX = fabric.util.array.min(xPoints),\n            maxX = fabric.util.array.max(xPoints),\n            width = maxX - minX,\n            yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\n            minY = fabric.util.array.min(yPoints),\n            maxY = fabric.util.array.max(yPoints),\n            height = maxY - minY;\n\n        return {\n          left: minX,\n          top: minY,\n          width: width,\n          height: height\n        };\n      },\n\n      /**\n       * Invert transformation t\n       * @static\n       * @memberOf fabric.util\n       * @param {Array} t The transform\n       * @return {Array} The inverted transform\n       */\n      invertTransform: function(t) {\n        var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n            r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n            o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n        r[4] = -o.x;\n        r[5] = -o.y;\n        return r;\n      },\n\n      /**\n       * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n       * @static\n       * @memberOf fabric.util\n       * @param {Number|String} number number to operate on\n       * @param {Number} fractionDigits number of fraction digits to \"leave\"\n       * @return {Number}\n       */\n      toFixed: function(number, fractionDigits) {\n        return parseFloat(Number(number).toFixed(fractionDigits));\n      },\n\n      /**\n       * Converts from attribute value to pixel value if applicable.\n       * Returns converted pixels or original value not converted.\n       * @param {Number|String} value number to operate on\n       * @param {Number} fontSize\n       * @return {Number|String}\n       */\n      parseUnit: function(value, fontSize) {\n        var unit = /\\D{0,2}$/.exec(value),\n            number = parseFloat(value);\n        if (!fontSize) {\n          fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n        }\n        switch (unit[0]) {\n          case 'mm':\n            return number * fabric.DPI / 25.4;\n\n          case 'cm':\n            return number * fabric.DPI / 2.54;\n\n          case 'in':\n            return number * fabric.DPI;\n\n          case 'pt':\n            return number * fabric.DPI / 72; // or * 4 / 3\n\n          case 'pc':\n            return number * fabric.DPI / 72 * 12; // or * 16\n\n          case 'em':\n            return number * fontSize;\n\n          default:\n            return number;\n        }\n      },\n\n      /**\n       * Function which always returns `false`.\n       * @static\n       * @memberOf fabric.util\n       * @return {Boolean}\n       */\n      falseFunction: function() {\n        return false;\n      },\n\n      /**\n       * Returns klass \"Class\" object of given namespace\n       * @memberOf fabric.util\n       * @param {String} type Type of object (eg. 'circle')\n       * @param {String} namespace Namespace to get klass \"Class\" object from\n       * @return {Object} klass \"Class\"\n       */\n      getKlass: function(type, namespace) {\n        // capitalize first letter only\n        type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n        return fabric.util.resolveNamespace(namespace)[type];\n      },\n\n      /**\n       * Returns array of attributes for given svg that fabric parses\n       * @memberOf fabric.util\n       * @param {String} type Type of svg element (eg. 'circle')\n       * @return {Array} string names of supported attributes\n       */\n      getSvgAttributes: function(type) {\n        var attributes = [\n          'instantiated_by_use',\n          'style',\n          'id',\n          'class'\n        ];\n        switch (type) {\n          case 'linearGradient':\n            attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\n            break;\n          case 'radialGradient':\n            attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\n            break;\n          case 'stop':\n            attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\n            break;\n        }\n        return attributes;\n      },\n\n      /**\n       * Returns object of given namespace\n       * @memberOf fabric.util\n       * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n       * @return {Object} Object for given namespace (default fabric)\n       */\n      resolveNamespace: function(namespace) {\n        if (!namespace) {\n          return fabric;\n        }\n\n        var parts = namespace.split('.'),\n            len = parts.length, i,\n            obj = global || fabric.window;\n\n        for (i = 0; i < len; ++i) {\n          obj = obj[parts[i]];\n        }\n\n        return obj;\n      },\n\n      /**\n       * Loads image element from given url and passes it to a callback\n       * @memberOf fabric.util\n       * @param {String} url URL representing an image\n       * @param {Function} callback Callback; invoked with loaded image\n       * @param {*} [context] Context to invoke callback in\n       * @param {Object} [crossOrigin] crossOrigin value to set image element to\n       */\n      loadImage: function(url, callback, context, crossOrigin) {\n        if (!url) {\n          callback && callback.call(context, url);\n          return;\n        }\n\n        var img = fabric.util.createImage();\n\n        /** @ignore */\n        var onLoadCallback = function () {\n          callback && callback.call(context, img);\n          img = img.onload = img.onerror = null;\n        };\n\n        img.onload = onLoadCallback;\n        /** @ignore */\n        img.onerror = function() {\n          fabric.log('Error loading ' + img.src);\n          callback && callback.call(context, null, true);\n          img = img.onload = img.onerror = null;\n        };\n\n        // data-urls appear to be buggy with crossOrigin\n        // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n        // see https://code.google.com/p/chromium/issues/detail?id=315152\n        //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n        if (url.indexOf('data') !== 0 && crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        // IE10 / IE11-Fix: SVG contents from data: URI\n        // will only be available if the IMG is present\n        // in the DOM (and visible)\n        if (url.substring(0,14) === 'data:image/svg') {\n          img.onload = null;\n          fabric.util.loadImageInDom(img, onLoadCallback);\n        }\n\n        img.src = url;\n      },\n\n      /**\n       * Attaches SVG image with data: URL to the dom\n       * @memberOf fabric.util\n       * @param {Object} img Image object with data:image/svg src\n       * @param {Function} callback Callback; invoked with loaded image\n       * @return {Object} DOM element (div containing the SVG image)\n       */\n      loadImageInDom: function(img, onLoadCallback) {\n        var div = fabric.document.createElement('div');\n        div.style.width = div.style.height = '1px';\n        div.style.left = div.style.top = '-100%';\n        div.style.position = 'absolute';\n        div.appendChild(img);\n        fabric.document.querySelector('body').appendChild(div);\n        /**\n         * Wrap in function to:\n         *   1. Call existing callback\n         *   2. Cleanup DOM\n         */\n        img.onload = function () {\n          onLoadCallback();\n          div.parentNode.removeChild(div);\n          div = null;\n        };\n      },\n\n      /**\n       * Creates corresponding fabric instances from their object representations\n       * @static\n       * @memberOf fabric.util\n       * @param {Array} objects Objects to enliven\n       * @param {Function} callback Callback to invoke when all objects are created\n       * @param {String} namespace Namespace to get klass \"Class\" object from\n       * @param {Function} reviver Method for further parsing of object elements,\n       * called after each fabric object created.\n       */\n      enlivenObjects: function(objects, callback, namespace, reviver) {\n        objects = objects || [];\n\n        function onLoaded() {\n          if (++numLoadedObjects === numTotalObjects) {\n            callback && callback(enlivenedObjects);\n          }\n        }\n\n        var enlivenedObjects = [],\n            numLoadedObjects = 0,\n            numTotalObjects = objects.length;\n\n        if (!numTotalObjects) {\n          callback && callback(enlivenedObjects);\n          return;\n        }\n\n        objects.forEach(function (o, index) {\n          // if sparse array\n          if (!o || !o.type) {\n            onLoaded();\n            return;\n          }\n          var klass = fabric.util.getKlass(o.type, namespace);\n          klass.fromObject(o, function (obj, error) {\n            error || (enlivenedObjects[index] = obj);\n            reviver && reviver(o, obj, error);\n            onLoaded();\n          });\n        });\n      },\n\n      /**\n       * Create and wait for loading of patterns\n       * @static\n       * @memberOf fabric.util\n       * @param {Array} patterns Objects to enliven\n       * @param {Function} callback Callback to invoke when all objects are created\n       * called after each fabric object created.\n       */\n      enlivenPatterns: function(patterns, callback) {\n        patterns = patterns || [];\n\n        function onLoaded() {\n          if (++numLoadedPatterns === numPatterns) {\n            callback && callback(enlivenedPatterns);\n          }\n        }\n\n        var enlivenedPatterns = [],\n            numLoadedPatterns = 0,\n            numPatterns = patterns.length;\n\n        if (!numPatterns) {\n          callback && callback(enlivenedPatterns);\n          return;\n        }\n\n        patterns.forEach(function (p, index) {\n          if (p && p.source) {\n            new fabric.Pattern(p, function(pattern) {\n              enlivenedPatterns[index] = pattern;\n              onLoaded();\n            });\n          }\n          else {\n            enlivenedPatterns[index] = p;\n            onLoaded();\n          }\n        });\n      },\n\n      /**\n       * Groups SVG elements (usually those retrieved from SVG document)\n       * @static\n       * @memberOf fabric.util\n       * @param {Array} elements SVG elements to group\n       * @param {Object} [options] Options object\n       * @param {String} path Value to set sourcePath to\n       * @return {fabric.Object|fabric.Group}\n       */\n      groupSVGElements: function(elements, options, path) {\n        var object;\n        if (elements.length === 1) {\n          return elements[0];\n        }\n        if (options) {\n          if (options.width && options.height) {\n            options.centerPoint = {\n              x: options.width / 2,\n              y: options.height / 2\n            };\n          }\n          else {\n            delete options.width;\n            delete options.height;\n          }\n        }\n        object = new fabric.Group(elements, options);\n        if (typeof path !== 'undefined') {\n          object.sourcePath = path;\n        }\n        return object;\n      },\n\n      /**\n       * Populates an object with properties of another object\n       * @static\n       * @memberOf fabric.util\n       * @param {Object} source Source object\n       * @param {Object} destination Destination object\n       * @return {Array} properties Properties names to include\n       */\n      populateWithProperties: function(source, destination, properties) {\n        if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n          for (var i = 0, len = properties.length; i < len; i++) {\n            if (properties[i] in source) {\n              destination[properties[i]] = source[properties[i]];\n            }\n          }\n        }\n      },\n\n      /**\n       * Draws a dashed line between two points\n       *\n       * This method is used to draw dashed line around selection area.\n       * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n       *\n       * @param {CanvasRenderingContext2D} ctx context\n       * @param {Number} x  start x coordinate\n       * @param {Number} y start y coordinate\n       * @param {Number} x2 end x coordinate\n       * @param {Number} y2 end y coordinate\n       * @param {Array} da dash array pattern\n       */\n      drawDashedLine: function(ctx, x, y, x2, y2, da) {\n        var dx = x2 - x,\n            dy = y2 - y,\n            len = sqrt(dx * dx + dy * dy),\n            rot = atan2(dy, dx),\n            dc = da.length,\n            di = 0,\n            draw = true;\n\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.moveTo(0, 0);\n        ctx.rotate(rot);\n\n        x = 0;\n        while (len > x) {\n          x += da[di++ % dc];\n          if (x > len) {\n            x = len;\n          }\n          ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n          draw = !draw;\n        }\n\n        ctx.restore();\n      },\n\n      /**\n       * Creates canvas element\n       * @static\n       * @memberOf fabric.util\n       * @return {CanvasElement} initialized canvas element\n       */\n      createCanvasElement: function() {\n        return fabric.document.createElement('canvas');\n      },\n\n      /**\n       * Creates image element (works on client and node)\n       * @static\n       * @memberOf fabric.util\n       * @return {HTMLImageElement} HTML image element\n       */\n      createImage: function() {\n        return fabric.document.createElement('img');\n      },\n\n      /**\n       * @static\n       * @memberOf fabric.util\n       * @deprecated since 2.0.0\n       * @param {fabric.Object} receiver Object implementing `clipTo` method\n       * @param {CanvasRenderingContext2D} ctx Context to clip\n       */\n      clipContext: function(receiver, ctx) {\n        ctx.save();\n        ctx.beginPath();\n        receiver.clipTo(ctx);\n        ctx.clip();\n      },\n\n      /**\n       * Multiply matrix A by matrix B to nest transformations\n       * @static\n       * @memberOf fabric.util\n       * @param  {Array} a First transformMatrix\n       * @param  {Array} b Second transformMatrix\n       * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n       * @return {Array} The product of the two transform matrices\n       */\n      multiplyTransformMatrices: function(a, b, is2x2) {\n        // Matrix multiply a * b\n        return [\n          a[0] * b[0] + a[2] * b[1],\n          a[1] * b[0] + a[3] * b[1],\n          a[0] * b[2] + a[2] * b[3],\n          a[1] * b[2] + a[3] * b[3],\n          is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n          is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n        ];\n      },\n\n      /**\n       * Decomposes standard 2x2 matrix into transform componentes\n       * @static\n       * @memberOf fabric.util\n       * @param  {Array} a transformMatrix\n       * @return {Object} Components of transform\n       */\n      qrDecompose: function(a) {\n        var angle = atan2(a[1], a[0]),\n            denom = pow(a[0], 2) + pow(a[1], 2),\n            scaleX = sqrt(denom),\n            scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\n            skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\n        return {\n          angle: angle  / PiBy180,\n          scaleX: scaleX,\n          scaleY: scaleY,\n          skewX: skewX / PiBy180,\n          skewY: 0,\n          translateX: a[4],\n          translateY: a[5]\n        };\n      },\n\n      customTransformMatrix: function(scaleX, scaleY, skewX) {\n        var skewMatrixX = [1, 0, abs(Math.tan(skewX * PiBy180)), 1],\n            scaleMatrix = [abs(scaleX), 0, 0, abs(scaleY)];\n        return fabric.util.multiplyTransformMatrices(scaleMatrix, skewMatrixX, true);\n      },\n\n      /**\n       * reset an object transform state to neutral. Top and left are not accounted for\n       * @static\n       * @memberOf fabric.util\n       * @param  {fabric.Object} target object to transform\n       */\n      resetObjectTransform: function (target) {\n        target.scaleX = 1;\n        target.scaleY = 1;\n        target.skewX = 0;\n        target.skewY = 0;\n        target.flipX = false;\n        target.flipY = false;\n        target.rotate(0);\n      },\n\n      /**\n       * Extract Object transform values\n       * @static\n       * @memberOf fabric.util\n       * @param  {fabric.Object} target object to read from\n       * @return {Object} Components of transform\n       */\n      saveObjectTransform: function (target) {\n        return {\n          scaleX: target.scaleX,\n          scaleY: target.scaleY,\n          skewX: target.skewX,\n          skewY: target.skewY,\n          angle: target.angle,\n          left: target.left,\n          flipX: target.flipX,\n          flipY: target.flipY,\n          top: target.top\n        };\n      },\n\n      /**\n       * Returns string representation of function body\n       * @param {Function} fn Function to get body of\n       * @return {String} Function body\n       */\n      getFunctionBody: function(fn) {\n        return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n      },\n\n      /**\n       * Returns true if context has transparent pixel\n       * at specified location (taking tolerance into account)\n       * @param {CanvasRenderingContext2D} ctx context\n       * @param {Number} x x coordinate\n       * @param {Number} y y coordinate\n       * @param {Number} tolerance Tolerance\n       */\n      isTransparent: function(ctx, x, y, tolerance) {\n\n        // If tolerance is > 0 adjust start coords to take into account.\n        // If moves off Canvas fix to 0\n        if (tolerance > 0) {\n          if (x > tolerance) {\n            x -= tolerance;\n          }\n          else {\n            x = 0;\n          }\n          if (y > tolerance) {\n            y -= tolerance;\n          }\n          else {\n            y = 0;\n          }\n        }\n\n        var _isTransparent = true, i, temp,\n            imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\n            l = imageData.data.length;\n\n        // Split image data - for tolerance > 1, pixelDataSize = 4;\n        for (i = 3; i < l; i += 4) {\n          temp = imageData.data[i];\n          _isTransparent = temp <= 0;\n          if (_isTransparent === false) {\n            break; // Stop if colour found\n          }\n        }\n\n        imageData = null;\n\n        return _isTransparent;\n      },\n\n      /**\n       * Parse preserveAspectRatio attribute from element\n       * @param {string} attribute to be parsed\n       * @return {Object} an object containing align and meetOrSlice attribute\n       */\n      parsePreserveAspectRatioAttribute: function(attribute) {\n        var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\n            aspectRatioAttrs = attribute.split(' '), align;\n\n        if (aspectRatioAttrs && aspectRatioAttrs.length) {\n          meetOrSlice = aspectRatioAttrs.pop();\n          if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n            align = meetOrSlice;\n            meetOrSlice = 'meet';\n          }\n          else if (aspectRatioAttrs.length) {\n            align = aspectRatioAttrs.pop();\n          }\n        }\n        //divide align in alignX and alignY\n        alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n        alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n        return {\n          meetOrSlice: meetOrSlice,\n          alignX: alignX,\n          alignY: alignY\n        };\n      },\n\n      /**\n       * Clear char widths cache for the given font family or all the cache if no\n       * fontFamily is specified.\n       * Use it if you know you are loading fonts in a lazy way and you are not waiting\n       * for custom fonts to load properly when adding text objects to the canvas.\n       * If a text object is added when its own font is not loaded yet, you will get wrong\n       * measurement and so wrong bounding boxes.\n       * After the font cache is cleared, either change the textObject text content or call\n       * initDimensions() to trigger a recalculation\n       * @memberOf fabric.util\n       * @param {String} [fontFamily] font family to clear\n       */\n      clearFabricFontCache: function(fontFamily) {\n        fontFamily = (fontFamily || '').toLowerCase();\n        if (!fontFamily) {\n          fabric.charWidthsCache = { };\n        }\n        else if (fabric.charWidthsCache[fontFamily]) {\n          delete fabric.charWidthsCache[fontFamily];\n        }\n      },\n\n      /**\n       * Given current aspect ratio, determines the max width and height that can\n       * respect the total allowed area for the cache.\n       * @memberOf fabric.util\n       * @param {Number} ar aspect ratio\n       * @param {Number} maximumArea Maximum area you want to achieve\n       * @return {Object.x} Limited dimensions by X\n       * @return {Object.y} Limited dimensions by Y\n       */\n      limitDimsByArea: function(ar, maximumArea) {\n        var roughWidth = Math.sqrt(maximumArea * ar),\n            perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n        return { x: Math.floor(roughWidth), y: perfLimitSizeY };\n      },\n\n      capValue: function(min, value, max) {\n        return Math.max(min, Math.min(value, max));\n      },\n\n      findScaleToFit: function(source, destination) {\n        return Math.min(destination.width / source.width, destination.height / source.height);\n      },\n\n      findScaleToCover: function(source, destination) {\n        return Math.max(destination.width / source.width, destination.height / source.height);\n      }\n    };\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function() {\n\n    var _join = Array.prototype.join;\n\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n     * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n     * http://mozilla.org/MPL/2.0/\n     */\n    function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n      var argsString = _join.call(arguments);\n      if (fabric.arcToSegmentsCache[argsString]) {\n        return fabric.arcToSegmentsCache[argsString];\n      }\n\n      var PI = Math.PI, th = rotateX * PI / 180,\n          sinTh = fabric.util.sin(th),\n          cosTh = fabric.util.cos(th),\n          fromX = 0, fromY = 0;\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n\n      var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n          py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n          rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n          pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n          root = 0;\n\n      if (pl < 0) {\n        var s = Math.sqrt(1 - pl / (rx2 * ry2));\n        rx *= s;\n        ry *= s;\n      }\n      else {\n        root = (large === sweep ? -1.0 : 1.0) *\n                Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\n      }\n\n      var cx = root * rx * py / ry,\n          cy = -root * ry * px / rx,\n          cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n          cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n          mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n          dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n      if (sweep === 0 && dtheta > 0) {\n        dtheta -= 2 * PI;\n      }\n      else if (sweep === 1 && dtheta < 0) {\n        dtheta += 2 * PI;\n      }\n\n      // Convert into cubic bezier segments <= 90deg\n      var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n          result = [], mDelta = dtheta / segments,\n          mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n          th3 = mTheta + mDelta;\n\n      for (var i = 0; i < segments; i++) {\n        result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n        fromX = result[i][4];\n        fromY = result[i][5];\n        mTheta = th3;\n        th3 += mDelta;\n      }\n      fabric.arcToSegmentsCache[argsString] = result;\n      return result;\n    }\n\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n      var costh2 = fabric.util.cos(th2),\n          sinth2 = fabric.util.sin(th2),\n          costh3 = fabric.util.cos(th3),\n          sinth3 = fabric.util.sin(th3),\n          toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n          toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n          cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\n          cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\n          cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n          cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n      return [\n        cp1X, cp1Y,\n        cp2X, cp2Y,\n        toX, toY\n      ];\n    }\n\n    /*\n     * Private\n     */\n    function calcVectorAngle(ux, uy, vx, vy) {\n      var ta = Math.atan2(uy, ux),\n          tb = Math.atan2(vy, vx);\n      if (tb >= ta) {\n        return tb - ta;\n      }\n      else {\n        return 2 * Math.PI - (ta - tb);\n      }\n    }\n\n    /**\n     * Draws arc\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Number} fx\n     * @param {Number} fy\n     * @param {Array} coords\n     */\n    fabric.util.drawArc = function(ctx, fx, fy, coords) {\n      var rx = coords[0],\n          ry = coords[1],\n          rot = coords[2],\n          large = coords[3],\n          sweep = coords[4],\n          tx = coords[5],\n          ty = coords[6],\n          segs = [[], [], [], []],\n          segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n      for (var i = 0, len = segsNorm.length; i < len; i++) {\n        segs[i][0] = segsNorm[i][0] + fx;\n        segs[i][1] = segsNorm[i][1] + fy;\n        segs[i][2] = segsNorm[i][2] + fx;\n        segs[i][3] = segsNorm[i][3] + fy;\n        segs[i][4] = segsNorm[i][4] + fx;\n        segs[i][5] = segsNorm[i][5] + fy;\n        ctx.bezierCurveTo.apply(ctx, segs[i]);\n      }\n    };\n\n    /**\n     * Calculate bounding box of a elliptic-arc\n     * @param {Number} fx start point of arc\n     * @param {Number} fy\n     * @param {Number} rx horizontal radius\n     * @param {Number} ry vertical radius\n     * @param {Number} rot angle of horizontal axe\n     * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n     * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n     * @param {Number} tx end point of arc\n     * @param {Number} ty\n     */\n    fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\n      var fromX = 0, fromY = 0, bound, bounds = [],\n          segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n      for (var i = 0, len = segs.length; i < len; i++) {\n        bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n        bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\n        bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\n        fromX = segs[i][4];\n        fromY = segs[i][5];\n      }\n      return bounds;\n    };\n\n    /**\n     * Calculate bounding box of a beziercurve\n     * @param {Number} x0 starting point\n     * @param {Number} y0\n     * @param {Number} x1 first control point\n     * @param {Number} y1\n     * @param {Number} x2 secondo control point\n     * @param {Number} y2\n     * @param {Number} x3 end of beizer\n     * @param {Number} y3\n     */\n    // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n      var argsString;\n      if (fabric.cachesBoundsOfCurve) {\n        argsString = _join.call(arguments);\n        if (fabric.boundsOfCurveCache[argsString]) {\n          return fabric.boundsOfCurveCache[argsString];\n        }\n      }\n\n      var sqrt = Math.sqrt,\n          min = Math.min, max = Math.max,\n          abs = Math.abs, tvalues = [],\n          bounds = [[], []],\n          a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n\n      for (var i = 0; i < 2; ++i) {\n        if (i > 0) {\n          b = 6 * y0 - 12 * y1 + 6 * y2;\n          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n          c = 3 * y1 - 3 * y0;\n        }\n\n        if (abs(a) < 1e-12) {\n          if (abs(b) < 1e-12) {\n            continue;\n          }\n          t = -c / b;\n          if (0 < t && t < 1) {\n            tvalues.push(t);\n          }\n          continue;\n        }\n        b2ac = b * b - 4 * c * a;\n        if (b2ac < 0) {\n          continue;\n        }\n        sqrtb2ac = sqrt(b2ac);\n        t1 = (-b + sqrtb2ac) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n          tvalues.push(t1);\n        }\n        t2 = (-b - sqrtb2ac) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n          tvalues.push(t2);\n        }\n      }\n\n      var x, y, j = tvalues.length, jlen = j, mt;\n      while (j--) {\n        t = tvalues[j];\n        mt = 1 - t;\n        x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n        bounds[0][j] = x;\n\n        y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        bounds[1][j] = y;\n      }\n\n      bounds[0][jlen] = x0;\n      bounds[1][jlen] = y0;\n      bounds[0][jlen + 1] = x3;\n      bounds[1][jlen + 1] = y3;\n      var result = [\n        {\n          x: min.apply(null, bounds[0]),\n          y: min.apply(null, bounds[1])\n        },\n        {\n          x: max.apply(null, bounds[0]),\n          y: max.apply(null, bounds[1])\n        }\n      ];\n      if (fabric.cachesBoundsOfCurve) {\n        fabric.boundsOfCurveCache[argsString] = result;\n      }\n      return result;\n    }\n\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\n  })();\n\n\n  (function() {\n\n    var slice = Array.prototype.slice;\n\n    /**\n     * Invokes method on all items in a given array\n     * @memberOf fabric.util.array\n     * @param {Array} array Array to iterate over\n     * @param {String} method Name of a method to invoke\n     * @return {Array}\n     */\n    function invoke(array, method) {\n      var args = slice.call(arguments, 2), result = [];\n      for (var i = 0, len = array.length; i < len; i++) {\n        result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n      }\n      return result;\n    }\n\n    /**\n     * Finds maximum value in array (not necessarily \"first\" one)\n     * @memberOf fabric.util.array\n     * @param {Array} array Array to iterate over\n     * @param {String} byProperty\n     * @return {*}\n     */\n    function max(array, byProperty) {\n      return find(array, byProperty, function(value1, value2) {\n        return value1 >= value2;\n      });\n    }\n\n    /**\n     * Finds minimum value in array (not necessarily \"first\" one)\n     * @memberOf fabric.util.array\n     * @param {Array} array Array to iterate over\n     * @param {String} byProperty\n     * @return {*}\n     */\n    function min(array, byProperty) {\n      return find(array, byProperty, function(value1, value2) {\n        return value1 < value2;\n      });\n    }\n\n    /**\n     * @private\n     */\n    function fill(array, value) {\n      var k = array.length;\n      while (k--) {\n        array[k] = value;\n      }\n      return array;\n    }\n\n    /**\n     * @private\n     */\n    function find(array, byProperty, condition) {\n      if (!array || array.length === 0) {\n        return;\n      }\n\n      var i = array.length - 1,\n          result = byProperty ? array[i][byProperty] : array[i];\n      if (byProperty) {\n        while (i--) {\n          if (condition(array[i][byProperty], result)) {\n            result = array[i][byProperty];\n          }\n        }\n      }\n      else {\n        while (i--) {\n          if (condition(array[i], result)) {\n            result = array[i];\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * @namespace fabric.util.array\n     */\n    fabric.util.array = {\n      fill: fill,\n      invoke: invoke,\n      min: min,\n      max: max\n    };\n\n  })();\n\n\n  (function() {\n    /**\n     * Copies all enumerable properties of one js object to another\n     * Does not clone or extend fabric.Object subclasses.\n     * @memberOf fabric.util.object\n     * @param {Object} destination Where to copy to\n     * @param {Object} source Where to copy from\n     * @return {Object}\n     */\n\n    function extend(destination, source, deep) {\n      // JScript DontEnum bug is not taken care of\n      // the deep clone is for internal use, is not meant to avoid\n      // javascript traps or cloning html element or self referenced objects.\n      if (deep) {\n        if (!fabric.isLikelyNode && source instanceof Element) {\n          // avoid cloning deep images, canvases,\n          destination = source;\n        }\n        else if (source instanceof Array) {\n          destination = [];\n          for (var i = 0, len = source.length; i < len; i++) {\n            destination[i] = extend({ }, source[i], deep);\n          }\n        }\n        else if (source && typeof source === 'object') {\n          for (var property in source) {\n            if (source.hasOwnProperty(property)) {\n              destination[property] = extend({ }, source[property], deep);\n            }\n          }\n        }\n        else {\n          // this sounds odd for an extend but is ok for recursive use\n          destination = source;\n        }\n      }\n      else {\n        for (var property in source) {\n          destination[property] = source[property];\n        }\n      }\n      return destination;\n    }\n\n    /**\n     * Creates an empty object and copies all enumerable properties of another object to it\n     * @memberOf fabric.util.object\n     * TODO: this function return an empty object if you try to clone null\n     * @param {Object} object Object to clone\n     * @return {Object}\n     */\n    function clone(object, deep) {\n      return extend({ }, object, deep);\n    }\n\n    /** @namespace fabric.util.object */\n    fabric.util.object = {\n      extend: extend,\n      clone: clone\n    };\n    fabric.util.object.extend(fabric.util, fabric.Observable);\n  })();\n\n\n  (function() {\n\n    /**\n     * Camelizes a string\n     * @memberOf fabric.util.string\n     * @param {String} string String to camelize\n     * @return {String} Camelized version of a string\n     */\n    function camelize(string) {\n      return string.replace(/-+(.)?/g, function(match, character) {\n        return character ? character.toUpperCase() : '';\n      });\n    }\n\n    /**\n     * Capitalizes a string\n     * @memberOf fabric.util.string\n     * @param {String} string String to capitalize\n     * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n     * and other letters stay untouched, if false first letter is capitalized\n     * and other letters are converted to lowercase.\n     * @return {String} Capitalized version of a string\n     */\n    function capitalize(string, firstLetterOnly) {\n      return string.charAt(0).toUpperCase() +\n        (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n    }\n\n    /**\n     * Escapes XML in a string\n     * @memberOf fabric.util.string\n     * @param {String} string String to escape\n     * @return {String} Escaped version of a string\n     */\n    function escapeXml(string) {\n      return string.replace(/&/g, '&amp;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n    }\n\n    /**\n     * Divide a string in the user perceived single units\n     * @memberOf fabric.util.string\n     * @param {String} textstring String to escape\n     * @return {Array} array containing the graphemes\n     */\n    function graphemeSplit(textstring) {\n      var i = 0, chr, graphemes = [];\n      for (i = 0, chr; i < textstring.length; i++) {\n        if ((chr = getWholeChar(textstring, i)) === false) {\n          continue;\n        }\n        graphemes.push(chr);\n      }\n      return graphemes;\n    }\n\n    // taken from mdn in the charAt doc page.\n    function getWholeChar(str, i) {\n      var code = str.charCodeAt(i);\n\n      if (isNaN(code)) {\n        return ''; // Position not found\n      }\n      if (code < 0xD800 || code > 0xDFFF) {\n        return str.charAt(i);\n      }\n\n      // High surrogate (could change last hex to 0xDB7F to treat high private\n      // surrogates as single characters)\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (str.length <= (i + 1)) {\n          throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i + 1);\n        if (0xDC00 > next || next > 0xDFFF) {\n          throw 'High surrogate without following low surrogate';\n        }\n        return str.charAt(i) + str.charAt(i + 1);\n      }\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n      if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n      }\n      var prev = str.charCodeAt(i - 1);\n\n      // (could change last hex to 0xDB7F to treat high private\n      // surrogates as single characters)\n      if (0xD800 > prev || prev > 0xDBFF) {\n        throw 'Low surrogate without preceding high surrogate';\n      }\n      // We can pass over low surrogates now as the second component\n      // in a pair which we have already processed\n      return false;\n    }\n\n\n    /**\n     * String utilities\n     * @namespace fabric.util.string\n     */\n    fabric.util.string = {\n      camelize: camelize,\n      capitalize: capitalize,\n      escapeXml: escapeXml,\n      graphemeSplit: graphemeSplit\n    };\n  })();\n\n\n  (function() {\n\n    var slice = Array.prototype.slice, emptyFunction = function() { },\n\n        IS_DONTENUM_BUGGY = (function() {\n          for (var p in { toString: 1 }) {\n            if (p === 'toString') {\n              return false;\n            }\n          }\n          return true;\n        })(),\n\n        /** @ignore */\n        addMethods = function(klass, source, parent) {\n          for (var property in source) {\n\n            if (property in klass.prototype &&\n                typeof klass.prototype[property] === 'function' &&\n                (source[property] + '').indexOf('callSuper') > -1) {\n\n              klass.prototype[property] = (function(property) {\n                return function() {\n\n                  var superclass = this.constructor.superclass;\n                  this.constructor.superclass = parent;\n                  var returnValue = source[property].apply(this, arguments);\n                  this.constructor.superclass = superclass;\n\n                  if (property !== 'initialize') {\n                    return returnValue;\n                  }\n                };\n              })(property);\n            }\n            else {\n              klass.prototype[property] = source[property];\n            }\n\n            if (IS_DONTENUM_BUGGY) {\n              if (source.toString !== Object.prototype.toString) {\n                klass.prototype.toString = source.toString;\n              }\n              if (source.valueOf !== Object.prototype.valueOf) {\n                klass.prototype.valueOf = source.valueOf;\n              }\n            }\n          }\n        };\n\n    function Subclass() { }\n\n    function callSuper(methodName) {\n      var parentMethod = null,\n          _this = this;\n\n      // climb prototype chain to find method not equal to callee's method\n      while (_this.constructor.superclass) {\n        var superClassMethod = _this.constructor.superclass.prototype[methodName];\n        if (_this[methodName] !== superClassMethod) {\n          parentMethod = superClassMethod;\n          break;\n        }\n        // eslint-disable-next-line\n        _this = _this.constructor.superclass.prototype;\n      }\n\n      if (!parentMethod) {\n        return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\n      }\n\n      return (arguments.length > 1)\n        ? parentMethod.apply(this, slice.call(arguments, 1))\n        : parentMethod.call(this);\n    }\n\n    /**\n     * Helper for creation of \"classes\".\n     * @memberOf fabric.util\n     * @param {Function} [parent] optional \"Class\" to inherit from\n     * @param {Object} [properties] Properties shared by all instances of this class\n     *                  (be careful modifying objects defined here as this would affect all instances)\n     */\n    function createClass() {\n      var parent = null,\n          properties = slice.call(arguments, 0);\n\n      if (typeof properties[0] === 'function') {\n        parent = properties.shift();\n      }\n      function klass() {\n        this.initialize.apply(this, arguments);\n      }\n\n      klass.superclass = parent;\n      klass.subclasses = [];\n\n      if (parent) {\n        Subclass.prototype = parent.prototype;\n        klass.prototype = new Subclass();\n        parent.subclasses.push(klass);\n      }\n      for (var i = 0, length = properties.length; i < length; i++) {\n        addMethods(klass, properties[i], parent);\n      }\n      if (!klass.prototype.initialize) {\n        klass.prototype.initialize = emptyFunction;\n      }\n      klass.prototype.constructor = klass;\n      klass.prototype.callSuper = callSuper;\n      return klass;\n    }\n\n    fabric.util.createClass = createClass;\n  })();\n\n\n  (function () {\n\n    var unknown = 'unknown';\n\n    /* EVENT HANDLING */\n\n    function areHostMethods(object) {\n      var methodNames = Array.prototype.slice.call(arguments, 1),\n          t, i, len = methodNames.length;\n      for (i = 0; i < len; i++) {\n        t = typeof object[methodNames[i]];\n        if (!(/^(?:function|object|unknown)$/).test(t)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /** @ignore */\n    var getElement,\n        setElement,\n        getUniqueId = (function () {\n          var uid = 0;\n          return function (element) {\n            return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n          };\n        })();\n\n    (function () {\n      var elements = { };\n      /** @ignore */\n      getElement = function (uid) {\n        return elements[uid];\n      };\n      /** @ignore */\n      setElement = function (uid, element) {\n        elements[uid] = element;\n      };\n    })();\n\n    function createListener(uid, handler) {\n      return {\n        handler: handler,\n        wrappedHandler: createWrappedHandler(uid, handler)\n      };\n    }\n\n    function createWrappedHandler(uid, handler) {\n      return function (e) {\n        handler.call(getElement(uid), e || fabric.window.event);\n      };\n    }\n\n    function createDispatcher(uid, eventName) {\n      return function (e) {\n        if (handlers[uid] && handlers[uid][eventName]) {\n          var handlersForEvent = handlers[uid][eventName];\n          for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n            handlersForEvent[i].call(this, e || fabric.window.event);\n          }\n        }\n      };\n    }\n\n    var shouldUseAddListenerRemoveListener = (\n          areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n          areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\n        shouldUseAttachEventDetachEvent = (\n          areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n          areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\n        // IE branch\n        listeners = { },\n\n        // DOM L0 branch\n        handlers = { },\n\n        addListener, removeListener;\n\n    if (shouldUseAddListenerRemoveListener) {\n      /** @ignore */\n      addListener = function (element, eventName, handler, options) {\n        // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\n        element && element.addEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n      };\n      /** @ignore */\n      removeListener = function (element, eventName, handler, options) {\n        element && element.removeEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n      };\n    }\n\n    else if (shouldUseAttachEventDetachEvent) {\n      /** @ignore */\n      addListener = function (element, eventName, handler) {\n        if (!element) {\n          return;\n        }\n        var uid = getUniqueId(element);\n        setElement(uid, element);\n        if (!listeners[uid]) {\n          listeners[uid] = { };\n        }\n        if (!listeners[uid][eventName]) {\n          listeners[uid][eventName] = [];\n\n        }\n        var listener = createListener(uid, handler);\n        listeners[uid][eventName].push(listener);\n        element.attachEvent('on' + eventName, listener.wrappedHandler);\n      };\n      /** @ignore */\n      removeListener = function (element, eventName, handler) {\n        if (!element) {\n          return;\n        }\n        var uid = getUniqueId(element), listener;\n        if (listeners[uid] && listeners[uid][eventName]) {\n          for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n            listener = listeners[uid][eventName][i];\n            if (listener && listener.handler === handler) {\n              element.detachEvent('on' + eventName, listener.wrappedHandler);\n              listeners[uid][eventName][i] = null;\n            }\n          }\n        }\n      };\n    }\n    else {\n      /** @ignore */\n      addListener = function (element, eventName, handler) {\n        if (!element) {\n          return;\n        }\n        var uid = getUniqueId(element);\n        if (!handlers[uid]) {\n          handlers[uid] = { };\n        }\n        if (!handlers[uid][eventName]) {\n          handlers[uid][eventName] = [];\n          var existingHandler = element['on' + eventName];\n          if (existingHandler) {\n            handlers[uid][eventName].push(existingHandler);\n          }\n          element['on' + eventName] = createDispatcher(uid, eventName);\n        }\n        handlers[uid][eventName].push(handler);\n      };\n      /** @ignore */\n      removeListener = function (element, eventName, handler) {\n        if (!element) {\n          return;\n        }\n        var uid = getUniqueId(element);\n        if (handlers[uid] && handlers[uid][eventName]) {\n          var handlersForEvent = handlers[uid][eventName];\n          for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n            if (handlersForEvent[i] === handler) {\n              handlersForEvent.splice(i, 1);\n            }\n          }\n        }\n      };\n    }\n\n    /**\n     * Adds an event listener to an element\n     * @function\n     * @memberOf fabric.util\n     * @param {HTMLElement} element\n     * @param {String} eventName\n     * @param {Function} handler\n     */\n    fabric.util.addListener = addListener;\n\n    /**\n     * Removes an event listener from an element\n     * @function\n     * @memberOf fabric.util\n     * @param {HTMLElement} element\n     * @param {String} eventName\n     * @param {Function} handler\n     */\n    fabric.util.removeListener = removeListener;\n\n    /**\n     * Cross-browser wrapper for getting event's coordinates\n     * @memberOf fabric.util\n     * @param {Event} event Event object\n     */\n    function getPointer(event) {\n      event || (event = fabric.window.event);\n\n      var element = event.target ||\n                    (typeof event.srcElement !== unknown ? event.srcElement : null),\n\n          scroll = fabric.util.getScrollLeftTop(element);\n      return {\n        x: pointerX(event) + scroll.left,\n        y: pointerY(event) + scroll.top\n      };\n    }\n\n    var pointerX = function(event) {\n          return event.clientX;\n        },\n\n        pointerY = function(event) {\n          return event.clientY;\n        };\n\n    function _getPointer(event, pageProp, clientProp) {\n      var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n      var pointer, eventTouchProp = event[touchProp];\n\n      if (eventTouchProp && eventTouchProp[0]) {\n        pointer = eventTouchProp[0][clientProp];\n      }\n\n      if (typeof pointer === 'undefined') {\n        pointer = event[clientProp];\n      }\n\n      return pointer;\n    }\n\n    if (fabric.isTouchSupported) {\n      pointerX = function(event) {\n        return _getPointer(event, 'pageX', 'clientX');\n      };\n      pointerY = function(event) {\n        return _getPointer(event, 'pageY', 'clientY');\n      };\n    }\n\n    fabric.util.getPointer = getPointer;\n\n  })();\n\n\n  (function () {\n\n    /**\n     * Cross-browser wrapper for setting element's style\n     * @memberOf fabric.util\n     * @param {HTMLElement} element\n     * @param {Object} styles\n     * @return {HTMLElement} Element that was passed as a first argument\n     */\n    function setStyle(element, styles) {\n      var elementStyle = element.style;\n      if (!elementStyle) {\n        return element;\n      }\n      if (typeof styles === 'string') {\n        element.style.cssText += ';' + styles;\n        return styles.indexOf('opacity') > -1\n          ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n          : element;\n      }\n      for (var property in styles) {\n        if (property === 'opacity') {\n          setOpacity(element, styles[property]);\n        }\n        else {\n          var normalizedProperty = (property === 'float' || property === 'cssFloat')\n            ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n            : property;\n          elementStyle[normalizedProperty] = styles[property];\n        }\n      }\n      return element;\n    }\n\n    var parseEl = fabric.document.createElement('div'),\n        supportsOpacity = typeof parseEl.style.opacity === 'string',\n        supportsFilters = typeof parseEl.style.filter === 'string',\n        reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n        /** @ignore */\n        setOpacity = function (element) { return element; };\n\n    if (supportsOpacity) {\n      /** @ignore */\n      setOpacity = function(element, value) {\n        element.style.opacity = value;\n        return element;\n      };\n    }\n    else if (supportsFilters) {\n      /** @ignore */\n      setOpacity = function(element, value) {\n        var es = element.style;\n        if (element.currentStyle && !element.currentStyle.hasLayout) {\n          es.zoom = 1;\n        }\n        if (reOpacity.test(es.filter)) {\n          value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n          es.filter = es.filter.replace(reOpacity, value);\n        }\n        else {\n          es.filter += ' alpha(opacity=' + (value * 100) + ')';\n        }\n        return element;\n      };\n    }\n\n    fabric.util.setStyle = setStyle;\n\n  })();\n\n\n  (function() {\n\n    var _slice = Array.prototype.slice;\n\n    /**\n     * Takes id and returns an element with that id (if one exists in a document)\n     * @memberOf fabric.util\n     * @param {String|HTMLElement} id\n     * @return {HTMLElement|null}\n     */\n    function getById(id) {\n      return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n    }\n\n    var sliceCanConvertNodelists,\n        /**\n         * Converts an array-like object (e.g. arguments or NodeList) to an array\n         * @memberOf fabric.util\n         * @param {Object} arrayLike\n         * @return {Array}\n         */\n        toArray = function(arrayLike) {\n          return _slice.call(arrayLike, 0);\n        };\n\n    try {\n      sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n    }\n    catch (err) { }\n\n    if (!sliceCanConvertNodelists) {\n      toArray = function(arrayLike) {\n        var arr = new Array(arrayLike.length), i = arrayLike.length;\n        while (i--) {\n          arr[i] = arrayLike[i];\n        }\n        return arr;\n      };\n    }\n\n    /**\n     * Creates specified element with specified attributes\n     * @memberOf fabric.util\n     * @param {String} tagName Type of an element to create\n     * @param {Object} [attributes] Attributes to set on an element\n     * @return {HTMLElement} Newly created element\n     */\n    function makeElement(tagName, attributes) {\n      var el = fabric.document.createElement(tagName);\n      for (var prop in attributes) {\n        if (prop === 'class') {\n          el.className = attributes[prop];\n        }\n        else if (prop === 'for') {\n          el.htmlFor = attributes[prop];\n        }\n        else {\n          el.setAttribute(prop, attributes[prop]);\n        }\n      }\n      return el;\n    }\n\n    /**\n     * Adds class to an element\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to add class to\n     * @param {String} className Class to add to an element\n     */\n    function addClass(element, className) {\n      if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n        element.className += (element.className ? ' ' : '') + className;\n      }\n    }\n\n    /**\n     * Wraps element with another element\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to wrap\n     * @param {HTMLElement|String} wrapper Element to wrap with\n     * @param {Object} [attributes] Attributes to set on a wrapper\n     * @return {HTMLElement} wrapper\n     */\n    function wrapElement(element, wrapper, attributes) {\n      if (typeof wrapper === 'string') {\n        wrapper = makeElement(wrapper, attributes);\n      }\n      if (element.parentNode) {\n        element.parentNode.replaceChild(wrapper, element);\n      }\n      wrapper.appendChild(element);\n      return wrapper;\n    }\n\n    /**\n     * Returns element scroll offsets\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to operate on\n     * @return {Object} Object with left/top values\n     */\n    function getScrollLeftTop(element) {\n\n      var left = 0,\n          top = 0,\n          docElement = fabric.document.documentElement,\n          body = fabric.document.body || {\n            scrollLeft: 0, scrollTop: 0\n          };\n\n      // While loop checks (and then sets element to) .parentNode OR .host\n      //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n      //  but the .parentNode of a root ShadowDOM node will always be null, instead\n      //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n      while (element && (element.parentNode || element.host)) {\n\n        // Set element to element parent, or 'host' in case of ShadowDOM\n        element = element.parentNode || element.host;\n\n        if (element === fabric.document) {\n          left = body.scrollLeft || docElement.scrollLeft || 0;\n          top = body.scrollTop ||  docElement.scrollTop || 0;\n        }\n        else {\n          left += element.scrollLeft || 0;\n          top += element.scrollTop || 0;\n        }\n\n        if (element.nodeType === 1 && element.style.position === 'fixed') {\n          break;\n        }\n      }\n\n      return { left: left, top: top };\n    }\n\n    /**\n     * Returns offset for a given element\n     * @function\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to get offset for\n     * @return {Object} Object with \"left\" and \"top\" properties\n     */\n    function getElementOffset(element) {\n      var docElem,\n          doc = element && element.ownerDocument,\n          box = { left: 0, top: 0 },\n          offset = { left: 0, top: 0 },\n          scrollLeftTop,\n          offsetAttributes = {\n            borderLeftWidth: 'left',\n            borderTopWidth:  'top',\n            paddingLeft:     'left',\n            paddingTop:      'top'\n          };\n\n      if (!doc) {\n        return offset;\n      }\n\n      for (var attr in offsetAttributes) {\n        offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n      }\n\n      docElem = doc.documentElement;\n      if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n        box = element.getBoundingClientRect();\n      }\n\n      scrollLeftTop = getScrollLeftTop(element);\n\n      return {\n        left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n        top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n      };\n    }\n\n    /**\n     * Returns style attribute value of a given element\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to get style attribute for\n     * @param {String} attr Style attribute to get for element\n     * @return {String} Style attribute value of the given element.\n     */\n    var getElementStyle;\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n      getElementStyle = function(element, attr) {\n        var style = fabric.document.defaultView.getComputedStyle(element, null);\n        return style ? style[attr] : undefined;\n      };\n    }\n    else {\n      getElementStyle = function(element, attr) {\n        var value = element.style[attr];\n        if (!value && element.currentStyle) {\n          value = element.currentStyle[attr];\n        }\n        return value;\n      };\n    }\n\n    (function () {\n      var style = fabric.document.documentElement.style,\n          selectProp = 'userSelect' in style\n            ? 'userSelect'\n            : 'MozUserSelect' in style\n              ? 'MozUserSelect'\n              : 'WebkitUserSelect' in style\n                ? 'WebkitUserSelect'\n                : 'KhtmlUserSelect' in style\n                  ? 'KhtmlUserSelect'\n                  : '';\n\n      /**\n       * Makes element unselectable\n       * @memberOf fabric.util\n       * @param {HTMLElement} element Element to make unselectable\n       * @return {HTMLElement} Element that was passed in\n       */\n      function makeElementUnselectable(element) {\n        if (typeof element.onselectstart !== 'undefined') {\n          element.onselectstart = fabric.util.falseFunction;\n        }\n        if (selectProp) {\n          element.style[selectProp] = 'none';\n        }\n        else if (typeof element.unselectable === 'string') {\n          element.unselectable = 'on';\n        }\n        return element;\n      }\n\n      /**\n       * Makes element selectable\n       * @memberOf fabric.util\n       * @param {HTMLElement} element Element to make selectable\n       * @return {HTMLElement} Element that was passed in\n       */\n      function makeElementSelectable(element) {\n        if (typeof element.onselectstart !== 'undefined') {\n          element.onselectstart = null;\n        }\n        if (selectProp) {\n          element.style[selectProp] = '';\n        }\n        else if (typeof element.unselectable === 'string') {\n          element.unselectable = '';\n        }\n        return element;\n      }\n\n      fabric.util.makeElementUnselectable = makeElementUnselectable;\n      fabric.util.makeElementSelectable = makeElementSelectable;\n    })();\n\n    (function() {\n\n      /**\n       * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n       * @memberOf fabric.util\n       * @param {String} url URL of a script to load\n       * @param {Function} callback Callback to execute when script is finished loading\n       */\n      function getScript(url, callback) {\n        var headEl = fabric.document.getElementsByTagName('head')[0],\n            scriptEl = fabric.document.createElement('script'),\n            loading = true;\n\n        /** @ignore */\n        scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n          if (loading) {\n            if (typeof this.readyState === 'string' &&\n                this.readyState !== 'loaded' &&\n                this.readyState !== 'complete') {\n              return;\n            }\n            loading = false;\n            callback(e || fabric.window.event);\n            scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n          }\n        };\n        scriptEl.src = url;\n        headEl.appendChild(scriptEl);\n        // causes issue in Opera\n        // headEl.removeChild(scriptEl);\n      }\n\n      fabric.util.getScript = getScript;\n    })();\n\n    function getNodeCanvas(element) {\n      var impl = fabric.jsdomImplForWrapper(element);\n      return impl._canvas || impl._image;\n    };\n\n    function cleanUpJsdomNode(element) {\n      if (!fabric.isLikelyNode) {\n        return;\n      }\n      var impl = fabric.jsdomImplForWrapper(element);\n      if (impl) {\n        impl._image = null;\n        impl._canvas = null;\n        // unsure if necessary\n        impl._currentSrc = null;\n        impl._attributes = null;\n        impl._classList = null;\n      }\n    }\n\n    fabric.util.getById = getById;\n    fabric.util.toArray = toArray;\n    fabric.util.makeElement = makeElement;\n    fabric.util.addClass = addClass;\n    fabric.util.wrapElement = wrapElement;\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\n    fabric.util.getElementOffset = getElementOffset;\n    fabric.util.getElementStyle = getElementStyle;\n    fabric.util.getNodeCanvas = getNodeCanvas;\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n\n  })();\n\n\n  (function() {\n\n    function addParamToUrl(url, param) {\n      return url + (/\\?/.test(url) ? '&' : '?') + param;\n    }\n\n    var makeXHR = (function() {\n      var factories = [\n        function() { return new fabric.window.XMLHttpRequest(); },\n        function() { return new ActiveXObject('Microsoft.XMLHTTP'); },\n        function() { return new ActiveXObject('Msxml2.XMLHTTP'); },\n        function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); }\n      ];\n      for (var i = factories.length; i--; ) {\n        try {\n          var req = factories[i]();\n          if (req) {\n            return factories[i];\n          }\n        }\n        catch (err) { }\n      }\n    })();\n\n    function emptyFn() { }\n\n    /**\n     * Cross-browser abstraction for sending XMLHttpRequest\n     * @memberOf fabric.util\n     * @param {String} url URL to send XMLHttpRequest to\n     * @param {Object} [options] Options object\n     * @param {String} [options.method=\"GET\"]\n     * @param {String} [options.parameters] parameters to append to url in GET or in body\n     * @param {String} [options.body] body to send with POST or PUT request\n     * @param {Function} options.onComplete Callback to invoke when request is completed\n     * @return {XMLHttpRequest} request\n     */\n    function request(url, options) {\n      options || (options = { });\n\n      var method = options.method ? options.method.toUpperCase() : 'GET',\n          onComplete = options.onComplete || function() { },\n          xhr = makeXHR(),\n          body = options.body || options.parameters;\n\n      /** @ignore */\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          onComplete(xhr);\n          xhr.onreadystatechange = emptyFn;\n        }\n      };\n\n      if (method === 'GET') {\n        body = null;\n        if (typeof options.parameters === 'string') {\n          url = addParamToUrl(url, options.parameters);\n        }\n      }\n\n      xhr.open(method, url, true);\n\n      if (method === 'POST' || method === 'PUT') {\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      }\n\n      xhr.send(body);\n      return xhr;\n    }\n\n    fabric.util.request = request;\n  })();\n\n\n  /**\n   * Wrapper around `console.log` (when available)\n   * @param {*} [values] Values to log\n   */\n  fabric.log = function() { };\n\n  /**\n   * Wrapper around `console.warn` (when available)\n   * @param {*} [values] Values to log as a warning\n   */\n  fabric.warn = function() { };\n\n  /* eslint-disable */\n  if (typeof console !== 'undefined') {\n\n    ['log', 'warn'].forEach(function(methodName) {\n\n      if (typeof console[methodName] !== 'undefined' &&\n          typeof console[methodName].apply === 'function') {\n\n        fabric[methodName] = function() {\n          return console[methodName].apply(console, arguments);\n        };\n      }\n    });\n  }\n  /* eslint-enable */\n\n\n  (function() {\n\n    function noop() {\n      return false;\n    }\n\n    /**\n     * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n     * @memberOf fabric.util\n     * @param {Object} [options] Animation options\n     * @param {Function} [options.onChange] Callback; invoked on every value change\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n     * @param {Number} [options.startValue=0] Starting value\n     * @param {Number} [options.endValue=100] Ending value\n     * @param {Number} [options.byValue=100] Value to modify the property by\n     * @param {Function} [options.easing] Easing function\n     * @param {Number} [options.duration=500] Duration of change (in ms)\n     */\n    function animate(options) {\n\n      requestAnimFrame(function(timestamp) {\n        options || (options = { });\n\n        var start = timestamp || +new Date(),\n            duration = options.duration || 500,\n            finish = start + duration, time,\n            onChange = options.onChange || noop,\n            abort = options.abort || noop,\n            onComplete = options.onComplete || noop,\n            easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n            startValue = 'startValue' in options ? options.startValue : 0,\n            endValue = 'endValue' in options ? options.endValue : 100,\n            byValue = options.byValue || endValue - startValue;\n\n        options.onStart && options.onStart();\n\n        (function tick(ticktime) {\n          if (abort()) {\n            onComplete(endValue, 1, 1);\n            return;\n          }\n          time = ticktime || +new Date();\n          var currentTime = time > finish ? duration : (time - start),\n              timePerc = currentTime / duration,\n              current = easing(currentTime, startValue, byValue, duration),\n              valuePerc = Math.abs((current - startValue) / byValue);\n          onChange(current, valuePerc, timePerc);\n          if (time > finish) {\n            options.onComplete && options.onComplete();\n            return;\n          }\n          requestAnimFrame(tick);\n        })(start);\n      });\n\n    }\n\n    var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                            fabric.window.webkitRequestAnimationFrame ||\n                            fabric.window.mozRequestAnimationFrame    ||\n                            fabric.window.oRequestAnimationFrame      ||\n                            fabric.window.msRequestAnimationFrame     ||\n                            function(callback) {\n                              return fabric.window.setTimeout(callback, 1000 / 60);\n                            };\n\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n\n    /**\n     * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n     * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n     * @memberOf fabric.util\n     * @param {Function} callback Callback to invoke\n     * @param {DOMElement} element optional Element to associate with animation\n     */\n    function requestAnimFrame() {\n      return _requestAnimFrame.apply(fabric.window, arguments);\n    }\n\n    function cancelAnimFrame() {\n      return _cancelAnimFrame.apply(fabric.window, arguments);\n    }\n\n    fabric.util.animate = animate;\n    fabric.util.requestAnimFrame = requestAnimFrame;\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\n  })();\n\n\n  (function() {\n    // Calculate an in-between color. Returns a \"rgba()\" string.\n    // Credit: Edwin Martin <edwin@bitstorm.org>\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n    function calculateColor(begin, end, pos) {\n      var color = 'rgba('\n          + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\n          + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\n          + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\n\n      color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n      color += ')';\n      return color;\n    }\n\n    /**\n     * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\n     * @memberOf fabric.util\n     * @param {String} fromColor The starting color in hex or rgb(a) format.\n     * @param {String} toColor The starting color in hex or rgb(a) format.\n     * @param {Number} [duration] Duration of change (in ms).\n     * @param {Object} [options] Animation options\n     * @param {Function} [options.onChange] Callback; invoked on every value change\n     * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n     * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\n     */\n    function animateColor(fromColor, toColor, duration, options) {\n      var startColor = new fabric.Color(fromColor).getSource(),\n          endColor = new fabric.Color(toColor).getSource();\n\n      options = options || {};\n\n      fabric.util.animate(fabric.util.object.extend(options, {\n        duration: duration || 500,\n        startValue: startColor,\n        endValue: endColor,\n        byValue: endColor,\n        easing: function (currentTime, startValue, byValue, duration) {\n          var posValue = options.colorEasing\n            ? options.colorEasing(currentTime, duration)\n            : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n          return calculateColor(startValue, byValue, posValue);\n        }\n      }));\n    }\n\n    fabric.util.animateColor = animateColor;\n\n  })();\n\n\n  (function() {\n\n    function normalize(a, c, p, s) {\n      if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n      }\n      else {\n        //handle the 0/0 case:\n        if (c === 0 && a === 0) {\n          s = p / (2 * Math.PI) * Math.asin(1);\n        }\n        else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n      }\n      return { a: a, c: c, p: p, s: s };\n    }\n\n    function elastic(opts, t, d) {\n      return opts.a *\n        Math.pow(2, 10 * (t -= 1)) *\n        Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n    }\n\n    /**\n     * Cubic easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutCubic(t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t + 1) + b;\n    }\n\n    /**\n     * Cubic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutCubic(t, b, c, d) {\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * t * t * t + b;\n      }\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\n    }\n\n    /**\n     * Quartic easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInQuart(t, b, c, d) {\n      return c * (t /= d) * t * t * t + b;\n    }\n\n    /**\n     * Quartic easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutQuart(t, b, c, d) {\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    }\n\n    /**\n     * Quartic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutQuart(t, b, c, d) {\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * t * t * t * t + b;\n      }\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    }\n\n    /**\n     * Quintic easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInQuint(t, b, c, d) {\n      return c * (t /= d) * t * t * t * t + b;\n    }\n\n    /**\n     * Quintic easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutQuint(t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n    }\n\n    /**\n     * Quintic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutQuint(t, b, c, d) {\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * t * t * t * t * t + b;\n      }\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    }\n\n    /**\n     * Sinusoidal easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInSine(t, b, c, d) {\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    }\n\n    /**\n     * Sinusoidal easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutSine(t, b, c, d) {\n      return c * Math.sin(t / d * (Math.PI / 2)) + b;\n    }\n\n    /**\n     * Sinusoidal easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutSine(t, b, c, d) {\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n    }\n\n    /**\n     * Exponential easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInExpo(t, b, c, d) {\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n    }\n\n    /**\n     * Exponential easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutExpo(t, b, c, d) {\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    }\n\n    /**\n     * Exponential easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutExpo(t, b, c, d) {\n      if (t === 0) {\n        return b;\n      }\n      if (t === d) {\n        return b + c;\n      }\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n      }\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n\n    /**\n     * Circular easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInCirc(t, b, c, d) {\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n    }\n\n    /**\n     * Circular easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutCirc(t, b, c, d) {\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n    }\n\n    /**\n     * Circular easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutCirc(t, b, c, d) {\n      t /= d / 2;\n      if (t < 1) {\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n      }\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    }\n\n    /**\n     * Elastic easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInElastic(t, b, c, d) {\n      var s = 1.70158, p = 0, a = c;\n      if (t === 0) {\n        return b;\n      }\n      t /= d;\n      if (t === 1) {\n        return b + c;\n      }\n      if (!p) {\n        p = d * 0.3;\n      }\n      var opts = normalize(a, c, p, s);\n      return -elastic(opts, t, d) + b;\n    }\n\n    /**\n     * Elastic easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutElastic(t, b, c, d) {\n      var s = 1.70158, p = 0, a = c;\n      if (t === 0) {\n        return b;\n      }\n      t /= d;\n      if (t === 1) {\n        return b + c;\n      }\n      if (!p) {\n        p = d * 0.3;\n      }\n      var opts = normalize(a, c, p, s);\n      return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n    }\n\n    /**\n     * Elastic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutElastic(t, b, c, d) {\n      var s = 1.70158, p = 0, a = c;\n      if (t === 0) {\n        return b;\n      }\n      t /= d / 2;\n      if (t === 2) {\n        return b + c;\n      }\n      if (!p) {\n        p = d * (0.3 * 1.5);\n      }\n      var opts = normalize(a, c, p, s);\n      if (t < 1) {\n        return -0.5 * elastic(opts, t, d) + b;\n      }\n      return opts.a * Math.pow(2, -10 * (t -= 1)) *\n        Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n    }\n\n    /**\n     * Backwards easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInBack(t, b, c, d, s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n      return c * (t /= d) * t * ((s + 1) * t - s) + b;\n    }\n\n    /**\n     * Backwards easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutBack(t, b, c, d, s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n    }\n\n    /**\n     * Backwards easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutBack(t, b, c, d, s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n      t /= d / 2;\n      if (t < 1) {\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n      }\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n    }\n\n    /**\n     * Bouncing easing in\n     * @memberOf fabric.util.ease\n     */\n    function easeInBounce(t, b, c, d) {\n      return c - easeOutBounce (d - t, 0, c, d) + b;\n    }\n\n    /**\n     * Bouncing easing out\n     * @memberOf fabric.util.ease\n     */\n    function easeOutBounce(t, b, c, d) {\n      if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n      }\n      else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n      }\n      else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n      }\n      else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n      }\n    }\n\n    /**\n     * Bouncing easing in and out\n     * @memberOf fabric.util.ease\n     */\n    function easeInOutBounce(t, b, c, d) {\n      if (t < d / 2) {\n        return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n      }\n      return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n    }\n\n    /**\n     * Easing functions\n     * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n     * @namespace fabric.util.ease\n     */\n    fabric.util.ease = {\n\n      /**\n       * Quadratic easing in\n       * @memberOf fabric.util.ease\n       */\n      easeInQuad: function(t, b, c, d) {\n        return c * (t /= d) * t + b;\n      },\n\n      /**\n       * Quadratic easing out\n       * @memberOf fabric.util.ease\n       */\n      easeOutQuad: function(t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n      },\n\n      /**\n       * Quadratic easing in and out\n       * @memberOf fabric.util.ease\n       */\n      easeInOutQuad: function(t, b, c, d) {\n        t /= (d / 2);\n        if (t < 1) {\n          return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n      },\n\n      /**\n       * Cubic easing in\n       * @memberOf fabric.util.ease\n       */\n      easeInCubic: function(t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n      },\n\n      easeOutCubic: easeOutCubic,\n      easeInOutCubic: easeInOutCubic,\n      easeInQuart: easeInQuart,\n      easeOutQuart: easeOutQuart,\n      easeInOutQuart: easeInOutQuart,\n      easeInQuint: easeInQuint,\n      easeOutQuint: easeOutQuint,\n      easeInOutQuint: easeInOutQuint,\n      easeInSine: easeInSine,\n      easeOutSine: easeOutSine,\n      easeInOutSine: easeInOutSine,\n      easeInExpo: easeInExpo,\n      easeOutExpo: easeOutExpo,\n      easeInOutExpo: easeInOutExpo,\n      easeInCirc: easeInCirc,\n      easeOutCirc: easeOutCirc,\n      easeInOutCirc: easeInOutCirc,\n      easeInElastic: easeInElastic,\n      easeOutElastic: easeOutElastic,\n      easeInOutElastic: easeInOutElastic,\n      easeInBack: easeInBack,\n      easeOutBack: easeOutBack,\n      easeInOutBack: easeInOutBack,\n      easeInBounce: easeInBounce,\n      easeOutBounce: easeOutBounce,\n      easeInOutBounce: easeInOutBounce\n    };\n\n  })();\n\n\n  (function(global) {\n\n    'use strict';\n\n    /**\n     * @name fabric\n     * @namespace\n     */\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        clone = fabric.util.object.clone,\n        toFixed = fabric.util.toFixed,\n        parseUnit = fabric.util.parseUnit,\n        multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\n        svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\n          'image', 'text', 'linearGradient', 'radialGradient', 'stop'],\n        svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n        svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\n        svgValidParents = ['symbol', 'g', 'a', 'svg'],\n\n        attributesMap = {\n          cx:                   'left',\n          x:                    'left',\n          r:                    'radius',\n          cy:                   'top',\n          y:                    'top',\n          display:              'visible',\n          visibility:           'visible',\n          transform:            'transformMatrix',\n          'fill-opacity':       'fillOpacity',\n          'fill-rule':          'fillRule',\n          'font-family':        'fontFamily',\n          'font-size':          'fontSize',\n          'font-style':         'fontStyle',\n          'font-weight':        'fontWeight',\n          'letter-spacing':     'charSpacing',\n          'paint-order':        'paintFirst',\n          'stroke-dasharray':   'strokeDashArray',\n          'stroke-linecap':     'strokeLineCap',\n          'stroke-linejoin':    'strokeLineJoin',\n          'stroke-miterlimit':  'strokeMiterLimit',\n          'stroke-opacity':     'strokeOpacity',\n          'stroke-width':       'strokeWidth',\n          'text-decoration':    'textDecoration',\n          'text-anchor':        'textAnchor',\n          opacity:              'opacity'\n        },\n\n        colorAttributes = {\n          stroke: 'strokeOpacity',\n          fill:   'fillOpacity'\n        };\n\n    fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n    fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n    fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n    fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n    fabric.cssRules = { };\n    fabric.gradientDefs = { };\n\n    function normalizeAttr(attr) {\n      // transform attribute names\n      if (attr in attributesMap) {\n        return attributesMap[attr];\n      }\n      return attr;\n    }\n\n    function normalizeValue(attr, value, parentAttributes, fontSize) {\n      var isArray = Object.prototype.toString.call(value) === '[object Array]',\n          parsed;\n\n      if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n        value = '';\n      }\n      else if (attr === 'strokeDashArray') {\n        if (value === 'none') {\n          value = null;\n        }\n        else {\n          value = value.replace(/,/g, ' ').split(/\\s+/).map(function(n) {\n            return parseFloat(n);\n          });\n        }\n      }\n      else if (attr === 'transformMatrix') {\n        if (parentAttributes && parentAttributes.transformMatrix) {\n          value = multiplyTransformMatrices(\n            parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n        }\n        else {\n          value = fabric.parseTransformAttribute(value);\n        }\n      }\n      else if (attr === 'visible') {\n        value = value !== 'none' && value !== 'hidden';\n        // display=none on parent element always takes precedence over child element\n        if (parentAttributes && parentAttributes.visible === false) {\n          value = false;\n        }\n      }\n      else if (attr === 'opacity') {\n        value = parseFloat(value);\n        if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n          value *= parentAttributes.opacity;\n        }\n      }\n      else if (attr === 'textAnchor' /* text-anchor */) {\n        value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n      }\n      else if (attr === 'charSpacing') {\n        // parseUnit returns px and we convert it to em\n        parsed = parseUnit(value, fontSize) / fontSize * 1000;\n      }\n      else if (attr === 'paintFirst') {\n        var fillIndex = value.indexOf('fill');\n        var strokeIndex = value.indexOf('stroke');\n        var value = 'fill';\n        if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n          value = 'stroke';\n        }\n        else if (fillIndex === -1 && strokeIndex > -1) {\n          value = 'stroke';\n        }\n      }\n      else {\n        parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n      }\n\n      return (!isArray && isNaN(parsed) ? value : parsed);\n    }\n\n    /**\n      * @private\n      */\n    function getSvgRegex(arr) {\n      return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n    }\n\n    /**\n     * @private\n     * @param {Object} attributes Array of attributes to parse\n     */\n    function _setStrokeFillOpacity(attributes) {\n      for (var attr in colorAttributes) {\n\n        if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\n          continue;\n        }\n\n        if (typeof attributes[attr] === 'undefined') {\n          if (!fabric.Object.prototype[attr]) {\n            continue;\n          }\n          attributes[attr] = fabric.Object.prototype[attr];\n        }\n\n        if (attributes[attr].indexOf('url(') === 0) {\n          continue;\n        }\n\n        var color = new fabric.Color(attributes[attr]);\n        attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n      }\n      return attributes;\n    }\n\n    /**\n     * @private\n     */\n    function _getMultipleNodes(doc, nodeNames) {\n      var nodeName, nodeArray = [], nodeList, i, len;\n      for (i = 0, len = nodeNames.length; i < len; i++) {\n        nodeName = nodeNames[i];\n        nodeList = doc.getElementsByTagName(nodeName);\n        nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\n      }\n      return nodeArray;\n    }\n\n    /**\n     * Parses \"transform\" attribute, returning an array of values\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {String} attributeValue String containing attribute value\n     * @return {Array} Array of 6 elements representing transformation matrix\n     */\n    fabric.parseTransformAttribute = (function() {\n      function rotateMatrix(matrix, args) {\n        var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\n            x = 0, y = 0;\n        if (args.length === 3) {\n          x = args[1];\n          y = args[2];\n        }\n\n        matrix[0] = cos;\n        matrix[1] = sin;\n        matrix[2] = -sin;\n        matrix[3] = cos;\n        matrix[4] = x - (cos * x - sin * y);\n        matrix[5] = y - (sin * x + cos * y);\n      }\n\n      function scaleMatrix(matrix, args) {\n        var multiplierX = args[0],\n            multiplierY = (args.length === 2) ? args[1] : args[0];\n\n        matrix[0] = multiplierX;\n        matrix[3] = multiplierY;\n      }\n\n      function skewMatrix(matrix, args, pos) {\n        matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\n      }\n\n      function translateMatrix(matrix, args) {\n        matrix[4] = args[0];\n        if (args.length === 2) {\n          matrix[5] = args[1];\n        }\n      }\n\n      // identity matrix\n      var iMatrix = [\n            1, // a\n            0, // b\n            0, // c\n            1, // d\n            0, // e\n            0  // f\n          ],\n\n          // == begin transform regexp\n          number = fabric.reNum,\n\n          commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\n          skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n          skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n          rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                      commaWsp + '(' + number + ')' +\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n          scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n          translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                      commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n          matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n                    '(' + number + ')' + commaWsp +\n                    '(' + number + ')' + commaWsp +\n                    '(' + number + ')' + commaWsp +\n                    '(' + number + ')' + commaWsp +\n                    '(' + number + ')' + commaWsp +\n                    '(' + number + ')' +\n                    '\\\\s*\\\\))',\n\n          transform = '(?:' +\n                      matrix + '|' +\n                      translate + '|' +\n                      scale + '|' +\n                      rotate + '|' +\n                      skewX + '|' +\n                      skewY +\n                      ')',\n\n          transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\n\n          transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\n          // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n          reTransformList = new RegExp(transformList),\n          // == end transform regexp\n\n          reTransform = new RegExp(transform, 'g');\n\n      return function(attributeValue) {\n\n        // start with identity matrix\n        var matrix = iMatrix.concat(),\n            matrices = [];\n\n        // return if no argument was given or\n        // an argument does not match transform attribute regexp\n        if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n          return matrix;\n        }\n\n        attributeValue.replace(reTransform, function(match) {\n\n          var m = new RegExp(transform).exec(match).filter(function (match) {\n                // match !== '' && match != null\n                return (!!match);\n              }),\n              operation = m[1],\n              args = m.slice(2).map(parseFloat);\n\n          switch (operation) {\n            case 'translate':\n              translateMatrix(matrix, args);\n              break;\n            case 'rotate':\n              args[0] = fabric.util.degreesToRadians(args[0]);\n              rotateMatrix(matrix, args);\n              break;\n            case 'scale':\n              scaleMatrix(matrix, args);\n              break;\n            case 'skewX':\n              skewMatrix(matrix, args, 2);\n              break;\n            case 'skewY':\n              skewMatrix(matrix, args, 1);\n              break;\n            case 'matrix':\n              matrix = args;\n              break;\n          }\n\n          // snapshot current matrix into matrices array\n          matrices.push(matrix.concat());\n          // reset\n          matrix = iMatrix.concat();\n        });\n\n        var combinedMatrix = matrices[0];\n        while (matrices.length > 1) {\n          matrices.shift();\n          combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n        }\n        return combinedMatrix;\n      };\n    })();\n\n    /**\n     * @private\n     */\n    function parseStyleString(style, oStyle) {\n      var attr, value;\n      style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n        var pair = chunk.split(':');\n\n        attr = pair[0].trim().toLowerCase();\n        value =  pair[1].trim();\n\n        oStyle[attr] = value;\n      });\n    }\n\n    /**\n     * @private\n     */\n    function parseStyleObject(style, oStyle) {\n      var attr, value;\n      for (var prop in style) {\n        if (typeof style[prop] === 'undefined') {\n          continue;\n        }\n\n        attr = prop.toLowerCase();\n        value = style[prop];\n\n        oStyle[attr] = value;\n      }\n    }\n\n    /**\n     * @private\n     */\n    function getGlobalStylesForElement(element, svgUid) {\n      var styles = { };\n      for (var rule in fabric.cssRules[svgUid]) {\n        if (elementMatchesRule(element, rule.split(' '))) {\n          for (var property in fabric.cssRules[svgUid][rule]) {\n            styles[property] = fabric.cssRules[svgUid][rule][property];\n          }\n        }\n      }\n      return styles;\n    }\n\n    /**\n     * @private\n     */\n    function elementMatchesRule(element, selectors) {\n      var firstMatching, parentMatching = true;\n      //start from rightmost selector.\n      firstMatching = selectorMatches(element, selectors.pop());\n      if (firstMatching && selectors.length) {\n        parentMatching = doesSomeParentMatch(element, selectors);\n      }\n      return firstMatching && parentMatching && (selectors.length === 0);\n    }\n\n    function doesSomeParentMatch(element, selectors) {\n      var selector, parentMatching = true;\n      while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n        if (parentMatching) {\n          selector = selectors.pop();\n        }\n        element = element.parentNode;\n        parentMatching = selectorMatches(element, selector);\n      }\n      return selectors.length === 0;\n    }\n\n    /**\n     * @private\n     */\n    function selectorMatches(element, selector) {\n      var nodeName = element.nodeName,\n          classNames = element.getAttribute('class'),\n          id = element.getAttribute('id'), matcher, i;\n      // i check if a selector matches slicing away part from it.\n      // if i get empty string i should match\n      matcher = new RegExp('^' + nodeName, 'i');\n      selector = selector.replace(matcher, '');\n      if (id && selector.length) {\n        matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n        selector = selector.replace(matcher, '');\n      }\n      if (classNames && selector.length) {\n        classNames = classNames.split(' ');\n        for (i = classNames.length; i--;) {\n          matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n          selector = selector.replace(matcher, '');\n        }\n      }\n      return selector.length === 0;\n    }\n\n    /**\n     * @private\n     * to support IE8 missing getElementById on SVGdocument\n     */\n    function elementById(doc, id) {\n      var el;\n      doc.getElementById && (el = doc.getElementById(id));\n      if (el) {\n        return el;\n      }\n      var node, i, len, nodelist = doc.getElementsByTagName('*');\n      for (i = 0, len = nodelist.length; i < len; i++) {\n        node = nodelist[i];\n        if (id === node.getAttribute('id')) {\n          return node;\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n    function parseUseDirectives(doc) {\n      var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\n\n      while (nodelist.length && i < nodelist.length) {\n        var el = nodelist[i],\n            xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\n            x = el.getAttribute('x') || 0,\n            y = el.getAttribute('y') || 0,\n            el2 = elementById(doc, xlink).cloneNode(true),\n            currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n            parentNode, oldLength = nodelist.length, attr, j, attrs, len;\n\n        applyViewboxTransform(el2);\n        if (/^svg$/i.test(el2.nodeName)) {\n          var el3 = el2.ownerDocument.createElement('g');\n          for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\n            attr = attrs.item(j);\n            el3.setAttribute(attr.nodeName, attr.nodeValue);\n          }\n          // el2.firstChild != null\n          while (el2.firstChild) {\n            el3.appendChild(el2.firstChild);\n          }\n          el2 = el3;\n        }\n\n        for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\n          attr = attrs.item(j);\n          if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\n            attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\n            continue;\n          }\n\n          if (attr.nodeName === 'transform') {\n            currentTrans = attr.nodeValue + ' ' + currentTrans;\n          }\n          else {\n            el2.setAttribute(attr.nodeName, attr.nodeValue);\n          }\n        }\n\n        el2.setAttribute('transform', currentTrans);\n        el2.setAttribute('instantiated_by_use', '1');\n        el2.removeAttribute('id');\n        parentNode = el.parentNode;\n        parentNode.replaceChild(el2, el);\n        // some browsers do not shorten nodelist after replaceChild (IE8)\n        if (nodelist.length === oldLength) {\n          i++;\n        }\n      }\n    }\n\n    // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n    // matches, e.g.: +14.56e-12, etc.\n    var reViewBoxAttrValue = new RegExp(\n      '^' +\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n      '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n      '$'\n    );\n\n    /**\n     * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n     */\n    function applyViewboxTransform(element) {\n\n      var viewBoxAttr = element.getAttribute('viewBox'),\n          scaleX = 1,\n          scaleY = 1,\n          minX = 0,\n          minY = 0,\n          viewBoxWidth, viewBoxHeight, matrix, el,\n          widthAttr = element.getAttribute('width'),\n          heightAttr = element.getAttribute('height'),\n          x = element.getAttribute('x') || 0,\n          y = element.getAttribute('y') || 0,\n          preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\n          missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\n                             || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n          missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n          toBeParsed = missingViewBox && missingDimAttr,\n          parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\n\n      parsedDim.width = 0;\n      parsedDim.height = 0;\n      parsedDim.toBeParsed = toBeParsed;\n\n      if (toBeParsed) {\n        return parsedDim;\n      }\n\n      if (missingViewBox) {\n        parsedDim.width = parseUnit(widthAttr);\n        parsedDim.height = parseUnit(heightAttr);\n        return parsedDim;\n      }\n\n      minX = -parseFloat(viewBoxAttr[1]);\n      minY = -parseFloat(viewBoxAttr[2]);\n      viewBoxWidth = parseFloat(viewBoxAttr[3]);\n      viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\n      if (!missingDimAttr) {\n        parsedDim.width = parseUnit(widthAttr);\n        parsedDim.height = parseUnit(heightAttr);\n        scaleX = parsedDim.width / viewBoxWidth;\n        scaleY = parsedDim.height / viewBoxHeight;\n      }\n      else {\n        parsedDim.width = viewBoxWidth;\n        parsedDim.height = viewBoxHeight;\n      }\n\n      // default is to preserve aspect ratio\n      preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\n      if (preserveAspectRatio.alignX !== 'none') {\n        //translate all container for the effect of Mid, Min, Max\n        if (preserveAspectRatio.meetOrSlice === 'meet') {\n          scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n          // calculate additional translation to move the viewbox\n        }\n        if (preserveAspectRatio.meetOrSlice === 'slice') {\n          scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\n          // calculate additional translation to move the viewbox\n        }\n        widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n        heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n        if (preserveAspectRatio.alignX === 'Mid') {\n          widthDiff /= 2;\n        }\n        if (preserveAspectRatio.alignY === 'Mid') {\n          heightDiff /= 2;\n        }\n        if (preserveAspectRatio.alignX === 'Min') {\n          widthDiff = 0;\n        }\n        if (preserveAspectRatio.alignY === 'Min') {\n          heightDiff = 0;\n        }\n      }\n\n      if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\n        return parsedDim;\n      }\n\n      if (x || y) {\n        translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\n      }\n\n      matrix = translateMatrix + ' matrix(' + scaleX +\n                    ' 0' +\n                    ' 0 ' +\n                    scaleY + ' ' +\n                    (minX * scaleX + widthDiff) + ' ' +\n                    (minY * scaleY + heightDiff) + ') ';\n\n      if (element.nodeName === 'svg') {\n        el = element.ownerDocument.createElement('g');\n        // element.firstChild != null\n        while (element.firstChild) {\n          el.appendChild(element.firstChild);\n        }\n        element.appendChild(el);\n      }\n      else {\n        el = element;\n        matrix = el.getAttribute('transform') + matrix;\n      }\n\n      el.setAttribute('transform', matrix);\n      return parsedDim;\n    }\n\n    function hasAncestorWithNodeName(element, nodeName) {\n      while (element && (element = element.parentNode)) {\n        if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\n          && !element.getAttribute('instantiated_by_use')) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @param {Function} callback Callback to call when parsing is finished;\n     * It's being passed an array of elements (parsed from a document).\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     * @param {Object} [parsingOptions] options for parsing document\n     * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\n     */\n    fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\n      if (!doc) {\n        return;\n      }\n\n      parseUseDirectives(doc);\n\n      var svgUid =  fabric.Object.__uid++, i, len,\n          options = applyViewboxTransform(doc),\n          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n      options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\n      options.svgUid = svgUid;\n\n      if (descendants.length === 0 && fabric.isLikelyNode) {\n        // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n        // https://github.com/ajaxorg/node-o3-xml/issues/21\n        descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n        var arr = [];\n        for (i = 0, len = descendants.length; i < len; i++) {\n          arr[i] = descendants[i];\n        }\n        descendants = arr;\n      }\n\n      var elements = descendants.filter(function(el) {\n        applyViewboxTransform(el);\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\n              !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n      });\n\n      if (!elements || (elements && !elements.length)) {\n        callback && callback([], {});\n        return;\n      }\n\n      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n      // Precedence of rules:   style > class > attribute\n      fabric.parseElements(elements, function(instances, elements) {\n        if (callback) {\n          callback(instances, options, elements, descendants);\n        }\n      }, clone(options), reviver, parsingOptions);\n    };\n\n    var reFontDeclaration = new RegExp(\n      '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n      '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n        fabric.reNum +\n      '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\n    extend(fabric, {\n      /**\n       * Parses a short font declaration, building adding its properties to a style object\n       * @static\n       * @function\n       * @memberOf fabric\n       * @param {String} value font declaration\n       * @param {Object} oStyle definition\n       */\n      parseFontDeclaration: function(value, oStyle) {\n        var match = value.match(reFontDeclaration);\n\n        if (!match) {\n          return;\n        }\n        var fontStyle = match[1],\n            // font variant is not used\n            // fontVariant = match[2],\n            fontWeight = match[3],\n            fontSize = match[4],\n            lineHeight = match[5],\n            fontFamily = match[6];\n\n        if (fontStyle) {\n          oStyle.fontStyle = fontStyle;\n        }\n        if (fontWeight) {\n          oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n        }\n        if (fontSize) {\n          oStyle.fontSize = parseUnit(fontSize);\n        }\n        if (fontFamily) {\n          oStyle.fontFamily = fontFamily;\n        }\n        if (lineHeight) {\n          oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n        }\n      },\n\n      /**\n       * Parses an SVG document, returning all of the gradient declarations found in it\n       * @static\n       * @function\n       * @memberOf fabric\n       * @param {SVGDocument} doc SVG document to parse\n       * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n       */\n      getGradientDefs: function(doc) {\n        var tagArray = [\n              'linearGradient',\n              'radialGradient',\n              'svg:linearGradient',\n              'svg:radialGradient'],\n            elList = _getMultipleNodes(doc, tagArray),\n            el, j = 0, id, xlink,\n            gradientDefs = { }, idsToXlinkMap = { };\n        j = elList.length;\n\n        while (j--) {\n          el = elList[j];\n          xlink = el.getAttribute('xlink:href');\n          id = el.getAttribute('id');\n          if (xlink) {\n            idsToXlinkMap[id] = xlink.substr(1);\n          }\n          gradientDefs[id] = el;\n        }\n\n        for (id in idsToXlinkMap) {\n          var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);\n          el = gradientDefs[id];\n          while (el2.firstChild) {\n            el.appendChild(el2.firstChild);\n          }\n        }\n        return gradientDefs;\n      },\n\n      /**\n       * Returns an object of attributes' name/value, given element and an array of attribute names;\n       * Parses parent \"g\" nodes recursively upwards.\n       * @static\n       * @memberOf fabric\n       * @param {DOMElement} element Element to parse\n       * @param {Array} attributes Array of attributes to parse\n       * @return {Object} object containing parsed attributes' names/values\n       */\n      parseAttributes: function(element, attributes, svgUid) {\n\n        if (!element) {\n          return;\n        }\n\n        var value,\n            parentAttributes = { },\n            fontSize;\n\n        if (typeof svgUid === 'undefined') {\n          svgUid = element.getAttribute('svgUid');\n        }\n        // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n        if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\n          parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n        }\n        fontSize = (parentAttributes && parentAttributes.fontSize ) ||\n                   element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n\n        var ownAttributes = attributes.reduce(function(memo, attr) {\n          value = element.getAttribute(attr);\n          if (value) { // eslint-disable-line\n            memo[attr] = value;\n          }\n          return memo;\n        }, { });\n        // add values parsed from style, which take precedence over attributes\n        // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n        ownAttributes = extend(ownAttributes,\n          extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n\n        var normalizedAttr, normalizedValue, normalizedStyle = {};\n        for (var attr in ownAttributes) {\n          normalizedAttr = normalizeAttr(attr);\n          normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\n          normalizedStyle[normalizedAttr] = normalizedValue;\n        }\n        if (normalizedStyle && normalizedStyle.font) {\n          fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\n        }\n        var mergedAttrs = extend(parentAttributes, normalizedStyle);\n        return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\n      },\n\n      /**\n       * Transforms an array of svg elements to corresponding fabric.* instances\n       * @static\n       * @memberOf fabric\n       * @param {Array} elements Array of elements to parse\n       * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n       * @param {Object} [options] Options object\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n       */\n      parseElements: function(elements, callback, options, reviver, parsingOptions) {\n        new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\n      },\n\n      /**\n       * Parses \"style\" attribute, retuning an object with values\n       * @static\n       * @memberOf fabric\n       * @param {SVGElement} element Element to parse\n       * @return {Object} Objects with values parsed from style attribute of an element\n       */\n      parseStyleAttribute: function(element) {\n        var oStyle = { },\n            style = element.getAttribute('style');\n\n        if (!style) {\n          return oStyle;\n        }\n\n        if (typeof style === 'string') {\n          parseStyleString(style, oStyle);\n        }\n        else {\n          parseStyleObject(style, oStyle);\n        }\n\n        return oStyle;\n      },\n\n      /**\n       * Parses \"points\" attribute, returning an array of values\n       * @static\n       * @memberOf fabric\n       * @param {String} points points attribute string\n       * @return {Array} array of points\n       */\n      parsePointsAttribute: function(points) {\n\n        // points attribute is required and must not be empty\n        if (!points) {\n          return null;\n        }\n\n        // replace commas with whitespace and remove bookending whitespace\n        points = points.replace(/,/g, ' ').trim();\n\n        points = points.split(/\\s+/);\n        var parsedPoints = [], i, len;\n\n        for (i = 0, len = points.length; i < len; i += 2) {\n          parsedPoints.push({\n            x: parseFloat(points[i]),\n            y: parseFloat(points[i + 1])\n          });\n        }\n\n        // odd number of points is an error\n        // if (parsedPoints.length % 2 !== 0) {\n        //   return null;\n        // }\n\n        return parsedPoints;\n      },\n\n      /**\n       * Returns CSS rules for a given SVG document\n       * @static\n       * @function\n       * @memberOf fabric\n       * @param {SVGDocument} doc SVG document to parse\n       * @return {Object} CSS rules of this document\n       */\n      getCSSRules: function(doc) {\n        var styles = doc.getElementsByTagName('style'), i, len,\n            allRules = { }, rules;\n\n        // very crude parsing of style contents\n        for (i = 0, len = styles.length; i < len; i++) {\n          // IE9 doesn't support textContent, but provides text instead.\n          var styleContents = styles[i].textContent || styles[i].text;\n\n          // remove comments\n          styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n          if (styleContents.trim() === '') {\n            continue;\n          }\n          rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n          rules = rules.map(function(rule) { return rule.trim(); });\n          // eslint-disable-next-line no-loop-func\n          rules.forEach(function(rule) {\n\n            var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n                ruleObj = { }, declaration = match[2].trim(),\n                propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\n            for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n              var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n                  property = pair[0],\n                  value = pair[1];\n              ruleObj[property] = value;\n            }\n            rule = match[1];\n            rule.split(',').forEach(function(_rule) {\n              _rule = _rule.replace(/^svg/i, '').trim();\n              if (_rule === '') {\n                return;\n              }\n              if (allRules[_rule]) {\n                fabric.util.object.extend(allRules[_rule], ruleObj);\n              }\n              else {\n                allRules[_rule] = fabric.util.object.clone(ruleObj);\n              }\n            });\n          });\n        }\n        return allRules;\n      },\n\n      /**\n       * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n       * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n       * @memberOf fabric\n       * @param {String} url\n       * @param {Function} callback\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n       * @param {Object} [options] Object containing options for parsing\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n       */\n      loadSVGFromURL: function(url, callback, reviver, options) {\n\n        url = url.replace(/^\\n\\s*/, '').trim();\n        new fabric.util.request(url, {\n          method: 'get',\n          onComplete: onComplete\n        });\n\n        function onComplete(r) {\n\n          var xml = r.responseXML;\n          if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n            xml = new ActiveXObject('Microsoft.XMLDOM');\n            xml.async = 'false';\n            //IE chokes on DOCTYPE\n            xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n          }\n          if (!xml || !xml.documentElement) {\n            callback && callback(null);\n          }\n\n          fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\n            callback && callback(results, _options, elements, allElements);\n          }, reviver, options);\n        }\n      },\n\n      /**\n       * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n       * @memberOf fabric\n       * @param {String} string\n       * @param {Function} callback\n       * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n       * @param {Object} [options] Object containing options for parsing\n       * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n       */\n      loadSVGFromString: function(string, callback, reviver, options) {\n        string = string.trim();\n        var doc;\n        if (typeof DOMParser !== 'undefined') {\n          var parser = new DOMParser();\n          if (parser && parser.parseFromString) {\n            doc = parser.parseFromString(string, 'text/xml');\n          }\n        }\n        else if (fabric.window.ActiveXObject) {\n          doc = new ActiveXObject('Microsoft.XMLDOM');\n          doc.async = 'false';\n          // IE chokes on DOCTYPE\n          doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n        }\n\n        fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\n          callback(results, _options, elements, allElements);\n        }, reviver, options);\n      }\n    });\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions) {\n    this.elements = elements;\n    this.callback = callback;\n    this.options = options;\n    this.reviver = reviver;\n    this.svgUid = (options && options.svgUid) || 0;\n    this.parsingOptions = parsingOptions;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n  };\n\n  fabric.ElementsParser.prototype.parse = function() {\n    this.instances = new Array(this.elements.length);\n    this.numElements = this.elements.length;\n\n    this.createObjects();\n  };\n\n  fabric.ElementsParser.prototype.createObjects = function() {\n    for (var i = 0, len = this.elements.length; i < len; i++) {\n      this.elements[i].setAttribute('svgUid', this.svgUid);\n      (function(_obj, i) {\n        setTimeout(function() {\n          _obj.createObject(_obj.elements[i], i);\n        }, 0);\n      })(this, i);\n    }\n  };\n\n  fabric.ElementsParser.prototype.createObject = function(el, index) {\n    var klass = fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\n    if (klass && klass.fromElement) {\n      try {\n        this._createObject(klass, el, index);\n      }\n      catch (err) {\n        fabric.log(err);\n      }\n    }\n    else {\n      this.checkIfDone();\n    }\n  };\n\n  fabric.ElementsParser.prototype._createObject = function(klass, el, index) {\n    klass.fromElement(el, this.createCallback(index, el), this.options);\n  };\n\n  fabric.ElementsParser.prototype.createCallback = function(index, el) {\n    var _this = this;\n    return function(obj) {\n      var _options;\n      _this.resolveGradient(obj, 'fill');\n      _this.resolveGradient(obj, 'stroke');\n      if (obj instanceof fabric.Image) {\n        _options = obj.parsePreserveAspectRatioAttribute(el);\n      }\n      obj._removeTransformMatrix(_options);\n      _this.reviver && _this.reviver(el, obj);\n      _this.instances[index] = obj;\n      _this.checkIfDone();\n    };\n  };\n\n  fabric.ElementsParser.prototype.resolveGradient = function(obj, property) {\n\n    var instanceFillValue = obj[property];\n    if (!(/^url\\(/).test(instanceFillValue)) {\n      return;\n    }\n    var gradientId = this.regexUrl.exec(instanceFillValue)[1];\n    this.regexUrl.lastIndex = 0;\n    if (fabric.gradientDefs[this.svgUid][gradientId]) {\n      obj.set(property,\n        fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));\n    }\n  };\n\n  fabric.ElementsParser.prototype.checkIfDone = function() {\n    if (--this.numElements === 0) {\n      this.instances = this.instances.filter(function(el) {\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        return el != null;\n      });\n      this.callback(this.instances, this.elements);\n    }\n  };\n\n(function() {\n\n  /**\n   * Creates accessors (getXXX, setXXX) for a \"class\", based on \"stateProperties\" array\n   * @static\n   * @memberOf fabric.util\n   * @param {Object} klass \"Class\" to create accessors for\n   */\n  fabric.util.createAccessors = function(klass) {\n    var proto = klass.prototype, i, propName,\n        capitalizedPropName, setterName, getterName;\n\n    for (i = proto.stateProperties.length; i--; ) {\n\n      propName = proto.stateProperties[i];\n      capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1);\n      setterName = 'set' + capitalizedPropName;\n      getterName = 'get' + capitalizedPropName;\n\n      // using `new Function` for better introspection\n      if (!proto[getterName]) {\n        proto[getterName] = (function(property) {\n          return new Function('return this.get(\"' + property + '\")');\n        })(propName);\n      }\n      if (!proto[setterName]) {\n        proto[setterName] = (function(property) {\n          return new Function('value', 'return this.set(\"' + property + '\", value)');\n        })(propName);\n      }\n    }\n  };\n\n  /** @lends fabric.Text.Prototype */\n  /**\n   * Retrieves object's fontSize\n   * @method getFontSize\n   * @memberOf fabric.Text.prototype\n   * @return {String} Font size (in pixels)\n   */\n\n  /**\n   * Sets object's fontSize\n   * Does not update the object .width and .height,\n   * call .initDimensions() to update the values.\n   * @method setFontSize\n   * @memberOf fabric.Text.prototype\n   * @param {Number} fontSize Font size (in pixels)\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's fontWeight\n   * @method getFontWeight\n   * @memberOf fabric.Text.prototype\n   * @return {(String|Number)} Font weight\n   */\n\n  /**\n   * Sets object's fontWeight\n   * Does not update the object .width and .height,\n   * call .initDimensions() to update the values.\n   * @method setFontWeight\n   * @memberOf fabric.Text.prototype\n   * @param {(Number|String)} fontWeight Font weight\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's fontFamily\n   * @method getFontFamily\n   * @memberOf fabric.Text.prototype\n   * @return {String} Font family\n   */\n\n  /**\n   * Sets object's fontFamily\n   * Does not update the object .width and .height,\n   * call .initDimensions() to update the values.\n   * @method setFontFamily\n   * @memberOf fabric.Text.prototype\n   * @param {String} fontFamily Font family\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's text\n   * @method getText\n   * @memberOf fabric.Text.prototype\n   * @return {String} text\n   */\n\n  /**\n   * Sets object's text\n   * Does not update the object .width and .height,\n   * call .initDimensions() to update the values.\n   * @method setText\n   * @memberOf fabric.Text.prototype\n   * @param {String} text Text\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's underline\n   * @method getUnderline\n   * @memberOf fabric.Text.prototype\n   * @return {Boolean} underline enabled or disabled\n   */\n\n  /**\n   * Sets object's underline\n   * @method setUnderline\n   * @memberOf fabric.Text.prototype\n   * @param {Boolean} underline Text decoration\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's fontStyle\n   * @method getFontStyle\n   * @memberOf fabric.Text.prototype\n   * @return {String} Font style\n   */\n\n  /**\n   * Sets object's fontStyle\n   * Does not update the object .width and .height,\n   * call .initDimensions() to update the values.\n   * @method setFontStyle\n   * @memberOf fabric.Text.prototype\n   * @param {String} fontStyle Font style\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's lineHeight\n   * @method getLineHeight\n   * @memberOf fabric.Text.prototype\n   * @return {Number} Line height\n   */\n\n  /**\n   * Sets object's lineHeight\n   * @method setLineHeight\n   * @memberOf fabric.Text.prototype\n   * @param {Number} lineHeight Line height\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's textAlign\n   * @method getTextAlign\n   * @memberOf fabric.Text.prototype\n   * @return {String} Text alignment\n   */\n\n  /**\n   * Sets object's textAlign\n   * @method setTextAlign\n   * @memberOf fabric.Text.prototype\n   * @param {String} textAlign Text alignment\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's textBackgroundColor\n   * @method getTextBackgroundColor\n   * @memberOf fabric.Text.prototype\n   * @return {String} Text background color\n   */\n\n  /**\n   * Sets object's textBackgroundColor\n   * @method setTextBackgroundColor\n   * @memberOf fabric.Text.prototype\n   * @param {String} textBackgroundColor Text background color\n   * @return {fabric.Text}\n   * @chainable\n   */\n\n  /** @lends fabric.Object.Prototype */\n  /**\n   * Retrieves object's {@link fabric.Object#clipTo|clipping function}\n   * @method getClipTo\n   * @memberOf fabric.Object.prototype\n   * @return {Function}\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#clipTo|clipping function}\n   * @method setClipTo\n   * @memberOf fabric.Object.prototype\n   * @param {Function} clipTo Clipping function\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}\n   * @method getTransformMatrix\n   * @memberOf fabric.Object.prototype\n   * @return {Array} transformMatrix\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}\n   * @method setTransformMatrix\n   * @memberOf fabric.Object.prototype\n   * @param {Array} transformMatrix\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#visible|visible} state\n   * @method getVisible\n   * @memberOf fabric.Object.prototype\n   * @return {Boolean} True if visible\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#visible|visible} state\n   * @method setVisible\n   * @memberOf fabric.Object.prototype\n   * @param {Boolean} value visible value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#shadow|shadow}\n   * @method getShadow\n   * @memberOf fabric.Object.prototype\n   * @return {Object} Shadow instance\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#stroke|stroke}\n   * @method getStroke\n   * @memberOf fabric.Object.prototype\n   * @return {String} stroke value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#stroke|stroke}\n   * @method setStroke\n   * @memberOf fabric.Object.prototype\n   * @param {String} value stroke value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}\n   * @method getStrokeWidth\n   * @memberOf fabric.Object.prototype\n   * @return {Number} strokeWidth value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}\n   * @method setStrokeWidth\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value strokeWidth value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#originX|originX}\n   * @method getOriginX\n   * @memberOf fabric.Object.prototype\n   * @return {String} originX value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#originX|originX}\n   * @method setOriginX\n   * @memberOf fabric.Object.prototype\n   * @param {String} value originX value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#originY|originY}\n   * @method getOriginY\n   * @memberOf fabric.Object.prototype\n   * @return {String} originY value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#originY|originY}\n   * @method setOriginY\n   * @memberOf fabric.Object.prototype\n   * @param {String} value originY value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#fill|fill}\n   * @method getFill\n   * @memberOf fabric.Object.prototype\n   * @return {String} Fill value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#fill|fill}\n   * @method setFill\n   * @memberOf fabric.Object.prototype\n   * @param {String} value Fill value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#opacity|opacity}\n   * @method getOpacity\n   * @memberOf fabric.Object.prototype\n   * @return {Number} Opacity value (0-1)\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#opacity|opacity}\n   * @method setOpacity\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value Opacity value (0-1)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)\n   * @method getAngle\n   * @memberOf fabric.Object.prototype\n   * @return {Number}\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#top|top position}\n   * @method getTop\n   * @memberOf fabric.Object.prototype\n   * @return {Number} Top value (in pixels)\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#top|top position}\n   * @method setTop\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value Top value (in pixels)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#left|left position}\n   * @method getLeft\n   * @memberOf fabric.Object.prototype\n   * @return {Number} Left value (in pixels)\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#left|left position}\n   * @method setLeft\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value Left value (in pixels)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#scaleX|scaleX} value\n   * @method getScaleX\n   * @memberOf fabric.Object.prototype\n   * @return {Number} scaleX value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#scaleX|scaleX} value\n   * @method setScaleX\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value scaleX value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#scaleY|scaleY} value\n   * @method getScaleY\n   * @memberOf fabric.Object.prototype\n   * @return {Number} scaleY value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#scaleY|scaleY} value\n   * @method setScaleY\n   * @memberOf fabric.Object.prototype\n   * @param {Number} value scaleY value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#flipX|flipX} value\n   * @method getFlipX\n   * @memberOf fabric.Object.prototype\n   * @return {Boolean} flipX value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#flipX|flipX} value\n   * @method setFlipX\n   * @memberOf fabric.Object.prototype\n   * @param {Boolean} value flipX value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n  /**\n   * Retrieves object's {@link fabric.Object#flipY|flipY} value\n   * @method getFlipY\n   * @memberOf fabric.Object.prototype\n   * @return {Boolean} flipY value\n   */\n\n  /**\n   * Sets object's {@link fabric.Object#flipY|flipY} value\n   * @method setFlipY\n   * @memberOf fabric.Object.prototype\n   * @param {Boolean} value flipY value\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n  (function(global) {\n\n    'use strict';\n\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n    //var fabric = global.fabric || (global.fabric = { });\n\n    if (fabric.Point) {\n      fabric.warn('fabric.Point is already defined');\n      return;\n    }\n\n    fabric.Point = Point;\n\n    /**\n     * Point class\n     * @class fabric.Point\n     * @memberOf fabric\n     * @constructor\n     * @param {Number} x\n     * @param {Number} y\n     * @return {fabric.Point} thisArg\n     */\n    function Point(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    Point.prototype = /** @lends fabric.Point.prototype */ {\n\n      type: 'point',\n\n      constructor: Point,\n\n      /**\n       * Adds another point to this one and returns another one\n       * @param {fabric.Point} that\n       * @return {fabric.Point} new Point instance with added values\n       */\n      add: function (that) {\n        return new Point(this.x + that.x, this.y + that.y);\n      },\n\n      /**\n       * Adds another point to this one\n       * @param {fabric.Point} that\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      addEquals: function (that) {\n        this.x += that.x;\n        this.y += that.y;\n        return this;\n      },\n\n      /**\n       * Adds value to this point and returns a new one\n       * @param {Number} scalar\n       * @return {fabric.Point} new Point with added value\n       */\n      scalarAdd: function (scalar) {\n        return new Point(this.x + scalar, this.y + scalar);\n      },\n\n      /**\n       * Adds value to this point\n       * @param {Number} scalar\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      scalarAddEquals: function (scalar) {\n        this.x += scalar;\n        this.y += scalar;\n        return this;\n      },\n\n      /**\n       * Subtracts another point from this point and returns a new one\n       * @param {fabric.Point} that\n       * @return {fabric.Point} new Point object with subtracted values\n       */\n      subtract: function (that) {\n        return new Point(this.x - that.x, this.y - that.y);\n      },\n\n      /**\n       * Subtracts another point from this point\n       * @param {fabric.Point} that\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      subtractEquals: function (that) {\n        this.x -= that.x;\n        this.y -= that.y;\n        return this;\n      },\n\n      /**\n       * Subtracts value from this point and returns a new one\n       * @param {Number} scalar\n       * @return {fabric.Point}\n       */\n      scalarSubtract: function (scalar) {\n        return new Point(this.x - scalar, this.y - scalar);\n      },\n\n      /**\n       * Subtracts value from this point\n       * @param {Number} scalar\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      scalarSubtractEquals: function (scalar) {\n        this.x -= scalar;\n        this.y -= scalar;\n        return this;\n      },\n\n      /**\n       * Multiplies this point by a value and returns a new one\n       * TODO: rename in scalarMultiply in 2.0\n       * @param {Number} scalar\n       * @return {fabric.Point}\n       */\n      multiply: function (scalar) {\n        return new Point(this.x * scalar, this.y * scalar);\n      },\n\n      /**\n       * Multiplies this point by a value\n       * TODO: rename in scalarMultiplyEquals in 2.0\n       * @param {Number} scalar\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      multiplyEquals: function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n      },\n\n      /**\n       * Divides this point by a value and returns a new one\n       * TODO: rename in scalarDivide in 2.0\n       * @param {Number} scalar\n       * @return {fabric.Point}\n       */\n      divide: function (scalar) {\n        return new Point(this.x / scalar, this.y / scalar);\n      },\n\n      /**\n       * Divides this point by a value\n       * TODO: rename in scalarDivideEquals in 2.0\n       * @param {Number} scalar\n       * @return {fabric.Point} thisArg\n       * @chainable\n       */\n      divideEquals: function (scalar) {\n        this.x /= scalar;\n        this.y /= scalar;\n        return this;\n      },\n\n      /**\n       * Returns true if this point is equal to another one\n       * @param {fabric.Point} that\n       * @return {Boolean}\n       */\n      eq: function (that) {\n        return (this.x === that.x && this.y === that.y);\n      },\n\n      /**\n       * Returns true if this point is less than another one\n       * @param {fabric.Point} that\n       * @return {Boolean}\n       */\n      lt: function (that) {\n        return (this.x < that.x && this.y < that.y);\n      },\n\n      /**\n       * Returns true if this point is less than or equal to another one\n       * @param {fabric.Point} that\n       * @return {Boolean}\n       */\n      lte: function (that) {\n        return (this.x <= that.x && this.y <= that.y);\n      },\n\n      /**\n\n       * Returns true if this point is greater another one\n       * @param {fabric.Point} that\n       * @return {Boolean}\n       */\n      gt: function (that) {\n        return (this.x > that.x && this.y > that.y);\n      },\n\n      /**\n       * Returns true if this point is greater than or equal to another one\n       * @param {fabric.Point} that\n       * @return {Boolean}\n       */\n      gte: function (that) {\n        return (this.x >= that.x && this.y >= that.y);\n      },\n\n      /**\n       * Returns new point which is the result of linear interpolation with this one and another one\n       * @param {fabric.Point} that\n       * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n       * @return {fabric.Point}\n       */\n      lerp: function (that, t) {\n        if (typeof t === 'undefined') {\n          t = 0.5;\n        }\n        t = Math.max(Math.min(1, t), 0);\n        return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n      },\n\n      /**\n       * Returns distance from this point and another one\n       * @param {fabric.Point} that\n       * @return {Number}\n       */\n      distanceFrom: function (that) {\n        var dx = this.x - that.x,\n            dy = this.y - that.y;\n        return Math.sqrt(dx * dx + dy * dy);\n      },\n\n      /**\n       * Returns the point between this point and another one\n       * @param {fabric.Point} that\n       * @return {fabric.Point}\n       */\n      midPointFrom: function (that) {\n        return this.lerp(that);\n      },\n\n      /**\n       * Returns a new point which is the min of this and another one\n       * @param {fabric.Point} that\n       * @return {fabric.Point}\n       */\n      min: function (that) {\n        return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n      },\n\n      /**\n       * Returns a new point which is the max of this and another one\n       * @param {fabric.Point} that\n       * @return {fabric.Point}\n       */\n      max: function (that) {\n        return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n      },\n\n      /**\n       * Returns string representation of this point\n       * @return {String}\n       */\n      toString: function () {\n        return this.x + ',' + this.y;\n      },\n\n      /**\n       * Sets x/y of this point\n       * @param {Number} x\n       * @param {Number} y\n       * @chainable\n       */\n      setXY: function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n      },\n\n      /**\n       * Sets x of this point\n       * @param {Number} x\n       * @chainable\n       */\n      setX: function (x) {\n        this.x = x;\n        return this;\n      },\n\n      /**\n       * Sets y of this point\n       * @param {Number} y\n       * @chainable\n       */\n      setY: function (y) {\n        this.y = y;\n        return this;\n      },\n\n      /**\n       * Sets x/y of this point from another point\n       * @param {fabric.Point} that\n       * @chainable\n       */\n      setFromPoint: function (that) {\n        this.x = that.x;\n        this.y = that.y;\n        return this;\n      },\n\n      /**\n       * Swaps x/y of this point and another point\n       * @param {fabric.Point} that\n       */\n      swap: function (that) {\n        var x = this.x,\n            y = this.y;\n        this.x = that.x;\n        this.y = that.y;\n        that.x = x;\n        that.y = y;\n      },\n\n      /**\n       * return a cloned instance of the point\n       * @return {fabric.Point}\n       */\n      clone: function () {\n        return new Point(this.x, this.y);\n      }\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n    //var fabric = global.fabric || (global.fabric = { });\n\n    if (fabric.Intersection) {\n      fabric.warn('fabric.Intersection is already defined');\n      return;\n    }\n\n    /**\n     * Intersection class\n     * @class fabric.Intersection\n     * @memberOf fabric\n     * @constructor\n     */\n    function Intersection(status) {\n      this.status = status;\n      this.points = [];\n    }\n\n    fabric.Intersection = Intersection;\n\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n      constructor: Intersection,\n\n      /**\n       * Appends a point to intersection\n       * @param {fabric.Point} point\n       * @return {fabric.Intersection} thisArg\n       * @chainable\n       */\n      appendPoint: function (point) {\n        this.points.push(point);\n        return this;\n      },\n\n      /**\n       * Appends points to intersection\n       * @param {Array} points\n       * @return {fabric.Intersection} thisArg\n       * @chainable\n       */\n      appendPoints: function (points) {\n        this.points = this.points.concat(points);\n        return this;\n      }\n    };\n\n    /**\n     * Checks if one line intersects another\n     * TODO: rename in intersectSegmentSegment\n     * @static\n     * @param {fabric.Point} a1\n     * @param {fabric.Point} a2\n     * @param {fabric.Point} b1\n     * @param {fabric.Point} b2\n     * @return {fabric.Intersection}\n     */\n    fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n      var result,\n          uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n          ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n          uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n      if (uB !== 0) {\n        var ua = uaT / uB,\n            ub = ubT / uB;\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n          result = new Intersection('Intersection');\n          result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n        }\n        else {\n          result = new Intersection();\n        }\n      }\n      else {\n        if (uaT === 0 || ubT === 0) {\n          result = new Intersection('Coincident');\n        }\n        else {\n          result = new Intersection('Parallel');\n        }\n      }\n      return result;\n    };\n\n    /**\n     * Checks if line intersects polygon\n     * TODO: rename in intersectSegmentPolygon\n     * fix detection of coincident\n     * @static\n     * @param {fabric.Point} a1\n     * @param {fabric.Point} a2\n     * @param {Array} points\n     * @return {fabric.Intersection}\n     */\n    fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n      var result = new Intersection(),\n          length = points.length,\n          b1, b2, inter, i;\n\n      for (i = 0; i < length; i++) {\n        b1 = points[i];\n        b2 = points[(i + 1) % length];\n        inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n        result.appendPoints(inter.points);\n      }\n      if (result.points.length > 0) {\n        result.status = 'Intersection';\n      }\n      return result;\n    };\n\n    /**\n     * Checks if polygon intersects another polygon\n     * @static\n     * @param {Array} points1\n     * @param {Array} points2\n     * @return {fabric.Intersection}\n     */\n    fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n      var result = new Intersection(),\n          length = points1.length, i;\n\n      for (i = 0; i < length; i++) {\n        var a1 = points1[i],\n            a2 = points1[(i + 1) % length],\n            inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n        result.appendPoints(inter.points);\n      }\n      if (result.points.length > 0) {\n        result.status = 'Intersection';\n      }\n      return result;\n    };\n\n    /**\n     * Checks if polygon intersects rectangle\n     * @static\n     * @param {Array} points\n     * @param {fabric.Point} r1\n     * @param {fabric.Point} r2\n     * @return {fabric.Intersection}\n     */\n    fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n      var min = r1.min(r2),\n          max = r1.max(r2),\n          topRight = new fabric.Point(max.x, min.y),\n          bottomLeft = new fabric.Point(min.x, max.y),\n          inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n          inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n          inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n          inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n          result = new Intersection();\n\n      result.appendPoints(inter1.points);\n      result.appendPoints(inter2.points);\n      result.appendPoints(inter3.points);\n      result.appendPoints(inter4.points);\n\n      if (result.points.length > 0) {\n        result.status = 'Intersection';\n      }\n      return result;\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    //var fabric = global.fabric || (global.fabric = { });\n\n    if (fabric.Color) {\n      fabric.warn('fabric.Color is already defined.');\n      return;\n    }\n\n    /**\n     * Color class\n     * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n     * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n     *\n     * @class fabric.Color\n     * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\n     * @return {fabric.Color} thisArg\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n     */\n    function Color(color) {\n      if (!color) {\n        this.setSource([0, 0, 0, 1]);\n      }\n      else {\n        this._tryParsingColor(color);\n      }\n    }\n\n    fabric.Color = Color;\n\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n      /**\n       * @private\n       * @param {String|Array} color Color value to parse\n       */\n      _tryParsingColor: function(color) {\n        var source;\n\n        if (color in Color.colorNameMap) {\n          color = Color.colorNameMap[color];\n        }\n\n        if (color === 'transparent') {\n          source = [255, 255, 255, 0];\n        }\n\n        if (!source) {\n          source = Color.sourceFromHex(color);\n        }\n        if (!source) {\n          source = Color.sourceFromRgb(color);\n        }\n        if (!source) {\n          source = Color.sourceFromHsl(color);\n        }\n        if (!source) {\n          //if color is not recognize let's make black as canvas does\n          source = [0, 0, 0, 1];\n        }\n        if (source) {\n          this.setSource(source);\n        }\n      },\n\n      /**\n       * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n       * @private\n       * @param {Number} r Red color value\n       * @param {Number} g Green color value\n       * @param {Number} b Blue color value\n       * @return {Array} Hsl color\n       */\n      _rgbToHsl: function(r, g, b) {\n        r /= 255; g /= 255; b /= 255;\n\n        var h, s, l,\n            max = fabric.util.array.max([r, g, b]),\n            min = fabric.util.array.min([r, g, b]);\n\n        l = (max + min) / 2;\n\n        if (max === min) {\n          h = s = 0; // achromatic\n        }\n        else {\n          var d = max - min;\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n          switch (max) {\n            case r:\n              h = (g - b) / d + (g < b ? 6 : 0);\n              break;\n            case g:\n              h = (b - r) / d + 2;\n              break;\n            case b:\n              h = (r - g) / d + 4;\n              break;\n          }\n          h /= 6;\n        }\n\n        return [\n          Math.round(h * 360),\n          Math.round(s * 100),\n          Math.round(l * 100)\n        ];\n      },\n\n      /**\n       * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n       * @return {Array}\n       */\n      getSource: function() {\n        return this._source;\n      },\n\n      /**\n       * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n       * @param {Array} source\n       */\n      setSource: function(source) {\n        this._source = source;\n      },\n\n      /**\n       * Returns color representation in RGB format\n       * @return {String} ex: rgb(0-255,0-255,0-255)\n       */\n      toRgb: function() {\n        var source = this.getSource();\n        return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n      },\n\n      /**\n       * Returns color representation in RGBA format\n       * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n       */\n      toRgba: function() {\n        var source = this.getSource();\n        return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n      },\n\n      /**\n       * Returns color representation in HSL format\n       * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n       */\n      toHsl: function() {\n        var source = this.getSource(),\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n        return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n      },\n\n      /**\n       * Returns color representation in HSLA format\n       * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n       */\n      toHsla: function() {\n        var source = this.getSource(),\n            hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n        return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n      },\n\n      /**\n       * Returns color representation in HEX format\n       * @return {String} ex: FF5555\n       */\n      toHex: function() {\n        var source = this.getSource(), r, g, b;\n\n        r = source[0].toString(16);\n        r = (r.length === 1) ? ('0' + r) : r;\n\n        g = source[1].toString(16);\n        g = (g.length === 1) ? ('0' + g) : g;\n\n        b = source[2].toString(16);\n        b = (b.length === 1) ? ('0' + b) : b;\n\n        return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n      },\n\n      /**\n       * Returns color representation in HEXA format\n       * @return {String} ex: FF5555CC\n       */\n      toHexa: function() {\n        var source = this.getSource(), a;\n\n        a = Math.round(source[3] * 255);\n        a = a.toString(16);\n        a = (a.length === 1) ? ('0' + a) : a;\n\n        return this.toHex() + a.toUpperCase();\n      },\n\n      /**\n       * Gets value of alpha channel for this color\n       * @return {Number} 0-1\n       */\n      getAlpha: function() {\n        return this.getSource()[3];\n      },\n\n      /**\n       * Sets value of alpha channel for this color\n       * @param {Number} alpha Alpha value 0-1\n       * @return {fabric.Color} thisArg\n       */\n      setAlpha: function(alpha) {\n        var source = this.getSource();\n        source[3] = alpha;\n        this.setSource(source);\n        return this;\n      },\n\n      /**\n       * Transforms color to its grayscale representation\n       * @return {fabric.Color} thisArg\n       */\n      toGrayscale: function() {\n        var source = this.getSource(),\n            average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n            currentAlpha = source[3];\n        this.setSource([average, average, average, currentAlpha]);\n        return this;\n      },\n\n      /**\n       * Transforms color to its black and white representation\n       * @param {Number} threshold\n       * @return {fabric.Color} thisArg\n       */\n      toBlackWhite: function(threshold) {\n        var source = this.getSource(),\n            average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n            currentAlpha = source[3];\n\n        threshold = threshold || 127;\n\n        average = (Number(average) < Number(threshold)) ? 0 : 255;\n        this.setSource([average, average, average, currentAlpha]);\n        return this;\n      },\n\n      /**\n       * Overlays color with another color\n       * @param {String|fabric.Color} otherColor\n       * @return {fabric.Color} thisArg\n       */\n      overlayWith: function(otherColor) {\n        if (!(otherColor instanceof Color)) {\n          otherColor = new Color(otherColor);\n        }\n\n        var result = [],\n            alpha = this.getAlpha(),\n            otherAlpha = 0.5,\n            source = this.getSource(),\n            otherSource = otherColor.getSource(), i;\n\n        for (i = 0; i < 3; i++) {\n          result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n        }\n\n        result[3] = alpha;\n        this.setSource(result);\n        return this;\n      }\n    };\n\n    /**\n     * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n     * @static\n     * @field\n     * @memberOf fabric.Color\n     */\n    // eslint-disable-next-line max-len\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n\n    /**\n     * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n     * @static\n     * @field\n     * @memberOf fabric.Color\n     */\n    fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n\n    /**\n     * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n     * @static\n     * @field\n     * @memberOf fabric.Color\n     */\n    fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n\n    /**\n     * Map of the 148 color names with HEX code\n     * @static\n     * @field\n     * @memberOf fabric.Color\n     * @see: https://www.w3.org/TR/css3-color/#svg-color\n     */\n    fabric.Color.colorNameMap = {\n      aliceblue:            '#F0F8FF',\n      antiquewhite:         '#FAEBD7',\n      aqua:                 '#00FFFF',\n      aquamarine:           '#7FFFD4',\n      azure:                '#F0FFFF',\n      beige:                '#F5F5DC',\n      bisque:               '#FFE4C4',\n      black:                '#000000',\n      blanchedalmond:       '#FFEBCD',\n      blue:                 '#0000FF',\n      blueviolet:           '#8A2BE2',\n      brown:                '#A52A2A',\n      burlywood:            '#DEB887',\n      cadetblue:            '#5F9EA0',\n      chartreuse:           '#7FFF00',\n      chocolate:            '#D2691E',\n      coral:                '#FF7F50',\n      cornflowerblue:       '#6495ED',\n      cornsilk:             '#FFF8DC',\n      crimson:              '#DC143C',\n      cyan:                 '#00FFFF',\n      darkblue:             '#00008B',\n      darkcyan:             '#008B8B',\n      darkgoldenrod:        '#B8860B',\n      darkgray:             '#A9A9A9',\n      darkgrey:             '#A9A9A9',\n      darkgreen:            '#006400',\n      darkkhaki:            '#BDB76B',\n      darkmagenta:          '#8B008B',\n      darkolivegreen:       '#556B2F',\n      darkorange:           '#FF8C00',\n      darkorchid:           '#9932CC',\n      darkred:              '#8B0000',\n      darksalmon:           '#E9967A',\n      darkseagreen:         '#8FBC8F',\n      darkslateblue:        '#483D8B',\n      darkslategray:        '#2F4F4F',\n      darkslategrey:        '#2F4F4F',\n      darkturquoise:        '#00CED1',\n      darkviolet:           '#9400D3',\n      deeppink:             '#FF1493',\n      deepskyblue:          '#00BFFF',\n      dimgray:              '#696969',\n      dimgrey:              '#696969',\n      dodgerblue:           '#1E90FF',\n      firebrick:            '#B22222',\n      floralwhite:          '#FFFAF0',\n      forestgreen:          '#228B22',\n      fuchsia:              '#FF00FF',\n      gainsboro:            '#DCDCDC',\n      ghostwhite:           '#F8F8FF',\n      gold:                 '#FFD700',\n      goldenrod:            '#DAA520',\n      gray:                 '#808080',\n      grey:                 '#808080',\n      green:                '#008000',\n      greenyellow:          '#ADFF2F',\n      honeydew:             '#F0FFF0',\n      hotpink:              '#FF69B4',\n      indianred:            '#CD5C5C',\n      indigo:               '#4B0082',\n      ivory:                '#FFFFF0',\n      khaki:                '#F0E68C',\n      lavender:             '#E6E6FA',\n      lavenderblush:        '#FFF0F5',\n      lawngreen:            '#7CFC00',\n      lemonchiffon:         '#FFFACD',\n      lightblue:            '#ADD8E6',\n      lightcoral:           '#F08080',\n      lightcyan:            '#E0FFFF',\n      lightgoldenrodyellow: '#FAFAD2',\n      lightgray:            '#D3D3D3',\n      lightgrey:            '#D3D3D3',\n      lightgreen:           '#90EE90',\n      lightpink:            '#FFB6C1',\n      lightsalmon:          '#FFA07A',\n      lightseagreen:        '#20B2AA',\n      lightskyblue:         '#87CEFA',\n      lightslategray:       '#778899',\n      lightslategrey:       '#778899',\n      lightsteelblue:       '#B0C4DE',\n      lightyellow:          '#FFFFE0',\n      lime:                 '#00FF00',\n      limegreen:            '#32CD32',\n      linen:                '#FAF0E6',\n      magenta:              '#FF00FF',\n      maroon:               '#800000',\n      mediumaquamarine:     '#66CDAA',\n      mediumblue:           '#0000CD',\n      mediumorchid:         '#BA55D3',\n      mediumpurple:         '#9370DB',\n      mediumseagreen:       '#3CB371',\n      mediumslateblue:      '#7B68EE',\n      mediumspringgreen:    '#00FA9A',\n      mediumturquoise:      '#48D1CC',\n      mediumvioletred:      '#C71585',\n      midnightblue:         '#191970',\n      mintcream:            '#F5FFFA',\n      mistyrose:            '#FFE4E1',\n      moccasin:             '#FFE4B5',\n      navajowhite:          '#FFDEAD',\n      navy:                 '#000080',\n      oldlace:              '#FDF5E6',\n      olive:                '#808000',\n      olivedrab:            '#6B8E23',\n      orange:               '#FFA500',\n      orangered:            '#FF4500',\n      orchid:               '#DA70D6',\n      palegoldenrod:        '#EEE8AA',\n      palegreen:            '#98FB98',\n      paleturquoise:        '#AFEEEE',\n      palevioletred:        '#DB7093',\n      papayawhip:           '#FFEFD5',\n      peachpuff:            '#FFDAB9',\n      peru:                 '#CD853F',\n      pink:                 '#FFC0CB',\n      plum:                 '#DDA0DD',\n      powderblue:           '#B0E0E6',\n      purple:               '#800080',\n      rebeccapurple:        '#663399',\n      red:                  '#FF0000',\n      rosybrown:            '#BC8F8F',\n      royalblue:            '#4169E1',\n      saddlebrown:          '#8B4513',\n      salmon:               '#FA8072',\n      sandybrown:           '#F4A460',\n      seagreen:             '#2E8B57',\n      seashell:             '#FFF5EE',\n      sienna:               '#A0522D',\n      silver:               '#C0C0C0',\n      skyblue:              '#87CEEB',\n      slateblue:            '#6A5ACD',\n      slategray:            '#708090',\n      slategrey:            '#708090',\n      snow:                 '#FFFAFA',\n      springgreen:          '#00FF7F',\n      steelblue:            '#4682B4',\n      tan:                  '#D2B48C',\n      teal:                 '#008080',\n      thistle:              '#D8BFD8',\n      tomato:               '#FF6347',\n      turquoise:            '#40E0D0',\n      violet:               '#EE82EE',\n      wheat:                '#F5DEB3',\n      white:                '#FFFFFF',\n      whitesmoke:           '#F5F5F5',\n      yellow:               '#FFFF00',\n      yellowgreen:          '#9ACD32'\n    };\n\n    /**\n     * @private\n     * @param {Number} p\n     * @param {Number} q\n     * @param {Number} t\n     * @return {Number}\n     */\n    function hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n      if (t > 1) {\n        t -= 1;\n      }\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n      if (t < 1 / 2) {\n        return q;\n      }\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n      return p;\n    }\n\n    /**\n     * Returns new color object, when given a color in RGB format\n     * @memberOf fabric.Color\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromRgb = function(color) {\n      return Color.fromSource(Color.sourceFromRgb(color));\n    };\n\n    /**\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n     * @memberOf fabric.Color\n     * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n     * @return {Array} source\n     */\n    fabric.Color.sourceFromRgb = function(color) {\n      var match = color.match(Color.reRGBa);\n      if (match) {\n        var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n            g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n            b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n        return [\n          parseInt(r, 10),\n          parseInt(g, 10),\n          parseInt(b, 10),\n          match[4] ? parseFloat(match[4]) : 1\n        ];\n      }\n    };\n\n    /**\n     * Returns new color object, when given a color in RGBA format\n     * @static\n     * @function\n     * @memberOf fabric.Color\n     * @param {String} color\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromRgba = Color.fromRgb;\n\n    /**\n     * Returns new color object, when given a color in HSL format\n     * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n     * @memberOf fabric.Color\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromHsl = function(color) {\n      return Color.fromSource(Color.sourceFromHsl(color));\n    };\n\n    /**\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @memberOf fabric.Color\n     * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n     * @return {Array} source\n     * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n     */\n    fabric.Color.sourceFromHsl = function(color) {\n      var match = color.match(Color.reHSLa);\n      if (!match) {\n        return;\n      }\n\n      var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n          s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n          l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n          r, g, b;\n\n      if (s === 0) {\n        r = g = b = l;\n      }\n      else {\n        var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n            p = l * 2 - q;\n\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n      }\n\n      return [\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    };\n\n    /**\n     * Returns new color object, when given a color in HSLA format\n     * @static\n     * @function\n     * @memberOf fabric.Color\n     * @param {String} color\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromHsla = Color.fromHsl;\n\n    /**\n     * Returns new color object, when given a color in HEX format\n     * @static\n     * @memberOf fabric.Color\n     * @param {String} color Color value ex: FF5555\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromHex = function(color) {\n      return Color.fromSource(Color.sourceFromHex(color));\n    };\n\n    /**\n     * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n     * @static\n     * @memberOf fabric.Color\n     * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n     * @return {Array} source\n     */\n    fabric.Color.sourceFromHex = function(color) {\n      if (color.match(Color.reHex)) {\n        var value = color.slice(color.indexOf('#') + 1),\n            isShortNotation = (value.length === 3 || value.length === 4),\n            isRGBa = (value.length === 8 || value.length === 4),\n            r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n            g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n            b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\n            a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\n\n        return [\n          parseInt(r, 16),\n          parseInt(g, 16),\n          parseInt(b, 16),\n          parseFloat((parseInt(a, 16) / 255).toFixed(2))\n        ];\n      }\n    };\n\n    /**\n     * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n     * @static\n     * @memberOf fabric.Color\n     * @param {Array} source\n     * @return {fabric.Color}\n     */\n    fabric.Color.fromSource = function(source) {\n      var oColor = new Color();\n      oColor.setSource(source);\n      return oColor;\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function() {\n\n    /* _FROM_SVG_START_ */\n    function getColorStop(el) {\n      var style = el.getAttribute('style'),\n          offset = el.getAttribute('offset') || 0,\n          color, colorAlpha, opacity, i;\n\n      // convert percents to absolute values\n      offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n      offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n      if (style) {\n        var keyValuePairs = style.split(/\\s*;\\s*/);\n\n        if (keyValuePairs[keyValuePairs.length - 1] === '') {\n          keyValuePairs.pop();\n        }\n\n        for (i = keyValuePairs.length; i--; ) {\n\n          var split = keyValuePairs[i].split(/\\s*:\\s*/),\n              key = split[0].trim(),\n              value = split[1].trim();\n\n          if (key === 'stop-color') {\n            color = value;\n          }\n          else if (key === 'stop-opacity') {\n            opacity = value;\n          }\n        }\n      }\n\n      if (!color) {\n        color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n      }\n      if (!opacity) {\n        opacity = el.getAttribute('stop-opacity');\n      }\n\n      color = new fabric.Color(color);\n      colorAlpha = color.getAlpha();\n      opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n      opacity *= colorAlpha;\n\n      return {\n        offset: offset,\n        color: color.toRgb(),\n        opacity: opacity\n      };\n    }\n\n    function getLinearCoords(el) {\n      return {\n        x1: el.getAttribute('x1') || 0,\n        y1: el.getAttribute('y1') || 0,\n        x2: el.getAttribute('x2') || '100%',\n        y2: el.getAttribute('y2') || 0\n      };\n    }\n\n    function getRadialCoords(el) {\n      return {\n        x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n        y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n        r1: 0,\n        x2: el.getAttribute('cx') || '50%',\n        y2: el.getAttribute('cy') || '50%',\n        r2: el.getAttribute('r') || '50%'\n      };\n    }\n    /* _FROM_SVG_END_ */\n\n    var clone = fabric.util.object.clone;\n\n    /**\n     * Gradient class\n     * @class fabric.Gradient\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n     * @see {@link fabric.Gradient#initialize} for constructor definition\n     */\n    fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\n      /**\n       * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n       * @type Number\n       * @default 0\n       */\n      offsetX: 0,\n\n      /**\n       * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n       * @type Number\n       * @default 0\n       */\n      offsetY: 0,\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n       * @return {fabric.Gradient} thisArg\n       */\n      initialize: function(options) {\n        options || (options = { });\n\n        var coords = { };\n\n        this.id = fabric.Object.__uid++;\n        this.type = options.type || 'linear';\n\n        coords = {\n          x1: options.coords.x1 || 0,\n          y1: options.coords.y1 || 0,\n          x2: options.coords.x2 || 0,\n          y2: options.coords.y2 || 0\n        };\n\n        if (this.type === 'radial') {\n          coords.r1 = options.coords.r1 || 0;\n          coords.r2 = options.coords.r2 || 0;\n        }\n        this.coords = coords;\n        this.colorStops = options.colorStops.slice();\n        if (options.gradientTransform) {\n          this.gradientTransform = options.gradientTransform;\n        }\n        this.offsetX = options.offsetX || this.offsetX;\n        this.offsetY = options.offsetY || this.offsetY;\n      },\n\n      /**\n       * Adds another colorStop\n       * @param {Object} colorStop Object with offset and color\n       * @return {fabric.Gradient} thisArg\n       */\n      addColorStop: function(colorStops) {\n        for (var position in colorStops) {\n          var color = new fabric.Color(colorStops[position]);\n          this.colorStops.push({\n            offset: parseFloat(position),\n            color: color.toRgb(),\n            opacity: color.getAlpha()\n          });\n        }\n        return this;\n      },\n\n      /**\n       * Returns object representation of a gradient\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object}\n       */\n      toObject: function(propertiesToInclude) {\n        var object = {\n          type: this.type,\n          coords: this.coords,\n          colorStops: this.colorStops,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY,\n          gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\n        };\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n        return object;\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of an gradient\n       * @param {Object} object Object to create a gradient for\n       * @return {String} SVG representation of an gradient (linear/radial)\n       */\n      toSVG: function(object) {\n        var coords = clone(this.coords, true), i, len,\n            markup, commonAttributes, colorStops = clone(this.colorStops, true),\n            needsSwap = coords.r1 > coords.r2,\n            offsetX = object.width / 2, offsetY = object.height / 2;\n        // colorStops must be sorted ascending\n        colorStops.sort(function(a, b) {\n          return a.offset - b.offset;\n        });\n        if (object.type === 'path') {\n          offsetX -= object.pathOffset.x;\n          offsetY -= object.pathOffset.y;\n        }\n        for (var prop in coords) {\n          if (prop === 'x1' || prop === 'x2') {\n            coords[prop] += this.offsetX - offsetX;\n          }\n          else if (prop === 'y1' || prop === 'y2') {\n            coords[prop] += this.offsetY - offsetY;\n          }\n        }\n\n        commonAttributes = 'id=\"SVGID_' + this.id +\n                       '\" gradientUnits=\"userSpaceOnUse\"';\n        if (this.gradientTransform) {\n          commonAttributes += ' gradientTransform=\"matrix(' + this.gradientTransform.join(' ') + ')\" ';\n        }\n        if (this.type === 'linear') {\n          markup = [\n            '<linearGradient ',\n            commonAttributes,\n            ' x1=\"', coords.x1,\n            '\" y1=\"', coords.y1,\n            '\" x2=\"', coords.x2,\n            '\" y2=\"', coords.y2,\n            '\">\\n'\n          ];\n        }\n        else if (this.type === 'radial') {\n          // svg radial gradient has just 1 radius. the biggest.\n          markup = [\n            '<radialGradient ',\n            commonAttributes,\n            ' cx=\"', needsSwap ? coords.x1 : coords.x2,\n            '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\n            '\" r=\"', needsSwap ? coords.r1 : coords.r2,\n            '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\n            '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\n            '\">\\n'\n          ];\n        }\n\n        if (this.type === 'radial') {\n          if (needsSwap) {\n            // svg goes from internal to external radius. if radius are inverted, swap color stops.\n            colorStops = colorStops.concat();\n            colorStops.reverse();\n            for (i = 0, len = colorStops.length; i < len; i++) {\n              colorStops[i].offset = 1 - colorStops[i].offset;\n            }\n          }\n          var minRadius = Math.min(coords.r1, coords.r2);\n          if (minRadius > 0) {\n            // i have to shift all colorStops and add new one in 0.\n            var maxRadius = Math.max(coords.r1, coords.r2),\n                percentageShift = minRadius / maxRadius;\n            for (i = 0, len = colorStops.length; i < len; i++) {\n              colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\n            }\n          }\n        }\n\n        for (i = 0, len = colorStops.length; i < len; i++) {\n          var colorStop = colorStops[i];\n          markup.push(\n            '<stop ',\n            'offset=\"', (colorStop.offset * 100) + '%',\n            '\" style=\"stop-color:', colorStop.color,\n            (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\n            '\"/>\\n'\n          );\n        }\n\n        markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\n        return markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * Returns an instance of CanvasGradient\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @return {CanvasGradient}\n       */\n      toLive: function(ctx) {\n        var gradient, coords = fabric.util.object.clone(this.coords), i, len;\n\n        if (!this.type) {\n          return;\n        }\n\n        if (this.type === 'linear') {\n          gradient = ctx.createLinearGradient(\n            coords.x1, coords.y1, coords.x2, coords.y2);\n        }\n        else if (this.type === 'radial') {\n          gradient = ctx.createRadialGradient(\n            coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n        }\n\n        for (i = 0, len = this.colorStops.length; i < len; i++) {\n          var color = this.colorStops[i].color,\n              opacity = this.colorStops[i].opacity,\n              offset = this.colorStops[i].offset;\n\n          if (typeof opacity !== 'undefined') {\n            color = new fabric.Color(color).setAlpha(opacity).toRgba();\n          }\n          gradient.addColorStop(offset, color);\n        }\n\n        return gradient;\n      }\n    });\n\n    fabric.util.object.extend(fabric.Gradient, {\n\n      /* _FROM_SVG_START_ */\n      /**\n       * Returns {@link fabric.Gradient} instance from an SVG element\n       * @static\n       * @memberOf fabric.Gradient\n       * @param {SVGGradientElement} el SVG gradient element\n       * @param {fabric.Object} instance\n       * @return {fabric.Gradient} Gradient instance\n       * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n       * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n       */\n      fromElement: function(el, instance) {\n        /**\n         *  @example:\n         *\n         *  <linearGradient id=\"linearGrad1\">\n         *    <stop offset=\"0%\" stop-color=\"white\"/>\n         *    <stop offset=\"100%\" stop-color=\"black\"/>\n         *  </linearGradient>\n         *\n         *  OR\n         *\n         *  <linearGradient id=\"linearGrad2\">\n         *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n         *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n         *  </linearGradient>\n         *\n         *  OR\n         *\n         *  <radialGradient id=\"radialGrad1\">\n         *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n         *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n         *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n         *  </radialGradient>\n         *\n         *  OR\n         *\n         *  <radialGradient id=\"radialGrad2\">\n         *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n         *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n         *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n         *  </radialGradient>\n         *\n         */\n\n        var colorStopEls = el.getElementsByTagName('stop'),\n            type,\n            gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n            gradientTransform = el.getAttribute('gradientTransform'),\n            colorStops = [],\n            coords, ellipseMatrix, i;\n\n        if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\n          type = 'linear';\n        }\n        else {\n          type = 'radial';\n        }\n\n        if (type === 'linear') {\n          coords = getLinearCoords(el);\n        }\n        else if (type === 'radial') {\n          coords = getRadialCoords(el);\n        }\n\n        for (i = colorStopEls.length; i--; ) {\n          colorStops.push(getColorStop(colorStopEls[i]));\n        }\n\n        ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\n        var gradient = new fabric.Gradient({\n          type: type,\n          coords: coords,\n          colorStops: colorStops,\n          offsetX: -instance.left,\n          offsetY: -instance.top\n        });\n\n        if (gradientTransform || ellipseMatrix !== '') {\n          gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n        }\n\n        return gradient;\n      },\n      /* _FROM_SVG_END_ */\n\n      /**\n       * Returns {@link fabric.Gradient} instance from its object representation\n       * @static\n       * @memberOf fabric.Gradient\n       * @param {Object} obj\n       * @param {Object} [options] Options object\n       */\n      forObject: function(obj, options) {\n        options || (options = { });\n        _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n        return new fabric.Gradient(options);\n      }\n    });\n\n    /**\n     * @private\n     */\n    function _convertPercentUnitsToValues(object, options, gradientUnits) {\n      var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n      for (var prop in options) {\n        if (options[prop] === 'Infinity') {\n          options[prop] = 1;\n        }\n        else if (options[prop] === '-Infinity') {\n          options[prop] = 0;\n        }\n        propValue = parseFloat(options[prop], 10);\n        if (typeof options[prop] === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(options[prop])) {\n          multFactor = 0.01;\n        }\n        else {\n          multFactor = 1;\n        }\n        if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n          multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n          addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n        }\n        else if (prop === 'y1' || prop === 'y2') {\n          multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n          addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n        }\n        options[prop] = propValue * multFactor + addFactor;\n      }\n      if (object.type === 'ellipse' &&\n          options.r2 !== null &&\n          gradientUnits === 'objectBoundingBox' &&\n          object.rx !== object.ry) {\n\n        var scaleFactor = object.ry / object.rx;\n        ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n        if (options.y1) {\n          options.y1 /= scaleFactor;\n        }\n        if (options.y2) {\n          options.y2 /= scaleFactor;\n        }\n      }\n      return ellipseMatrix;\n    }\n  })();\n\n\n  (function() {\n\n    'use strict';\n\n    var toFixed = fabric.util.toFixed;\n\n    /**\n     * Pattern class\n     * @class fabric.Pattern\n     * @see {@link http://fabricjs.com/patterns|Pattern demo}\n     * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\n     * @see {@link fabric.Pattern#initialize} for constructor definition\n     */\n\n\n    fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\n      /**\n       * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n       * @type String\n       * @default\n       */\n      repeat: 'repeat',\n\n      /**\n       * Pattern horizontal offset from object's left/top corner\n       * @type Number\n       * @default\n       */\n      offsetX: 0,\n\n      /**\n       * Pattern vertical offset from object's left/top corner\n       * @type Number\n       * @default\n       */\n      offsetY: 0,\n\n      /**\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n       * @type String\n       * @default\n       */\n      crossOrigin: '',\n\n      /**\n       * transform matrix to change the pattern, imported from svgs.\n       * @type Array\n       * @default\n       */\n      patternTransform: null,\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       * @param {Function} [callback] function to invoke after callback init.\n       * @return {fabric.Pattern} thisArg\n       */\n      initialize: function(options, callback) {\n        options || (options = { });\n\n        this.id = fabric.Object.__uid++;\n        this.setOptions(options);\n        if (!options.source || (options.source && typeof options.source !== 'string')) {\n          callback && callback(this);\n          return;\n        }\n        // function string\n        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n          this.source = new Function(fabric.util.getFunctionBody(options.source));\n          callback && callback(this);\n        }\n        else {\n          // img src string\n          var _this = this;\n          this.source = fabric.util.createImage();\n          fabric.util.loadImage(options.source, function(img) {\n            _this.source = img;\n            callback && callback(_this);\n          }, null, this.crossOrigin);\n        }\n      },\n\n      /**\n       * Returns object representation of a pattern\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of a pattern instance\n       */\n      toObject: function(propertiesToInclude) {\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n            source, object;\n\n        // callback\n        if (typeof this.source === 'function') {\n          source = String(this.source);\n        }\n        // <img> element\n        else if (typeof this.source.src === 'string') {\n          source = this.source.src;\n        }\n        // <canvas> element\n        else if (typeof this.source === 'object' && this.source.toDataURL) {\n          source = this.source.toDataURL();\n        }\n\n        object = {\n          type: 'pattern',\n          source: source,\n          repeat: this.repeat,\n          crossOrigin: this.crossOrigin,\n          offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\n          offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\n          patternTransform: this.patternTransform ? this.patternTransform.concat() : null\n        };\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n        return object;\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of a pattern\n       * @param {fabric.Object} object\n       * @return {String} SVG representation of a pattern\n       */\n      toSVG: function(object) {\n        var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n            patternWidth = patternSource.width / object.width,\n            patternHeight = patternSource.height / object.height,\n            patternOffsetX = this.offsetX / object.width,\n            patternOffsetY = this.offsetY / object.height,\n            patternImgSrc = '';\n        if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n          patternHeight = 1;\n          if (patternOffsetY) {\n            patternHeight += Math.abs(patternOffsetY);\n          }\n        }\n        if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n          patternWidth = 1;\n          if (patternOffsetX) {\n            patternWidth += Math.abs(patternOffsetX);\n          }\n\n        }\n        if (patternSource.src) {\n          patternImgSrc = patternSource.src;\n        }\n        else if (patternSource.toDataURL) {\n          patternImgSrc = patternSource.toDataURL();\n        }\n\n        return '<pattern id=\"SVGID_' + this.id +\n                      '\" x=\"' + patternOffsetX +\n                      '\" y=\"' + patternOffsetY +\n                      '\" width=\"' + patternWidth +\n                      '\" height=\"' + patternHeight + '\">\\n' +\n                 '<image x=\"0\" y=\"0\"' +\n                        ' width=\"' + patternSource.width +\n                        '\" height=\"' + patternSource.height +\n                        '\" xlink:href=\"' + patternImgSrc +\n                 '\"></image>\\n' +\n               '</pattern>\\n';\n      },\n      /* _TO_SVG_END_ */\n\n      setOptions: function(options) {\n        for (var prop in options) {\n          this[prop] = options[prop];\n        }\n      },\n\n      /**\n       * Returns an instance of CanvasPattern\n       * @param {CanvasRenderingContext2D} ctx Context to create pattern\n       * @return {CanvasPattern}\n       */\n      toLive: function(ctx) {\n        var source = typeof this.source === 'function' ? this.source() : this.source;\n\n        // if the image failed to load, return, and allow rest to continue loading\n        if (!source) {\n          return '';\n        }\n\n        // if an image\n        if (typeof source.src !== 'undefined') {\n          if (!source.complete) {\n            return '';\n          }\n          if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n            return '';\n          }\n        }\n        return ctx.createPattern(source, this.repeat);\n      }\n    });\n  })();\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        toFixed = fabric.util.toFixed;\n\n    if (fabric.Shadow) {\n      fabric.warn('fabric.Shadow is already defined.');\n      return;\n    }\n\n    /**\n     * Shadow class\n     * @class fabric.Shadow\n     * @see {@link http://fabricjs.com/shadows|Shadow demo}\n     * @see {@link fabric.Shadow#initialize} for constructor definition\n     */\n    fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\n      /**\n       * Shadow color\n       * @type String\n       * @default\n       */\n      color: 'rgb(0,0,0)',\n\n      /**\n       * Shadow blur\n       * @type Number\n       */\n      blur: 0,\n\n      /**\n       * Shadow horizontal offset\n       * @type Number\n       * @default\n       */\n      offsetX: 0,\n\n      /**\n       * Shadow vertical offset\n       * @type Number\n       * @default\n       */\n      offsetY: 0,\n\n      /**\n       * Whether the shadow should affect stroke operations\n       * @type Boolean\n       * @default\n       */\n      affectStroke: false,\n\n      /**\n       * Indicates whether toObject should include default values\n       * @type Boolean\n       * @default\n       */\n      includeDefaultValues: true,\n\n      /**\n       * Constructor\n       * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n       * @return {fabric.Shadow} thisArg\n       */\n      initialize: function(options) {\n\n        if (typeof options === 'string') {\n          options = this._parseShadow(options);\n        }\n\n        for (var prop in options) {\n          this[prop] = options[prop];\n        }\n\n        this.id = fabric.Object.__uid++;\n      },\n\n      /**\n       * @private\n       * @param {String} shadow Shadow value to parse\n       * @return {Object} Shadow object with color, offsetX, offsetY and blur\n       */\n      _parseShadow: function(shadow) {\n        var shadowStr = shadow.trim(),\n            offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\n            color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\n        return {\n          color: color.trim(),\n          offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n          offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n          blur: parseInt(offsetsAndBlur[3], 10) || 0\n        };\n      },\n\n      /**\n       * Returns a string representation of an instance\n       * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n       * @return {String} Returns CSS3 text-shadow declaration\n       */\n      toString: function() {\n        return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of a shadow\n       * @param {fabric.Object} object\n       * @return {String} SVG representation of a shadow\n       */\n      toSVG: function(object) {\n        var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n            offset = fabric.util.rotateVector(\n              { x: this.offsetX, y: this.offsetY },\n              fabric.util.degreesToRadians(-object.angle)),\n            BLUR_BOX = 20, color = new fabric.Color(this.color);\n\n        if (object.width && object.height) {\n          //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n          // we add some extra space to filter box to contain the blur ( 20 )\n          fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n          fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n        }\n        if (object.flipX) {\n          offset.x *= -1;\n        }\n        if (object.flipY) {\n          offset.y *= -1;\n        }\n\n        return (\n          '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n            'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n            '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n              toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\n            '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\n            '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\n            '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\n            '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n            '\\t<feMerge>\\n' +\n              '\\t\\t<feMergeNode></feMergeNode>\\n' +\n              '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n            '\\t</feMerge>\\n' +\n          '</filter>\\n');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * Returns object representation of a shadow\n       * @return {Object} Object representation of a shadow instance\n       */\n      toObject: function() {\n        if (this.includeDefaultValues) {\n          return {\n            color: this.color,\n            blur: this.blur,\n            offsetX: this.offsetX,\n            offsetY: this.offsetY,\n            affectStroke: this.affectStroke\n          };\n        }\n        var obj = { }, proto = fabric.Shadow.prototype;\n\n        ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke'].forEach(function(prop) {\n          if (this[prop] !== proto[prop]) {\n            obj[prop] = this[prop];\n          }\n        }, this);\n\n        return obj;\n      }\n    });\n\n    /**\n     * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n     * @static\n     * @field\n     * @memberOf fabric.Shadow\n     */\n    // eslint-disable-next-line max-len\n    fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function () {\n\n    'use strict';\n\n    if (fabric.StaticCanvas) {\n      fabric.warn('fabric.StaticCanvas is already defined.');\n      return;\n    }\n\n    // aliases for faster resolution\n    var extend = fabric.util.object.extend,\n        getElementOffset = fabric.util.getElementOffset,\n        removeFromArray = fabric.util.removeFromArray,\n        toFixed = fabric.util.toFixed,\n        transformPoint = fabric.util.transformPoint,\n        invertTransform = fabric.util.invertTransform,\n\n        CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n    /**\n     * Static canvas class\n     * @class fabric.StaticCanvas\n     * @mixes fabric.Collection\n     * @mixes fabric.Observable\n     * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n     * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n     * @fires before:render\n     * @fires after:render\n     * @fires canvas:cleared\n     * @fires object:added\n     * @fires object:removed\n     */\n    fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n\n      /**\n       * Constructor\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n       * @param {Object} [options] Options object\n       * @return {Object} thisArg\n       */\n      initialize: function(el, options) {\n        options || (options = { });\n        this.renderAndResetBound = this.renderAndReset.bind(this);\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\n        this._initStatic(el, options);\n      },\n\n      /**\n       * Background color of canvas instance.\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n       * @type {(String|fabric.Pattern)}\n       * @default\n       */\n      backgroundColor: '',\n\n      /**\n       * Background image of canvas instance.\n       * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n       * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n       * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n       * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n       * @type fabric.Image\n       * @default\n       */\n      backgroundImage: null,\n\n      /**\n       * Overlay color of canvas instance.\n       * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n       * @since 1.3.9\n       * @type {(String|fabric.Pattern)}\n       * @default\n       */\n      overlayColor: '',\n\n      /**\n       * Overlay image of canvas instance.\n       * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n       * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n       * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n       * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n       * @type fabric.Image\n       * @default\n       */\n      overlayImage: null,\n\n      /**\n       * Indicates whether toObject/toDatalessObject should include default values\n       * @type Boolean\n       * @default\n       */\n      includeDefaultValues: true,\n\n      /**\n       * Indicates whether objects' state should be saved\n       * @type Boolean\n       * @default\n       */\n      stateful: false,\n\n      /**\n       * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\n       * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\n       * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n       * since the renders are quequed and executed one per frame.\n       * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n       * Left default to true to do not break documentation and old app, fiddles.\n       * @type Boolean\n       * @default\n       */\n      renderOnAddRemove: true,\n\n      /**\n       * Function that determines clipping of entire canvas area\n       * Being passed context as first argument.\n       * If you are using code minification, ctx argument can be minified/manglied you should use\n       * as a workaround `var ctx = arguments[0];` in the function;\n       * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n       * @deprecated since 2.0.0\n       * @type Function\n       * @default\n       */\n      clipTo: null,\n\n      /**\n       * Indicates whether object controls (borders/controls) are rendered above overlay image\n       * @type Boolean\n       * @default\n       */\n      controlsAboveOverlay: false,\n\n      /**\n       * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n       * @type Boolean\n       * @default\n       */\n      allowTouchScrolling: false,\n\n      /**\n       * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n       * @type Boolean\n       * @default\n       */\n      imageSmoothingEnabled: true,\n\n      /**\n       * The transformation (in the format of Canvas transform) which focuses the viewport\n       * @type Array\n       * @default\n       */\n      viewportTransform: fabric.iMatrix.concat(),\n\n      /**\n       * if set to false background image is not affected by viewport transform\n       * @since 1.6.3\n       * @type Boolean\n       * @default\n       */\n      backgroundVpt: true,\n\n      /**\n       * if set to false overlya image is not affected by viewport transform\n       * @since 1.6.3\n       * @type Boolean\n       * @default\n       */\n      overlayVpt: true,\n\n      /**\n       * Callback; invoked right before object is about to be scaled/rotated\n       * @deprecated since 2.3.0\n       * Use before:transform event\n       */\n      onBeforeScaleRotate: function () {\n        /* NOOP */\n      },\n\n      /**\n       * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n       * @type Boolean\n       * @default\n       */\n      enableRetinaScaling: true,\n\n      /**\n       * Describe canvas element extension over design\n       * properties are tl,tr,bl,br.\n       * if canvas is not zoomed/panned those points are the four corner of canvas\n       * if canvas is viewportTransformed you those points indicate the extension\n       * of canvas element in plain untrasformed coordinates\n       * The coordinates get updated with @method calcViewportBoundaries.\n       * @memberOf fabric.StaticCanvas.prototype\n       */\n      vptCoords: { },\n\n      /**\n       * Based on vptCoords and object.aCoords, skip rendering of objects that\n       * are not included in current viewport.\n       * May greatly help in applications with crowded canvas and use of zoom/pan\n       * If One of the corner of the bounding box of the object is on the canvas\n       * the objects get rendered.\n       * @memberOf fabric.StaticCanvas.prototype\n       * @type Boolean\n       * @default\n       */\n      skipOffscreen: true,\n\n      /**\n       * @private\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n       * @param {Object} [options] Options object\n       */\n      _initStatic: function(el, options) {\n        var cb = this.requestRenderAllBound;\n        this._objects = [];\n        this._createLowerCanvas(el);\n        this._initOptions(options);\n        this._setImageSmoothing();\n        // only initialize retina scaling once\n        if (!this.interactive) {\n          this._initRetinaScaling();\n        }\n\n        if (options.overlayImage) {\n          this.setOverlayImage(options.overlayImage, cb);\n        }\n        if (options.backgroundImage) {\n          this.setBackgroundImage(options.backgroundImage, cb);\n        }\n        if (options.backgroundColor) {\n          this.setBackgroundColor(options.backgroundColor, cb);\n        }\n        if (options.overlayColor) {\n          this.setOverlayColor(options.overlayColor, cb);\n        }\n        this.calcOffset();\n      },\n\n      /**\n       * @private\n       */\n      _isRetinaScaling: function() {\n        return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\n      },\n\n      /**\n       * @private\n       * @return {Number} retinaScaling if applied, otherwise 1;\n       */\n      getRetinaScaling: function() {\n        return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\n      },\n\n      /**\n       * @private\n       */\n      _initRetinaScaling: function() {\n        if (!this._isRetinaScaling()) {\n          return;\n        }\n        this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n        this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\n        this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n      },\n\n      /**\n       * Calculates canvas element offset relative to the document\n       * This method is also attached as \"resize\" event handler of window\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      calcOffset: function () {\n        this._offset = getElementOffset(this.lowerCanvasEl);\n        return this;\n      },\n\n      /**\n       * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n       * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n       * @example <caption>Normal overlayImage with left/top = 0</caption>\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n       *   // Needed to position overlayImage at 0/0\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>overlayImage with different properties</caption>\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n       *   opacity: 0.5,\n       *   angle: 45,\n       *   left: 400,\n       *   top: 400,\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n       * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n       *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n       * });\n       * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n       *   width: canvas.width,\n       *   height: canvas.height,\n       *   // Needed to position overlayImage at 0/0\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>overlayImage loaded from cross-origin</caption>\n       * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n       *   opacity: 0.5,\n       *   angle: 45,\n       *   left: 400,\n       *   top: 400,\n       *   originX: 'left',\n       *   originY: 'top',\n       *   crossOrigin: 'anonymous'\n       * });\n       */\n      setOverlayImage: function (image, callback, options) {\n        return this.__setBgOverlayImage('overlayImage', image, callback, options);\n      },\n\n      /**\n       * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n       * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n       * @param {Function} callback Callback to invoke when image is loaded and set as background\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\n       * @example <caption>Normal backgroundImage with left/top = 0</caption>\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n       *   // Needed to position backgroundImage at 0/0\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>backgroundImage with different properties</caption>\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n       *   opacity: 0.5,\n       *   angle: 45,\n       *   left: 400,\n       *   top: 400,\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n       * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n       *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n       *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n       * });\n       * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n       *   width: canvas.width,\n       *   height: canvas.height,\n       *   // Needed to position backgroundImage at 0/0\n       *   originX: 'left',\n       *   originY: 'top'\n       * });\n       * @example <caption>backgroundImage loaded from cross-origin</caption>\n       * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n       *   opacity: 0.5,\n       *   angle: 45,\n       *   left: 400,\n       *   top: 400,\n       *   originX: 'left',\n       *   originY: 'top',\n       *   crossOrigin: 'anonymous'\n       * });\n       */\n      setBackgroundImage: function (image, callback, options) {\n        return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n      },\n\n      /**\n       * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\n       * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\n       * @param {Function} callback Callback to invoke when foreground color is set\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n       * @example <caption>Normal overlayColor - color value</caption>\n       * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n       * @example <caption>fabric.Pattern used as overlayColor</caption>\n       * canvas.setOverlayColor({\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n       * }, canvas.renderAll.bind(canvas));\n       * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n       * canvas.setOverlayColor({\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n       *   repeat: 'repeat',\n       *   offsetX: 200,\n       *   offsetY: 100\n       * }, canvas.renderAll.bind(canvas));\n       */\n      setOverlayColor: function(overlayColor, callback) {\n        return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n      },\n\n      /**\n       * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n       * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n       * @param {Function} callback Callback to invoke when background color is set\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n       * @example <caption>Normal backgroundColor - color value</caption>\n       * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n       * @example <caption>fabric.Pattern used as backgroundColor</caption>\n       * canvas.setBackgroundColor({\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n       * }, canvas.renderAll.bind(canvas));\n       * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n       * canvas.setBackgroundColor({\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n       *   repeat: 'repeat',\n       *   offsetX: 200,\n       *   offsetY: 100\n       * }, canvas.renderAll.bind(canvas));\n       */\n      setBackgroundColor: function(backgroundColor, callback) {\n        return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n      },\n\n      /**\n       * @private\n       * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n       */\n      _setImageSmoothing: function() {\n        var ctx = this.getContext();\n\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\n          || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n        ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n      },\n\n      /**\n       * @private\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n       * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n       * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n       * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n       * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n       */\n      __setBgOverlayImage: function(property, image, callback, options) {\n        if (typeof image === 'string') {\n          fabric.util.loadImage(image, function(img) {\n            img && (this[property] = new fabric.Image(img, options));\n            callback && callback(img);\n          }, this, options && options.crossOrigin);\n        }\n        else {\n          options && image.setOptions(options);\n          this[property] = image;\n          callback && callback(image);\n        }\n\n        return this;\n      },\n\n      /**\n       * @private\n       * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n       * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n       * @param {(Object|String|null)} color Object with pattern information, color value or null\n       * @param {Function} [callback] Callback is invoked when color is set\n       */\n      __setBgOverlayColor: function(property, color, callback) {\n        this[property] = color;\n        this._initGradient(color, property);\n        this._initPattern(color, property, callback);\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _createCanvasElement: function() {\n        var element = fabric.util.createCanvasElement();\n        if (!element) {\n          throw CANVAS_INIT_ERROR;\n        }\n        if (!element.style) {\n          element.style = { };\n        }\n        if (typeof element.getContext === 'undefined') {\n          throw CANVAS_INIT_ERROR;\n        }\n        return element;\n      },\n\n      /**\n       * @private\n       * @param {Object} [options] Options object\n       */\n      _initOptions: function (options) {\n        this._setOptions(options);\n\n        this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;\n        this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;\n\n        if (!this.lowerCanvasEl.style) {\n          return;\n        }\n\n        this.lowerCanvasEl.width = this.width;\n        this.lowerCanvasEl.height = this.height;\n\n        this.lowerCanvasEl.style.width = this.width + 'px';\n        this.lowerCanvasEl.style.height = this.height + 'px';\n\n        this.viewportTransform = this.viewportTransform.slice();\n      },\n\n      /**\n       * Creates a bottom canvas\n       * @private\n       * @param {HTMLElement} [canvasEl]\n       */\n      _createLowerCanvas: function (canvasEl) {\n        // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n        if (canvasEl && canvasEl.getContext) {\n          this.lowerCanvasEl = canvasEl;\n        }\n        else {\n          this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n        }\n\n        fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\n        if (this.interactive) {\n          this._applyCanvasStyle(this.lowerCanvasEl);\n        }\n\n        this.contextContainer = this.lowerCanvasEl.getContext('2d');\n      },\n\n      /**\n       * Returns canvas width (in px)\n       * @return {Number}\n       */\n      getWidth: function () {\n        return this.width;\n      },\n\n      /**\n       * Returns canvas height (in px)\n       * @return {Number}\n       */\n      getHeight: function () {\n        return this.height;\n      },\n\n      /**\n       * Sets width of this canvas instance\n       * @param {Number|String} value                         Value to set width to\n       * @param {Object}        [options]                     Options object\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      setWidth: function (value, options) {\n        return this.setDimensions({ width: value }, options);\n      },\n\n      /**\n       * Sets height of this canvas instance\n       * @param {Number|String} value                         Value to set height to\n       * @param {Object}        [options]                     Options object\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      setHeight: function (value, options) {\n        return this.setDimensions({ height: value }, options);\n      },\n\n      /**\n       * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n       * @param {Object}        dimensions                    Object with width/height properties\n       * @param {Number|String} [dimensions.width]            Width of canvas element\n       * @param {Number|String} [dimensions.height]           Height of canvas element\n       * @param {Object}        [options]                     Options object\n       * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n       * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      setDimensions: function (dimensions, options) {\n        var cssValue;\n\n        options = options || {};\n\n        for (var prop in dimensions) {\n          cssValue = dimensions[prop];\n\n          if (!options.cssOnly) {\n            this._setBackstoreDimension(prop, dimensions[prop]);\n            cssValue += 'px';\n            this.hasLostContext = true;\n          }\n\n          if (!options.backstoreOnly) {\n            this._setCssDimension(prop, cssValue);\n          }\n        }\n        if (this._isCurrentlyDrawing) {\n          this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\n        }\n        this._initRetinaScaling();\n        this._setImageSmoothing();\n        this.calcOffset();\n\n        if (!options.cssOnly) {\n          this.requestRenderAll();\n        }\n\n        return this;\n      },\n\n      /**\n       * Helper for setting width/height\n       * @private\n       * @param {String} prop property (width|height)\n       * @param {Number} value value to set property to\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      _setBackstoreDimension: function (prop, value) {\n        this.lowerCanvasEl[prop] = value;\n\n        if (this.upperCanvasEl) {\n          this.upperCanvasEl[prop] = value;\n        }\n\n        if (this.cacheCanvasEl) {\n          this.cacheCanvasEl[prop] = value;\n        }\n\n        this[prop] = value;\n\n        return this;\n      },\n\n      /**\n       * Helper for setting css width/height\n       * @private\n       * @param {String} prop property (width|height)\n       * @param {String} value value to set property to\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      _setCssDimension: function (prop, value) {\n        this.lowerCanvasEl.style[prop] = value;\n\n        if (this.upperCanvasEl) {\n          this.upperCanvasEl.style[prop] = value;\n        }\n\n        if (this.wrapperEl) {\n          this.wrapperEl.style[prop] = value;\n        }\n\n        return this;\n      },\n\n      /**\n       * Returns canvas zoom level\n       * @return {Number}\n       */\n      getZoom: function () {\n        return this.viewportTransform[0];\n      },\n\n      /**\n       * Sets viewport transform of this canvas instance\n       * @param {Array} vpt the transform in the form of context.transform\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      setViewportTransform: function (vpt) {\n        var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\n        this.viewportTransform = vpt;\n        for (i = 0, len = this._objects.length; i < len; i++) {\n          object = this._objects[i];\n          object.group || object.setCoords(ignoreVpt, skipAbsolute);\n        }\n        if (activeObject && activeObject.type === 'activeSelection') {\n          activeObject.setCoords(ignoreVpt, skipAbsolute);\n        }\n        this.calcViewportBoundaries();\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * Sets zoom level of this canvas instance, zoom centered around point\n       * @param {fabric.Point} point to zoom with respect to\n       * @param {Number} value to set zoom to, less than 1 zooms out\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      zoomToPoint: function (point, value) {\n        // TODO: just change the scale, preserve other transformations\n        var before = point, vpt = this.viewportTransform.slice(0);\n        point = transformPoint(point, invertTransform(this.viewportTransform));\n        vpt[0] = value;\n        vpt[3] = value;\n        var after = transformPoint(point, vpt);\n        vpt[4] += before.x - after.x;\n        vpt[5] += before.y - after.y;\n        return this.setViewportTransform(vpt);\n      },\n\n      /**\n       * Sets zoom level of this canvas instance\n       * @param {Number} value to set zoom to, less than 1 zooms out\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      setZoom: function (value) {\n        this.zoomToPoint(new fabric.Point(0, 0), value);\n        return this;\n      },\n\n      /**\n       * Pan viewport so as to place point at top left corner of canvas\n       * @param {fabric.Point} point to move to\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      absolutePan: function (point) {\n        var vpt = this.viewportTransform.slice(0);\n        vpt[4] = -point.x;\n        vpt[5] = -point.y;\n        return this.setViewportTransform(vpt);\n      },\n\n      /**\n       * Pans viewpoint relatively\n       * @param {fabric.Point} point (position vector) to move by\n       * @return {fabric.Canvas} instance\n       * @chainable true\n       */\n      relativePan: function (point) {\n        return this.absolutePan(new fabric.Point(\n          -point.x - this.viewportTransform[4],\n          -point.y - this.viewportTransform[5]\n        ));\n      },\n\n      /**\n       * Returns &lt;canvas> element corresponding to this instance\n       * @return {HTMLCanvasElement}\n       */\n      getElement: function () {\n        return this.lowerCanvasEl;\n      },\n\n      /**\n       * @private\n       * @param {fabric.Object} obj Object that was added\n       */\n      _onObjectAdded: function(obj) {\n        this.stateful && obj.setupState();\n        obj._set('canvas', this);\n        obj.setCoords();\n        this.fire('object:added', { target: obj });\n        obj.fire('added');\n      },\n\n      /**\n       * @private\n       * @param {fabric.Object} obj Object that was removed\n       */\n      _onObjectRemoved: function(obj) {\n        this.fire('object:removed', { target: obj });\n        obj.fire('removed');\n        delete obj.canvas;\n      },\n\n      /**\n       * Clears specified context of canvas element\n       * @param {CanvasRenderingContext2D} ctx Context to clear\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      clearContext: function(ctx) {\n        ctx.clearRect(0, 0, this.width, this.height);\n        return this;\n      },\n\n      /**\n       * Returns context of canvas where objects are drawn\n       * @return {CanvasRenderingContext2D}\n       */\n      getContext: function () {\n        return this.contextContainer;\n      },\n\n      /**\n       * Clears all contexts (background, main, top) of an instance\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      clear: function () {\n        this._objects.length = 0;\n        this.backgroundImage = null;\n        this.overlayImage = null;\n        this.backgroundColor = '';\n        this.overlayColor = '';\n        if (this._hasITextHandlers) {\n          this.off('mouse:up', this._mouseUpITextHandler);\n          this._iTextInstances = null;\n          this._hasITextHandlers = false;\n        }\n        this.clearContext(this.contextContainer);\n        this.fire('canvas:cleared');\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * Renders the canvas\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      renderAll: function () {\n        var canvasToDrawOn = this.contextContainer;\n        this.renderCanvas(canvasToDrawOn, this._objects);\n        return this;\n      },\n\n      /**\n       * Function created to be instance bound at initialization\n       * used in requestAnimationFrame rendering\n       * Let the fabricJS call it. If you call it manually you could have more\n       * animationFrame stacking on to of each other\n       * for an imperative rendering, use canvas.renderAll\n       * @private\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      renderAndReset: function() {\n        this.isRendering = 0;\n        this.renderAll();\n      },\n\n      /**\n       * Append a renderAll request to next animation frame.\n       * unless one is already in progress, in that case nothing is done\n       * a boolean flag will avoid appending more.\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      requestRenderAll: function () {\n        if (!this.isRendering) {\n          this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n        }\n        return this;\n      },\n\n      /**\n       * Calculate the position of the 4 corner of canvas with current viewportTransform.\n       * helps to determinate when an object is in the current rendering viewport using\n       * object absolute coordinates ( aCoords )\n       * @return {Object} points.tl\n       * @chainable\n       */\n      calcViewportBoundaries: function() {\n        var points = { }, width = this.width, height = this.height,\n            iVpt = invertTransform(this.viewportTransform);\n        points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\n        points.br = transformPoint({ x: width, y: height }, iVpt);\n        points.tr = new fabric.Point(points.br.x, points.tl.y);\n        points.bl = new fabric.Point(points.tl.x, points.br.y);\n        this.vptCoords = points;\n        return points;\n      },\n\n      cancelRequestedRender: function() {\n        if (this.isRendering) {\n          fabric.util.cancelAnimFrame(this.isRendering);\n          this.isRendering = 0;\n        }\n      },\n\n      /**\n       * Renders background, objects, overlay and controls.\n       * @param {CanvasRenderingContext2D} ctx\n       * @param {Array} objects to render\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      renderCanvas: function(ctx, objects) {\n        var v = this.viewportTransform;\n        this.cancelRequestedRender();\n        this.calcViewportBoundaries();\n        this.clearContext(ctx);\n        this.fire('before:render');\n        if (this.clipTo) {\n          fabric.util.clipContext(this, ctx);\n        }\n        this._renderBackground(ctx);\n\n        ctx.save();\n        //apply viewport transform once for all rendering process\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        this._renderObjects(ctx, objects);\n        ctx.restore();\n        if (!this.controlsAboveOverlay && this.interactive) {\n          this.drawControls(ctx);\n        }\n        if (this.clipTo) {\n          ctx.restore();\n        }\n        this._renderOverlay(ctx);\n        if (this.controlsAboveOverlay && this.interactive) {\n          this.drawControls(ctx);\n        }\n        this.fire('after:render');\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Array} objects to render\n       */\n      _renderObjects: function(ctx, objects) {\n        var i, len;\n        for (i = 0, len = objects.length; i < len; ++i) {\n          objects[i] && objects[i].render(ctx);\n        }\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {string} property 'background' or 'overlay'\n       */\n      _renderBackgroundOrOverlay: function(ctx, property) {\n        var object = this[property + 'Color'], v;\n        if (object) {\n          ctx.fillStyle = object.toLive\n            ? object.toLive(ctx, this)\n            : object;\n\n          ctx.fillRect(\n            object.offsetX || 0,\n            object.offsetY || 0,\n            this.width,\n            this.height);\n        }\n        object = this[property + 'Image'];\n        if (object) {\n          if (this[property + 'Vpt']) {\n            v = this.viewportTransform;\n            ctx.save();\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n          }\n          object.render(ctx);\n          this[property + 'Vpt'] && ctx.restore();\n        }\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderBackground: function(ctx) {\n        this._renderBackgroundOrOverlay(ctx, 'background');\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderOverlay: function(ctx) {\n        this._renderBackgroundOrOverlay(ctx, 'overlay');\n      },\n\n      /**\n       * Returns coordinates of a center of canvas.\n       * Returned value is an object with top and left properties\n       * @return {Object} object with \"top\" and \"left\" number values\n       */\n      getCenter: function () {\n        return {\n          top: this.height / 2,\n          left: this.width / 2\n        };\n      },\n\n      /**\n       * Centers object horizontally in the canvas\n       * @param {fabric.Object} object Object to center horizontally\n       * @return {fabric.Canvas} thisArg\n       */\n      centerObjectH: function (object) {\n        return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n      },\n\n      /**\n       * Centers object vertically in the canvas\n       * @param {fabric.Object} object Object to center vertically\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      centerObjectV: function (object) {\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n      },\n\n      /**\n       * Centers object vertically and horizontally in the canvas\n       * @param {fabric.Object} object Object to center vertically and horizontally\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      centerObject: function(object) {\n        var center = this.getCenter();\n\n        return this._centerObject(object, new fabric.Point(center.left, center.top));\n      },\n\n      /**\n       * Centers object vertically and horizontally in the viewport\n       * @param {fabric.Object} object Object to center vertically and horizontally\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      viewportCenterObject: function(object) {\n        var vpCenter = this.getVpCenter();\n\n        return this._centerObject(object, vpCenter);\n      },\n\n      /**\n       * Centers object horizontally in the viewport, object.top is unchanged\n       * @param {fabric.Object} object Object to center vertically and horizontally\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      viewportCenterObjectH: function(object) {\n        var vpCenter = this.getVpCenter();\n        this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n        return this;\n      },\n\n      /**\n       * Centers object Vertically in the viewport, object.top is unchanged\n       * @param {fabric.Object} object Object to center vertically and horizontally\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      viewportCenterObjectV: function(object) {\n        var vpCenter = this.getVpCenter();\n\n        return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n      },\n\n      /**\n       * Calculate the point in canvas that correspond to the center of actual viewport.\n       * @return {fabric.Point} vpCenter, viewport center\n       * @chainable\n       */\n      getVpCenter: function() {\n        var center = this.getCenter(),\n            iVpt = invertTransform(this.viewportTransform);\n        return transformPoint({ x: center.left, y: center.top }, iVpt);\n      },\n\n      /**\n       * @private\n       * @param {fabric.Object} object Object to center\n       * @param {fabric.Point} center Center point\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      _centerObject: function(object, center) {\n        object.setPositionByOrigin(center, 'center', 'center');\n        object.setCoords();\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * Returs dataless JSON representation of canvas\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {String} json string\n       */\n      toDatalessJSON: function (propertiesToInclude) {\n        return this.toDatalessObject(propertiesToInclude);\n      },\n\n      /**\n       * Returns object representation of canvas\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function (propertiesToInclude) {\n        return this._toObjectMethod('toObject', propertiesToInclude);\n      },\n\n      /**\n       * Returns dataless object representation of canvas\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toDatalessObject: function (propertiesToInclude) {\n        return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n      },\n\n      /**\n       * @private\n       */\n      _toObjectMethod: function (methodName, propertiesToInclude) {\n\n        var data = {\n          version: fabric.version,\n          objects: this._toObjects(methodName, propertiesToInclude)\n        };\n\n        extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n\n        fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n        return data;\n      },\n\n      /**\n       * @private\n       */\n      _toObjects: function(methodName, propertiesToInclude) {\n        return this._objects.filter(function(object) {\n          return !object.excludeFromExport;\n        }).map(function(instance) {\n          return this._toObject(instance, methodName, propertiesToInclude);\n        }, this);\n      },\n\n      /**\n       * @private\n       */\n      _toObject: function(instance, methodName, propertiesToInclude) {\n        var originalValue;\n\n        if (!this.includeDefaultValues) {\n          originalValue = instance.includeDefaultValues;\n          instance.includeDefaultValues = false;\n        }\n\n        var object = instance[methodName](propertiesToInclude);\n        if (!this.includeDefaultValues) {\n          instance.includeDefaultValues = originalValue;\n        }\n        return object;\n      },\n\n      /**\n       * @private\n       */\n      __serializeBgOverlay: function(methodName, propertiesToInclude) {\n        var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\n\n        if (this.backgroundColor) {\n          data.background = this.backgroundColor.toObject\n            ? this.backgroundColor.toObject(propertiesToInclude)\n            : this.backgroundColor;\n        }\n\n        if (this.overlayColor) {\n          data.overlay = this.overlayColor.toObject\n            ? this.overlayColor.toObject(propertiesToInclude)\n            : this.overlayColor;\n        }\n        if (bgImage && !bgImage.excludeFromExport) {\n          data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n        }\n        if (overlay && !overlay.excludeFromExport) {\n          data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\n        }\n\n        return data;\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n       * a zoomed canvas will then produce zoomed SVG output.\n       * @type Boolean\n       * @default\n       */\n      svgViewportTransformation: true,\n\n      /**\n       * Returns SVG representation of canvas\n       * @function\n       * @param {Object} [options] Options object for SVG output\n       * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n       * @param {Object} [options.viewBox] SVG viewbox object\n       * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n       * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n       * @param {Number} [options.viewBox.width] Width of viewbox\n       * @param {Number} [options.viewBox.height] Height of viewbox\n       * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n       * @param {String} [options.width] desired width of svg with or without units\n       * @param {String} [options.height] desired height of svg with or without units\n       * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n       * @return {String} SVG string\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n       * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n       * @example <caption>Normal SVG output</caption>\n       * var svg = canvas.toSVG();\n       * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n       * var svg = canvas.toSVG({suppressPreamble: true});\n       * @example <caption>SVG output with viewBox attribute</caption>\n       * var svg = canvas.toSVG({\n       *   viewBox: {\n       *     x: 100,\n       *     y: 100,\n       *     width: 200,\n       *     height: 300\n       *   }\n       * });\n       * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n       * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n       * @example <caption>Modify SVG output with reviver function</caption>\n       * var svg = canvas.toSVG(null, function(svg) {\n       *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n       * });\n       */\n      toSVG: function(options, reviver) {\n        options || (options = { });\n\n        var markup = [];\n\n        this._setSVGPreamble(markup, options);\n        this._setSVGHeader(markup, options);\n\n        this._setSVGBgOverlayColor(markup, 'backgroundColor');\n        this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n\n        this._setSVGObjects(markup, reviver);\n\n        this._setSVGBgOverlayColor(markup, 'overlayColor');\n        this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n        markup.push('</svg>');\n\n        return markup.join('');\n      },\n\n      /**\n       * @private\n       */\n      _setSVGPreamble: function(markup, options) {\n        if (options.suppressPreamble) {\n          return;\n        }\n        markup.push(\n          '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\n          '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n          '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n        );\n      },\n\n      /**\n       * @private\n       */\n      _setSVGHeader: function(markup, options) {\n        var width = options.width || this.width,\n            height = options.height || this.height,\n            vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n        if (options.viewBox) {\n          viewBox = 'viewBox=\"' +\n                  options.viewBox.x + ' ' +\n                  options.viewBox.y + ' ' +\n                  options.viewBox.width + ' ' +\n                  options.viewBox.height + '\" ';\n        }\n        else {\n          if (this.svgViewportTransformation) {\n            vpt = this.viewportTransform;\n            viewBox = 'viewBox=\"' +\n                    toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                    toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\n                    toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                    toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\n          }\n        }\n\n        markup.push(\n          '<svg ',\n          'xmlns=\"http://www.w3.org/2000/svg\" ',\n          'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n          'version=\"1.1\" ',\n          'width=\"', width, '\" ',\n          'height=\"', height, '\" ',\n          viewBox,\n          'xml:space=\"preserve\">\\n',\n          '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\n          '<defs>\\n',\n          this.createSVGFontFacesMarkup(),\n          this.createSVGRefElementsMarkup(),\n          '</defs>\\n'\n        );\n      },\n\n      /**\n       * Creates markup containing SVG referenced elements like patterns, gradients etc.\n       * @return {String}\n       */\n      createSVGRefElementsMarkup: function() {\n        var _this = this,\n            markup = ['backgroundColor', 'overlayColor'].map(function(prop) {\n              var fill = _this[prop];\n              if (fill && fill.toLive) {\n                return fill.toSVG(_this, false);\n              }\n            });\n        return markup.join('');\n      },\n\n      /**\n       * Creates markup containing SVG font faces,\n       * font URLs for font faces must be collected by developers\n       * and are not extracted from the DOM by fabricjs\n       * @param {Array} objects Array of fabric objects\n       * @return {String}\n       */\n      createSVGFontFacesMarkup: function() {\n        var markup = '', fontList = { }, obj, fontFamily,\n            style, row, rowIndex, _char, charIndex, i, len,\n            fontPaths = fabric.fontPaths, objects = this._objects;\n\n        for (i = 0, len = objects.length; i < len; i++) {\n          obj = objects[i];\n          fontFamily = obj.fontFamily;\n          if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\n            continue;\n          }\n          fontList[fontFamily] = true;\n          if (!obj.styles) {\n            continue;\n          }\n          style = obj.styles;\n          for (rowIndex in style) {\n            row = style[rowIndex];\n            for (charIndex in row) {\n              _char = row[charIndex];\n              fontFamily = _char.fontFamily;\n              if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n                fontList[fontFamily] = true;\n              }\n            }\n          }\n        }\n\n        for (var j in fontList) {\n          markup += [\n            '\\t\\t@font-face {\\n',\n            '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\n            '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\n            '\\t\\t}\\n'\n          ].join('');\n        }\n\n        if (markup) {\n          markup = [\n            '\\t<style type=\"text/css\">',\n            '<![CDATA[\\n',\n            markup,\n            ']]>',\n            '</style>\\n'\n          ].join('');\n        }\n\n        return markup;\n      },\n\n      /**\n       * @private\n       */\n      _setSVGObjects: function(markup, reviver) {\n        var instance, i, len, objects = this._objects;\n        for (i = 0, len = objects.length; i < len; i++) {\n          instance = objects[i];\n          if (instance.excludeFromExport) {\n            continue;\n          }\n          this._setSVGObject(markup, instance, reviver);\n        }\n      },\n\n      /**\n       * @private\n       */\n      _setSVGObject: function(markup, instance, reviver) {\n        markup.push(instance.toSVG(reviver));\n      },\n\n      /**\n       * @private\n       */\n      _setSVGBgOverlayImage: function(markup, property, reviver) {\n        if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\n          markup.push(this[property].toSVG(reviver));\n        }\n      },\n\n      /**\n       * @private\n       */\n      _setSVGBgOverlayColor: function(markup, property) {\n        var filler = this[property], vpt = this.viewportTransform, finalWidth = this.width / vpt[0],\n            finalHeight = this.height / vpt[3];\n        if (!filler) {\n          return;\n        }\n        if (filler.toLive) {\n          var repeat = filler.repeat;\n          markup.push(\n            '<rect transform=\"translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\n            ' x=\"', filler.offsetX - finalWidth / 2, '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\n            'width=\"',\n            (repeat === 'repeat-y' || repeat === 'no-repeat'\n              ? filler.source.width\n              : finalWidth ),\n            '\" height=\"',\n            (repeat === 'repeat-x' || repeat === 'no-repeat'\n              ? filler.source.height\n              : finalHeight),\n            '\" fill=\"url(#SVGID_' + filler.id + ')\"',\n            '></rect>\\n'\n          );\n        }\n        else {\n          markup.push(\n            '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n            'fill=\"', this[property], '\"',\n            '></rect>\\n'\n          );\n        }\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * Moves an object or the objects of a multiple selection\n       * to the bottom of the stack of drawn objects\n       * @param {fabric.Object} object Object to send to back\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      sendToBack: function (object) {\n        if (!object) {\n          return this;\n        }\n        var activeSelection = this._activeObject,\n            i, obj, objs;\n        if (object === activeSelection && object.type === 'activeSelection') {\n          objs = activeSelection._objects;\n          for (i = objs.length; i--;) {\n            obj = objs[i];\n            removeFromArray(this._objects, obj);\n            this._objects.unshift(obj);\n          }\n        }\n        else {\n          removeFromArray(this._objects, object);\n          this._objects.unshift(object);\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * Moves an object or the objects of a multiple selection\n       * to the top of the stack of drawn objects\n       * @param {fabric.Object} object Object to send\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      bringToFront: function (object) {\n        if (!object) {\n          return this;\n        }\n        var activeSelection = this._activeObject,\n            i, obj, objs;\n        if (object === activeSelection && object.type === 'activeSelection') {\n          objs = activeSelection._objects;\n          for (i = 0; i < objs.length; i++) {\n            obj = objs[i];\n            removeFromArray(this._objects, obj);\n            this._objects.push(obj);\n          }\n        }\n        else {\n          removeFromArray(this._objects, object);\n          this._objects.push(object);\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * Moves an object or a selection down in stack of drawn objects\n       * An optional paramter, intersecting allowes to move the object in behind\n       * the first intersecting object. Where intersection is calculated with\n       * bounding box. If no intersection is found, there will not be change in the\n       * stack.\n       * @param {fabric.Object} object Object to send\n       * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      sendBackwards: function (object, intersecting) {\n        if (!object) {\n          return this;\n        }\n        var activeSelection = this._activeObject,\n            i, obj, idx, newIdx, objs, objsMoved = 0;\n\n        if (object === activeSelection && object.type === 'activeSelection') {\n          objs = activeSelection._objects;\n          for (i = 0; i < objs.length; i++) {\n            obj = objs[i];\n            idx = this._objects.indexOf(obj);\n            if (idx > 0 + objsMoved) {\n              newIdx = idx - 1;\n              removeFromArray(this._objects, obj);\n              this._objects.splice(newIdx, 0, obj);\n            }\n            objsMoved++;\n          }\n        }\n        else {\n          idx = this._objects.indexOf(object);\n          if (idx !== 0) {\n            // if object is not on the bottom of stack\n            newIdx = this._findNewLowerIndex(object, idx, intersecting);\n            removeFromArray(this._objects, object);\n            this._objects.splice(newIdx, 0, object);\n          }\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _findNewLowerIndex: function(object, idx, intersecting) {\n        var newIdx, i;\n\n        if (intersecting) {\n          newIdx = idx;\n\n          // traverse down the stack looking for the nearest intersecting object\n          for (i = idx - 1; i >= 0; --i) {\n\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                                 object.isContainedWithinObject(this._objects[i]) ||\n                                 this._objects[i].isContainedWithinObject(object);\n\n            if (isIntersecting) {\n              newIdx = i;\n              break;\n            }\n          }\n        }\n        else {\n          newIdx = idx - 1;\n        }\n\n        return newIdx;\n      },\n\n      /**\n       * Moves an object or a selection up in stack of drawn objects\n       * An optional paramter, intersecting allowes to move the object in front\n       * of the first intersecting object. Where intersection is calculated with\n       * bounding box. If no intersection is found, there will not be change in the\n       * stack.\n       * @param {fabric.Object} object Object to send\n       * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      bringForward: function (object, intersecting) {\n        if (!object) {\n          return this;\n        }\n        var activeSelection = this._activeObject,\n            i, obj, idx, newIdx, objs, objsMoved = 0;\n\n        if (object === activeSelection && object.type === 'activeSelection') {\n          objs = activeSelection._objects;\n          for (i = objs.length; i--;) {\n            obj = objs[i];\n            idx = this._objects.indexOf(obj);\n            if (idx < this._objects.length - 1 - objsMoved) {\n              newIdx = idx + 1;\n              removeFromArray(this._objects, obj);\n              this._objects.splice(newIdx, 0, obj);\n            }\n            objsMoved++;\n          }\n        }\n        else {\n          idx = this._objects.indexOf(object);\n          if (idx !== this._objects.length - 1) {\n            // if object is not on top of stack (last item in an array)\n            newIdx = this._findNewUpperIndex(object, idx, intersecting);\n            removeFromArray(this._objects, object);\n            this._objects.splice(newIdx, 0, object);\n          }\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _findNewUpperIndex: function(object, idx, intersecting) {\n        var newIdx, i, len;\n\n        if (intersecting) {\n          newIdx = idx;\n\n          // traverse up the stack looking for the nearest intersecting object\n          for (i = idx + 1, len = this._objects.length; i < len; ++i) {\n\n            var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                                 object.isContainedWithinObject(this._objects[i]) ||\n                                 this._objects[i].isContainedWithinObject(object);\n\n            if (isIntersecting) {\n              newIdx = i;\n              break;\n            }\n          }\n        }\n        else {\n          newIdx = idx + 1;\n        }\n\n        return newIdx;\n      },\n\n      /**\n       * Moves an object to specified level in stack of drawn objects\n       * @param {fabric.Object} object Object to send\n       * @param {Number} index Position to move to\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      moveTo: function (object, index) {\n        removeFromArray(this._objects, object);\n        this._objects.splice(index, 0, object);\n        return this.renderOnAddRemove && this.requestRenderAll();\n      },\n\n      /**\n       * Clears a canvas element and dispose objects\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      dispose: function () {\n        // cancel eventually ongoing renders\n        if (this.isRendering) {\n          fabric.util.cancelAnimFrame(this.isRendering);\n          this.isRendering = 0;\n        }\n        this.forEachObject(function(object) {\n          object.dispose && object.dispose();\n        });\n        this._objects = [];\n        if (this.backgroundImage && this.backgroundImage.dispose) {\n          this.backgroundImage.dispose();\n        }\n        this.backgroundImage = null;\n        if (this.overlayImage && this.overlayImage.dispose) {\n          this.overlayImage.dispose();\n        }\n        this.overlayImage = null;\n        this._iTextInstances = null;\n        this.contextContainer = null;\n        fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n        this.lowerCanvasEl = undefined;\n        return this;\n      },\n\n      /**\n       * Returns a string representation of an instance\n       * @return {String} string representation of an instance\n       */\n      toString: function () {\n        return '#<fabric.Canvas (' + this.complexity() + '): ' +\n                 '{ objects: ' + this._objects.length + ' }>';\n      }\n    });\n\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n      /**\n       * @static\n       * @type String\n       * @default\n       */\n      EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n      /**\n       * Provides a way to check support of some of the canvas methods\n       * (either those of HTMLCanvasElement itself, or rendering context)\n       *\n       * @param {String} methodName Method to check support for;\n       *                            Could be one of \"getImageData\", \"toDataURL\", \"toDataURLWithQuality\" or \"setLineDash\"\n       * @return {Boolean | null} `true` if method is supported (or at least exists),\n       *                          `null` if canvas element or context can not be initialized\n       */\n      supports: function (methodName) {\n        var el = fabric.util.createCanvasElement();\n\n        if (!el || !el.getContext) {\n          return null;\n        }\n\n        var ctx = el.getContext('2d');\n        if (!ctx) {\n          return null;\n        }\n\n        switch (methodName) {\n\n          case 'getImageData':\n            return typeof ctx.getImageData !== 'undefined';\n\n          case 'setLineDash':\n            return typeof ctx.setLineDash !== 'undefined';\n\n          case 'toDataURL':\n            return typeof el.toDataURL !== 'undefined';\n\n          case 'toDataURLWithQuality':\n            try {\n              el.toDataURL('image/jpeg', 0);\n              return true;\n            }\n            catch (e) { }\n            return false;\n\n          default:\n            return null;\n        }\n      }\n    });\n\n    /**\n     * Returns JSON representation of canvas\n     * @function\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} JSON string\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n     * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n     * @example <caption>JSON without additional properties</caption>\n     * var json = canvas.toJSON();\n     * @example <caption>JSON with additional properties included</caption>\n     * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n     * @example <caption>JSON without default values</caption>\n     * canvas.includeDefaultValues = false;\n     * var json = canvas.toJSON();\n     */\n    fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n    if (fabric.isLikelyNode) {\n      fabric.StaticCanvas.prototype.createPNGStream = function() {\n        var impl = fabric.util.getNodeCanvas(this.lowerCanvasEl);\n        return impl && impl.createPNGStream();\n      };\n      fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n        var impl = fabric.util.getNodeCanvas(this.lowerCanvasEl);\n        return impl && impl.createJPEGStream(opts);\n      };\n    }\n  })();\n\n\n  /**\n   * BaseBrush class\n   * @class fabric.BaseBrush\n   * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n   */\n  fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n    /**\n     * Color of a brush\n     * @type String\n     * @default\n     */\n    color: 'rgb(0, 0, 0)',\n\n    /**\n     * Width of a brush, has to be a Number, no string literals\n     * @type Number\n     * @default\n     */\n    width: 1,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n     * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow: null,\n\n    /**\n     * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap: 'round',\n\n    /**\n     * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin: 'round',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         10,\n\n    /**\n     * Stroke Dash Array.\n     * @type Array\n     * @default\n     */\n    strokeDashArray: null,\n\n    /**\n     * Sets shadow of an object\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setShadow: function(options) {\n      this.shadow = new fabric.Shadow(options);\n      return this;\n    },\n\n    /**\n     * Sets brush styles\n     * @private\n     */\n    _setBrushStyles: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = this.width;\n      ctx.lineCap = this.strokeLineCap;\n      ctx.miterLimit = this.strokeMiterLimit;\n      ctx.lineJoin = this.strokeLineJoin;\n      if (fabric.StaticCanvas.supports('setLineDash')) {\n        ctx.setLineDash(this.strokeDashArray || []);\n      }\n    },\n\n    /**\n     * Sets the transformation on given context\n     * @param {RenderingContext2d} ctx context to render on\n     * @private\n     */\n    _saveAndTransform: function(ctx) {\n      var v = this.canvas.viewportTransform;\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    },\n\n    /**\n     * Sets brush shadow styles\n     * @private\n     */\n    _setShadow: function() {\n      if (!this.shadow) {\n        return;\n      }\n\n      var ctx = this.canvas.contextTop,\n          zoom = this.canvas.getZoom();\n\n      ctx.shadowColor = this.shadow.color;\n      ctx.shadowBlur = this.shadow.blur * zoom;\n      ctx.shadowOffsetX = this.shadow.offsetX * zoom;\n      ctx.shadowOffsetY = this.shadow.offsetY * zoom;\n    },\n\n    /**\n     * Removes brush shadow styles\n     * @private\n     */\n    _resetShadow: function() {\n      var ctx = this.canvas.contextTop;\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    }\n  });\n\n\n  (function() {\n\n    /**\n     * PencilBrush class\n     * @class fabric.PencilBrush\n     * @extends fabric.BaseBrush\n     */\n    fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n      /**\n       * Constructor\n       * @param {fabric.Canvas} canvas\n       * @return {fabric.PencilBrush} Instance of a pencil brush\n       */\n      initialize: function(canvas) {\n        this.canvas = canvas;\n        this._points = [];\n      },\n\n      /**\n       * Invoked inside on mouse down and mouse move\n       * @param {Object} pointer\n       */\n      _drawSegment: function (ctx, p1, p2) {\n        var midPoint = p1.midPointFrom(p2);\n        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n        return midPoint;\n      },\n\n      /**\n       * Inovoked on mouse down\n       * @param {Object} pointer\n       */\n      onMouseDown: function(pointer) {\n        this._prepareForDrawing(pointer);\n        // capture coordinates immediately\n        // this allows to draw dots (when movement never occurs)\n        this._captureDrawingPath(pointer);\n        this._render();\n      },\n\n      /**\n       * Inovoked on mouse move\n       * @param {Object} pointer\n       */\n      onMouseMove: function(pointer) {\n        if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n          if (this.needsFullRender) {\n            // redraw curve\n            // clear top canvas\n            this.canvas.clearContext(this.canvas.contextTop);\n            this._render();\n          }\n          else {\n            var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n            // draw the curve update\n            this._saveAndTransform(ctx);\n            if (this.oldEnd) {\n              ctx.beginPath();\n              ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n            }\n            this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n      },\n\n      /**\n       * Invoked on mouse up\n       */\n      onMouseUp: function() {\n        this.oldEnd = undefined;\n        this._finalizeAndAddPath();\n      },\n\n      /**\n       * @private\n       * @param {Object} pointer Actual mouse position related to the canvas.\n       */\n      _prepareForDrawing: function(pointer) {\n\n        var p = new fabric.Point(pointer.x, pointer.y);\n\n        this._reset();\n        this._addPoint(p);\n        this.canvas.contextTop.moveTo(p.x, p.y);\n      },\n\n      /**\n       * @private\n       * @param {fabric.Point} point Point to be added to points array\n       */\n      _addPoint: function(point) {\n        if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n          return false;\n        }\n        this._points.push(point);\n        return true;\n      },\n\n      /**\n       * Clear points array and set contextTop canvas style.\n       * @private\n       */\n      _reset: function() {\n        this._points.length = 0;\n        this._setBrushStyles();\n        var color = new fabric.Color(this.color);\n        this.needsFullRender = (color.getAlpha() < 1);\n        this._setShadow();\n      },\n\n      /**\n       * @private\n       * @param {Object} pointer Actual mouse position related to the canvas.\n       */\n      _captureDrawingPath: function(pointer) {\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n        return this._addPoint(pointerPoint);\n      },\n\n      /**\n       * Draw a smooth path on the topCanvas using quadraticCurveTo\n       * @private\n       */\n      _render: function() {\n        var ctx  = this.canvas.contextTop, i, len,\n            p1 = this._points[0],\n            p2 = this._points[1];\n\n        this._saveAndTransform(ctx);\n        ctx.beginPath();\n        //if we only have 2 points in the path and they are the same\n        //it means that the user only clicked the canvas without moving the mouse\n        //then we should be drawing a dot. A path isn't drawn between two identical dots\n        //that's why we set them apart a bit\n        if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n          var width = this.width / 1000;\n          p1 = new fabric.Point(p1.x, p1.y);\n          p2 = new fabric.Point(p2.x, p2.y);\n          p1.x -= width;\n          p2.x += width;\n        }\n        ctx.moveTo(p1.x, p1.y);\n\n        for (i = 1, len = this._points.length; i < len; i++) {\n          // we pick the point between pi + 1 & pi + 2 as the\n          // end point and p1 as our control point.\n          this._drawSegment(ctx, p1, p2);\n          p1 = this._points[i];\n          p2 = this._points[i + 1];\n        }\n        // Draw last line as a straight line while\n        // we wait for the next point to be able to calculate\n        // the bezier control point\n        ctx.lineTo(p1.x, p1.y);\n        ctx.stroke();\n        ctx.restore();\n      },\n\n      /**\n       * Converts points to SVG path\n       * @param {Array} points Array of points\n       * @return {String} SVG path\n       */\n      convertPointsToSVGPath: function(points) {\n        var path = [], i, width = this.width / 1000,\n            p1 = new fabric.Point(points[0].x, points[0].y),\n            p2 = new fabric.Point(points[1].x, points[1].y),\n            len = points.length, multSignX = 1, multSignY = 1, manyPoints = len > 2;\n\n        if (manyPoints) {\n          multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n          multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n        }\n        path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\n        for (i = 1; i < len; i++) {\n          if (!p1.eq(p2)) {\n            var midPoint = p1.midPointFrom(p2);\n            // p1 is our bezier control point\n            // midpoint is our endpoint\n            // start point is p(i-1) value.\n            path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n          }\n          p1 = points[i];\n          if ((i + 1) < points.length) {\n            p2 = points[i + 1];\n          }\n        }\n        if (manyPoints) {\n          multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n          multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n        }\n        path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\n        return path;\n      },\n\n      /**\n       * Creates fabric.Path object to add on canvas\n       * @param {String} pathData Path data\n       * @return {fabric.Path} Path to add on canvas\n       */\n      createPath: function(pathData) {\n        var path = new fabric.Path(pathData, {\n          fill: null,\n          stroke: this.color,\n          strokeWidth: this.width,\n          strokeLineCap: this.strokeLineCap,\n          strokeMiterLimit: this.strokeMiterLimit,\n          strokeLineJoin: this.strokeLineJoin,\n          strokeDashArray: this.strokeDashArray,\n        });\n        var position = new fabric.Point(path.left + path.width / 2, path.top + path.height / 2);\n        position = path.translateToGivenOrigin(position, 'center', 'center', path.originX, path.originY);\n        path.top = position.y;\n        path.left = position.x;\n        if (this.shadow) {\n          this.shadow.affectStroke = true;\n          path.setShadow(this.shadow);\n        }\n\n        return path;\n      },\n\n      /**\n       * On mouseup after drawing the path on contextTop canvas\n       * we use the points captured to create an new fabric path object\n       * and add it to the fabric canvas.\n       */\n      _finalizeAndAddPath: function() {\n        var ctx = this.canvas.contextTop;\n        ctx.closePath();\n\n        var pathData = this.convertPointsToSVGPath(this._points).join('');\n        if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n          // do not create 0 width/height paths, as they are\n          // rendered inconsistently across browsers\n          // Firefox 4, for example, renders a dot,\n          // whereas Chrome 10 renders nothing\n          this.canvas.requestRenderAll();\n          return;\n        }\n\n        var path = this.createPath(pathData);\n        this.canvas.clearContext(this.canvas.contextTop);\n        this.canvas.add(path);\n        this.canvas.renderAll();\n        path.setCoords();\n        this._resetShadow();\n\n\n        // fire event 'path' created\n        this.canvas.fire('path:created', { path: path });\n      }\n    });\n  })();\n\n\n  /**\n   * CircleBrush class\n   * @class fabric.CircleBrush\n   */\n  fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n    /**\n     * Width of a brush\n     * @type Number\n     * @default\n     */\n    width: 10,\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.CircleBrush} Instance of a circle brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this.points = [];\n    },\n\n    /**\n     * Invoked inside on mouse down and mouse move\n     * @param {Object} pointer\n     */\n    drawDot: function(pointer) {\n      var point = this.addPoint(pointer),\n          ctx = this.canvas.contextTop;\n      this._saveAndTransform(ctx);\n      ctx.fillStyle = point.fill;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n      ctx.closePath();\n      ctx.fill();\n\n      ctx.restore();\n    },\n\n    /**\n     * Invoked on mouse down\n     */\n    onMouseDown: function(pointer) {\n      this.points.length = 0;\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._setShadow();\n      this.drawDot(pointer);\n    },\n\n    /**\n     * Render the full state of the brush\n     * @private\n     */\n    _render: function() {\n      var ctx  = this.canvas.contextTop, i, len,\n          points = this.points, point;\n      this._saveAndTransform(ctx);\n      for (i = 0, len = points.length; i < len; i++) {\n        point = points[i];\n        ctx.fillStyle = point.fill;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n        ctx.closePath();\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Invoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      this.drawDot(pointer);\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n      this.canvas.renderOnAddRemove = false;\n\n      var circles = [];\n\n      for (i = 0, len = this.points.length; i < len; i++) {\n        var point = this.points[i],\n            circle = new fabric.Circle({\n              radius: point.radius,\n              left: point.x,\n              top: point.y,\n              originX: 'center',\n              originY: 'center',\n              fill: point.fill\n            });\n\n        this.shadow && circle.setShadow(this.shadow);\n\n        circles.push(circle);\n      }\n      var group = new fabric.Group(circles);\n      group.canvas = this.canvas;\n\n      this.canvas.add(group);\n      this.canvas.fire('path:created', { path: group });\n\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._resetShadow();\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n      this.canvas.requestRenderAll();\n    },\n\n    /**\n     * @param {Object} pointer\n     * @return {fabric.Point} Just added pointer point\n     */\n    addPoint: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n          circleRadius = fabric.util.getRandomInt(\n            Math.max(0, this.width - 20), this.width + 20) / 2,\n\n          circleColor = new fabric.Color(this.color)\n            .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n            .toRgba();\n\n      pointerPoint.radius = circleRadius;\n      pointerPoint.fill = circleColor;\n\n      this.points.push(pointerPoint);\n\n      return pointerPoint;\n    }\n  });\n\n\n  /**\n   * SprayBrush class\n   * @class fabric.SprayBrush\n   */\n  fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n    /**\n     * Width of a spray\n     * @type Number\n     * @default\n     */\n    width:              10,\n\n    /**\n     * Density of a spray (number of dots per chunk)\n     * @type Number\n     * @default\n     */\n    density:            20,\n\n    /**\n     * Width of spray dots\n     * @type Number\n     * @default\n     */\n    dotWidth:           1,\n\n    /**\n     * Width variance of spray dots\n     * @type Number\n     * @default\n     */\n    dotWidthVariance:   1,\n\n    /**\n     * Whether opacity of a dot should be random\n     * @type Boolean\n     * @default\n     */\n    randomOpacity:        false,\n\n    /**\n     * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n     * @type Boolean\n     * @default\n     */\n    optimizeOverlapping:  true,\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.SprayBrush} Instance of a spray brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this.sprayChunks = [];\n    },\n\n    /**\n     * Invoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer) {\n      this.sprayChunks.length = 0;\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._setShadow();\n\n      this.addSprayChunk(pointer);\n      this.render(this.sprayChunkPoints);\n    },\n\n    /**\n     * Invoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      this.addSprayChunk(pointer);\n      this.render(this.sprayChunkPoints);\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n      this.canvas.renderOnAddRemove = false;\n\n      var rects = [];\n\n      for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n        var sprayChunk = this.sprayChunks[i];\n\n        for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n          var rect = new fabric.Rect({\n            width: sprayChunk[j].width,\n            height: sprayChunk[j].width,\n            left: sprayChunk[j].x + 1,\n            top: sprayChunk[j].y + 1,\n            originX: 'center',\n            originY: 'center',\n            fill: this.color\n          });\n          rects.push(rect);\n        }\n      }\n\n      if (this.optimizeOverlapping) {\n        rects = this._getOptimizedRects(rects);\n      }\n\n      var group = new fabric.Group(rects);\n      this.shadow && group.setShadow(this.shadow);\n      this.canvas.add(group);\n      this.canvas.fire('path:created', { path: group });\n\n      this.canvas.clearContext(this.canvas.contextTop);\n      this._resetShadow();\n      this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n      this.canvas.requestRenderAll();\n    },\n\n    /**\n     * @private\n     * @param {Array} rects\n     */\n    _getOptimizedRects: function(rects) {\n\n      // avoid creating duplicate rects at the same coordinates\n      var uniqueRects = { }, key, i, len;\n\n      for (i = 0, len = rects.length; i < len; i++) {\n        key = rects[i].left + '' + rects[i].top;\n        if (!uniqueRects[key]) {\n          uniqueRects[key] = rects[i];\n        }\n      }\n      var uniqueRectsArray = [];\n      for (key in uniqueRects) {\n        uniqueRectsArray.push(uniqueRects[key]);\n      }\n\n      return uniqueRectsArray;\n    },\n\n    /**\n     * Render new chunk of spray brush\n     */\n    render: function(sprayChunk) {\n      var ctx = this.canvas.contextTop, i, len;\n      ctx.fillStyle = this.color;\n\n      this._saveAndTransform(ctx);\n\n      for (i = 0, len = sprayChunk.length; i < len; i++) {\n        var point = sprayChunk[i];\n        if (typeof point.opacity !== 'undefined') {\n          ctx.globalAlpha = point.opacity;\n        }\n        ctx.fillRect(point.x, point.y, point.width, point.width);\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Render all spray chunks\n     */\n    _render: function() {\n      var ctx = this.canvas.contextTop, i, ilen;\n      ctx.fillStyle = this.color;\n\n      this._saveAndTransform(ctx);\n\n      for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n        this.render(this.sprayChunks[i]);\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @param {Object} pointer\n     */\n    addSprayChunk: function(pointer) {\n      this.sprayChunkPoints = [];\n\n      var x, y, width, radius = this.width / 2, i;\n\n      for (i = 0; i < this.density; i++) {\n\n        x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n        y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n        if (this.dotWidthVariance) {\n          width = fabric.util.getRandomInt(\n            // bottom clamp width to 1\n            Math.max(1, this.dotWidth - this.dotWidthVariance),\n            this.dotWidth + this.dotWidthVariance);\n        }\n        else {\n          width = this.dotWidth;\n        }\n\n        var point = new fabric.Point(x, y);\n        point.width = width;\n\n        if (this.randomOpacity) {\n          point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n        }\n\n        this.sprayChunkPoints.push(point);\n      }\n\n      this.sprayChunks.push(this.sprayChunkPoints);\n    }\n  });\n\n\n  /**\n   * PatternBrush class\n   * @class fabric.PatternBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n    getPatternSrc: function() {\n\n      var dotWidth = 20,\n          dotDistance = 5,\n          patternCanvas = fabric.util.createCanvasElement(),\n          patternCtx = patternCanvas.getContext('2d');\n\n      patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n      patternCtx.closePath();\n      patternCtx.fill();\n\n      return patternCanvas;\n    },\n\n    getPatternSrcFunction: function() {\n      return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n    },\n\n    /**\n     * Creates \"pattern\" instance property\n     */\n    getPattern: function() {\n      return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n    },\n\n    /**\n     * Sets brush styles\n     */\n    _setBrushStyles: function() {\n      this.callSuper('_setBrushStyles');\n      this.canvas.contextTop.strokeStyle = this.getPattern();\n    },\n\n    /**\n     * Creates path\n     */\n    createPath: function(pathData) {\n      var path = this.callSuper('createPath', pathData),\n          topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n      path.stroke = new fabric.Pattern({\n        source: this.source || this.getPatternSrcFunction(),\n        offsetX: -topLeft.x,\n        offsetY: -topLeft.y\n      });\n      return path;\n    }\n  });\n\n\n  (function() {\n\n    var getPointer = fabric.util.getPointer,\n        degreesToRadians = fabric.util.degreesToRadians,\n        radiansToDegrees = fabric.util.radiansToDegrees,\n        atan2 = Math.atan2,\n        abs = Math.abs,\n        supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\n\n        STROKE_OFFSET = 0.5;\n\n    /**\n     * Canvas class\n     * @class fabric.Canvas\n     * @extends fabric.StaticCanvas\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n     * @see {@link fabric.Canvas#initialize} for constructor definition\n     *\n     * @fires object:modified\n     * @fires object:rotated\n     * @fires object:scaled\n     * @fires object:moved\n     * @fires object:skewed\n     * @fires object:rotating\n     * @fires object:scaling\n     * @fires object:moving\n     * @fires object:skewing\n     * @fires object:selected this event is deprecated. use selection:created\n     *\n     * @fires before:transform\n     * @fires before:selection:cleared\n     * @fires selection:cleared\n     * @fires selection:updated\n     * @fires selection:created\n     *\n     * @fires path:created\n     * @fires mouse:down\n     * @fires mouse:move\n     * @fires mouse:up\n     * @fires mouse:down:before\n     * @fires mouse:move:before\n     * @fires mouse:up:before\n     * @fires mouse:over\n     * @fires mouse:out\n     * @fires mouse:dblclick\n     *\n     * @fires dragover\n     * @fires dragenter\n     * @fires dragleave\n     * @fires drop\n     *\n     */\n    fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n      /**\n       * Constructor\n       * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n       * @param {Object} [options] Options object\n       * @return {Object} thisArg\n       */\n      initialize: function(el, options) {\n        options || (options = { });\n        this.renderAndResetBound = this.renderAndReset.bind(this);\n        this.requestRenderAllBound = this.requestRenderAll.bind(this);\n        this._initStatic(el, options);\n        this._initInteractive();\n        this._createCacheCanvas();\n      },\n\n      /**\n       * When true, objects can be transformed by one side (unproportionally)\n       * @type Boolean\n       * @default\n       */\n      uniScaleTransform:      false,\n\n      /**\n       * Indicates which key enable unproportional scaling\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\n       * If `null` or 'none' or any other string that is not a modifier key\n       * feature is disabled feature disabled.\n       * @since 1.6.2\n       * @type String\n       * @default\n       */\n      uniScaleKey:           'shiftKey',\n\n      /**\n       * When true, objects use center point as the origin of scale transformation.\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n       * @since 1.3.4\n       * @type Boolean\n       * @default\n       */\n      centeredScaling:        false,\n\n      /**\n       * When true, objects use center point as the origin of rotate transformation.\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n       * @since 1.3.4\n       * @type Boolean\n       * @default\n       */\n      centeredRotation:       false,\n\n      /**\n       * Indicates which key enable centered Transform\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\n       * If `null` or 'none' or any other string that is not a modifier key\n       * feature is disabled feature disabled.\n       * @since 1.6.2\n       * @type String\n       * @default\n       */\n      centeredKey:           'altKey',\n\n      /**\n       * Indicates which key enable alternate action on corner\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\n       * If `null` or 'none' or any other string that is not a modifier key\n       * feature is disabled feature disabled.\n       * @since 1.6.2\n       * @type String\n       * @default\n       */\n      altActionKey:           'shiftKey',\n\n      /**\n       * Indicates that canvas is interactive. This property should not be changed.\n       * @type Boolean\n       * @default\n       */\n      interactive:            true,\n\n      /**\n       * Indicates whether group selection should be enabled\n       * @type Boolean\n       * @default\n       */\n      selection:              true,\n\n      /**\n       * Indicates which key or keys enable multiple click selection\n       * Pass value as a string or array of strings\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\n       * If `null` or empty or containing any other string that is not a modifier key\n       * feature is disabled.\n       * @since 1.6.2\n       * @type String|Array\n       * @default\n       */\n      selectionKey:           'shiftKey',\n\n      /**\n       * Indicates which key enable alternative selection\n       * in case of target overlapping with active object\n       * values: 'altKey', 'shiftKey', 'ctrlKey'.\n       * For a series of reason that come from the general expectations on how\n       * things should work, this feature works only for preserveObjectStacking true.\n       * If `null` or 'none' or any other string that is not a modifier key\n       * feature is disabled.\n       * @since 1.6.5\n       * @type null|String\n       * @default\n       */\n      altSelectionKey:           null,\n\n      /**\n       * Color of selection\n       * @type String\n       * @default\n       */\n      selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n      /**\n       * Default dash array pattern\n       * If not empty the selection border is dashed\n       * @type Array\n       */\n      selectionDashArray:     [],\n\n      /**\n       * Color of the border of selection (usually slightly darker than color of selection itself)\n       * @type String\n       * @default\n       */\n      selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n      /**\n       * Width of a line used in object/group selection\n       * @type Number\n       * @default\n       */\n      selectionLineWidth:     1,\n\n      /**\n       * Select only shapes that are fully contained in the dragged selection rectangle.\n       * @type Boolean\n       * @default\n       */\n      selectionFullyContained: false,\n\n      /**\n       * Default cursor value used when hovering over an object on canvas\n       * @type String\n       * @default\n       */\n      hoverCursor:            'move',\n\n      /**\n       * Default cursor value used when moving an object on canvas\n       * @type String\n       * @default\n       */\n      moveCursor:             'move',\n\n      /**\n       * Default cursor value used for the entire canvas\n       * @type String\n       * @default\n       */\n      defaultCursor:          'default',\n\n      /**\n       * Cursor value used during free drawing\n       * @type String\n       * @default\n       */\n      freeDrawingCursor:      'crosshair',\n\n      /**\n       * Cursor value used for rotation point\n       * @type String\n       * @default\n       */\n      rotationCursor:         'crosshair',\n\n      /**\n       * Cursor value used for disabled elements ( corners with disabled action )\n       * @type String\n       * @since 2.0.0\n       * @default\n       */\n      notAllowedCursor:         'not-allowed',\n\n      /**\n       * Default element class that's given to wrapper (div) element of canvas\n       * @type String\n       * @default\n       */\n      containerClass:         'canvas-container',\n\n      /**\n       * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n       * @type Boolean\n       * @default\n       */\n      perPixelTargetFind:     false,\n\n      /**\n       * Number of pixels around target pixel to tolerate (consider active) during object detection\n       * @type Number\n       * @default\n       */\n      targetFindTolerance:    0,\n\n      /**\n       * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n       * @type Boolean\n       * @default\n       */\n      skipTargetFind:         false,\n\n      /**\n       * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n       * After mousedown, mousemove creates a shape,\n       * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n       * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n       * @type Boolean\n       * @default\n       */\n      isDrawingMode:          false,\n\n      /**\n       * Indicates whether objects should remain in current stack position when selected.\n       * When false objects are brought to top and rendered as part of the selection group\n       * @type Boolean\n       * @default\n       */\n      preserveObjectStacking: false,\n\n      /**\n       * Indicates the angle that an object will lock to while rotating.\n       * @type Number\n       * @since 1.6.7\n       * @default\n       */\n      snapAngle: 0,\n\n      /**\n       * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\n       * When `null`, the snapThreshold will default to the snapAngle.\n       * @type null|Number\n       * @since 1.6.7\n       * @default\n       */\n      snapThreshold: null,\n\n      /**\n       * Indicates if the right click on canvas can output the context menu or not\n       * @type Boolean\n       * @since 1.6.5\n       * @default\n       */\n      stopContextMenu: false,\n\n      /**\n       * Indicates if the canvas can fire right click events\n       * @type Boolean\n       * @since 1.6.5\n       * @default\n       */\n      fireRightClick: false,\n\n      /**\n       * Indicates if the canvas can fire middle click events\n       * @type Boolean\n       * @since 1.7.8\n       * @default\n       */\n      fireMiddleClick: false,\n\n      /**\n       * @private\n       */\n      _initInteractive: function() {\n        this._currentTransform = null;\n        this._groupSelector = null;\n        this._initWrapperElement();\n        this._createUpperCanvas();\n        this._initEventListeners();\n\n        this._initRetinaScaling();\n\n        this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n        this.calcOffset();\n      },\n\n      /**\n       * Divides objects in two groups, one to render immediately\n       * and one to render as activeGroup.\n       * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n       */\n      _chooseObjectsToRender: function() {\n        var activeObjects = this.getActiveObjects(),\n            object, objsToRender, activeGroupObjects;\n\n        if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n          objsToRender = [];\n          activeGroupObjects = [];\n          for (var i = 0, length = this._objects.length; i < length; i++) {\n            object = this._objects[i];\n            if (activeObjects.indexOf(object) === -1 ) {\n              objsToRender.push(object);\n            }\n            else {\n              activeGroupObjects.push(object);\n            }\n          }\n          if (activeObjects.length > 1) {\n            this._activeObject._objects = activeGroupObjects;\n          }\n          objsToRender.push.apply(objsToRender, activeGroupObjects);\n        }\n        else {\n          objsToRender = this._objects;\n        }\n        return objsToRender;\n      },\n\n      /**\n       * Renders both the top canvas and the secondary container canvas.\n       * @return {fabric.Canvas} instance\n       * @chainable\n       */\n      renderAll: function () {\n        if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n          this.clearContext(this.contextTop);\n          this.contextTopDirty = false;\n        }\n        if (this.hasLostContext) {\n          this.renderTopLayer(this.contextTop);\n        }\n        var canvasToDrawOn = this.contextContainer;\n        this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n        return this;\n      },\n\n      renderTopLayer: function(ctx) {\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\n          this.freeDrawingBrush && this.freeDrawingBrush._render();\n        }\n        // we render the top context - last object\n        if (this.selection && this._groupSelector) {\n          this._drawSelection(ctx);\n        }\n      },\n\n      /**\n       * Method to render only the top canvas.\n       * Also used to render the group selection box.\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      renderTop: function () {\n        var ctx = this.contextTop;\n        this.clearContext(ctx);\n        this.renderTopLayer(ctx);\n        this.fire('after:render');\n        this.contextTopDirty = true;\n        return this;\n      },\n\n      /**\n       * Resets the current transform to its original values and chooses the type of resizing based on the event\n       * @private\n       */\n      _resetCurrentTransform: function() {\n        var t = this._currentTransform;\n\n        t.target.set({\n          scaleX: t.original.scaleX,\n          scaleY: t.original.scaleY,\n          skewX: t.original.skewX,\n          skewY: t.original.skewY,\n          left: t.original.left,\n          top: t.original.top\n        });\n\n        if (this._shouldCenterTransform(t.target)) {\n          if (t.originX !== 'center') {\n            if (t.originX === 'right') {\n              t.mouseXSign = -1;\n            }\n            else {\n              t.mouseXSign = 1;\n            }\n          }\n          if (t.originY !== 'center') {\n            if (t.originY === 'bottom') {\n              t.mouseYSign = -1;\n            }\n            else {\n              t.mouseYSign = 1;\n            }\n          }\n\n          t.originX = 'center';\n          t.originY = 'center';\n        }\n        else {\n          t.originX = t.original.originX;\n          t.originY = t.original.originY;\n        }\n      },\n\n      /**\n       * Checks if point is contained within an area of given object\n       * @param {Event} e Event object\n       * @param {fabric.Object} target Object to test against\n       * @param {Object} [point] x,y object of point coordinates we want to check.\n       * @return {Boolean} true if point is contained within an area of given object\n       */\n      containsPoint: function (e, target, point) {\n        var ignoreZoom = true,\n            pointer = point || this.getPointer(e, ignoreZoom),\n            xy;\n\n        if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\n          xy = this._normalizePointer(target.group, pointer);\n        }\n        else {\n          xy = { x: pointer.x, y: pointer.y };\n        }\n        // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n        // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n        return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n      },\n\n      /**\n       * @private\n       */\n      _normalizePointer: function (object, pointer) {\n        var m = object.calcTransformMatrix(),\n            invertedM = fabric.util.invertTransform(m),\n            vptPointer = this.restorePointerVpt(pointer);\n        return fabric.util.transformPoint(vptPointer, invertedM);\n      },\n\n      /**\n       * Returns true if object is transparent at a certain location\n       * @param {fabric.Object} target Object to check\n       * @param {Number} x Left coordinate\n       * @param {Number} y Top coordinate\n       * @return {Boolean}\n       */\n      isTargetTransparent: function (target, x, y) {\n        if (target.shouldCache() && target._cacheCanvas) {\n          var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\n              targetRelativeX = target.cacheTranslationX + (normalizedPointer.x * target.zoomX),\n              targetRelativeY = target.cacheTranslationY + (normalizedPointer.y * target.zoomY);\n\n          var isTransparent = fabric.util.isTransparent(\n            target._cacheContext, targetRelativeX, targetRelativeY, this.targetFindTolerance);\n\n          return isTransparent;\n        }\n\n        var ctx = this.contextCache,\n            originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n\n        target.selectionBackgroundColor = '';\n\n        this.clearContext(ctx);\n\n        ctx.save();\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        target.render(ctx);\n        ctx.restore();\n\n        target === this._activeObject && target._renderControls(ctx, {\n          hasBorders: false,\n          transparentCorners: false\n        }, {\n          hasBorders: false,\n        });\n\n        target.selectionBackgroundColor = originalColor;\n\n        var isTransparent = fabric.util.isTransparent(\n          ctx, x, y, this.targetFindTolerance);\n\n        return isTransparent;\n      },\n\n      /**\n       * takes an event and determins if selection key has been pressed\n       * @private\n       * @param {Event} e Event object\n       */\n      _isSelectionKeyPressed: function(e) {\n        var selectionKeyPressed = false;\n\n        if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\n          selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\n        }\n        else {\n          selectionKeyPressed = e[this.selectionKey];\n        }\n\n        return selectionKeyPressed;\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {fabric.Object} target\n       */\n      _shouldClearSelection: function (e, target) {\n        var activeObjects = this.getActiveObjects(),\n            activeObject = this._activeObject;\n\n        return (\n          !target\n          ||\n          (target &&\n            activeObject &&\n            activeObjects.length > 1 &&\n            activeObjects.indexOf(target) === -1 &&\n            activeObject !== target &&\n            !this._isSelectionKeyPressed(e))\n          ||\n          (target && !target.evented)\n          ||\n          (target &&\n            !target.selectable &&\n            activeObject &&\n            activeObject !== target)\n        );\n      },\n\n      /**\n       * centeredScaling from object can't override centeredScaling from canvas.\n       * this should be fixed, since object setting should take precedence over canvas.\n       * @private\n       * @param {fabric.Object} target\n       */\n      _shouldCenterTransform: function (target) {\n        if (!target) {\n          return;\n        }\n\n        var t = this._currentTransform,\n            centerTransform;\n\n        if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n          centerTransform = this.centeredScaling || target.centeredScaling;\n        }\n        else if (t.action === 'rotate') {\n          centerTransform = this.centeredRotation || target.centeredRotation;\n        }\n\n        return centerTransform ? !t.altKey : t.altKey;\n      },\n\n      /**\n       * @private\n       */\n      _getOriginFromCorner: function(target, corner) {\n        var origin = {\n          x: target.originX,\n          y: target.originY\n        };\n\n        if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n          origin.x = 'right';\n        }\n        else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n          origin.x = 'left';\n        }\n\n        if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n          origin.y = 'bottom';\n        }\n        else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n          origin.y = 'top';\n        }\n\n        return origin;\n      },\n\n      /**\n       * @private\n       */\n      _getActionFromCorner: function(target, corner, e) {\n        if (!corner) {\n          return 'drag';\n        }\n\n        switch (corner) {\n          case 'mtr':\n            return 'rotate';\n          case 'ml':\n          case 'mr':\n            return e[this.altActionKey] ? 'skewY' : 'scaleX';\n          case 'mt':\n          case 'mb':\n            return e[this.altActionKey] ? 'skewX' : 'scaleY';\n          default:\n            return 'scale';\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {fabric.Object} target\n       */\n      _setupCurrentTransform: function (e, target) {\n        if (!target) {\n          return;\n        }\n\n        var pointer = this.getPointer(e),\n            corner = target._findTargetCorner(this.getPointer(e, true)),\n            action = this._getActionFromCorner(target, corner, e),\n            origin = this._getOriginFromCorner(target, corner);\n\n        this._currentTransform = {\n          target: target,\n          action: action,\n          corner: corner,\n          scaleX: target.scaleX,\n          scaleY: target.scaleY,\n          skewX: target.skewX,\n          skewY: target.skewY,\n          // used by transation\n          offsetX: pointer.x - target.left,\n          offsetY: pointer.y - target.top,\n          originX: origin.x,\n          originY: origin.y,\n          ex: pointer.x,\n          ey: pointer.y,\n          lastX: pointer.x,\n          lastY: pointer.y,\n          // unsure they are usefull anymore.\n          // left: target.left,\n          // top: target.top,\n          theta: degreesToRadians(target.angle),\n          // end of unsure\n          width: target.width * target.scaleX,\n          mouseXSign: 1,\n          mouseYSign: 1,\n          shiftKey: e.shiftKey,\n          altKey: e[this.centeredKey],\n          original: fabric.util.saveObjectTransform(target),\n        };\n\n        this._currentTransform.original.originX = origin.x;\n        this._currentTransform.original.originY = origin.y;\n\n        this._resetCurrentTransform();\n        this._beforeTransform(e);\n      },\n\n      /**\n       * Translates object by \"setting\" its left/top\n       * @private\n       * @param {Number} x pointer's x coordinate\n       * @param {Number} y pointer's y coordinate\n       * @return {Boolean} true if the translation occurred\n       */\n      _translateObject: function (x, y) {\n        var transform = this._currentTransform,\n            target = transform.target,\n            newLeft = x - transform.offsetX,\n            newTop = y - transform.offsetY,\n            moveX = !target.get('lockMovementX') && target.left !== newLeft,\n            moveY = !target.get('lockMovementY') && target.top !== newTop;\n\n        moveX && target.set('left', newLeft);\n        moveY && target.set('top', newTop);\n        return moveX || moveY;\n      },\n\n      /**\n       * Check if we are increasing a positive skew or lower it,\n       * checking mouse direction and pressed corner.\n       * @private\n       */\n      _changeSkewTransformOrigin: function(mouseMove, t, by) {\n        var property = 'originX', origins = { 0: 'center' },\n            skew = t.target.skewX, originA = 'left', originB = 'right',\n            corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\n            flipSign = 1;\n\n        mouseMove = mouseMove > 0 ? 1 : -1;\n        if (by === 'y') {\n          skew = t.target.skewY;\n          originA = 'top';\n          originB = 'bottom';\n          property = 'originY';\n        }\n        origins[-1] = originA;\n        origins[1] = originB;\n\n        t.target.flipX && (flipSign *= -1);\n        t.target.flipY && (flipSign *= -1);\n\n        if (skew === 0) {\n          t.skewSign = -corner * mouseMove * flipSign;\n          t[property] = origins[-mouseMove];\n        }\n        else {\n          skew = skew > 0 ? 1 : -1;\n          t.skewSign = skew;\n          t[property] = origins[skew * corner * flipSign];\n        }\n      },\n\n      /**\n       * Skew object by mouse events\n       * @private\n       * @param {Number} x pointer's x coordinate\n       * @param {Number} y pointer's y coordinate\n       * @param {String} by Either 'x' or 'y'\n       * @return {Boolean} true if the skewing occurred\n       */\n      _skewObject: function (x, y, by) {\n        var t = this._currentTransform,\n            target = t.target, skewed = false,\n            lockSkewingX = target.get('lockSkewingX'),\n            lockSkewingY = target.get('lockSkewingY');\n\n        if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\n          return false;\n        }\n\n        // Get the constraint point\n        var center = target.getCenterPoint(),\n            actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\n            lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\n            actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\n\n        this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\n        actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\n        constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\n        // Actually skew the object\n        skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\n        t.lastX = x;\n        t.lastY = y;\n        // Make sure the constraints apply\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n        return skewed;\n      },\n\n      /**\n       * Set object skew\n       * @private\n       * @return {Boolean} true if the skewing occurred\n       */\n      _setObjectSkew: function(localMouse, transform, by, _dim) {\n        var target = transform.target, newValue, skewed = false,\n            skewSign = transform.skewSign, newDim, dimNoSkew,\n            otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\n\n        if (by === 'x') {\n          otherBy = 'y';\n          _otherBy = 'Y';\n          _by = 'X';\n          skewX = 0;\n          skewY = target.skewY;\n        }\n        else {\n          otherBy = 'x';\n          _otherBy = 'X';\n          _by = 'Y';\n          skewX = target.skewX;\n          skewY = 0;\n        }\n\n        dimNoSkew = target._getTransformedDimensions(skewX, skewY);\n        newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\n        if (newDimMouse <= 2) {\n          newValue = 0;\n        }\n        else {\n          newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\n                                          (dimNoSkew[otherBy] / target['scale' + _otherBy]));\n          newValue = fabric.util.radiansToDegrees(newValue);\n        }\n        skewed = target['skew' + _by] !== newValue;\n        target.set('skew' + _by, newValue);\n        if (target['skew' + _otherBy] !== 0) {\n          newDim = target._getTransformedDimensions();\n          newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\n          target.set('scale' + _otherBy, newValue);\n        }\n        return skewed;\n      },\n\n      /**\n       * Scales object by invoking its scaleX/scaleY methods\n       * @private\n       * @param {Number} x pointer's x coordinate\n       * @param {Number} y pointer's y coordinate\n       * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n       *                    When not provided, an object is scaled by both dimensions equally\n       * @return {Boolean} true if the scaling occurred\n       */\n      _scaleObject: function (x, y, by) {\n        var t = this._currentTransform,\n            target = t.target,\n            lockScalingX = target.lockScalingX,\n            lockScalingY = target.lockScalingY,\n            lockScalingFlip = target.lockScalingFlip;\n\n        if (lockScalingX && lockScalingY) {\n          return false;\n        }\n\n        // Get the constraint point\n        var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n            localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\n            dim = target._getTransformedDimensions(), scaled = false;\n\n        this._setLocalMouse(localMouse, t);\n\n        // Actually scale the object\n        scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\n\n        // Make sure the constraints apply\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n        return scaled;\n      },\n\n      /**\n       * @private\n       * @return {Boolean} true if the scaling occurred\n       */\n      _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n        var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\n            changeX, changeY, scaleX, scaleY;\n\n        scaleX = localMouse.x * target.scaleX / _dim.x;\n        scaleY = localMouse.y * target.scaleY / _dim.y;\n        changeX = target.scaleX !== scaleX;\n        changeY = target.scaleY !== scaleY;\n\n        if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\n          forbidScalingX = true;\n          localMouse.x = 0;\n        }\n\n        if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\n          forbidScalingY = true;\n          localMouse.y = 0;\n        }\n\n        if (by === 'equally' && !lockScalingX && !lockScalingY) {\n          scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\n        }\n        else if (!by) {\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\n        }\n        else if (by === 'x' && !target.get('lockUniScaling')) {\n          forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\n        }\n        else if (by === 'y' && !target.get('lockUniScaling')) {\n          forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\n        }\n        transform.newScaleX = scaleX;\n        transform.newScaleY = scaleY;\n        forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n        return scaled;\n      },\n\n      /**\n       * @private\n       * @return {Boolean} true if the scaling occurred\n       */\n      _scaleObjectEqually: function(localMouse, target, transform, _dim) {\n\n        var dist = localMouse.y + localMouse.x,\n            lastDist = _dim.y * transform.original.scaleY / target.scaleY +\n                       _dim.x * transform.original.scaleX / target.scaleX,\n            scaled, signX = localMouse.x < 0 ? -1 : 1,\n            signY = localMouse.y < 0 ? -1 : 1;\n\n        // We use transform.scaleX/Y instead of target.scaleX/Y\n        // because the object may have a min scale and we'll loose the proportions\n        transform.newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\n        transform.newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\n        scaled = transform.newScaleX !== target.scaleX || transform.newScaleY !== target.scaleY;\n        target.set('scaleX', transform.newScaleX);\n        target.set('scaleY', transform.newScaleY);\n        return scaled;\n      },\n\n      /**\n       * @private\n       */\n      _flipObject: function(transform, by) {\n        if (transform.newScaleX < 0 && by !== 'y') {\n          if (transform.originX === 'left') {\n            transform.originX = 'right';\n          }\n          else if (transform.originX === 'right') {\n            transform.originX = 'left';\n          }\n        }\n\n        if (transform.newScaleY < 0 && by !== 'x') {\n          if (transform.originY === 'top') {\n            transform.originY = 'bottom';\n          }\n          else if (transform.originY === 'bottom') {\n            transform.originY = 'top';\n          }\n        }\n      },\n\n      /**\n       * @private\n       */\n      _setLocalMouse: function(localMouse, t) {\n        var target = t.target, zoom = this.getZoom(),\n            padding = target.padding / zoom;\n\n        if (t.originX === 'right') {\n          localMouse.x *= -1;\n        }\n        else if (t.originX === 'center') {\n          localMouse.x *= t.mouseXSign * 2;\n          if (localMouse.x < 0) {\n            t.mouseXSign = -t.mouseXSign;\n          }\n        }\n\n        if (t.originY === 'bottom') {\n          localMouse.y *= -1;\n        }\n        else if (t.originY === 'center') {\n          localMouse.y *= t.mouseYSign * 2;\n          if (localMouse.y < 0) {\n            t.mouseYSign = -t.mouseYSign;\n          }\n        }\n\n        // adjust the mouse coordinates when dealing with padding\n        if (abs(localMouse.x) > padding) {\n          if (localMouse.x < 0) {\n            localMouse.x += padding;\n          }\n          else {\n            localMouse.x -= padding;\n          }\n        }\n        else { // mouse is within the padding, set to 0\n          localMouse.x = 0;\n        }\n\n        if (abs(localMouse.y) > padding) {\n          if (localMouse.y < 0) {\n            localMouse.y += padding;\n          }\n          else {\n            localMouse.y -= padding;\n          }\n        }\n        else {\n          localMouse.y = 0;\n        }\n      },\n\n      /**\n       * Rotates object by invoking its rotate method\n       * @private\n       * @param {Number} x pointer's x coordinate\n       * @param {Number} y pointer's y coordinate\n       * @return {Boolean} true if the rotation occurred\n       */\n      _rotateObject: function (x, y) {\n\n        var t = this._currentTransform,\n            target = t.target, constraintPosition,\n            constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n\n        if (target.lockRotation) {\n          return false;\n        }\n\n        var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\n            curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\n            angle = radiansToDegrees(curAngle - lastAngle + t.theta),\n            hasRotated = true;\n\n        if (target.snapAngle > 0) {\n          var snapAngle  = target.snapAngle,\n              snapThreshold  = target.snapThreshold || snapAngle,\n              rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n              leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n            angle = leftAngleLocked;\n          }\n          else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n            angle = rightAngleLocked;\n          }\n        }\n\n        // normalize angle to positive value\n        if (angle < 0) {\n          angle = 360 + angle;\n        }\n        angle %= 360;\n\n        if (target.angle === angle) {\n          hasRotated = false;\n        }\n        else {\n          // rotation only happen here\n          target.angle = angle;\n          // Make sure the constraints apply\n          target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n        }\n\n        return hasRotated;\n      },\n\n      /**\n       * Set the cursor type of the canvas element\n       * @param {String} value Cursor type of the canvas element.\n       * @see http://www.w3.org/TR/css3-ui/#cursor\n       */\n      setCursor: function (value) {\n        this.upperCanvasEl.style.cursor = value;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx to draw the selection on\n       */\n      _drawSelection: function (ctx) {\n        var groupSelector = this._groupSelector,\n            left = groupSelector.left,\n            top = groupSelector.top,\n            aleft = abs(left),\n            atop = abs(top);\n\n        if (this.selectionColor) {\n          ctx.fillStyle = this.selectionColor;\n\n          ctx.fillRect(\n            groupSelector.ex - ((left > 0) ? 0 : -left),\n            groupSelector.ey - ((top > 0) ? 0 : -top),\n            aleft,\n            atop\n          );\n        }\n\n        if (!this.selectionLineWidth || !this.selectionBorderColor) {\n          return;\n        }\n        ctx.lineWidth = this.selectionLineWidth;\n        ctx.strokeStyle = this.selectionBorderColor;\n\n        // selection border\n        if (this.selectionDashArray.length > 1 && !supportLineDash) {\n\n          var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n              py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\n\n          ctx.beginPath();\n\n          fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n          fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n          fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n          fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\n          ctx.closePath();\n          ctx.stroke();\n        }\n        else {\n          fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n          ctx.strokeRect(\n            groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n            groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n            aleft,\n            atop\n          );\n        }\n      },\n\n      /**\n       * Method that determines what object we are clicking on\n       * the skipGroup parameter is for internal use, is needed for shift+click action\n       * @param {Event} e mouse event\n       * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\n       */\n      findTarget: function (e, skipGroup) {\n        if (this.skipTargetFind) {\n          return;\n        }\n\n        var ignoreZoom = true,\n            pointer = this.getPointer(e, ignoreZoom),\n            activeObject = this._activeObject,\n            aObjects = this.getActiveObjects(),\n            activeTarget, activeTargetSubs;\n\n        // first check current group (if one exists)\n        // active group does not check sub targets like normal groups.\n        // if active group just exits.\n        this.targets = [];\n\n        if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n          return activeObject;\n        }\n        // if we hit the corner of an activeObject, let's return that.\n        if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\n          return activeObject;\n        }\n        if (aObjects.length === 1 &&\n          activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n          if (!this.preserveObjectStacking) {\n            return activeObject;\n          }\n          else {\n            activeTarget = activeObject;\n            activeTargetSubs = this.targets;\n            this.targets = [];\n          }\n        }\n        var target = this._searchPossibleTargets(this._objects, pointer);\n        if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n          target = activeTarget;\n          this.targets = activeTargetSubs;\n        }\n        return target;\n      },\n\n      /**\n       * @private\n       */\n      _checkTarget: function(pointer, obj) {\n        if (obj &&\n            obj.visible &&\n            obj.evented &&\n            this.containsPoint(null, obj, pointer)){\n          if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n            var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);\n            if (!isTransparent) {\n              return true;\n            }\n          }\n          else {\n            return true;\n          }\n        }\n      },\n\n      /**\n       * @private\n       */\n      _searchPossibleTargets: function(objects, pointer) {\n\n        // Cache all targets where their bounding box contains point.\n        var target, i = objects.length, normalizedPointer, subTarget;\n        // Do not check for currently grouped objects, since we check the parent group itself.\n        // until we call this function specifically to search inside the activeGroup\n        while (i--) {\n          if (this._checkTarget(pointer, objects[i])) {\n            target = objects[i];\n            if (target.subTargetCheck && target instanceof fabric.Group) {\n              normalizedPointer = this._normalizePointer(target, pointer);\n              subTarget = this._searchPossibleTargets(target._objects, normalizedPointer);\n              subTarget && this.targets.push(subTarget);\n            }\n            break;\n          }\n        }\n        return target;\n      },\n\n      /**\n       * Returns pointer coordinates without the effect of the viewport\n       * @param {Object} pointer with \"x\" and \"y\" number values\n       * @return {Object} object with \"x\" and \"y\" number values\n       */\n      restorePointerVpt: function(pointer) {\n        return fabric.util.transformPoint(\n          pointer,\n          fabric.util.invertTransform(this.viewportTransform)\n        );\n      },\n\n      /**\n       * Returns pointer coordinates relative to canvas.\n       * Can return coordinates with or without viewportTransform.\n       * ignoreZoom false gives back coordinates that represent\n       * the point clicked on canvas element.\n       * ignoreZoom true gives back coordinates after being processed\n       * by the viewportTransform ( sort of coordinates of what is displayed\n       * on the canvas where you are clicking.\n       * ignoreZoom true = HTMLElement coordinates relative to top,left\n       * ignoreZoom false, default = fabric space coordinates, the same used for shape position\n       * To interact with your shapes top and left you want to use ignoreZoom true\n       * most of the time, while ignoreZoom false will give you coordinates\n       * compatible with the object.oCoords system.\n       * of the time.\n       * @param {Event} e\n       * @param {Boolean} ignoreZoom\n       * @return {Object} object with \"x\" and \"y\" number values\n       */\n      getPointer: function (e, ignoreZoom) {\n        // return cached values if we are in the event processing chain\n        if (this._absolutePointer && !ignoreZoom) {\n          return this._absolutePointer;\n        }\n        if (this._pointer && ignoreZoom) {\n          return this._pointer;\n        }\n\n        var pointer = getPointer(e),\n            upperCanvasEl = this.upperCanvasEl,\n            bounds = upperCanvasEl.getBoundingClientRect(),\n            boundsWidth = bounds.width || 0,\n            boundsHeight = bounds.height || 0,\n            cssScale;\n\n        if (!boundsWidth || !boundsHeight ) {\n          if ('top' in bounds && 'bottom' in bounds) {\n            boundsHeight = Math.abs( bounds.top - bounds.bottom );\n          }\n          if ('right' in bounds && 'left' in bounds) {\n            boundsWidth = Math.abs( bounds.right - bounds.left );\n          }\n        }\n\n        this.calcOffset();\n        pointer.x = pointer.x - this._offset.left;\n        pointer.y = pointer.y - this._offset.top;\n        if (!ignoreZoom) {\n          pointer = this.restorePointerVpt(pointer);\n        }\n\n        if (boundsWidth === 0 || boundsHeight === 0) {\n          // If bounds are not available (i.e. not visible), do not apply scale.\n          cssScale = { width: 1, height: 1 };\n        }\n        else {\n          cssScale = {\n            width: upperCanvasEl.width / boundsWidth,\n            height: upperCanvasEl.height / boundsHeight\n          };\n        }\n\n        return {\n          x: pointer.x * cssScale.width,\n          y: pointer.y * cssScale.height\n        };\n      },\n\n      /**\n       * @private\n       * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n       */\n      _createUpperCanvas: function () {\n        var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\n        // there is no need to create a new upperCanvas element if we have already one.\n        if (this.upperCanvasEl) {\n          this.upperCanvasEl.className = '';\n        }\n        else {\n          this.upperCanvasEl = this._createCanvasElement();\n        }\n        fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n        this.wrapperEl.appendChild(this.upperCanvasEl);\n\n        this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n        this._applyCanvasStyle(this.upperCanvasEl);\n        this.contextTop = this.upperCanvasEl.getContext('2d');\n      },\n\n      /**\n       * @private\n       */\n      _createCacheCanvas: function () {\n        this.cacheCanvasEl = this._createCanvasElement();\n        this.cacheCanvasEl.setAttribute('width', this.width);\n        this.cacheCanvasEl.setAttribute('height', this.height);\n        this.contextCache = this.cacheCanvasEl.getContext('2d');\n      },\n\n      /**\n       * @private\n       */\n      _initWrapperElement: function () {\n        this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n          'class': this.containerClass\n        });\n        fabric.util.setStyle(this.wrapperEl, {\n          width: this.width + 'px',\n          height: this.height + 'px',\n          position: 'relative'\n        });\n        fabric.util.makeElementUnselectable(this.wrapperEl);\n      },\n\n      /**\n       * @private\n       * @param {HTMLElement} element canvas element to apply styles on\n       */\n      _applyCanvasStyle: function (element) {\n        var width = this.width || element.width,\n            height = this.height || element.height;\n\n        fabric.util.setStyle(element, {\n          position: 'absolute',\n          width: width + 'px',\n          height: height + 'px',\n          left: 0,\n          top: 0,\n          'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\n        });\n        element.width = width;\n        element.height = height;\n        fabric.util.makeElementUnselectable(element);\n      },\n\n      /**\n       * Copy the entire inline style from one element (fromEl) to another (toEl)\n       * @private\n       * @param {Element} fromEl Element style is copied from\n       * @param {Element} toEl Element copied style is applied to\n       */\n      _copyCanvasStyle: function (fromEl, toEl) {\n        toEl.style.cssText = fromEl.style.cssText;\n      },\n\n      /**\n       * Returns context of canvas where object selection is drawn\n       * @return {CanvasRenderingContext2D}\n       */\n      getSelectionContext: function() {\n        return this.contextTop;\n      },\n\n      /**\n       * Returns &lt;canvas> element on which object selection is drawn\n       * @return {HTMLCanvasElement}\n       */\n      getSelectionElement: function () {\n        return this.upperCanvasEl;\n      },\n\n      /**\n       * Returns currently active object\n       * @return {fabric.Object} active object\n       */\n      getActiveObject: function () {\n        return this._activeObject;\n      },\n\n      /**\n       * Returns an array with the current selected objects\n       * @return {fabric.Object} active object\n       */\n      getActiveObjects: function () {\n        var active = this._activeObject;\n        if (active) {\n          if (active.type === 'activeSelection' && active._objects) {\n            return active._objects.slice(0);\n          }\n          else {\n            return [active];\n          }\n        }\n        return [];\n      },\n\n      /**\n       * @private\n       * @param {fabric.Object} obj Object that was removed\n       */\n      _onObjectRemoved: function(obj) {\n        // removing active object should fire \"selection:cleared\" events\n        if (obj === this._activeObject) {\n          this.fire('before:selection:cleared', { target: obj });\n          this._discardActiveObject();\n          this.fire('selection:cleared', { target: obj });\n          obj.fire('deselected');\n        }\n        if (this._hoveredTarget === obj) {\n          this._hoveredTarget = null;\n        }\n        this.callSuper('_onObjectRemoved', obj);\n      },\n\n      /**\n       * @private\n       * Compares the old activeObject with the current one and fires correct events\n       * @param {fabric.Object} obj old activeObject\n       */\n      _fireSelectionEvents: function(oldObjects, e) {\n        var somethingChanged = false, objects = this.getActiveObjects(),\n            added = [], removed = [], opt = { e: e };\n        oldObjects.forEach(function(oldObject) {\n          if (objects.indexOf(oldObject) === -1) {\n            somethingChanged = true;\n            oldObject.fire('deselected', opt);\n            removed.push(oldObject);\n          }\n        });\n        objects.forEach(function(object) {\n          if (oldObjects.indexOf(object) === -1) {\n            somethingChanged = true;\n            object.fire('selected', opt);\n            added.push(object);\n          }\n        });\n        if (oldObjects.length > 0 && objects.length > 0) {\n          opt.selected = added;\n          opt.deselected = removed;\n          // added for backward compatibility\n          opt.updated = added[0] || removed[0];\n          opt.target = this._activeObject;\n          somethingChanged && this.fire('selection:updated', opt);\n        }\n        else if (objects.length > 0) {\n          // deprecated event\n          if (objects.length === 1) {\n            opt.target = added[0];\n            this.fire('object:selected', opt);\n          }\n          opt.selected = added;\n          // added for backward compatibility\n          opt.target = this._activeObject;\n          this.fire('selection:created', opt);\n        }\n        else if (oldObjects.length > 0) {\n          opt.deselected = removed;\n          this.fire('selection:cleared', opt);\n        }\n      },\n\n      /**\n       * Sets given object as the only active object on canvas\n       * @param {fabric.Object} object Object to set as an active one\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      setActiveObject: function (object, e) {\n        var currentActives = this.getActiveObjects();\n        this._setActiveObject(object, e);\n        this._fireSelectionEvents(currentActives, e);\n        return this;\n      },\n\n      /**\n       * @private\n       * @param {Object} object to set as active\n       * @param {Event} [e] Event (passed along when firing \"object:selected\")\n       * @return {Boolean} true if the selection happened\n       */\n      _setActiveObject: function(object, e) {\n        if (this._activeObject === object) {\n          return false;\n        }\n        if (!this._discardActiveObject(e, object)) {\n          return false;\n        }\n        if (object.onSelect({ e: e })) {\n          return false;\n        }\n        this._activeObject = object;\n        return true;\n      },\n\n      /**\n       * @private\n       */\n      _discardActiveObject: function(e, object) {\n        var obj = this._activeObject;\n        if (obj) {\n          // onDeselect return TRUE to cancel selection;\n          if (obj.onDeselect({ e: e, object: object })) {\n            return false;\n          }\n          this._activeObject = null;\n        }\n        return true;\n      },\n\n      /**\n       * Discards currently active object and fire events. If the function is called by fabric\n       * as a consequence of a mouse event, the event is passed as a parameter and\n       * sent to the fire function for the custom events. When used as a method the\n       * e param does not have any application.\n       * @param {event} e\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      discardActiveObject: function (e) {\n        var currentActives = this.getActiveObjects();\n        if (currentActives.length) {\n          this.fire('before:selection:cleared', { target: currentActives[0], e: e });\n        }\n        this._discardActiveObject(e);\n        this._fireSelectionEvents(currentActives, e);\n        return this;\n      },\n\n      /**\n       * Clears a canvas element and removes all event listeners\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      dispose: function () {\n        var wrapper = this.wrapperEl;\n        this.removeListeners();\n        wrapper.removeChild(this.upperCanvasEl);\n        wrapper.removeChild(this.lowerCanvasEl);\n        this.contextCache = null;\n        this.contextTop = null;\n        ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\n          fabric.util.cleanUpJsdomNode(this[element]);\n          this[element] = undefined;\n        }).bind(this));\n        if (wrapper.parentNode) {\n          wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n        }\n        delete this.wrapperEl;\n        fabric.StaticCanvas.prototype.dispose.call(this);\n        return this;\n      },\n\n      /**\n       * Clears all contexts (background, main, top) of an instance\n       * @return {fabric.Canvas} thisArg\n       * @chainable\n       */\n      clear: function () {\n        // this.discardActiveGroup();\n        this.discardActiveObject();\n        this.clearContext(this.contextTop);\n        return this.callSuper('clear');\n      },\n\n      /**\n       * Draws objects' controls (borders/controls)\n       * @param {CanvasRenderingContext2D} ctx Context to render controls on\n       */\n      drawControls: function(ctx) {\n        var activeObject = this._activeObject;\n\n        if (activeObject) {\n          activeObject._renderControls(ctx);\n        }\n      },\n\n      /**\n       * @private\n       */\n      _toObject: function(instance, methodName, propertiesToInclude) {\n        //If the object is part of the current selection group, it should\n        //be transformed appropriately\n        //i.e. it should be serialised as it would appear if the selection group\n        //were to be destroyed.\n        var originalProperties = this._realizeGroupTransformOnObject(instance),\n            object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\n        //Undo the damage we did by changing all of its properties\n        this._unwindGroupTransformOnObject(instance, originalProperties);\n        return object;\n      },\n\n      /**\n       * Realises an object's group transformation on it\n       * @private\n       * @param {fabric.Object} [instance] the object to transform (gets mutated)\n       * @returns the original values of instance which were changed\n       */\n      _realizeGroupTransformOnObject: function(instance) {\n        if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\n          var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\n          //Copy all the positionally relevant properties across now\n          var originalValues = {};\n          layoutProps.forEach(function(prop) {\n            originalValues[prop] = instance[prop];\n          });\n          this._activeObject.realizeTransform(instance);\n          return originalValues;\n        }\n        else {\n          return null;\n        }\n      },\n\n      /**\n       * Restores the changed properties of instance\n       * @private\n       * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n       * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n       */\n      _unwindGroupTransformOnObject: function(instance, originalValues) {\n        if (originalValues) {\n          instance.set(originalValues);\n        }\n      },\n\n      /**\n       * @private\n       */\n      _setSVGObject: function(markup, instance, reviver) {\n        //If the object is in a selection group, simulate what would happen to that\n        //object when the group is deselected\n        var originalProperties = this._realizeGroupTransformOnObject(instance);\n        this.callSuper('_setSVGObject', markup, instance, reviver);\n        this._unwindGroupTransformOnObject(instance, originalProperties);\n      },\n\n      setViewportTransform: function (vpt) {\n        if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n          this._activeObject.clearContextTop();\n        }\n        fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n      }\n    });\n\n    // copying static properties manually to work around Opera's bug,\n    // where \"prototype\" property is enumerable and overrides existing prototype\n    for (var prop in fabric.StaticCanvas) {\n      if (prop !== 'prototype') {\n        fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n      }\n    }\n\n    if (fabric.isTouchSupported) {\n      /** @ignore */\n      fabric.Canvas.prototype._setCursorFromEvent = function() { };\n    }\n  })();\n\n\n  (function() {\n\n    var cursorOffset = {\n          mt: 0, // n\n          tr: 1, // ne\n          mr: 2, // e\n          br: 3, // se\n          mb: 4, // s\n          bl: 5, // sw\n          ml: 6, // w\n          tl: 7 // nw\n        },\n        addListener = fabric.util.addListener,\n        removeListener = fabric.util.removeListener,\n        RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\n        addEventOptions = { passive: false };\n\n    function checkClick(e, value) {\n      return 'which' in e ? e.which === value : e.button === value - 1;\n    }\n\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n      /**\n       * Map of cursor style values for each of the object controls\n       * @private\n       */\n      cursorMap: [\n        'n-resize',\n        'ne-resize',\n        'e-resize',\n        'se-resize',\n        's-resize',\n        'sw-resize',\n        'w-resize',\n        'nw-resize'\n      ],\n\n      /**\n       * Adds mouse listeners to canvas\n       * @private\n       */\n      _initEventListeners: function () {\n        // in case we initialized the class twice. This should not happen normally\n        // but in some kind of applications where the canvas element may be changed\n        // this is a workaround to having double listeners.\n        this.removeListeners();\n        this._bindEvents();\n        this.addOrRemove(addListener, 'add');\n      },\n\n      addOrRemove: function(functor, eventjsFunctor) {\n        functor(fabric.window, 'resize', this._onResize);\n        functor(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n        functor(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n        functor(this.upperCanvasEl, 'mouseout', this._onMouseOut);\n        functor(this.upperCanvasEl, 'mouseenter', this._onMouseEnter);\n        functor(this.upperCanvasEl, 'wheel', this._onMouseWheel);\n        functor(this.upperCanvasEl, 'contextmenu', this._onContextMenu);\n        functor(this.upperCanvasEl, 'dblclick', this._onDoubleClick);\n        functor(this.upperCanvasEl, 'touchstart', this._onMouseDown, addEventOptions);\n        functor(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n        functor(this.upperCanvasEl, 'dragover', this._onDragOver);\n        functor(this.upperCanvasEl, 'dragenter', this._onDragEnter);\n        functor(this.upperCanvasEl, 'dragleave', this._onDragLeave);\n        functor(this.upperCanvasEl, 'drop', this._onDrop);\n        if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'gesture', this._onGesture);\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'drag', this._onDrag);\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'orientation', this._onOrientationChange);\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'shake', this._onShake);\n          eventjs[eventjsFunctor](this.upperCanvasEl, 'longpress', this._onLongPress);\n        }\n      },\n\n      /**\n       * Removes all event listeners\n       */\n      removeListeners: function() {\n        this.addOrRemove(removeListener, 'remove');\n        // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n        removeListener(fabric.document, 'mouseup', this._onMouseUp);\n        removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n        removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n      },\n\n      /**\n       * @private\n       */\n      _bindEvents: function() {\n        if (this.eventsBound) {\n          // for any reason we pass here twice we do not want to bind events twice.\n          return;\n        }\n        this._onMouseDown = this._onMouseDown.bind(this);\n        this._onMouseMove = this._onMouseMove.bind(this);\n        this._onMouseUp = this._onMouseUp.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._onGesture = this._onGesture.bind(this);\n        this._onDrag = this._onDrag.bind(this);\n        this._onShake = this._onShake.bind(this);\n        this._onLongPress = this._onLongPress.bind(this);\n        this._onOrientationChange = this._onOrientationChange.bind(this);\n        this._onMouseWheel = this._onMouseWheel.bind(this);\n        this._onMouseOut = this._onMouseOut.bind(this);\n        this._onMouseEnter = this._onMouseEnter.bind(this);\n        this._onContextMenu = this._onContextMenu.bind(this);\n        this._onDoubleClick = this._onDoubleClick.bind(this);\n        this._onDragOver = this._onDragOver.bind(this);\n        this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\n        this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\n        this._onDrop = this._simpleEventHandler.bind(this, 'drop');\n        this.eventsBound = true;\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on Event.js gesture\n       * @param {Event} [self] Inner Event object\n       */\n      _onGesture: function(e, self) {\n        this.__onTransformGesture && this.__onTransformGesture(e, self);\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on Event.js drag\n       * @param {Event} [self] Inner Event object\n       */\n      _onDrag: function(e, self) {\n        this.__onDrag && this.__onDrag(e, self);\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on wheel event\n       */\n      _onMouseWheel: function(e) {\n        this.__onMouseWheel(e);\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      _onMouseOut: function(e) {\n        var target = this._hoveredTarget;\n        this.fire('mouse:out', { target: target, e: e });\n        this._hoveredTarget = null;\n        target && target.fire('mouseout', { e: e });\n        if (this._iTextInstances) {\n          this._iTextInstances.forEach(function(obj) {\n            if (obj.isEditing) {\n              obj.hiddenTextarea.focus();\n            }\n          });\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mouseenter\n       */\n      _onMouseEnter: function(e) {\n        if (!this.findTarget(e)) {\n          this.fire('mouse:over', { target: null, e: e });\n          this._hoveredTarget = null;\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on Event.js orientation change\n       * @param {Event} [self] Inner Event object\n       */\n      _onOrientationChange: function(e, self) {\n        this.__onOrientationChange && this.__onOrientationChange(e, self);\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on Event.js shake\n       * @param {Event} [self] Inner Event object\n       */\n      _onShake: function(e, self) {\n        this.__onShake && this.__onShake(e, self);\n      },\n\n      /**\n       * @private\n       * @param {Event} [e] Event object fired on Event.js shake\n       * @param {Event} [self] Inner Event object\n       */\n      _onLongPress: function(e, self) {\n        this.__onLongPress && this.__onLongPress(e, self);\n      },\n\n      /**\n       * prevent default to allow drop event to be fired\n       * @private\n       * @param {Event} [e] Event object fired on Event.js shake\n       */\n      _onDragOver: function(e) {\n        e.preventDefault();\n        var target = this._simpleEventHandler('dragover', e);\n        this._fireEnterLeaveEvents(target, e);\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      _onContextMenu: function (e) {\n        if (this.stopContextMenu) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n        return false;\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      _onDoubleClick: function (e) {\n        this._cacheTransformEventData(e);\n        this._handleEvent(e, 'dblclick');\n        this._resetTransformEventData(e);\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      _onMouseDown: function (e) {\n        this.__onMouseDown(e);\n        this._resetTransformEventData();\n        addListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n        addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n        removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n        removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n        if (e.type === 'touchstart') {\n          // Unbind mousedown to prevent double triggers from touch devices\n          removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n        }\n        else {\n          addListener(fabric.document, 'mouseup', this._onMouseUp);\n          addListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mouseup\n       */\n      _onMouseUp: function (e) {\n        this.__onMouseUp(e);\n        this._resetTransformEventData();\n        removeListener(fabric.document, 'mouseup', this._onMouseUp);\n        removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n\n        removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n        removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n        addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n        addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n        if (e.type === 'touchend') {\n          // Wait 400ms before rebinding mousedown to prevent double triggers\n          // from touch devices\n          var _this = this;\n          setTimeout(function() {\n            addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n          }, 400);\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousemove\n       */\n      _onMouseMove: function (e) {\n        !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n        this.__onMouseMove(e);\n      },\n\n      /**\n       * @private\n       */\n      _onResize: function () {\n        this.calcOffset();\n      },\n\n      /**\n       * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n       * @private\n       * @param {Object} target\n       * @param {Object} pointer\n       */\n      _shouldRender: function(target, pointer) {\n        var activeObject = this._activeObject;\n\n        if (activeObject && activeObject.isEditing && target === activeObject) {\n          // if we mouse up/down over a editing textbox a cursor change,\n          // there is no need to re render\n          return false;\n        }\n        return !!(\n          (target && (\n            target.isMoving ||\n            target !== activeObject))\n          ||\n          (!target && !!activeObject)\n          ||\n          (!target && !activeObject && !this._groupSelector)\n          ||\n          (pointer &&\n            this._previousPointer &&\n            this.selection && (\n              pointer.x !== this._previousPointer.x ||\n            pointer.y !== this._previousPointer.y))\n        );\n      },\n\n      /**\n       * Method that defines the actions when mouse is released on canvas.\n       * The method resets the currentTransform parameters, store the image corner\n       * position in the image object and render the canvas on top.\n       * @private\n       * @param {Event} e Event object fired on mouseup\n       */\n      __onMouseUp: function (e) {\n        var target, transform = this._currentTransform,\n            groupSelector = this._groupSelector,\n            isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\n        this._cacheTransformEventData(e);\n        target = this._target;\n        this._handleEvent(e, 'up:before');\n        // if right/middle click just fire events and return\n        // target undefined will make the _handleEvent search the target\n        if (checkClick(e, RIGHT_CLICK)) {\n          if (this.fireRightClick) {\n            this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\n          }\n          return;\n        }\n\n        if (checkClick(e, MIDDLE_CLICK)) {\n          if (this.fireMiddleClick) {\n            this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\n          }\n          this._resetTransformEventData();\n          return;\n        }\n\n        if (this.isDrawingMode && this._isCurrentlyDrawing) {\n          this._onMouseUpInDrawingMode(e);\n          return;\n        }\n\n        if (transform) {\n          this._finalizeCurrentTransform(e);\n        }\n\n        var shouldRender = this._shouldRender(target, this._absolutePointer);\n\n        if (target || !isClick) {\n          this._maybeGroupObjects(e);\n        }\n        if (target) {\n          target.isMoving = false;\n        }\n        this._setCursorFromEvent(e, target);\n        this._handleEvent(e, 'up', LEFT_CLICK, isClick);\n        this._groupSelector = null;\n        this._currentTransform = null;\n        target && (target.__corner = 0);\n        shouldRender && this.requestRenderAll();\n      },\n\n      /**\n       * @private\n       * Handle event firing for target and subtargets\n       * @param {Event} e event from mouse\n       * @param {String} eventType event to fire (up, down or move)\n       * @return {Fabric.Object} target return the the target found, for internal reasons.\n       */\n      _simpleEventHandler: function(eventType, e) {\n        var target = this.findTarget(e),\n            targets = this.targets,\n            options = {\n              e: e,\n              target: target,\n              subTargets: targets,\n            };\n        this.fire(eventType, options);\n        target && target.fire(eventType, options);\n        if (!targets) {\n          return target;\n        }\n        for (var i = 0; i < targets.length; i++) {\n          targets[i].fire(eventType, options);\n        }\n        return target;\n      },\n\n      /**\n       * @private\n       * Handle event firing for target and subtargets\n       * @param {Event} e event from mouse\n       * @param {String} eventType event to fire (up, down or move)\n       * @param {fabric.Object} targetObj receiving event\n       * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\n       * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\n       */\n      _handleEvent: function(e, eventType, button, isClick) {\n        var target = this._target,\n            targets = this.targets || [],\n            options = {\n              e: e,\n              target: target,\n              subTargets: targets,\n              button: button || LEFT_CLICK,\n              isClick: isClick || false,\n              pointer: this._pointer,\n              absolutePointer: this._absolutePointer,\n              transform: this._currentTransform\n            };\n        this.fire('mouse:' + eventType, options);\n        target && target.fire('mouse' + eventType, options);\n        for (var i = 0; i < targets.length; i++) {\n          targets[i].fire('mouse' + eventType, options);\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n       */\n      _finalizeCurrentTransform: function(e) {\n\n        var transform = this._currentTransform,\n            target = transform.target,\n            eventName,\n            options = {\n              e: e,\n              target: target,\n              transform: transform,\n            };\n\n        if (target._scaling) {\n          target._scaling = false;\n        }\n\n        target.setCoords();\n\n        if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\n          if (transform.actionPerformed) {\n            eventName = this._addEventOptions(options, transform);\n            this._fire(eventName, options);\n          }\n          this._fire('modified', options);\n        }\n      },\n\n      /**\n       * Mutate option object in order to add by property and give back the event name.\n       * @private\n       * @param {Object} options to mutate\n       * @param {Object} transform to inspect action from\n       */\n      _addEventOptions: function(options, transform) {\n        // we can probably add more details at low cost\n        // scale change, rotation changes, translation changes\n        var eventName, by;\n        switch (transform.action) {\n          case 'scaleX':\n            eventName = 'scaled';\n            by = 'x';\n            break;\n          case 'scaleY':\n            eventName = 'scaled';\n            by = 'y';\n            break;\n          case 'skewX':\n            eventName = 'skewed';\n            by = 'x';\n            break;\n          case 'skewY':\n            eventName = 'skewed';\n            by = 'y';\n            break;\n          case 'scale':\n            eventName = 'scaled';\n            by = 'equally';\n            break;\n          case 'rotate':\n            eventName = 'rotated';\n            break;\n          case 'drag':\n            eventName = 'moved';\n            break;\n        }\n        options.by = by;\n        return eventName;\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      _onMouseDownInDrawingMode: function(e) {\n        this._isCurrentlyDrawing = true;\n        if (this.getActiveObject()) {\n          this.discardActiveObject(e).requestRenderAll();\n        }\n        if (this.clipTo) {\n          fabric.util.clipContext(this, this.contextTop);\n        }\n        var pointer = this.getPointer(e);\n        this.freeDrawingBrush.onMouseDown(pointer);\n        this._handleEvent(e, 'down');\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mousemove\n       */\n      _onMouseMoveInDrawingMode: function(e) {\n        if (this._isCurrentlyDrawing) {\n          var pointer = this.getPointer(e);\n          this.freeDrawingBrush.onMouseMove(pointer);\n        }\n        this.setCursor(this.freeDrawingCursor);\n        this._handleEvent(e, 'move');\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object fired on mouseup\n       */\n      _onMouseUpInDrawingMode: function(e) {\n        this._isCurrentlyDrawing = false;\n        if (this.clipTo) {\n          this.contextTop.restore();\n        }\n        this.freeDrawingBrush.onMouseUp();\n        this._handleEvent(e, 'up');\n      },\n\n      /**\n       * Method that defines the actions when mouse is clicked on canvas.\n       * The method inits the currentTransform parameters and renders all the\n       * canvas so the current image can be placed on the top canvas and the rest\n       * in on the container one.\n       * @private\n       * @param {Event} e Event object fired on mousedown\n       */\n      __onMouseDown: function (e) {\n        this._cacheTransformEventData(e);\n        this._handleEvent(e, 'down:before');\n        var target = this._target;\n        // if right click just fire events\n        if (checkClick(e, RIGHT_CLICK)) {\n          if (this.fireRightClick) {\n            this._handleEvent(e, 'down', RIGHT_CLICK);\n          }\n          return;\n        }\n\n        if (checkClick(e, MIDDLE_CLICK)) {\n          if (this.fireMiddleClick) {\n            this._handleEvent(e, 'down', MIDDLE_CLICK);\n          }\n          return;\n        }\n\n        if (this.isDrawingMode) {\n          this._onMouseDownInDrawingMode(e);\n          return;\n        }\n\n        // ignore if some object is being transformed at this moment\n        if (this._currentTransform) {\n          return;\n        }\n\n        var pointer = this._pointer;\n        // save pointer for check in __onMouseUp event\n        this._previousPointer = pointer;\n        var shouldRender = this._shouldRender(target, pointer),\n            shouldGroup = this._shouldGroup(e, target);\n        if (this._shouldClearSelection(e, target)) {\n          this.discardActiveObject(e);\n        }\n        else if (shouldGroup) {\n          this._handleGrouping(e, target);\n          target = this._activeObject;\n        }\n\n        if (this.selection && (!target ||\n          (!target.selectable && !target.isEditing && target !== this._activeObject))) {\n          this._groupSelector = {\n            ex: pointer.x,\n            ey: pointer.y,\n            top: 0,\n            left: 0\n          };\n        }\n\n        if (target) {\n          if (target.selectable) {\n            this.setActiveObject(target, e);\n          }\n          if (target === this._activeObject && (target.__corner || !shouldGroup)) {\n            this._setupCurrentTransform(e, target);\n          }\n        }\n        this._handleEvent(e, 'down');\n        // we must renderAll so that we update the visuals\n        shouldRender && this.requestRenderAll();\n      },\n\n      /**\n       * reset cache form common information needed during event processing\n       * @private\n       */\n      _resetTransformEventData: function() {\n        this._target = null;\n        this._pointer = null;\n        this._absolutePointer = null;\n      },\n\n      /**\n       * Cache common information needed during event processing\n       * @private\n       * @param {Event} e Event object fired on event\n       */\n      _cacheTransformEventData: function(e) {\n        // reset in order to avoid stale caching\n        this._resetTransformEventData();\n        this._pointer = this.getPointer(e, true);\n        this._absolutePointer = this.restorePointerVpt(this._pointer);\n        this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n      },\n\n      /**\n       * @private\n       */\n      _beforeTransform: function(e) {\n        var t = this._currentTransform;\n        this.stateful && t.target.saveState();\n        this.fire('before:transform', {\n          e: e,\n          transform: t,\n        });\n        // determine if it's a drag or rotate case\n        if (t.corner) {\n          this.onBeforeScaleRotate(t.target);\n        }\n      },\n\n      /**\n       * Method that defines the actions when mouse is hovering the canvas.\n       * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n       * an image or neither of them (only hovering). A group selection is also possible and would cancel\n       * all any other type of action.\n       * In case of an image transformation only the top canvas will be rendered.\n       * @private\n       * @param {Event} e Event object fired on mousemove\n       */\n      __onMouseMove: function (e) {\n        this._handleEvent(e, 'move:before');\n        this._cacheTransformEventData(e);\n        var target, pointer;\n\n        if (this.isDrawingMode) {\n          this._onMouseMoveInDrawingMode(e);\n          return;\n        }\n        if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n          return;\n        }\n\n        var groupSelector = this._groupSelector;\n\n        // We initially clicked in an empty area, so we draw a box for multiple selection\n        if (groupSelector) {\n          pointer = this._pointer;\n\n          groupSelector.left = pointer.x - groupSelector.ex;\n          groupSelector.top = pointer.y - groupSelector.ey;\n\n          this.renderTop();\n        }\n        else if (!this._currentTransform) {\n          target = this.findTarget(e) || null;\n          this._setCursorFromEvent(e, target);\n          this._fireOverOutEvents(target, e);\n        }\n        else {\n          this._transformObject(e);\n        }\n        this._handleEvent(e, 'move');\n        this._resetTransformEventData();\n      },\n\n      /**\n       * Manage the mouseout, mouseover events for the fabric object on the canvas\n       * @param {Fabric.Object} target the target where the target from the mousemove event\n       * @param {Event} e Event object fired on mousemove\n       * @private\n       */\n      _fireOverOutEvents: function(target, e) {\n        this.fireSynteticInOutEvents(target, e, {\n          targetName: '_hoveredTarget',\n          canvasEvtOut: 'mouse:out',\n          evtOut: 'mouseout',\n          canvasEvtIn: 'mouse:over',\n          evtIn: 'mouseover',\n        });\n      },\n\n      /**\n       * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n       * @param {Fabric.Object} target the target where the target from the onDrag event\n       * @param {Event} e Event object fired on ondrag\n       * @private\n       */\n      _fireEnterLeaveEvents: function(target, e) {\n        this.fireSynteticInOutEvents(target, e, {\n          targetName: '_draggedoverTarget',\n          evtOut: 'dragleave',\n          evtIn: 'dragenter',\n        });\n      },\n\n      /**\n       * Manage the syntetic in/out events for the fabric objects on the canvas\n       * @param {Fabric.Object} target the target where the target from the supported events\n       * @param {Event} e Event object fired\n       * @param {Object} config configuration for the function to work\n       * @param {String} config.targetName property on the canvas where the old target is stored\n       * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n       * @param {String} config.evtOut name of the event to fire for out\n       * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n       * @param {String} config.evtIn name of the event to fire for in\n       * @private\n       */\n      fireSynteticInOutEvents: function(target, e, config) {\n        var inOpt, outOpt, oldTarget = this[config.targetName], outFires, inFires,\n            targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n        if (targetChanged) {\n          inOpt = { e: e, target: target, previousTarget: oldTarget };\n          outOpt = { e: e, target: oldTarget, nextTarget: target };\n          this[config.targetName] = target;\n        }\n        inFires = target && targetChanged;\n        outFires = oldTarget && targetChanged;\n        if (outFires) {\n          canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n          oldTarget.fire(config.evtOut, outOpt);\n        }\n        if (inFires) {\n          canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n          target.fire(config.evtIn, inOpt);\n        }\n      },\n\n      /**\n       * Method that defines actions when an Event Mouse Wheel\n       * @param {Event} e Event object fired on mouseup\n       */\n      __onMouseWheel: function(e) {\n        this._cacheTransformEventData(e);\n        this._handleEvent(e, 'wheel');\n        this._resetTransformEventData();\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event fired on mousemove\n       */\n      _transformObject: function(e) {\n        var pointer = this.getPointer(e),\n            transform = this._currentTransform;\n\n        transform.reset = false;\n        transform.target.isMoving = true;\n        transform.shiftKey = e.shiftKey;\n        transform.altKey = e[this.centeredKey];\n\n        this._beforeScaleTransform(e, transform);\n        this._performTransformAction(e, transform, pointer);\n\n        transform.actionPerformed && this.requestRenderAll();\n      },\n\n      /**\n       * @private\n       */\n      _performTransformAction: function(e, transform, pointer) {\n        var x = pointer.x,\n            y = pointer.y,\n            action = transform.action,\n            actionPerformed = false,\n            options = {\n              target: transform.target,\n              e: e,\n              transform: transform,\n              pointer: pointer\n            };\n\n        if (action === 'rotate') {\n          (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\n        }\n        else if (action === 'scale') {\n          (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\n        }\n        else if (action === 'scaleX') {\n          (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\n        }\n        else if (action === 'scaleY') {\n          (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\n        }\n        else if (action === 'skewX') {\n          (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\n        }\n        else if (action === 'skewY') {\n          (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\n        }\n        else {\n          actionPerformed = this._translateObject(x, y);\n          if (actionPerformed) {\n            this._fire('moving', options);\n            this.setCursor(options.target.moveCursor || this.moveCursor);\n          }\n        }\n        transform.actionPerformed = transform.actionPerformed || actionPerformed;\n      },\n\n      /**\n       * @private\n       */\n      _fire: function(eventName, options) {\n        this.fire('object:' + eventName, options);\n        options.target.fire(eventName, options);\n      },\n\n      /**\n       * @private\n       */\n      _beforeScaleTransform: function(e, transform) {\n        if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n          var centerTransform = this._shouldCenterTransform(transform.target);\n\n          // Switch from a normal resize to center-based\n          if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n             // Switch from center-based resize to normal one\n             (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n          ) {\n            this._resetCurrentTransform();\n            transform.reset = true;\n          }\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {Object} transform current tranform\n       * @param {Number} x mouse position x from origin\n       * @param {Number} y mouse poistion y from origin\n       * @return {Boolean} true if the scaling occurred\n       */\n      _onScale: function(e, transform, x, y) {\n        if (this._isUniscalePossible(e, transform.target)) {\n          transform.currentAction = 'scale';\n          return this._scaleObject(x, y);\n        }\n        else {\n          // Switch from a normal resize to proportional\n          if (!transform.reset && transform.currentAction === 'scale') {\n            this._resetCurrentTransform();\n          }\n\n          transform.currentAction = 'scaleEqually';\n          return this._scaleObject(x, y, 'equally');\n        }\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {fabric.Object} target current target\n       * @return {Boolean} true if unproportional scaling is possible\n       */\n      _isUniscalePossible: function(e, target) {\n        return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\n      },\n\n      /**\n       * Sets the cursor depending on where the canvas is being hovered.\n       * Note: very buggy in Opera\n       * @param {Event} e Event object\n       * @param {Object} target Object that the mouse is hovering, if so.\n       */\n      _setCursorFromEvent: function (e, target) {\n        if (!target) {\n          this.setCursor(this.defaultCursor);\n          return false;\n        }\n\n        var hoverCursor = target.hoverCursor || this.hoverCursor,\n            activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\n              this._activeObject : null,\n            // only show proper corner when group selection is not active\n            corner = (!activeSelection || !activeSelection.contains(target))\n                      && target._findTargetCorner(this.getPointer(e, true));\n\n        if (!corner) {\n          this.setCursor(hoverCursor);\n        }\n        else {\n          this.setCursor(this.getCornerCursor(corner, target, e));\n        }\n      },\n\n      /**\n       * @private\n       */\n      getCornerCursor: function(corner, target, e) {\n        if (this.actionIsDisabled(corner, target, e)) {\n          return this.notAllowedCursor;\n        }\n        else if (corner in cursorOffset) {\n          return this._getRotatedCornerCursor(corner, target, e);\n        }\n        else if (corner === 'mtr' && target.hasRotatingPoint) {\n          return this.rotationCursor;\n        }\n        else {\n          return this.defaultCursor;\n        }\n      },\n\n      actionIsDisabled: function(corner, target, e) {\n        if (corner === 'mt' || corner === 'mb') {\n          return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\n        }\n        else if (corner === 'ml' || corner === 'mr') {\n          return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\n        }\n        else if (corner === 'mtr') {\n          return target.lockRotation;\n        }\n        else {\n          return this._isUniscalePossible(e, target) ?\n            target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\n        }\n      },\n\n      /**\n       * @private\n       */\n      _getRotatedCornerCursor: function(corner, target, e) {\n        var n = Math.round((target.angle % 360) / 45);\n\n        if (n < 0) {\n          n += 8; // full circle ahead\n        }\n        n += cursorOffset[corner];\n        if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\n          //if we are holding shift and we are on a mx corner...\n          n += 2;\n        }\n        // normalize n to be from 0 to 7\n        n %= 8;\n\n        return this.cursorMap[n];\n      }\n    });\n  })();\n\n\n  (function() {\n\n    var min = Math.min,\n        max = Math.max;\n\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {fabric.Object} target\n       * @return {Boolean}\n       */\n      _shouldGroup: function(e, target) {\n        var activeObject = this._activeObject;\n\n        return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\n              (activeObject !== target || activeObject.type === 'activeSelection');\n      },\n\n      /**\n       * @private\n       * @param {Event} e Event object\n       * @param {fabric.Object} target\n       */\n      _handleGrouping: function (e, target) {\n        var activeObject = this._activeObject;\n        if (activeObject.__corner) {\n          return;\n        }\n        if (target === activeObject) {\n          // if it's a group, find target again, using activeGroup objects\n          target = this.findTarget(e, true);\n          // if even object is not found or we are on activeObjectCorner, bail out\n          if (!target) {\n            return;\n          }\n        }\n        if (activeObject && activeObject.type === 'activeSelection') {\n          this._updateActiveSelection(target, e);\n        }\n        else {\n          this._createActiveSelection(target, e);\n        }\n      },\n\n      /**\n       * @private\n       */\n      _updateActiveSelection: function(target, e) {\n        var activeSelection = this._activeObject,\n            currentActiveObjects = activeSelection._objects.slice(0);\n        if (activeSelection.contains(target)) {\n          activeSelection.removeWithUpdate(target);\n          this._hoveredTarget = target;\n          if (activeSelection.size() === 1) {\n            // activate last remaining object\n            this._setActiveObject(activeSelection.item(0), e);\n          }\n        }\n        else {\n          activeSelection.addWithUpdate(target);\n          this._hoveredTarget = activeSelection;\n        }\n        this._fireSelectionEvents(currentActiveObjects, e);\n      },\n\n      /**\n       * @private\n       */\n      _createActiveSelection: function(target, e) {\n        var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n        this._hoveredTarget = group;\n        this._setActiveObject(group, e);\n        this._fireSelectionEvents(currentActives, e);\n      },\n\n      /**\n       * @private\n       * @param {Object} target\n       */\n      _createGroup: function(target) {\n        var objects = this._objects,\n            isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n            groupObjects = isActiveLower\n              ? [this._activeObject, target]\n              : [target, this._activeObject];\n        this._activeObject.isEditing && this._activeObject.exitEditing();\n        return new fabric.ActiveSelection(groupObjects, {\n          canvas: this\n        });\n      },\n\n      /**\n       * @private\n       * @param {Event} e mouse event\n       */\n      _groupSelectedObjects: function (e) {\n\n        var group = this._collectObjects(),\n            aGroup;\n\n        // do not create group for 1 element only\n        if (group.length === 1) {\n          this.setActiveObject(group[0], e);\n        }\n        else if (group.length > 1) {\n          aGroup = new fabric.ActiveSelection(group.reverse(), {\n            canvas: this\n          });\n          this.setActiveObject(aGroup, e);\n        }\n      },\n\n      /**\n       * @private\n       */\n      _collectObjects: function() {\n        var group = [],\n            currentObject,\n            x1 = this._groupSelector.ex,\n            y1 = this._groupSelector.ey,\n            x2 = x1 + this._groupSelector.left,\n            y2 = y1 + this._groupSelector.top,\n            selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n            selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n            allowIntersect = !this.selectionFullyContained,\n            isClick = x1 === x2 && y1 === y2;\n        // we iterate reverse order to collect top first in case of click.\n        for (var i = this._objects.length; i--; ) {\n          currentObject = this._objects[i];\n\n          if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n            continue;\n          }\n\n          if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\n              currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n              (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\n              (allowIntersect && currentObject.containsPoint(selectionX2Y2))\n          ) {\n            group.push(currentObject);\n\n            // only add one object if it's a click\n            if (isClick) {\n              break;\n            }\n          }\n        }\n\n        return group;\n      },\n\n      /**\n       * @private\n       */\n      _maybeGroupObjects: function(e) {\n        if (this.selection && this._groupSelector) {\n          this._groupSelectedObjects(e);\n        }\n        this.setCursor(this.defaultCursor);\n        // clear selection and current transformation\n        this._groupSelector = null;\n      }\n    });\n\n  })();\n\n\n  (function () {\n\n    var supportQuality = fabric.StaticCanvas.supports('toDataURLWithQuality');\n\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n      /**\n       * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n       * @param {Object} [options] Options object\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n       * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n       * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n       * @example <caption>Generate jpeg dataURL with lower quality</caption>\n       * var dataURL = canvas.toDataURL({\n       *   format: 'jpeg',\n       *   quality: 0.8\n       * });\n       * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n       * var dataURL = canvas.toDataURL({\n       *   format: 'png',\n       *   left: 100,\n       *   top: 100,\n       *   width: 200,\n       *   height: 200\n       * });\n       * @example <caption>Generate double scaled png dataURL</caption>\n       * var dataURL = canvas.toDataURL({\n       *   format: 'png',\n       *   multiplier: 2\n       * });\n       */\n      toDataURL: function (options) {\n        options || (options = { });\n\n        var format = options.format || 'png',\n            quality = options.quality || 1,\n            multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? 1 : 1 / this.getRetinaScaling()),\n            cropping = {\n              left: options.left || 0,\n              top: options.top || 0,\n              width: options.width || 0,\n              height: options.height || 0,\n            };\n        return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);\n      },\n\n      /**\n       * @private\n       */\n      __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {\n\n        var origWidth = this.width,\n            origHeight = this.height,\n            scaledWidth = (cropping.width || this.width) * multiplier,\n            scaledHeight = (cropping.height || this.height) * multiplier,\n            zoom = this.getZoom(),\n            newZoom = zoom * multiplier,\n            vp = this.viewportTransform,\n            translateX = (vp[4] - cropping.left) * multiplier,\n            translateY = (vp[5] - cropping.top) * multiplier,\n            newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\n            originalInteractive = this.interactive,\n            originalSkipOffScreen = this.skipOffscreen,\n            needsResize = origWidth !== scaledWidth || origHeight !== scaledHeight;\n\n        this.viewportTransform = newVp;\n        this.skipOffscreen = false;\n        // setting interactive to false avoid exporting controls\n        this.interactive = false;\n        if (needsResize) {\n          this.setDimensions({ width: scaledWidth, height: scaledHeight }, { backstoreOnly: true });\n        }\n        // call a renderAll to force sync update. This will cancel the scheduled requestRenderAll\n        // from setDimensions\n        this.renderAll();\n        var data = this.__toDataURL(format, quality, cropping);\n        this.interactive = originalInteractive;\n        this.skipOffscreen = originalSkipOffScreen;\n        this.viewportTransform = vp;\n        //setDimensions with no option object is taking care of:\n        //this.width, this.height, this.requestRenderAll()\n        if (needsResize) {\n          this.setDimensions({ width: origWidth, height: origHeight }, { backstoreOnly: true });\n        }\n        this.renderAll();\n        return data;\n      },\n\n      /**\n       * @private\n       */\n      __toDataURL: function(format, quality) {\n\n        var canvasEl = this.contextContainer.canvas;\n        // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n        if (format === 'jpg') {\n          format = 'jpeg';\n        }\n\n        var data = supportQuality\n          ? canvasEl.toDataURL('image/' + format, quality)\n          : canvasEl.toDataURL('image/' + format);\n\n        return data;\n      },\n    });\n\n  })();\n\n\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Populates canvas with data from the specified dataless JSON.\n     * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n     * @deprecated since 1.2.2\n     * @param {String|Object} json JSON string or object\n     * @param {Function} callback Callback, invoked when json is parsed\n     *                            and corresponding objects (e.g: {@link fabric.Image})\n     *                            are initialized\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n     */\n    loadFromDatalessJSON: function (json, callback, reviver) {\n      return this.loadFromJSON(json, callback, reviver);\n    },\n\n    /**\n     * Populates canvas with data from the specified JSON.\n     * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n     * @param {String|Object} json JSON string or object\n     * @param {Function} callback Callback, invoked when json is parsed\n     *                            and corresponding objects (e.g: {@link fabric.Image})\n     *                            are initialized\n     * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n     * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n     * @example <caption>loadFromJSON</caption>\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n     * @example <caption>loadFromJSON with reviver</caption>\n     * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n     *   // `o` = json object\n     *   // `object` = fabric.Object instance\n     *   // ... do some stuff ...\n     * });\n     */\n    loadFromJSON: function (json, callback, reviver) {\n      if (!json) {\n        return;\n      }\n\n      // serialize if it wasn't already\n      var serialized = (typeof json === 'string')\n        ? JSON.parse(json)\n        : fabric.util.object.clone(json);\n\n      var _this = this,\n          renderOnAddRemove = this.renderOnAddRemove;\n      this.renderOnAddRemove = false;\n\n      this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\n        _this.clear();\n        _this._setBgOverlay(serialized, function () {\n          enlivenedObjects.forEach(function(obj, index) {\n            // we splice the array just in case some custom classes restored from JSON\n            // will add more object to canvas at canvas init.\n            _this.insertAt(obj, index);\n          });\n          _this.renderOnAddRemove = renderOnAddRemove;\n          // remove parts i cannot set as options\n          delete serialized.objects;\n          delete serialized.backgroundImage;\n          delete serialized.overlayImage;\n          delete serialized.background;\n          delete serialized.overlay;\n          // this._initOptions does too many things to just\n          // call it. Normally loading an Object from JSON\n          // create the Object instance. Here the Canvas is\n          // already an instance and we are just loading things over it\n          _this._setOptions(serialized);\n          _this.renderAll();\n          callback && callback();\n        });\n      }, reviver);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Object} serialized Object with background and overlay information\n     * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n     */\n    _setBgOverlay: function(serialized, callback) {\n      var loaded = {\n        backgroundColor: false,\n        overlayColor: false,\n        backgroundImage: false,\n        overlayImage: false\n      };\n\n      if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n        callback && callback();\n        return;\n      }\n\n      var cbIfLoaded = function () {\n        if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n          callback && callback();\n        }\n      };\n\n      this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n      this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n      this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n      this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n     * @param {(Object|String)} value Value to set\n     * @param {Object} loaded Set loaded property to true if property is set\n     * @param {Object} callback Callback function to invoke after property is set\n     */\n    __setBgOverlay: function(property, value, loaded, callback) {\n      var _this = this;\n\n      if (!value) {\n        loaded[property] = true;\n        callback && callback();\n        return;\n      }\n\n      if (property === 'backgroundImage' || property === 'overlayImage') {\n        fabric.util.enlivenObjects([value], function(enlivedObject){\n          _this[property] = enlivedObject[0];\n          loaded[property] = true;\n          callback && callback();\n        });\n      }\n      else {\n        this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n          loaded[property] = true;\n          callback && callback();\n        });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Array} objects\n     * @param {Function} callback\n     * @param {Function} [reviver]\n     */\n    _enlivenObjects: function (objects, callback, reviver) {\n      if (!objects || objects.length === 0) {\n        callback && callback([]);\n        return;\n      }\n\n      fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n        callback && callback(enlivenedObjects);\n      }, null, reviver);\n    },\n\n    /**\n     * @private\n     * @param {String} format\n     * @param {Function} callback\n     */\n    _toDataURL: function (format, callback) {\n      this.clone(function (clone) {\n        callback(clone.toDataURL(format));\n      });\n    },\n\n    /**\n     * @private\n     * @param {String} format\n     * @param {Number} multiplier\n     * @param {Function} callback\n     */\n    _toDataURLWithMultiplier: function (format, multiplier, callback) {\n      this.clone(function (clone) {\n        callback(clone.toDataURLWithMultiplier(format, multiplier));\n      });\n    },\n\n    /**\n     * Clones canvas instance\n     * @param {Object} [callback] Receives cloned instance as a first argument\n     * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n     */\n    clone: function (callback, properties) {\n      var data = JSON.stringify(this.toJSON(properties));\n      this.cloneWithoutData(function(clone) {\n        clone.loadFromJSON(data, function() {\n          callback && callback(clone);\n        });\n      });\n    },\n\n    /**\n     * Clones canvas instance without cloning existing data.\n     * This essentially copies canvas dimensions, clipping properties, etc.\n     * but leaves data empty (so that you can populate it with your own)\n     * @param {Object} [callback] Receives cloned instance as a first argument\n     */\n    cloneWithoutData: function(callback) {\n      var el = fabric.util.createCanvasElement();\n\n      el.width = this.width;\n      el.height = this.height;\n\n      var clone = new fabric.Canvas(el);\n      clone.clipTo = this.clipTo;\n      if (this.backgroundImage) {\n        clone.setBackgroundImage(this.backgroundImage.src, function() {\n          clone.renderAll();\n          callback && callback(clone);\n        });\n        clone.backgroundImageOpacity = this.backgroundImageOpacity;\n        clone.backgroundImageStretch = this.backgroundImageStretch;\n      }\n      else {\n        callback && callback(clone);\n      }\n    }\n  });\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        clone = fabric.util.object.clone,\n        toFixed = fabric.util.toFixed,\n        capitalize = fabric.util.string.capitalize,\n        degreesToRadians = fabric.util.degreesToRadians,\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n        objectCaching = !fabric.isLikelyNode,\n        ALIASING_LIMIT = 2;\n\n    if (fabric.Object) {\n      return;\n    }\n\n    /**\n     * Root object class from which all 2d shape classes inherit from\n     * @class fabric.Object\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n     * @see {@link fabric.Object#initialize} for constructor definition\n     *\n     * @fires added\n     * @fires removed\n     *\n     * @fires selected\n     * @fires deselected\n     * @fires modified\n     * @fires modified\n     * @fires moved\n     * @fires scaled\n     * @fires rotated\n     * @fires skewed\n     *\n     * @fires rotating\n     * @fires scaling\n     * @fires moving\n     * @fires skewing\n     *\n     * @fires mousedown\n     * @fires mouseup\n     * @fires mouseover\n     * @fires mouseout\n     * @fires mousewheel\n     * @fires mousedblclick\n     *\n     * @fires dragover\n     * @fires dragenter\n     * @fires dragleave\n     * @fires drop\n     */\n    fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n\n      /**\n       * Type of an object (rect, circle, path, etc.).\n       * Note that this property is meant to be read-only and not meant to be modified.\n       * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n       * @type String\n       * @default\n       */\n      type:                     'object',\n\n      /**\n       * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n       * @type String\n       * @default\n       */\n      originX:                  'left',\n\n      /**\n       * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n       * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n       * @type String\n       * @default\n       */\n      originY:                  'top',\n\n      /**\n       * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\n       * @type Number\n       * @default\n       */\n      top:                      0,\n\n      /**\n       * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\n       * @type Number\n       * @default\n       */\n      left:                     0,\n\n      /**\n       * Object width\n       * @type Number\n       * @default\n       */\n      width:                    0,\n\n      /**\n       * Object height\n       * @type Number\n       * @default\n       */\n      height:                   0,\n\n      /**\n       * Object scale factor (horizontal)\n       * @type Number\n       * @default\n       */\n      scaleX:                   1,\n\n      /**\n       * Object scale factor (vertical)\n       * @type Number\n       * @default\n       */\n      scaleY:                   1,\n\n      /**\n       * When true, an object is rendered as flipped horizontally\n       * @type Boolean\n       * @default\n       */\n      flipX:                    false,\n\n      /**\n       * When true, an object is rendered as flipped vertically\n       * @type Boolean\n       * @default\n       */\n      flipY:                    false,\n\n      /**\n       * Opacity of an object\n       * @type Number\n       * @default\n       */\n      opacity:                  1,\n\n      /**\n       * Angle of rotation of an object (in degrees)\n       * @type Number\n       * @default\n       */\n      angle:                    0,\n\n      /**\n       * Angle of skew on x axes of an object (in degrees)\n       * @type Number\n       * @default\n       */\n      skewX:                    0,\n\n      /**\n       * Angle of skew on y axes of an object (in degrees)\n       * @type Number\n       * @default\n       */\n      skewY:                    0,\n\n      /**\n       * Size of object's controlling corners (in pixels)\n       * @type Number\n       * @default\n       */\n      cornerSize:               13,\n\n      /**\n       * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n       * @type Boolean\n       * @default\n       */\n      transparentCorners:       true,\n\n      /**\n       * Default cursor value used when hovering over this object on canvas\n       * @type String\n       * @default\n       */\n      hoverCursor:              null,\n\n      /**\n       * Default cursor value used when moving this object on canvas\n       * @type String\n       * @default\n       */\n      moveCursor:               null,\n\n      /**\n       * Padding between object and its controlling borders (in pixels)\n       * @type Number\n       * @default\n       */\n      padding:                  0,\n\n      /**\n       * Color of controlling borders of an object (when it's active)\n       * @type String\n       * @default\n       */\n      borderColor:              'rgba(102,153,255,0.75)',\n\n      /**\n       * Array specifying dash pattern of an object's borders (hasBorder must be true)\n       * @since 1.6.2\n       * @type Array\n       */\n      borderDashArray:          null,\n\n      /**\n       * Color of controlling corners of an object (when it's active)\n       * @type String\n       * @default\n       */\n      cornerColor:              'rgba(102,153,255,0.5)',\n\n      /**\n       * Color of controlling corners of an object (when it's active and transparentCorners false)\n       * @since 1.6.2\n       * @type String\n       * @default\n       */\n      cornerStrokeColor:        null,\n\n      /**\n       * Specify style of control, 'rect' or 'circle'\n       * @since 1.6.2\n       * @type String\n       */\n      cornerStyle:          'rect',\n\n      /**\n       * Array specifying dash pattern of an object's control (hasBorder must be true)\n       * @since 1.6.2\n       * @type Array\n       */\n      cornerDashArray:          null,\n\n      /**\n       * When true, this object will use center point as the origin of transformation\n       * when being scaled via the controls.\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n       * @since 1.3.4\n       * @type Boolean\n       * @default\n       */\n      centeredScaling:          false,\n\n      /**\n       * When true, this object will use center point as the origin of transformation\n       * when being rotated via the controls.\n       * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n       * @since 1.3.4\n       * @type Boolean\n       * @default\n       */\n      centeredRotation:         true,\n\n      /**\n       * Color of object's fill\n       * takes css colors https://www.w3.org/TR/css-color-3/\n       * @type String\n       * @default\n       */\n      fill:                     'rgb(0,0,0)',\n\n      /**\n       * Fill rule used to fill an object\n       * accepted values are nonzero, evenodd\n       * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n       * @type String\n       * @default\n       */\n      fillRule:                 'nonzero',\n\n      /**\n       * Composite rule used for canvas globalCompositeOperation\n       * @type String\n       * @default\n       */\n      globalCompositeOperation: 'source-over',\n\n      /**\n       * Background color of an object.\n       * takes css colors https://www.w3.org/TR/css-color-3/\n       * @type String\n       * @default\n       */\n      backgroundColor:          '',\n\n      /**\n       * Selection Background color of an object. colored layer behind the object when it is active.\n       * does not mix good with globalCompositeOperation methods.\n       * @type String\n       * @default\n       */\n      selectionBackgroundColor:          '',\n\n      /**\n       * When defined, an object is rendered via stroke and this property specifies its color\n       * takes css colors https://www.w3.org/TR/css-color-3/\n       * @type String\n       * @default\n       */\n      stroke:                   null,\n\n      /**\n       * Width of a stroke used to render this object\n       * @type Number\n       * @default\n       */\n      strokeWidth:              1,\n\n      /**\n       * Array specifying dash pattern of an object's stroke (stroke must be defined)\n       * @type Array\n       */\n      strokeDashArray:          null,\n\n      /**\n       * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n       * @type String\n       * @default\n       */\n      strokeLineCap:            'butt',\n\n      /**\n       * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n       * @type String\n       * @default\n       */\n      strokeLineJoin:           'miter',\n\n      /**\n       * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n       * @type Number\n       * @default\n       */\n      strokeMiterLimit:         4,\n\n      /**\n       * Shadow object representing shadow of this shape\n       * @type fabric.Shadow\n       * @default\n       */\n      shadow:                   null,\n\n      /**\n       * Opacity of object's controlling borders when object is active and moving\n       * @type Number\n       * @default\n       */\n      borderOpacityWhenMoving:  0.4,\n\n      /**\n       * Scale factor of object's controlling borders\n       * @type Number\n       * @default\n       */\n      borderScaleFactor:        1,\n\n      /**\n       * Transform matrix (similar to SVG's transform matrix)\n       * @type Array\n       */\n      transformMatrix:          null,\n\n      /**\n       * Minimum allowed scale value of an object\n       * @type Number\n       * @default\n       */\n      minScaleLimit:            0,\n\n      /**\n       * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n       * But events still fire on it.\n       * @type Boolean\n       * @default\n       */\n      selectable:               true,\n\n      /**\n       * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n       * @type Boolean\n       * @default\n       */\n      evented:                  true,\n\n      /**\n       * When set to `false`, an object is not rendered on canvas\n       * @type Boolean\n       * @default\n       */\n      visible:                  true,\n\n      /**\n       * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n       * @type Boolean\n       * @default\n       */\n      hasControls:              true,\n\n      /**\n       * When set to `false`, object's controlling borders are not rendered\n       * @type Boolean\n       * @default\n       */\n      hasBorders:               true,\n\n      /**\n       * When set to `false`, object's controlling rotating point will not be visible or selectable\n       * @type Boolean\n       * @default\n       */\n      hasRotatingPoint:         true,\n\n      /**\n       * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n       * @type Number\n       * @default\n       */\n      rotatingPointOffset:      40,\n\n      /**\n       * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n       * @type Boolean\n       * @default\n       */\n      perPixelTargetFind:       false,\n\n      /**\n       * When `false`, default object's values are not included in its serialization\n       * @type Boolean\n       * @default\n       */\n      includeDefaultValues:     true,\n\n      /**\n       * Function that determines clipping of an object (context is passed as a first argument).\n       * If you are using code minification, ctx argument can be minified/manglied you should use\n       * as a workaround `var ctx = arguments[0];` in the function;\n       * Note that context origin is at the object's center point (not left/top corner)\n       * @deprecated since 2.0.0\n       * @type Function\n       */\n      clipTo:                   null,\n\n      /**\n       * When `true`, object horizontal movement is locked\n       * @type Boolean\n       * @default\n       */\n      lockMovementX:            false,\n\n      /**\n       * When `true`, object vertical movement is locked\n       * @type Boolean\n       * @default\n       */\n      lockMovementY:            false,\n\n      /**\n       * When `true`, object rotation is locked\n       * @type Boolean\n       * @default\n       */\n      lockRotation:             false,\n\n      /**\n       * When `true`, object horizontal scaling is locked\n       * @type Boolean\n       * @default\n       */\n      lockScalingX:             false,\n\n      /**\n       * When `true`, object vertical scaling is locked\n       * @type Boolean\n       * @default\n       */\n      lockScalingY:             false,\n\n      /**\n       * When `true`, object non-uniform scaling is locked\n       * @type Boolean\n       * @default\n       */\n      lockUniScaling:           false,\n\n      /**\n       * When `true`, object horizontal skewing is locked\n       * @type Boolean\n       * @default\n       */\n      lockSkewingX:             false,\n\n      /**\n       * When `true`, object vertical skewing is locked\n       * @type Boolean\n       * @default\n       */\n      lockSkewingY:             false,\n\n      /**\n       * When `true`, object cannot be flipped by scaling into negative values\n       * @type Boolean\n       * @default\n       */\n      lockScalingFlip:          false,\n\n      /**\n       * When `true`, object is not exported in OBJECT/JSON\n       * since 1.6.3\n       * @type Boolean\n       * @default\n       */\n      excludeFromExport:        false,\n\n      /**\n       * When `true`, object is cached on an additional canvas.\n       * default to true\n       * since 1.7.0\n       * @type Boolean\n       * @default true\n       */\n      objectCaching:            objectCaching,\n\n      /**\n       * When `true`, object properties are checked for cache invalidation. In some particular\n       * situation you may want this to be disabled ( spray brush, very big, groups)\n       * or if your application does not allow you to modify properties for groups child you want\n       * to disable it for groups.\n       * default to false\n       * since 1.7.0\n       * @type Boolean\n       * @default false\n       */\n      statefullCache:            false,\n\n      /**\n       * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\n       * too much and will be redrawn with correct details at the end of scaling.\n       * this setting is performance and application dependant.\n       * default to true\n       * since 1.7.0\n       * @type Boolean\n       * @default true\n       */\n      noScaleCache:              true,\n\n      /**\n       * When set to `true`, object's cache will be rerendered next render call.\n       * since 1.7.0\n       * @type Boolean\n       * @default true\n       */\n      dirty:                true,\n\n      /**\n       * keeps the value of the last hovered coner during mouse move.\n       * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n       * It should be private, but there is no harm in using it as\n       * a read-only property.\n       * @type number|string|any\n       * @default 0\n       */\n      __corner: 0,\n\n      /**\n       * Determins if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\n       * @type String\n       * @default\n       */\n      paintFirst:           'fill',\n\n      /**\n       * List of properties to consider when checking if state\n       * of an object is changed (fabric.Object#hasStateChanged)\n       * as well as for history (undo/redo) purposes\n       * @type Array\n       */\n      stateProperties: (\n        'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n        'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +\n        'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\n        'skewX skewY fillRule paintFirst'\n      ).split(' '),\n\n      /**\n       * List of properties to consider when checking if cache needs refresh\n       * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n       * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n       * and refreshed at the next render\n       * @type Array\n       */\n      cacheProperties: (\n        'fill stroke strokeWidth strokeDashArray width height paintFirst' +\n        ' strokeLineCap strokeLineJoin strokeMiterLimit backgroundColor'\n      ).split(' '),\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       */\n      initialize: function(options) {\n        if (options) {\n          this.setOptions(options);\n        }\n      },\n\n      /**\n       * Create a the canvas used to keep the cached copy of the object\n       * @private\n       */\n      _createCacheCanvas: function() {\n        this._cacheProperties = {};\n        this._cacheCanvas = fabric.util.createCanvasElement();\n        this._cacheContext = this._cacheCanvas.getContext('2d');\n        this._updateCacheCanvas();\n        // if canvas gets created, is empty, so dirty.\n        this.dirty = true;\n      },\n\n      /**\n       * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\n       * and each side do not cross fabric.cacheSideLimit\n       * those numbers are configurable so that you can get as much detail as you want\n       * making bargain with performances.\n       * @param {Object} dims\n       * @param {Object} dims.width width of canvas\n       * @param {Object} dims.height height of canvas\n       * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n       * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n       * @return {Object}.width width of canvas\n       * @return {Object}.height height of canvas\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n       */\n      _limitCacheSize: function(dims) {\n        var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\n            width = dims.width, height = dims.height,\n            max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n        if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n          if (width < min) {\n            dims.width = min;\n          }\n          if (height < min) {\n            dims.height = min;\n          }\n          return dims;\n        }\n        var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\n            capValue = fabric.util.capValue,\n            x = capValue(min, limitedDims.x, max),\n            y = capValue(min, limitedDims.y, max);\n        if (width > x) {\n          dims.zoomX /= width / x;\n          dims.width = x;\n          dims.capped = true;\n        }\n        if (height > y) {\n          dims.zoomY /= height / y;\n          dims.height = y;\n          dims.capped = true;\n        }\n        return dims;\n      },\n\n      /**\n       * Return the dimension and the zoom level needed to create a cache canvas\n       * big enough to host the object to be cached.\n       * @private\n       * @param {Object} dim.x width of object to be cached\n       * @param {Object} dim.y height of object to be cached\n       * @return {Object}.width width of canvas\n       * @return {Object}.height height of canvas\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n       */\n      _getCacheCanvasDimensions: function() {\n        var objectScale = this.getTotalObjectScaling(),\n            dim = this._getNonTransformedDimensions(),\n            zoomX = objectScale.scaleX,\n            zoomY = objectScale.scaleY,\n            width = dim.x * zoomX,\n            height = dim.y * zoomY;\n        return {\n          // for sure this ALIASING_LIMIT is slightly crating problem\n          // in situation in wich the cache canvas gets an upper limit\n          width: width + ALIASING_LIMIT,\n          height: height + ALIASING_LIMIT,\n          zoomX: zoomX,\n          zoomY: zoomY,\n          x: dim.x,\n          y: dim.y\n        };\n      },\n\n      /**\n       * Update width and height of the canvas for cache\n       * returns true or false if canvas needed resize.\n       * @private\n       * @return {Boolean} true if the canvas has been resized\n       */\n      _updateCacheCanvas: function() {\n        if (this.noScaleCache && this.canvas && this.canvas._currentTransform) {\n          var target = this.canvas._currentTransform.target,\n              action = this.canvas._currentTransform.action;\n          if (this === target && action.slice && action.slice(0, 5) === 'scale') {\n            return false;\n          }\n        }\n        var canvas = this._cacheCanvas,\n            dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n            minCacheSize = fabric.minCacheSideLimit,\n            width = dims.width, height = dims.height, drawingWidth, drawingHeight,\n            zoomX = dims.zoomX, zoomY = dims.zoomY,\n            dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\n            zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\n            shouldRedraw = dimensionsChanged || zoomChanged,\n            additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n        if (dimensionsChanged) {\n          var canvasWidth = this._cacheCanvas.width,\n              canvasHeight = this._cacheCanvas.height,\n              sizeGrowing = width > canvasWidth || height > canvasHeight,\n              sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n                canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n          shouldResizeCanvas = sizeGrowing || sizeShrinking;\n          if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n            additionalWidth = width * 0.1;\n            additionalHeight = height * 0.1;\n          }\n        }\n        if (shouldRedraw) {\n          if (shouldResizeCanvas) {\n            canvas.width = Math.ceil(width + additionalWidth);\n            canvas.height = Math.ceil(height + additionalHeight);\n          }\n          else {\n            this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n            this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n          }\n          drawingWidth = dims.x * zoomX / 2;\n          drawingHeight = dims.y * zoomY / 2;\n          this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n          this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n          this.cacheWidth = width;\n          this.cacheHeight = height;\n          this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n          this._cacheContext.scale(zoomX, zoomY);\n          this.zoomX = zoomX;\n          this.zoomY = zoomY;\n          return true;\n        }\n        return false;\n      },\n\n      /**\n       * Sets object's properties from options\n       * @param {Object} [options] Options object\n       */\n      setOptions: function(options) {\n        this._setOptions(options);\n        this._initGradient(options.fill, 'fill');\n        this._initGradient(options.stroke, 'stroke');\n        this._initClipping(options);\n        this._initPattern(options.fill, 'fill');\n        this._initPattern(options.stroke, 'stroke');\n      },\n\n      /**\n       * Transforms context when rendering an object\n       * @param {CanvasRenderingContext2D} ctx Context\n       */\n      transform: function(ctx) {\n        var m;\n        if (this.group && !this.group._transformDone) {\n          m = this.calcTransformMatrix();\n        }\n        else {\n          m = this.calcOwnMatrix();\n        }\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n      },\n\n      /**\n       * Returns an object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n            object = {\n              type:                     this.type,\n              version:                  fabric.version,\n              originX:                  this.originX,\n              originY:                  this.originY,\n              left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n              top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n              width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n              height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n              fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n              stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n              strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n              strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n              strokeLineCap:            this.strokeLineCap,\n              strokeLineJoin:           this.strokeLineJoin,\n              strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n              scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n              scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n              angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\n              flipX:                    this.flipX,\n              flipY:                    this.flipY,\n              opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n              shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n              visible:                  this.visible,\n              clipTo:                   this.clipTo && String(this.clipTo),\n              backgroundColor:          this.backgroundColor,\n              fillRule:                 this.fillRule,\n              paintFirst:               this.paintFirst,\n              globalCompositeOperation: this.globalCompositeOperation,\n              transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\n              skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\n              skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS)\n            };\n\n        fabric.util.populateWithProperties(this, object, propertiesToInclude);\n        if (!this.includeDefaultValues) {\n          object = this._removeDefaultValues(object);\n        }\n\n        return object;\n      },\n\n      /**\n       * Returns (dataless) object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of an instance\n       */\n      toDatalessObject: function(propertiesToInclude) {\n        // will be overwritten by subclasses\n        return this.toObject(propertiesToInclude);\n      },\n\n      /**\n       * @private\n       * @param {Object} object\n       */\n      _removeDefaultValues: function(object) {\n        var prototype = fabric.util.getKlass(object.type).prototype,\n            stateProperties = prototype.stateProperties;\n        stateProperties.forEach(function(prop) {\n          if (object[prop] === prototype[prop]) {\n            delete object[prop];\n          }\n          var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n                        Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\n          // basically a check for [] === []\n          if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n            delete object[prop];\n          }\n        });\n\n        return object;\n      },\n\n      /**\n       * Returns a string representation of an instance\n       * @return {String}\n       */\n      toString: function() {\n        return '#<fabric.' + capitalize(this.type) + '>';\n      },\n\n      /**\n       * Return the object scale factor counting also the group scaling\n       * @return {Object} object with scaleX and scaleY properties\n       */\n      getObjectScaling: function() {\n        var scaleX = this.scaleX, scaleY = this.scaleY;\n        if (this.group) {\n          var scaling = this.group.getObjectScaling();\n          scaleX *= scaling.scaleX;\n          scaleY *= scaling.scaleY;\n        }\n        return { scaleX: scaleX, scaleY: scaleY };\n      },\n\n      /**\n       * Return the object scale factor counting also the group scaling, zoom and retina\n       * @return {Object} object with scaleX and scaleY properties\n       */\n      getTotalObjectScaling: function() {\n        var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n        if (this.canvas) {\n          var zoom = this.canvas.getZoom();\n          var retina = this.canvas.getRetinaScaling();\n          scaleX *= zoom * retina;\n          scaleY *= zoom * retina;\n        }\n        return { scaleX: scaleX, scaleY: scaleY };\n      },\n\n      /**\n       * Return the object opacity counting also the group property\n       * @return {Number}\n       */\n      getObjectOpacity: function() {\n        var opacity = this.opacity;\n        if (this.group) {\n          opacity *= this.group.getObjectOpacity();\n        }\n        return opacity;\n      },\n\n      /**\n       * @private\n       * @param {String} key\n       * @param {*} value\n       * @return {fabric.Object} thisArg\n       */\n      _set: function(key, value) {\n        var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\n            isChanged = this[key] !== value, groupNeedsUpdate = false;\n\n        if (shouldConstrainValue) {\n          value = this._constrainScale(value);\n        }\n        if (key === 'scaleX' && value < 0) {\n          this.flipX = !this.flipX;\n          value *= -1;\n        }\n        else if (key === 'scaleY' && value < 0) {\n          this.flipY = !this.flipY;\n          value *= -1;\n        }\n        else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n          value = new fabric.Shadow(value);\n        }\n        else if (key === 'dirty' && this.group) {\n          this.group.set('dirty', value);\n        }\n\n        this[key] = value;\n\n        if (isChanged) {\n          groupNeedsUpdate = this.group && this.group.isOnACache();\n          if (this.cacheProperties.indexOf(key) > -1) {\n            this.dirty = true;\n            groupNeedsUpdate && this.group.set('dirty', true);\n          }\n          else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n            this.group.set('dirty', true);\n          }\n        }\n\n        return this;\n      },\n\n      /**\n       * This callback function is called by the parent group of an object every\n       * time a non-delegated property changes on the group. It is passed the key\n       * and value as parameters. Not adding in this function's signature to avoid\n       * Travis build error about unused variables.\n       */\n      setOnGroup: function() {\n        // implemented by sub-classes, as needed.\n      },\n\n      /**\n       * Retrieves viewportTransform from Object's canvas if possible\n       * @method getViewportTransform\n       * @memberOf fabric.Object.prototype\n       * @return {Boolean}\n       */\n      getViewportTransform: function() {\n        if (this.canvas && this.canvas.viewportTransform) {\n          return this.canvas.viewportTransform;\n        }\n        return fabric.iMatrix.concat();\n      },\n\n      /*\n       * @private\n       * return if the object would be visible in rendering\n       * @memberOf fabric.Object.prototype\n       * @return {Boolean}\n       */\n      isNotVisible: function() {\n        return this.opacity === 0 || (this.width === 0 && this.height === 0) || !this.visible;\n      },\n\n      /**\n       * Renders an object on a specified context\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      render: function(ctx) {\n        // do not render if width/height are zeros or object is not visible\n        if (this.isNotVisible()) {\n          return;\n        }\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n          return;\n        }\n        ctx.save();\n        this._setupCompositeOperation(ctx);\n        this.drawSelectionBackground(ctx);\n        this.transform(ctx);\n        this._setOpacity(ctx);\n        this._setShadow(ctx, this);\n        if (this.transformMatrix) {\n          ctx.transform.apply(ctx, this.transformMatrix);\n        }\n        this.clipTo && fabric.util.clipContext(this, ctx);\n        if (this.shouldCache()) {\n          if (!this._cacheCanvas) {\n            this._createCacheCanvas();\n\n          }\n          if (this.isCacheDirty()) {\n            this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\n            this.drawObject(this._cacheContext);\n            this.dirty = false;\n          }\n          this.drawCacheOnCanvas(ctx);\n        }\n        else {\n          this._removeCacheCanvas();\n          this.dirty = false;\n          this.drawObject(ctx);\n          if (this.objectCaching && this.statefullCache) {\n            this.saveState({ propertySet: 'cacheProperties' });\n          }\n        }\n        this.clipTo && ctx.restore();\n        ctx.restore();\n      },\n\n      /**\n       * Remove cacheCanvas and its dimensions from the objects\n       */\n      _removeCacheCanvas: function() {\n        this._cacheCanvas = null;\n        this.cacheWidth = 0;\n        this.cacheHeight = 0;\n      },\n\n      /**\n       * When set to `true`, force the object to have its own cache, even if it is inside a group\n       * it may be needed when your object behave in a particular way on the cache and always needs\n       * its own isolated canvas to render correctly.\n       * Created to be overridden\n       * since 1.7.12\n       * @returns false\n       */\n      needsItsOwnCache: function() {\n        if (this.paintFirst === 'stroke' && typeof this.shadow === 'object') {\n          return true;\n        }\n        return false;\n      },\n\n      /**\n       * Decide if the object should cache or not. Create its own cache level\n       * objectCaching is a global flag, wins over everything\n       * needsItsOwnCache should be used when the object drawing method requires\n       * a cache step. None of the fabric classes requires it.\n       * Generally you do not cache objects in groups because the group outside is cached.\n       * @return {Boolean}\n       */\n      shouldCache: function() {\n        this.ownCaching = this.objectCaching &&\n        (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n        return this.ownCaching;\n      },\n\n      /**\n       * Check if this object or a child object will cast a shadow\n       * used by Group.shouldCache to know if child has a shadow recursively\n       * @return {Boolean}\n       */\n      willDrawShadow: function() {\n        return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n      },\n\n      /**\n       * Execute the drawing operation for an object on a specified context\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      drawObject: function(ctx) {\n        this._renderBackground(ctx);\n        this._setStrokeStyles(ctx, this);\n        this._setFillStyles(ctx, this);\n        this._render(ctx);\n      },\n\n      /**\n       * Paint the cached copy of the object on the target context.\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      drawCacheOnCanvas: function(ctx) {\n        ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n        ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n      },\n\n      /**\n       * Check if cache is dirty\n       * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n       * on parent canvas.\n       */\n      isCacheDirty: function(skipCanvas) {\n        if (this.isNotVisible()) {\n          return false;\n        }\n        if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\n          // in this case the context is already cleared.\n          return true;\n        }\n        else {\n          if (this.dirty || (this.statefullCache && this.hasStateChanged('cacheProperties'))) {\n            if (this._cacheCanvas && !skipCanvas) {\n              var width = this.cacheWidth / this.zoomX;\n              var height = this.cacheHeight / this.zoomY;\n              this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n            }\n            return true;\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Draws a background for the object big as its untrasformed dimensions\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderBackground: function(ctx) {\n        if (!this.backgroundColor) {\n          return;\n        }\n        var dim = this._getNonTransformedDimensions();\n        ctx.fillStyle = this.backgroundColor;\n\n        ctx.fillRect(\n          -dim.x / 2,\n          -dim.y / 2,\n          dim.x,\n          dim.y\n        );\n        // if there is background color no other shadows\n        // should be casted\n        this._removeShadow(ctx);\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _setOpacity: function(ctx) {\n        if (this.group && !this.group._transformDone) {\n          ctx.globalAlpha = this.getObjectOpacity();\n        }\n        else {\n          ctx.globalAlpha *= this.opacity;\n        }\n      },\n\n      _setStrokeStyles: function(ctx, decl) {\n        if (decl.stroke) {\n          ctx.lineWidth = decl.strokeWidth;\n          ctx.lineCap = decl.strokeLineCap;\n          ctx.lineJoin = decl.strokeLineJoin;\n          ctx.miterLimit = decl.strokeMiterLimit;\n          ctx.strokeStyle = decl.stroke.toLive\n            ? decl.stroke.toLive(ctx, this)\n            : decl.stroke;\n        }\n      },\n\n      _setFillStyles: function(ctx, decl) {\n        if (decl.fill) {\n          ctx.fillStyle = decl.fill.toLive\n            ? decl.fill.toLive(ctx, this)\n            : decl.fill;\n        }\n      },\n\n      /**\n       * @private\n       * Sets line dash\n       * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n       * @param {Array} dashArray array representing dashes\n       * @param {Function} alternative function to call if browaser does not support lineDash\n       */\n      _setLineDash: function(ctx, dashArray, alternative) {\n        if (!dashArray) {\n          return;\n        }\n        // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n        if (1 & dashArray.length) {\n          dashArray.push.apply(dashArray, dashArray);\n        }\n        if (supportsLineDash) {\n          ctx.setLineDash(dashArray);\n        }\n        else {\n          alternative && alternative(ctx);\n        }\n      },\n\n      /**\n       * Renders controls and borders for the object\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Object} [styleOverride] properties to override the object style\n       */\n      _renderControls: function(ctx, styleOverride) {\n        var vpt = this.getViewportTransform(),\n            matrix = this.calcTransformMatrix(),\n            options, drawBorders, drawControls;\n        styleOverride = styleOverride || { };\n        drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\n        drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\n        matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n        options = fabric.util.qrDecompose(matrix);\n        ctx.save();\n        ctx.translate(options.translateX, options.translateY);\n        ctx.lineWidth = 1 * this.borderScaleFactor;\n        if (!this.group) {\n          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n        }\n        if (styleOverride.forActiveSelection) {\n          ctx.rotate(degreesToRadians(options.angle));\n          drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n        }\n        else {\n          ctx.rotate(degreesToRadians(this.angle));\n          drawBorders && this.drawBorders(ctx, styleOverride);\n        }\n        drawControls && this.drawControls(ctx, styleOverride);\n        ctx.restore();\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _setShadow: function(ctx) {\n        if (!this.shadow) {\n          return;\n        }\n\n        var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,\n            multY = (this.canvas && this.canvas.viewportTransform[3]) || 1,\n            scaling = this.getObjectScaling();\n        if (this.canvas && this.canvas._isRetinaScaling()) {\n          multX *= fabric.devicePixelRatio;\n          multY *= fabric.devicePixelRatio;\n        }\n        ctx.shadowColor = this.shadow.color;\n        ctx.shadowBlur = this.shadow.blur * fabric.browserShadowBlurConstant *\n          (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n        ctx.shadowOffsetX = this.shadow.offsetX * multX * scaling.scaleX;\n        ctx.shadowOffsetY = this.shadow.offsetY * multY * scaling.scaleY;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _removeShadow: function(ctx) {\n        if (!this.shadow) {\n          return;\n        }\n\n        ctx.shadowColor = '';\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Object} filler fabric.Pattern or fabric.Gradient\n       */\n      _applyPatternGradientTransform: function(ctx, filler) {\n        if (!filler || !filler.toLive) {\n          return { offsetX: 0, offsetY: 0 };\n        }\n        var t = filler.gradientTransform || filler.patternTransform;\n        var offsetX = -this.width / 2 + filler.offsetX || 0,\n            offsetY = -this.height / 2 + filler.offsetY || 0;\n        ctx.translate(offsetX, offsetY);\n        if (t) {\n          ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n        }\n        return { offsetX: offsetX, offsetY: offsetY };\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderPaintInOrder: function(ctx) {\n        if (this.paintFirst === 'stroke') {\n          this._renderStroke(ctx);\n          this._renderFill(ctx);\n        }\n        else {\n          this._renderFill(ctx);\n          this._renderStroke(ctx);\n        }\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderFill: function(ctx) {\n        if (!this.fill) {\n          return;\n        }\n\n        ctx.save();\n        this._applyPatternGradientTransform(ctx, this.fill);\n        if (this.fillRule === 'evenodd') {\n          ctx.fill('evenodd');\n        }\n        else {\n          ctx.fill();\n        }\n        ctx.restore();\n      },\n\n      _renderStroke: function(ctx) {\n        if (!this.stroke || this.strokeWidth === 0) {\n          return;\n        }\n\n        if (this.shadow && !this.shadow.affectStroke) {\n          this._removeShadow(ctx);\n        }\n\n        ctx.save();\n        this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\n        this._applyPatternGradientTransform(ctx, this.stroke);\n        ctx.stroke();\n        ctx.restore();\n      },\n\n      /**\n       * This function is an helper for svg import. it returns the center of the object in the svg\n       * untransformed coordinates\n       * @private\n       * @return {Object} center point from element coordinates\n       */\n      _findCenterFromElement: function() {\n        return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\n      },\n\n      /**\n       * This function is an helper for svg import. it decoompose the transformMatrix\n       * and assign properties to object.\n       * untransformed coordinates\n       * @private\n       * @chainable\n       */\n      _assignTransformMatrixProps: function() {\n        if (this.transformMatrix) {\n          var options = fabric.util.qrDecompose(this.transformMatrix);\n          this.flipX = false;\n          this.flipY = false;\n          this.set('scaleX', options.scaleX);\n          this.set('scaleY', options.scaleY);\n          this.angle = options.angle;\n          this.skewX = options.skewX;\n          this.skewY = 0;\n        }\n      },\n\n      /**\n       * This function is an helper for svg import. it removes the transform matrix\n       * and set to object properties that fabricjs can handle\n       * @private\n       * @param {Object} preserveAspectRatioOptions\n       * @return {thisArg}\n       */\n      _removeTransformMatrix: function(preserveAspectRatioOptions) {\n        var center = this._findCenterFromElement();\n        if (this.transformMatrix) {\n          this._assignTransformMatrixProps();\n          center = fabric.util.transformPoint(center, this.transformMatrix);\n        }\n        this.transformMatrix = null;\n        if (preserveAspectRatioOptions) {\n          this.scaleX *= preserveAspectRatioOptions.scaleX;\n          this.scaleY *= preserveAspectRatioOptions.scaleY;\n          this.cropX = preserveAspectRatioOptions.cropX;\n          this.cropY = preserveAspectRatioOptions.cropY;\n          center.x += preserveAspectRatioOptions.offsetLeft;\n          center.y += preserveAspectRatioOptions.offsetTop;\n          this.width = preserveAspectRatioOptions.width;\n          this.height = preserveAspectRatioOptions.height;\n        }\n        this.setPositionByOrigin(center, 'center', 'center');\n      },\n\n      /**\n       * Clones an instance, using a callback method will work for every object.\n       * @param {Function} callback Callback is invoked with a clone as a first argument\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       */\n      clone: function(callback, propertiesToInclude) {\n        var objectForm = this.toObject(propertiesToInclude);\n        if (this.constructor.fromObject) {\n          this.constructor.fromObject(objectForm, callback);\n        }\n        else {\n          fabric.Object._fromObject('Object', objectForm, callback);\n        }\n      },\n\n      /**\n       * Creates an instance of fabric.Image out of an object\n       * @param {Function} callback callback, invoked with an instance as a first argument\n       * @param {Object} [options] for clone as image, passed to toDataURL\n       * @param {Boolean} [options.enableRetinaScaling] enable retina scaling for the cloned image\n       * @return {fabric.Object} thisArg\n       */\n      cloneAsImage: function(callback, options) {\n        var dataUrl = this.toDataURL(options);\n        fabric.util.loadImage(dataUrl, function(img) {\n          if (callback) {\n            callback(new fabric.Image(img));\n          }\n        });\n        return this;\n      },\n\n      /**\n       * Converts an object into a data-url-like string\n       * @param {Object} options Options object\n       * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n       * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n       * @param {Number} [options.multiplier=1] Multiplier to scale by\n       * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n       * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n       * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n       * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n       * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n       * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n       * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n       */\n      toDataURL: function(options) {\n        options || (options = { });\n\n        var origParams = fabric.util.saveObjectTransform(this);\n\n        if (options.withoutTransform) {\n          fabric.util.resetObjectTransform(this);\n        }\n\n        var el = fabric.util.createCanvasElement(),\n            // skip canvas zoom and calculate with setCoords now.\n            boundingRect = this.getBoundingRect(true, true);\n\n        el.width = boundingRect.width;\n        el.height = boundingRect.height;\n        var canvas = new fabric.StaticCanvas(el, {\n          enableRetinaScaling: options.enableRetinaScaling,\n          renderOnAddRemove: false,\n          skipOffscreen: false,\n        });\n        // to avoid common confusion https://github.com/kangax/fabric.js/issues/806\n        if (options.format === 'jpg') {\n          options.format = 'jpeg';\n        }\n\n        if (options.format === 'jpeg') {\n          canvas.backgroundColor = '#fff';\n        }\n\n        this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\n\n        var originalCanvas = this.canvas;\n        canvas.add(this);\n        var data = canvas.toDataURL(options);\n        this.set(origParams).setCoords();\n        this.canvas = originalCanvas;\n        // canvas.dispose will call image.dispose that will nullify the elements\n        // since this canvas is a simple element for the process, we remove references\n        // to objects in this way in order to avoid object trashing.\n        canvas._objects = [];\n        canvas.dispose();\n        canvas = null;\n\n        return data;\n      },\n\n      /**\n       * Returns true if specified type is identical to the type of an instance\n       * @param {String} type Type to check against\n       * @return {Boolean}\n       */\n      isType: function(type) {\n        return this.type === type;\n      },\n\n      /**\n       * Returns complexity of an instance\n       * @return {Number} complexity of this instance (is 1 unless subclassed)\n       */\n      complexity: function() {\n        return 1;\n      },\n\n      /**\n       * Returns a JSON representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} JSON\n       */\n      toJSON: function(propertiesToInclude) {\n        // delegate, not alias\n        return this.toObject(propertiesToInclude);\n      },\n\n      /**\n       * Sets gradient (fill or stroke) of an object\n       * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n       * @param {String} property Property name 'stroke' or 'fill'\n       * @param {Object} [options] Options object\n       * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n       * @param {Number} [options.x1=0] x-coordinate of start point\n       * @param {Number} [options.y1=0] y-coordinate of start point\n       * @param {Number} [options.x2=0] x-coordinate of end point\n       * @param {Number} [options.y2=0] y-coordinate of end point\n       * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n       * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n       * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n       * @param {Object} [options.gradientTransform] transforMatrix for gradient\n       * @return {fabric.Object} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n       * @example <caption>Set linear gradient</caption>\n       * object.setGradient('fill', {\n       *   type: 'linear',\n       *   x1: -object.width / 2,\n       *   y1: 0,\n       *   x2: object.width / 2,\n       *   y2: 0,\n       *   colorStops: {\n       *     0: 'red',\n       *     0.5: '#005555',\n       *     1: 'rgba(0,0,255,0.5)'\n       *   }\n       * });\n       * canvas.renderAll();\n       * @example <caption>Set radial gradient</caption>\n       * object.setGradient('fill', {\n       *   type: 'radial',\n       *   x1: 0,\n       *   y1: 0,\n       *   x2: 0,\n       *   y2: 0,\n       *   r1: object.width / 2,\n       *   r2: 10,\n       *   colorStops: {\n       *     0: 'red',\n       *     0.5: '#005555',\n       *     1: 'rgba(0,0,255,0.5)'\n       *   }\n       * });\n       * canvas.renderAll();\n       */\n      setGradient: function(property, options) {\n        options || (options = { });\n\n        var gradient = { colorStops: [] };\n\n        gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n        gradient.coords = {\n          x1: options.x1,\n          y1: options.y1,\n          x2: options.x2,\n          y2: options.y2\n        };\n\n        if (options.r1 || options.r2) {\n          gradient.coords.r1 = options.r1;\n          gradient.coords.r2 = options.r2;\n        }\n\n        gradient.gradientTransform = options.gradientTransform;\n        fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\n\n        return this.set(property, fabric.Gradient.forObject(this, gradient));\n      },\n\n      /**\n       * Sets pattern fill of an object\n       * @param {Object} options Options object\n       * @param {(String|HTMLImageElement)} options.source Pattern source\n       * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n       * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n       * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n       * @param {Function} [callback] Callback to invoke when image set as a pattern\n       * @return {fabric.Object} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n       * @example <caption>Set pattern</caption>\n       * object.setPatternFill({\n       *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n       *   repeat: 'repeat'\n       * },canvas.renderAll.bind(canvas));\n       */\n      setPatternFill: function(options, callback) {\n        return this.set('fill', new fabric.Pattern(options, callback));\n      },\n\n      /**\n       * Sets {@link fabric.Object#shadow|shadow} of an object\n       * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n       * @param {String} [options.color=rgb(0,0,0)] Shadow color\n       * @param {Number} [options.blur=0] Shadow blur\n       * @param {Number} [options.offsetX=0] Shadow horizontal offset\n       * @param {Number} [options.offsetY=0] Shadow vertical offset\n       * @return {fabric.Object} thisArg\n       * @chainable\n       * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n       * @example <caption>Set shadow with string notation</caption>\n       * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n       * canvas.renderAll();\n       * @example <caption>Set shadow with object notation</caption>\n       * object.setShadow({\n       *   color: 'red',\n       *   blur: 10,\n       *   offsetX: 20,\n       *   offsetY: 20\n       * });\n       * canvas.renderAll();\n       */\n      setShadow: function(options) {\n        return this.set('shadow', options ? new fabric.Shadow(options) : null);\n      },\n\n      /**\n       * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n       * @param {String} color Color value\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      setColor: function(color) {\n        this.set('fill', color);\n        return this;\n      },\n\n      /**\n       * Sets \"angle\" of an instance with centered rotation\n       * @param {Number} angle Angle value (in degrees)\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      rotate: function(angle) {\n        var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n        if (shouldCenterOrigin) {\n          this._setOriginToCenter();\n        }\n\n        this.set('angle', angle);\n\n        if (shouldCenterOrigin) {\n          this._resetOrigin();\n        }\n\n        return this;\n      },\n\n      /**\n       * Centers object horizontally on canvas to which it was added last.\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      centerH: function () {\n        this.canvas && this.canvas.centerObjectH(this);\n        return this;\n      },\n\n      /**\n       * Centers object horizontally on current viewport of canvas to which it was added last.\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      viewportCenterH: function () {\n        this.canvas && this.canvas.viewportCenterObjectH(this);\n        return this;\n      },\n\n      /**\n       * Centers object vertically on canvas to which it was added last.\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      centerV: function () {\n        this.canvas && this.canvas.centerObjectV(this);\n        return this;\n      },\n\n      /**\n       * Centers object vertically on current viewport of canvas to which it was added last.\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      viewportCenterV: function () {\n        this.canvas && this.canvas.viewportCenterObjectV(this);\n        return this;\n      },\n\n      /**\n       * Centers object vertically and horizontally on canvas to which is was added last\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      center: function () {\n        this.canvas && this.canvas.centerObject(this);\n        return this;\n      },\n\n      /**\n       * Centers object on current viewport of canvas to which it was added last.\n       * You might need to call `setCoords` on an object after centering, to update controls area.\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      viewportCenter: function () {\n        this.canvas && this.canvas.viewportCenterObject(this);\n        return this;\n      },\n\n      /**\n       * Returns coordinates of a pointer relative to an object\n       * @param {Event} e Event to operate upon\n       * @param {Object} [pointer] Pointer to operate upon (instead of event)\n       * @return {Object} Coordinates of a pointer (x, y)\n       */\n      getLocalPointer: function(e, pointer) {\n        pointer = pointer || this.canvas.getPointer(e);\n        var pClicked = new fabric.Point(pointer.x, pointer.y),\n            objectLeftTop = this._getLeftTopCoords();\n        if (this.angle) {\n          pClicked = fabric.util.rotatePoint(\n            pClicked, objectLeftTop, degreesToRadians(-this.angle));\n        }\n        return {\n          x: pClicked.x - objectLeftTop.x,\n          y: pClicked.y - objectLeftTop.y\n        };\n      },\n\n      /**\n       * Sets canvas globalCompositeOperation for specific object\n       * custom composition operation for the particular object can be specifed using globalCompositeOperation property\n       * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n       */\n      _setupCompositeOperation: function (ctx) {\n        if (this.globalCompositeOperation) {\n          ctx.globalCompositeOperation = this.globalCompositeOperation;\n        }\n      }\n    });\n\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n\n    extend(fabric.Object.prototype, fabric.Observable);\n\n    /**\n     * Defines the number of fraction digits to use when serializing object values.\n     * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n     * @static\n     * @memberOf fabric.Object\n     * @constant\n     * @type Number\n     */\n    fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\n      var klass = fabric[className];\n      object = clone(object, true);\n      fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\n        if (typeof patterns[0] !== 'undefined') {\n          object.fill = patterns[0];\n        }\n        if (typeof patterns[1] !== 'undefined') {\n          object.stroke = patterns[1];\n        }\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n        callback && callback(instance);\n      });\n    };\n\n    /**\n     * Unique id used internally when creating SVG elements\n     * @static\n     * @memberOf fabric.Object\n     * @type Number\n     */\n    fabric.Object.__uid = 0;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function() {\n\n    var degreesToRadians = fabric.util.degreesToRadians,\n        originXOffset = {\n          left: -0.5,\n          center: 0,\n          right: 0.5\n        },\n        originYOffset = {\n          top: -0.5,\n          center: 0,\n          bottom: 0.5\n        };\n\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n      /**\n       * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\n       * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n       * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {fabric.Point}\n       */\n      translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n        var x = point.x,\n            y = point.y,\n            offsetX, offsetY, dim;\n\n        if (typeof fromOriginX === 'string') {\n          fromOriginX = originXOffset[fromOriginX];\n        }\n        else {\n          fromOriginX -= 0.5;\n        }\n\n        if (typeof toOriginX === 'string') {\n          toOriginX = originXOffset[toOriginX];\n        }\n        else {\n          toOriginX -= 0.5;\n        }\n\n        offsetX = toOriginX - fromOriginX;\n\n        if (typeof fromOriginY === 'string') {\n          fromOriginY = originYOffset[fromOriginY];\n        }\n        else {\n          fromOriginY -= 0.5;\n        }\n\n        if (typeof toOriginY === 'string') {\n          toOriginY = originYOffset[toOriginY];\n        }\n        else {\n          toOriginY -= 0.5;\n        }\n\n        offsetY = toOriginY - fromOriginY;\n\n        if (offsetX || offsetY) {\n          dim = this._getTransformedDimensions();\n          x = point.x + offsetX * dim.x;\n          y = point.y + offsetY * dim.y;\n        }\n\n        return new fabric.Point(x, y);\n      },\n\n      /**\n       * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {fabric.Point}\n       */\n      translateToCenterPoint: function(point, originX, originY) {\n        var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n        if (this.angle) {\n          return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n        }\n        return p;\n      },\n\n      /**\n       * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n       * @param {fabric.Point} center The point which corresponds to center of the object\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {fabric.Point}\n       */\n      translateToOriginPoint: function(center, originX, originY) {\n        var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n        if (this.angle) {\n          return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n        }\n        return p;\n      },\n\n      /**\n       * Returns the real center coordinates of the object\n       * @return {fabric.Point}\n       */\n      getCenterPoint: function() {\n        var leftTop = new fabric.Point(this.left, this.top);\n        return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n      },\n\n      /**\n       * Returns the coordinates of the object based on center coordinates\n       * @param {fabric.Point} point The point which corresponds to the originX and originY params\n       * @return {fabric.Point}\n       */\n      // getOriginPoint: function(center) {\n      //   return this.translateToOriginPoint(center, this.originX, this.originY);\n      // },\n\n      /**\n       * Returns the coordinates of the object as if it has a different origin\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {fabric.Point}\n       */\n      getPointByOrigin: function(originX, originY) {\n        var center = this.getCenterPoint();\n        return this.translateToOriginPoint(center, originX, originY);\n      },\n\n      /**\n       * Returns the point in local coordinates\n       * @param {fabric.Point} point The point relative to the global coordinate system\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {fabric.Point}\n       */\n      toLocalPoint: function(point, originX, originY) {\n        var center = this.getCenterPoint(),\n            p, p2;\n\n        if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\n          p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n        }\n        else {\n          p = new fabric.Point(this.left, this.top);\n        }\n\n        p2 = new fabric.Point(point.x, point.y);\n        if (this.angle) {\n          p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n        }\n        return p2.subtractEquals(p);\n      },\n\n      /**\n       * Returns the point in global coordinates\n       * @param {fabric.Point} The point relative to the local coordinate system\n       * @return {fabric.Point}\n       */\n      // toGlobalPoint: function(point) {\n      //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n      // },\n\n      /**\n       * Sets the position of the object taking into consideration the object's origin\n       * @param {fabric.Point} pos The new position of the object\n       * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n       * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n       * @return {void}\n       */\n      setPositionByOrigin: function(pos, originX, originY) {\n        var center = this.translateToCenterPoint(pos, originX, originY),\n            position = this.translateToOriginPoint(center, this.originX, this.originY);\n        this.set('left', position.x);\n        this.set('top', position.y);\n      },\n\n      /**\n       * @param {String} to One of 'left', 'center', 'right'\n       */\n      adjustPosition: function(to) {\n        var angle = degreesToRadians(this.angle),\n            hypotFull = this.getScaledWidth(),\n            xFull = fabric.util.cos(angle) * hypotFull,\n            yFull = fabric.util.sin(angle) * hypotFull,\n            offsetFrom, offsetTo;\n\n        //TODO: this function does not consider mixed situation like top, center.\n        if (typeof this.originX === 'string') {\n          offsetFrom = originXOffset[this.originX];\n        }\n        else {\n          offsetFrom = this.originX - 0.5;\n        }\n        if (typeof to === 'string') {\n          offsetTo = originXOffset[to];\n        }\n        else {\n          offsetTo = to - 0.5;\n        }\n        this.left += xFull * (offsetTo - offsetFrom);\n        this.top += yFull * (offsetTo - offsetFrom);\n        this.setCoords();\n        this.originX = to;\n      },\n\n      /**\n       * Sets the origin/position of the object to it's center point\n       * @private\n       * @return {void}\n       */\n      _setOriginToCenter: function() {\n        this._originalOriginX = this.originX;\n        this._originalOriginY = this.originY;\n\n        var center = this.getCenterPoint();\n\n        this.originX = 'center';\n        this.originY = 'center';\n\n        this.left = center.x;\n        this.top = center.y;\n      },\n\n      /**\n       * Resets the origin/position of the object to it's original origin\n       * @private\n       * @return {void}\n       */\n      _resetOrigin: function() {\n        var originPoint = this.translateToOriginPoint(\n          this.getCenterPoint(),\n          this._originalOriginX,\n          this._originalOriginY);\n\n        this.originX = this._originalOriginX;\n        this.originY = this._originalOriginY;\n\n        this.left = originPoint.x;\n        this.top = originPoint.y;\n\n        this._originalOriginX = null;\n        this._originalOriginY = null;\n      },\n\n      /**\n       * @private\n       */\n      _getLeftTopCoords: function() {\n        return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n      },\n    });\n\n  })();\n\n\n  (function() {\n\n    function getCoords(coords) {\n      return [\n        new fabric.Point(coords.tl.x, coords.tl.y),\n        new fabric.Point(coords.tr.x, coords.tr.y),\n        new fabric.Point(coords.br.x, coords.br.y),\n        new fabric.Point(coords.bl.x, coords.bl.y)\n      ];\n    }\n\n    var degreesToRadians = fabric.util.degreesToRadians,\n        multiplyMatrices = fabric.util.multiplyTransformMatrices,\n        transformPoint = fabric.util.transformPoint;\n\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n      /**\n       * Describe object's corner position in canvas element coordinates.\n       * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\n       * each property is an object with x, y and corner.\n       * The `corner` property contains in a similar manner the 4 points of the\n       * interactive area of the corner.\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\n       * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\n       * The coordinates get updated with @method setCoords.\n       * You can calculate them without updating with @method calcCoords;\n       * @memberOf fabric.Object.prototype\n       */\n      oCoords: null,\n\n      /**\n       * Describe object's corner position in canvas object absolute coordinates\n       * properties are tl,tr,bl,br and describe the four main corner.\n       * each property is an object with x, y, instance of Fabric.Point.\n       * The coordinates depends from this properties: width, height, scaleX, scaleY\n       * skewX, skewY, angle, strokeWidth, top, left.\n       * Those coordinates are usefull to understand where an object is. They get updated\n       * with oCoords but they do not need to be updated when zoom or panning change.\n       * The coordinates get updated with @method setCoords.\n       * You can calculate them without updating with @method calcCoords(true);\n       * @memberOf fabric.Object.prototype\n       */\n      aCoords: null,\n\n      /**\n       * storage for object transform matrix\n       */\n      ownMatrixCache: null,\n\n      /**\n       * storage for object full transform matrix\n       */\n      matrixCache: null,\n\n      /**\n       * return correct set of coordinates for intersection\n       */\n      getCoords: function(absolute, calculate) {\n        if (!this.oCoords) {\n          this.setCoords();\n        }\n        var coords = absolute ? this.aCoords : this.oCoords;\n        return getCoords(calculate ? this.calcCoords(absolute) : coords);\n      },\n\n      /**\n       * Checks if object intersects with an area formed by 2 points\n       * @param {Object} pointTL top-left point of area\n       * @param {Object} pointBR bottom-right point of area\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object intersects with an area formed by 2 points\n       */\n      intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n        var coords = this.getCoords(absolute, calculate),\n            intersection = fabric.Intersection.intersectPolygonRectangle(\n              coords,\n              pointTL,\n              pointBR\n            );\n        return intersection.status === 'Intersection';\n      },\n\n      /**\n       * Checks if object intersects with another object\n       * @param {Object} other Object to test\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object intersects with another object\n       */\n      intersectsWithObject: function(other, absolute, calculate) {\n        var intersection = fabric.Intersection.intersectPolygonPolygon(\n          this.getCoords(absolute, calculate),\n          other.getCoords(absolute, calculate)\n        );\n\n        return intersection.status === 'Intersection'\n          || other.isContainedWithinObject(this, absolute, calculate)\n          || this.isContainedWithinObject(other, absolute, calculate);\n      },\n\n      /**\n       * Checks if object is fully contained within area of another object\n       * @param {Object} other Object to test\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object is fully contained within area of another object\n       */\n      isContainedWithinObject: function(other, absolute, calculate) {\n        var points = this.getCoords(absolute, calculate),\n            i = 0, lines = other._getImageLines(\n              calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\n            );\n        for (; i < 4; i++) {\n          if (!other.containsPoint(points[i], lines)) {\n            return false;\n          }\n        }\n        return true;\n      },\n\n      /**\n       * Checks if object is fully contained within area formed by 2 points\n       * @param {Object} pointTL top-left point of area\n       * @param {Object} pointBR bottom-right point of area\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object is fully contained within area formed by 2 points\n       */\n      isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n        var boundingRect = this.getBoundingRect(absolute, calculate);\n\n        return (\n          boundingRect.left >= pointTL.x &&\n          boundingRect.left + boundingRect.width <= pointBR.x &&\n          boundingRect.top >= pointTL.y &&\n          boundingRect.top + boundingRect.height <= pointBR.y\n        );\n      },\n\n      /**\n       * Checks if point is inside the object\n       * @param {fabric.Point} point Point to check against\n       * @param {Object} [lines] object returned from @method _getImageLines\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if point is inside the object\n       */\n      containsPoint: function(point, lines, absolute, calculate) {\n        var lines = lines || this._getImageLines(\n              calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\n            ),\n            xPoints = this._findCrossPoints(point, lines);\n\n        // if xPoints is odd then point is inside the object\n        return (xPoints !== 0 && xPoints % 2 === 1);\n      },\n\n      /**\n       * Checks if object is contained within the canvas with current viewportTransform\n       * the check is done stopping at first point that appears on screen\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object is fully or partially contained within canvas\n       */\n      isOnScreen: function(calculate) {\n        if (!this.canvas) {\n          return false;\n        }\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n        var points = this.getCoords(true, calculate), point;\n        for (var i = 0; i < 4; i++) {\n          point = points[i];\n          if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\n            return true;\n          }\n        }\n        // no points on screen, check intersection with absolute coordinates\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n          return true;\n        }\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n      },\n\n      /**\n       * Checks if the object contains the midpoint between canvas extremities\n       * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\n       * @private\n       * @param {Fabric.Point} pointTL Top Left point\n       * @param {Fabric.Point} pointBR Top Right point\n       * @param {Boolean} calculate use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if the objects containe the point\n       */\n      _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n        // worst case scenario the object is so big that contains the screen\n        var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\n        if (this.containsPoint(centerPoint, null, true, calculate)) {\n          return true;\n        }\n        return false;\n      },\n\n      /**\n       * Checks if object is partially contained within the canvas with current viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n       * @return {Boolean} true if object is partially contained within canvas\n       */\n      isPartiallyOnScreen: function(calculate) {\n        if (!this.canvas) {\n          return false;\n        }\n        var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n        if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n          return true;\n        }\n        return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n      },\n\n      /**\n       * Method that returns an object with the object edges in it, given the coordinates of the corners\n       * @private\n       * @param {Object} oCoords Coordinates of the object corners\n       */\n      _getImageLines: function(oCoords) {\n        return {\n          topline: {\n            o: oCoords.tl,\n            d: oCoords.tr\n          },\n          rightline: {\n            o: oCoords.tr,\n            d: oCoords.br\n          },\n          bottomline: {\n            o: oCoords.br,\n            d: oCoords.bl\n          },\n          leftline: {\n            o: oCoords.bl,\n            d: oCoords.tl\n          }\n        };\n      },\n\n      /**\n       * Helper method to determine how many cross points are between the 4 object edges\n       * and the horizontal line determined by a point on canvas\n       * @private\n       * @param {fabric.Point} point Point to check\n       * @param {Object} lines Coordinates of the object being evaluated\n       */\n      // remove yi, not used but left code here just in case.\n      _findCrossPoints: function(point, lines) {\n        var b1, b2, a1, a2, xi, // yi,\n            xcount = 0,\n            iLine;\n\n        for (var lineKey in lines) {\n          iLine = lines[lineKey];\n          // optimisation 1: line below point. no cross\n          if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n            continue;\n          }\n          // optimisation 2: line above point. no cross\n          if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n            continue;\n          }\n          // optimisation 3: vertical line case\n          if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n            xi = iLine.o.x;\n            // yi = point.y;\n          }\n          // calculate the intersection point\n          else {\n            b1 = 0;\n            b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n            a1 = point.y - b1 * point.x;\n            a2 = iLine.o.y - b2 * iLine.o.x;\n\n            xi = -(a1 - a2) / (b1 - b2);\n            // yi = a1 + b1 * xi;\n          }\n          // dont count xi < point.x cases\n          if (xi >= point.x) {\n            xcount += 1;\n          }\n          // optimisation 4: specific for square images\n          if (xcount === 2) {\n            break;\n          }\n        }\n        return xcount;\n      },\n\n      /**\n       * Returns coordinates of object's bounding rectangle (left, top, width, height)\n       * the box is intented as aligned to axis of canvas.\n       * @param {Boolean} [absolute] use coordinates without viewportTransform\n       * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\n       * @return {Object} Object with left, top, width, height properties\n       */\n      getBoundingRect: function(absolute, calculate) {\n        var coords = this.getCoords(absolute, calculate);\n        return fabric.util.makeBoundingBoxFromPoints(coords);\n      },\n\n      /**\n       * Returns width of an object bounding box counting transformations\n       * before 2.0 it was named getWidth();\n       * @return {Number} width value\n       */\n      getScaledWidth: function() {\n        return this._getTransformedDimensions().x;\n      },\n\n      /**\n       * Returns height of an object bounding box counting transformations\n       * before 2.0 it was named getHeight();\n       * @return {Number} height value\n       */\n      getScaledHeight: function() {\n        return this._getTransformedDimensions().y;\n      },\n\n      /**\n       * Makes sure the scale is valid and modifies it if necessary\n       * @private\n       * @param {Number} value\n       * @return {Number}\n       */\n      _constrainScale: function(value) {\n        if (Math.abs(value) < this.minScaleLimit) {\n          if (value < 0) {\n            return -this.minScaleLimit;\n          }\n          else {\n            return this.minScaleLimit;\n          }\n        }\n        else if (value === 0) {\n          return 0.0001;\n        }\n        return value;\n      },\n\n      /**\n       * Scales an object (equally by x and y)\n       * @param {Number} value Scale factor\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      scale: function(value) {\n        this._set('scaleX', value);\n        this._set('scaleY', value);\n        return this.setCoords();\n      },\n\n      /**\n       * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n       * @param {Number} value New width value\n       * @param {Boolean} absolute ignore viewport\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      scaleToWidth: function(value, absolute) {\n        // adjust to bounding rect factor so that rotated shapes would fit as well\n        var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n        return this.scale(value / this.width / boundingRectFactor);\n      },\n\n      /**\n       * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n       * @param {Number} value New height value\n       * @param {Boolean} absolute ignore viewport\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      scaleToHeight: function(value, absolute) {\n        // adjust to bounding rect factor so that rotated shapes would fit as well\n        var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n        return this.scale(value / this.height / boundingRectFactor);\n      },\n\n      /**\n       * Calculate and returns the .coords of an object.\n       * @return {Object} Object with tl, tr, br, bl ....\n       * @chainable\n       */\n      calcCoords: function(absolute) {\n        var rotateMatrix = this._calcRotateMatrix(),\n            translateMatrix = this._calcTranslateMatrix(),\n            startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\n            vpt = this.getViewportTransform(),\n            finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\n            dim = this._getTransformedDimensions(),\n            w = dim.x / 2, h = dim.y / 2,\n            tl = transformPoint({ x: -w, y: -h }, finalMatrix),\n            tr = transformPoint({ x: w, y: -h }, finalMatrix),\n            bl = transformPoint({ x: -w, y: h }, finalMatrix),\n            br = transformPoint({ x: w, y: h }, finalMatrix);\n        if (!absolute) {\n          var padding = this.padding, angle = degreesToRadians(this.angle),\n              cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\n              cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\n              cosPMinusSinP = cosP - sinP;\n          if (padding) {\n            tl.x -= cosPMinusSinP;\n            tl.y -= cosPSinP;\n            tr.x += cosPSinP;\n            tr.y -= cosPMinusSinP;\n            bl.x -= cosPSinP;\n            bl.y += cosPMinusSinP;\n            br.x += cosPMinusSinP;\n            br.y += cosPSinP;\n          }\n          var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\n              mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\n              mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\n              mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\n              mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\n        }\n\n        // if (!absolute) {\n        //   var canvas = this.canvas;\n        //   setTimeout(function() {\n        //     canvas.contextTop.clearRect(0, 0, 700, 700);\n        //     canvas.contextTop.fillStyle = 'green';\n        //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n        //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n        //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n        //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n        //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n        //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n        //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n        //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n        //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n        //   }, 50);\n        // }\n\n        var coords = {\n          // corners\n          tl: tl, tr: tr, br: br, bl: bl,\n        };\n        if (!absolute) {\n          // middle\n          coords.ml = ml;\n          coords.mt = mt;\n          coords.mr = mr;\n          coords.mb = mb;\n          // rotating point\n          coords.mtr = mtr;\n        }\n        return coords;\n      },\n\n      /**\n       * Sets corner position coordinates based on current angle, width and height.\n       * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\n       * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\n       * @param {Boolean} [skipAbsolute] skip calculation of aCoords, usefull in setViewportTransform\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      setCoords: function(ignoreZoom, skipAbsolute) {\n        this.oCoords = this.calcCoords(ignoreZoom);\n        if (!skipAbsolute) {\n          this.aCoords = this.calcCoords(true);\n        }\n\n        // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n        ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\n\n        return this;\n      },\n\n      /**\n       * calculate rotation matrix of an object\n       * @return {Array} rotation matrix for the object\n       */\n      _calcRotateMatrix: function() {\n        if (this.angle) {\n          var theta = degreesToRadians(this.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\n          return [cos, sin, -sin, cos, 0, 0];\n        }\n        return fabric.iMatrix.concat();\n      },\n\n      /**\n       * calculate the translation matrix for an object transform\n       * @return {Array} rotation matrix for the object\n       */\n      _calcTranslateMatrix: function() {\n        var center = this.getCenterPoint();\n        return [1, 0, 0, 1, center.x, center.y];\n      },\n\n      transformMatrixKey: function(skipGroup) {\n        var sep = '_', prefix = '';\n        if (!skipGroup && this.group) {\n          prefix = this.group.transformMatrixKey(skipGroup) + sep;\n        };\n        return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\n          sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\n          sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n      },\n\n      /**\n       * calculate trasform Matrix that represent current transformation from\n       * object properties.\n       * @param {Boolean} [skipGroup] return transformMatrix for object and not go upward with parents\n       * @return {Array} matrix Transform Matrix for the object\n       */\n      calcTransformMatrix: function(skipGroup) {\n        if (skipGroup) {\n          return this.calcOwnMatrix();\n        }\n        var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\n        if (cache.key === key) {\n          return cache.value;\n        }\n        var matrix = this.calcOwnMatrix();\n        if (this.group) {\n          matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\n        }\n        cache.key = key;\n        cache.value = matrix;\n        return matrix;\n      },\n\n      calcOwnMatrix: function() {\n        var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n        if (cache.key === key) {\n          return cache.value;\n        }\n        var matrix = this._calcTranslateMatrix(),\n            rotateMatrix,\n            dimensionMatrix = this._calcDimensionsTransformMatrix(this.skewX, this.skewY, true);\n        if (this.angle) {\n          rotateMatrix = this._calcRotateMatrix();\n          matrix = multiplyMatrices(matrix, rotateMatrix);\n        }\n        matrix = multiplyMatrices(matrix, dimensionMatrix);\n        cache.key = key;\n        cache.value = matrix;\n        return matrix;\n      },\n\n      _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\n        var skewMatrix,\n            scaleX = this.scaleX * (flipping && this.flipX ? -1 : 1),\n            scaleY = this.scaleY * (flipping && this.flipY ? -1 : 1),\n            scaleMatrix = [scaleX, 0, 0, scaleY, 0, 0];\n        if (skewX) {\n          skewMatrix = [1, 0, Math.tan(degreesToRadians(skewX)), 1];\n          scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n        }\n        if (skewY) {\n          skewMatrix = [1, Math.tan(degreesToRadians(skewY)), 0, 1];\n          scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n        }\n        return scaleMatrix;\n      },\n\n\n      /*\n       * Calculate object dimensions from its properties\n       * @private\n       * @return {Object} .x width dimension\n       * @return {Object} .y height dimension\n       */\n      _getNonTransformedDimensions: function() {\n        var strokeWidth = this.strokeWidth,\n            w = this.width + strokeWidth,\n            h = this.height + strokeWidth;\n        return { x: w, y: h };\n      },\n\n      /*\n       * Calculate object bounding boxdimensions from its properties scale, skew.\n       * @private\n       * @return {Object} .x width dimension\n       * @return {Object} .y height dimension\n       */\n      _getTransformedDimensions: function(skewX, skewY) {\n        if (typeof skewX === 'undefined') {\n          skewX = this.skewX;\n        }\n        if (typeof skewY === 'undefined') {\n          skewY = this.skewY;\n        }\n        var dimensions = this._getNonTransformedDimensions();\n        if (skewX === 0 && skewY === 0) {\n          return { x: dimensions.x * this.scaleX, y: dimensions.y * this.scaleY };\n        }\n        var dimX = dimensions.x / 2, dimY = dimensions.y / 2,\n            points = [\n              {\n                x: -dimX,\n                y: -dimY\n              },\n              {\n                x: dimX,\n                y: -dimY\n              },\n              {\n                x: -dimX,\n                y: dimY\n              },\n              {\n                x: dimX,\n                y: dimY\n              }],\n            i, transformMatrix = this._calcDimensionsTransformMatrix(skewX, skewY, false),\n            bbox;\n        for (i = 0; i < points.length; i++) {\n          points[i] = fabric.util.transformPoint(points[i], transformMatrix);\n        }\n        bbox = fabric.util.makeBoundingBoxFromPoints(points);\n        return { x: bbox.width, y: bbox.height };\n      },\n\n      /*\n       * Calculate object dimensions for controls. include padding and canvas zoom\n       * private\n       */\n      _calculateCurrentDimensions: function()  {\n        var vpt = this.getViewportTransform(),\n            dim = this._getTransformedDimensions(),\n            p = fabric.util.transformPoint(dim, vpt, true);\n\n        return p.scalarAdd(2 * this.padding);\n      },\n    });\n  })();\n\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Moves an object to the bottom of the stack of drawn objects\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    sendToBack: function() {\n      if (this.group) {\n        fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n      }\n      else {\n        this.canvas.sendToBack(this);\n      }\n      return this;\n    },\n\n    /**\n     * Moves an object to the top of the stack of drawn objects\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    bringToFront: function() {\n      if (this.group) {\n        fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n      }\n      else {\n        this.canvas.bringToFront(this);\n      }\n      return this;\n    },\n\n    /**\n     * Moves an object down in stack of drawn objects\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    sendBackwards: function(intersecting) {\n      if (this.group) {\n        fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n      }\n      else {\n        this.canvas.sendBackwards(this, intersecting);\n      }\n      return this;\n    },\n\n    /**\n     * Moves an object up in stack of drawn objects\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    bringForward: function(intersecting) {\n      if (this.group) {\n        fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n      }\n      else {\n        this.canvas.bringForward(this, intersecting);\n      }\n      return this;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {Number} index New position of object\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    moveTo: function(index) {\n      if (this.group && this.group.type !== 'activeSelection') {\n        fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n      }\n      else {\n        this.canvas.moveTo(this, index);\n      }\n      return this;\n    }\n  });\n\n\n  /* _TO_SVG_START_ */\n  (function() {\n    function getSvgColorString(prop, value) {\n      if (!value) {\n        return prop + ': none; ';\n      }\n      else if (value.toLive) {\n        return prop + ': url(#SVGID_' + value.id + '); ';\n      }\n      else {\n        var color = new fabric.Color(value),\n            str = prop + ': ' + color.toRgb() + '; ',\n            opacity = color.getAlpha();\n        if (opacity !== 1) {\n          //change the color in rgb + opacity\n          str += prop + '-opacity: ' + opacity.toString() + '; ';\n        }\n        return str;\n      }\n    }\n\n    var toFixed = fabric.util.toFixed;\n\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n      /**\n       * Returns styles-string for svg-export\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\n       * @return {String}\n       */\n      getSvgStyles: function(skipShadow) {\n\n        var fillRule = this.fillRule,\n            strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n            strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n            strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n            strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n            strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n            opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n            visibility = this.visible ? '' : ' visibility: hidden;',\n            filter = skipShadow ? '' : this.getSvgFilter(),\n            fill = getSvgColorString('fill', this.fill),\n            stroke = getSvgColorString('stroke', this.stroke);\n\n        return [\n          stroke,\n          'stroke-width: ', strokeWidth, '; ',\n          'stroke-dasharray: ', strokeDashArray, '; ',\n          'stroke-linecap: ', strokeLineCap, '; ',\n          'stroke-linejoin: ', strokeLineJoin, '; ',\n          'stroke-miterlimit: ', strokeMiterLimit, '; ',\n          fill,\n          'fill-rule: ', fillRule, '; ',\n          'opacity: ', opacity, ';',\n          filter,\n          visibility\n        ].join('');\n      },\n\n      /**\n       * Returns styles-string for svg-export\n       * @param {Object} style the object from which to retrieve style properties\n       * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n       * @return {String}\n       */\n      getSvgSpanStyles: function(style, useWhiteSpace) {\n        var term = '; ';\n        var fontFamily = style.fontFamily ?\n          'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\n            '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\n        var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\n            fontFamily = fontFamily,\n            fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\n            fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\n            fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\n            fill = style.fill ? getSvgColorString('fill', style.fill) : '',\n            stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\n            textDecoration = this.getSvgTextDecoration(style),\n            deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\n        if (textDecoration) {\n          textDecoration = 'text-decoration: ' + textDecoration + term;\n        }\n\n        return [\n          stroke,\n          strokeWidth,\n          fontFamily,\n          fontSize,\n          fontStyle,\n          fontWeight,\n          textDecoration,\n          fill,\n          deltaY,\n          useWhiteSpace ? 'white-space: pre; ' : ''\n        ].join('');\n      },\n\n      /**\n       * Returns text-decoration property for svg-export\n       * @param {Object} style the object from which to retrieve style properties\n       * @return {String}\n       */\n      getSvgTextDecoration: function(style) {\n        if ('overline' in style || 'underline' in style || 'linethrough' in style) {\n          return (style.overline ? 'overline ' : '') +\n            (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\n        }\n        return '';\n      },\n\n      /**\n       * Returns filter for svg shadow\n       * @return {String}\n       */\n      getSvgFilter: function() {\n        return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n      },\n\n      /**\n       * Returns id attribute for svg output\n       * @return {String}\n       */\n      getSvgId: function() {\n        return this.id ? 'id=\"' + this.id + '\" ' : '';\n      },\n\n      /**\n       * Returns transform-string for svg-export\n       * @return {String}\n       */\n      getSvgTransform: function() {\n        var angle = this.angle,\n            skewX = (this.skewX % 360),\n            skewY = (this.skewY % 360),\n            center = this.getCenterPoint(),\n\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n            translatePart = 'translate(' +\n                              toFixed(center.x, NUM_FRACTION_DIGITS) +\n                              ' ' +\n                              toFixed(center.y, NUM_FRACTION_DIGITS) +\n                            ')',\n\n            anglePart = angle !== 0\n              ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')\n              : '',\n\n            scalePart = (this.scaleX === 1 && this.scaleY === 1)\n              ? '' :\n              (' scale(' +\n                toFixed(this.scaleX, NUM_FRACTION_DIGITS) +\n                ' ' +\n                toFixed(this.scaleY, NUM_FRACTION_DIGITS) +\n              ')'),\n\n            skewXPart = skewX !== 0 ? ' skewX(' + toFixed(skewX, NUM_FRACTION_DIGITS) + ')' : '',\n\n            skewYPart = skewY !== 0 ? ' skewY(' + toFixed(skewY, NUM_FRACTION_DIGITS) + ')' : '',\n\n            flipXPart = this.flipX ? ' matrix(-1 0 0 1 0 0) ' : '',\n\n            flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 0)' : '';\n\n        return [\n          translatePart, anglePart, scalePart, flipXPart, flipYPart, skewXPart, skewYPart\n        ].join('');\n      },\n\n      /**\n       * Returns transform-string for svg-export from the transform matrix of single elements\n       * @return {String}\n       */\n      getSvgTransformMatrix: function() {\n        return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';\n      },\n\n      _setSVGBg: function(textBgRects) {\n        if (this.backgroundColor) {\n          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n          textBgRects.push(\n            '\\t\\t<rect ',\n            this._getFillAttributes(this.backgroundColor),\n            ' x=\"',\n            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n            '\" y=\"',\n            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n            '\" width=\"',\n            toFixed(this.width, NUM_FRACTION_DIGITS),\n            '\" height=\"',\n            toFixed(this.height, NUM_FRACTION_DIGITS),\n            '\"></rect>\\n');\n        }\n      },\n\n      /**\n       * @private\n       */\n      _createBaseSVGMarkup: function() {\n        var markup = [];\n\n        if (this.fill && this.fill.toLive) {\n          markup.push(this.fill.toSVG(this, false));\n        }\n        if (this.stroke && this.stroke.toLive) {\n          markup.push(this.stroke.toSVG(this, false));\n        }\n        if (this.shadow) {\n          markup.push(this.shadow.toSVG(this));\n        }\n        return markup;\n      },\n\n      addPaintOrder: function() {\n        return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\n      }\n    });\n  })();\n  /* _TO_SVG_END_ */\n\n\n  (function() {\n\n    var extend = fabric.util.object.extend,\n        originalSet = 'stateProperties';\n\n    /*\n      Depends on `stateProperties`\n    */\n    function saveProps(origin, destination, props) {\n      var tmpObj = { }, deep = true;\n      props.forEach(function(prop) {\n        tmpObj[prop] = origin[prop];\n      });\n      extend(origin[destination], tmpObj, deep);\n    }\n\n    function _isEqual(origValue, currentValue, firstPass) {\n      if (origValue === currentValue) {\n        // if the objects are identical, return\n        return true;\n      }\n      else if (Array.isArray(origValue)) {\n        if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n          return false;\n        }\n        for (var i = 0, len = origValue.length; i < len; i++) {\n          if (!_isEqual(origValue[i], currentValue[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n      else if (origValue && typeof origValue === 'object') {\n        var keys = Object.keys(origValue), key;\n        if (!currentValue ||\n            typeof currentValue !== 'object' ||\n            (!firstPass && keys.length !== Object.keys(currentValue).length)\n        ) {\n          return false;\n        }\n        for (var i = 0, len = keys.length; i < len; i++) {\n          key = keys[i];\n          if (!_isEqual(origValue[key], currentValue[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n\n\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n      /**\n       * Returns true if object state (one of its state properties) was changed\n       * @param {String} [propertySet] optional name for the set of property we want to save\n       * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n       */\n      hasStateChanged: function(propertySet) {\n        propertySet = propertySet || originalSet;\n        var dashedPropertySet = '_' + propertySet;\n        if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n          return true;\n        }\n        return !_isEqual(this[dashedPropertySet], this, true);\n      },\n\n      /**\n       * Saves state of an object\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n       * @return {fabric.Object} thisArg\n       */\n      saveState: function(options) {\n        var propertySet = options && options.propertySet || originalSet,\n            destination = '_' + propertySet;\n        if (!this[destination]) {\n          return this.setupState(options);\n        }\n        saveProps(this, destination, this[propertySet]);\n        if (options && options.stateProperties) {\n          saveProps(this, destination, options.stateProperties);\n        }\n        return this;\n      },\n\n      /**\n       * Setups state of an object\n       * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n       * @return {fabric.Object} thisArg\n       */\n      setupState: function(options) {\n        options = options || { };\n        var propertySet = options.propertySet || originalSet;\n        options.propertySet = propertySet;\n        this['_' + propertySet] = { };\n        this.saveState(options);\n        return this;\n      }\n    });\n  })();\n\n\n  (function() {\n\n    var degreesToRadians = fabric.util.degreesToRadians;\n\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n      /**\n       * The object interactivity controls.\n       * @private\n       */\n      _controlsVisibility: null,\n\n      /**\n       * Determines which corner has been clicked\n       * @private\n       * @param {Object} pointer The pointer indicating the mouse position\n       * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n       */\n      _findTargetCorner: function(pointer) {\n        // objects in group, anykind, are not self modificable,\n        // must not return an hovered corner.\n        if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\n          return false;\n        }\n\n        var ex = pointer.x,\n            ey = pointer.y,\n            xPoints,\n            lines;\n        this.__corner = 0;\n        for (var i in this.oCoords) {\n\n          if (!this.isControlVisible(i)) {\n            continue;\n          }\n\n          if (i === 'mtr' && !this.hasRotatingPoint) {\n            continue;\n          }\n\n          if (this.get('lockUniScaling') &&\n             (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n            continue;\n          }\n\n          lines = this._getImageLines(this.oCoords[i].corner);\n\n          // debugging\n\n          // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n          // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\n          // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n          // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\n          // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n          // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\n          // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n          // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n          xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n          if (xPoints !== 0 && xPoints % 2 === 1) {\n            this.__corner = i;\n            return i;\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Sets the coordinates of the draggable boxes in the corners of\n       * the image used to scale/rotate it.\n       * @private\n       */\n      _setCornerCoords: function() {\n        var coords = this.oCoords,\n            newTheta = degreesToRadians(45 - this.angle),\n            /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n            /* 0.707106 stands for sqrt(2)/2 */\n            cornerHypotenuse = this.cornerSize * 0.707106,\n            cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\n            sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\n            x, y;\n\n        for (var point in coords) {\n          x = coords[point].x;\n          y = coords[point].y;\n          coords[point].corner = {\n            tl: {\n              x: x - sinHalfOffset,\n              y: y - cosHalfOffset\n            },\n            tr: {\n              x: x + cosHalfOffset,\n              y: y - sinHalfOffset\n            },\n            bl: {\n              x: x - cosHalfOffset,\n              y: y + sinHalfOffset\n            },\n            br: {\n              x: x + sinHalfOffset,\n              y: y + cosHalfOffset\n            }\n          };\n        }\n      },\n\n      /**\n       * Draws a colored layer behind the object, inside its selection borders.\n       * Requires public options: padding, selectionBackgroundColor\n       * this function is called when the context is transformed\n       * has checks to be skipped when the object is on a staticCanvas\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      drawSelectionBackground: function(ctx) {\n        if (!this.selectionBackgroundColor ||\n          (this.canvas && !this.canvas.interactive) ||\n          (this.canvas && this.canvas._activeObject !== this)\n        ) {\n          return this;\n        }\n        ctx.save();\n        var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\n            vpt = this.canvas.viewportTransform;\n        ctx.translate(center.x, center.y);\n        ctx.scale(1 / vpt[0], 1 / vpt[3]);\n        ctx.rotate(degreesToRadians(this.angle));\n        ctx.fillStyle = this.selectionBackgroundColor;\n        ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n        ctx.restore();\n        return this;\n      },\n\n      /**\n       * Draws borders of an object's bounding box.\n       * Requires public properties: width, height\n       * Requires public options: padding, borderColor\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\n       * @param {Object} styleOverride object to override the object style\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      drawBorders: function(ctx, styleOverride) {\n        styleOverride = styleOverride || {};\n        var wh = this._calculateCurrentDimensions(),\n            strokeWidth = 1 / this.borderScaleFactor,\n            width = wh.x + strokeWidth,\n            height = wh.y + strokeWidth,\n            drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n            hasControls = typeof styleOverride.hasControls !== 'undefined' ?\n              styleOverride.hasControls : this.hasControls,\n            rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\n              styleOverride.rotatingPointOffset : this.rotatingPointOffset;\n\n        ctx.save();\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n\n        ctx.strokeRect(\n          -width / 2,\n          -height / 2,\n          width,\n          height\n        );\n\n        if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\n\n          var rotateHeight = -height / 2;\n\n          ctx.beginPath();\n          ctx.moveTo(0, rotateHeight);\n          ctx.lineTo(0, rotateHeight - rotatingPointOffset);\n          ctx.stroke();\n        }\n\n        ctx.restore();\n        return this;\n      },\n\n      /**\n       * Draws borders of an object's bounding box when it is inside a group.\n       * Requires public properties: width, height\n       * Requires public options: padding, borderColor\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\n       * @param {object} options object representing current object parameters\n       * @param {Object} styleOverride object to override the object style\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      drawBordersInGroup: function(ctx, options, styleOverride) {\n        styleOverride = styleOverride || {};\n        var p = this._getNonTransformedDimensions(),\n            matrix = fabric.util.customTransformMatrix(options.scaleX, options.scaleY, options.skewX),\n            wh = fabric.util.transformPoint(p, matrix),\n            strokeWidth = 1 / this.borderScaleFactor,\n            width = wh.x + strokeWidth,\n            height = wh.y + strokeWidth;\n\n        ctx.save();\n        this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n        ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n\n        ctx.strokeRect(\n          -width / 2,\n          -height / 2,\n          width,\n          height\n        );\n\n        ctx.restore();\n        return this;\n      },\n\n      /**\n       * Draws corners of an object's bounding box.\n       * Requires public properties: width, height\n       * Requires public options: cornerSize, padding\n       * @param {CanvasRenderingContext2D} ctx Context to draw on\n       * @param {Object} styleOverride object to override the object style\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      drawControls: function(ctx, styleOverride) {\n        styleOverride = styleOverride || {};\n        var wh = this._calculateCurrentDimensions(),\n            width = wh.x,\n            height = wh.y,\n            scaleOffset = styleOverride.cornerSize || this.cornerSize,\n            left = -(width + scaleOffset) / 2,\n            top = -(height + scaleOffset) / 2,\n            transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\n              styleOverride.transparentCorners : this.transparentCorners,\n            hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n              styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n            methodName = transparentCorners ? 'stroke' : 'fill';\n\n        ctx.save();\n        ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n        if (!this.transparentCorners) {\n          ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n        }\n        this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\n\n        // top-left\n        this._drawControl('tl', ctx, methodName,\n          left,\n          top, styleOverride);\n\n        // top-right\n        this._drawControl('tr', ctx, methodName,\n          left + width,\n          top, styleOverride);\n\n        // bottom-left\n        this._drawControl('bl', ctx, methodName,\n          left,\n          top + height, styleOverride);\n\n        // bottom-right\n        this._drawControl('br', ctx, methodName,\n          left + width,\n          top + height, styleOverride);\n\n        if (!this.get('lockUniScaling')) {\n\n          // middle-top\n          this._drawControl('mt', ctx, methodName,\n            left + width / 2,\n            top, styleOverride);\n\n          // middle-bottom\n          this._drawControl('mb', ctx, methodName,\n            left + width / 2,\n            top + height, styleOverride);\n\n          // middle-right\n          this._drawControl('mr', ctx, methodName,\n            left + width,\n            top + height / 2, styleOverride);\n\n          // middle-left\n          this._drawControl('ml', ctx, methodName,\n            left,\n            top + height / 2, styleOverride);\n        }\n\n        // middle-top-rotate\n        if (hasRotatingPoint) {\n          this._drawControl('mtr', ctx, methodName,\n            left + width / 2,\n            top - this.rotatingPointOffset, styleOverride);\n        }\n\n        ctx.restore();\n\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\n        styleOverride = styleOverride || {};\n        if (!this.isControlVisible(control)) {\n          return;\n        }\n        var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\n        switch (styleOverride.cornerStyle || this.cornerStyle) {\n          case 'circle':\n            ctx.beginPath();\n            ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\n            ctx[methodName]();\n            if (stroke) {\n              ctx.stroke();\n            }\n            break;\n          default:\n            this.transparentCorners || ctx.clearRect(left, top, size, size);\n            ctx[methodName + 'Rect'](left, top, size, size);\n            if (stroke) {\n              ctx.strokeRect(left, top, size, size);\n            }\n        }\n      },\n\n      /**\n       * Returns true if the specified control is visible, false otherwise.\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n       * @returns {Boolean} true if the specified control is visible, false otherwise\n       */\n      isControlVisible: function(controlName) {\n        return this._getControlsVisibility()[controlName];\n      },\n\n      /**\n       * Sets the visibility of the specified control.\n       * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n       * @param {Boolean} visible true to set the specified control visible, false otherwise\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      setControlVisible: function(controlName, visible) {\n        this._getControlsVisibility()[controlName] = visible;\n        return this;\n      },\n\n      /**\n       * Sets the visibility state of object controls.\n       * @param {Object} [options] Options object\n       * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n       * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n       * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n       * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n       * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n       * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n       * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n       * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n       * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      setControlsVisibility: function(options) {\n        options || (options = { });\n\n        for (var p in options) {\n          this.setControlVisible(p, options[p]);\n        }\n        return this;\n      },\n\n      /**\n       * Returns the instance of the control visibility set for this object.\n       * @private\n       * @returns {Object}\n       */\n      _getControlsVisibility: function() {\n        if (!this._controlsVisibility) {\n          this._controlsVisibility = {\n            tl: true,\n            tr: true,\n            br: true,\n            bl: true,\n            ml: true,\n            mt: true,\n            mr: true,\n            mb: true,\n            mtr: true\n          };\n        }\n        return this._controlsVisibility;\n      },\n\n      /**\n       * This callback function is called every time _discardActiveObject or _setActiveObject\n       * try to to deselect this object. If the function returns true, the process is cancelled\n       * @param {Object} [options] options sent from the upper functions\n       * @param {Event} [options.e] event if the process is generated by an event\n       */\n      onDeselect: function() {\n        // implemented by sub-classes, as needed.\n      },\n\n\n      /**\n       * This callback function is called every time _discardActiveObject or _setActiveObject\n       * try to to select this object. If the function returns true, the process is cancelled\n       * @param {Object} [options] options sent from the upper functions\n       * @param {Event} [options.e] event if the process is generated by an event\n       */\n      onSelect: function() {\n        // implemented by sub-classes, as needed.\n      }\n    });\n  })();\n\n\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Animation duration (in ms) for fx* methods\n     * @type Number\n     * @default\n     */\n    FX_DURATION: 500,\n\n    /**\n     * Centers object horizontally with animation.\n     * @param {fabric.Object} object Object to center\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n     * @param {Function} [callbacks.onComplete] Invoked on completion\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    fxCenterObjectH: function (object, callbacks) {\n      callbacks = callbacks || { };\n\n      var empty = function() { },\n          onComplete = callbacks.onComplete || empty,\n          onChange = callbacks.onChange || empty,\n          _this = this;\n\n      fabric.util.animate({\n        startValue: object.left,\n        endValue: this.getCenter().left,\n        duration: this.FX_DURATION,\n        onChange: function(value) {\n          object.set('left', value);\n          _this.requestRenderAll();\n          onChange();\n        },\n        onComplete: function() {\n          object.setCoords();\n          onComplete();\n        }\n      });\n\n      return this;\n    },\n\n    /**\n     * Centers object vertically with animation.\n     * @param {fabric.Object} object Object to center\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n     * @param {Function} [callbacks.onComplete] Invoked on completion\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    fxCenterObjectV: function (object, callbacks) {\n      callbacks = callbacks || { };\n\n      var empty = function() { },\n          onComplete = callbacks.onComplete || empty,\n          onChange = callbacks.onChange || empty,\n          _this = this;\n\n      fabric.util.animate({\n        startValue: object.top,\n        endValue: this.getCenter().top,\n        duration: this.FX_DURATION,\n        onChange: function(value) {\n          object.set('top', value);\n          _this.requestRenderAll();\n          onChange();\n        },\n        onComplete: function() {\n          object.setCoords();\n          onComplete();\n        }\n      });\n\n      return this;\n    },\n\n    /**\n     * Same as `fabric.Canvas#remove` but animated\n     * @param {fabric.Object} object Object to remove\n     * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n     * @param {Function} [callbacks.onComplete] Invoked on completion\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    fxRemove: function (object, callbacks) {\n      callbacks = callbacks || { };\n\n      var empty = function() { },\n          onComplete = callbacks.onComplete || empty,\n          onChange = callbacks.onChange || empty,\n          _this = this;\n\n      fabric.util.animate({\n        startValue: object.opacity,\n        endValue: 0,\n        duration: this.FX_DURATION,\n        onChange: function(value) {\n          object.set('opacity', value);\n          _this.requestRenderAll();\n          onChange();\n        },\n        onComplete: function () {\n          _this.remove(object);\n          onComplete();\n        }\n      });\n\n      return this;\n    }\n  });\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n     * Animates object's properties\n     * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n     * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n     * @return {fabric.Object} thisArg\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n     * @chainable\n     *\n     * As object — multiple properties\n     *\n     * object.animate({ left: ..., top: ... });\n     * object.animate({ left: ..., top: ... }, { duration: ... });\n     *\n     * As string — one property\n     *\n     * object.animate('left', ...);\n     * object.animate('left', { duration: ... });\n     *\n     */\n    animate: function() {\n      if (arguments[0] && typeof arguments[0] === 'object') {\n        var propsToAnimate = [], prop, skipCallbacks;\n        for (prop in arguments[0]) {\n          propsToAnimate.push(prop);\n        }\n        for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n          prop = propsToAnimate[i];\n          skipCallbacks = i !== len - 1;\n          this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n        }\n      }\n      else {\n        this._animate.apply(this, arguments);\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to animate\n     * @param {String} to Value to animate to\n     * @param {Object} [options] Options object\n     * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n     */\n    _animate: function(property, to, options, skipCallbacks) {\n      var _this = this, propPair;\n\n      to = to.toString();\n\n      if (!options) {\n        options = { };\n      }\n      else {\n        options = fabric.util.object.clone(options);\n      }\n\n      if (~property.indexOf('.')) {\n        propPair = property.split('.');\n      }\n\n      var currentValue = propPair\n        ? this.get(propPair[0])[propPair[1]]\n        : this.get(property);\n\n      if (!('from' in options)) {\n        options.from = currentValue;\n      }\n\n      if (~to.indexOf('=')) {\n        to = currentValue + parseFloat(to.replace('=', ''));\n      }\n      else {\n        to = parseFloat(to);\n      }\n\n      fabric.util.animate({\n        startValue: options.from,\n        endValue: to,\n        byValue: options.by,\n        easing: options.easing,\n        duration: options.duration,\n        abort: options.abort && function() {\n          return options.abort.call(_this);\n        },\n        onChange: function(value, valueProgress, timeProgress) {\n          if (propPair) {\n            _this[propPair[0]][propPair[1]] = value;\n          }\n          else {\n            _this.set(property, value);\n          }\n          if (skipCallbacks) {\n            return;\n          }\n          options.onChange && options.onChange(value, valueProgress, timeProgress);\n        },\n        onComplete: function(value, valueProgress, timeProgress) {\n          if (skipCallbacks) {\n            return;\n          }\n\n          _this.setCoords();\n          options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n        }\n      });\n    }\n  });\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        clone = fabric.util.object.clone,\n        coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n        supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n    if (fabric.Line) {\n      fabric.warn('fabric.Line is already defined');\n      return;\n    }\n\n    /**\n     * Line class\n     * @class fabric.Line\n     * @extends fabric.Object\n     * @see {@link fabric.Line#initialize} for constructor definition\n     */\n    fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'line',\n\n      /**\n       * x value or first line edge\n       * @type Number\n       * @default\n       */\n      x1: 0,\n\n      /**\n       * y value or first line edge\n       * @type Number\n       * @default\n       */\n      y1: 0,\n\n      /**\n       * x value or second line edge\n       * @type Number\n       * @default\n       */\n      x2: 0,\n\n      /**\n       * y value or second line edge\n       * @type Number\n       * @default\n       */\n      y2: 0,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\n\n      /**\n       * Constructor\n       * @param {Array} [points] Array of points\n       * @param {Object} [options] Options object\n       * @return {fabric.Line} thisArg\n       */\n      initialize: function(points, options) {\n        if (!points) {\n          points = [0, 0, 0, 0];\n        }\n\n        this.callSuper('initialize', options);\n\n        this.set('x1', points[0]);\n        this.set('y1', points[1]);\n        this.set('x2', points[2]);\n        this.set('y2', points[3]);\n\n        this._setWidthHeight(options);\n      },\n\n      /**\n       * @private\n       * @param {Object} [options] Options\n       */\n      _setWidthHeight: function(options) {\n        options || (options = { });\n\n        this.width = Math.abs(this.x2 - this.x1);\n        this.height = Math.abs(this.y2 - this.y1);\n\n        this.left = 'left' in options\n          ? options.left\n          : this._getLeftToOriginX();\n\n        this.top = 'top' in options\n          ? options.top\n          : this._getTopToOriginY();\n      },\n\n      /**\n       * @private\n       * @param {String} key\n       * @param {*} value\n       */\n      _set: function(key, value) {\n        this.callSuper('_set', key, value);\n        if (typeof coordProps[key] !== 'undefined') {\n          this._setWidthHeight();\n        }\n        return this;\n      },\n\n      /**\n       * @private\n       * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n       */\n      _getLeftToOriginX: makeEdgeToOriginGetter(\n        { // property names\n          origin: 'originX',\n          axis1: 'x1',\n          axis2: 'x2',\n          dimension: 'width'\n        },\n        { // possible values of origin\n          nearest: 'left',\n          center: 'center',\n          farthest: 'right'\n        }\n      ),\n\n      /**\n       * @private\n       * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n       */\n      _getTopToOriginY: makeEdgeToOriginGetter(\n        { // property names\n          origin: 'originY',\n          axis1: 'y1',\n          axis2: 'y2',\n          dimension: 'height'\n        },\n        { // possible values of origin\n          nearest: 'top',\n          center: 'center',\n          farthest: 'bottom'\n        }\n      ),\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        ctx.beginPath();\n\n        if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n          // move from center (of virtual box) to its left/top corner\n          // we can't assume x1, y1 is top left and x2, y2 is bottom right\n          var p = this.calcLinePoints();\n          ctx.moveTo(p.x1, p.y1);\n          ctx.lineTo(p.x2, p.y2);\n        }\n\n        ctx.lineWidth = this.strokeWidth;\n\n        // TODO: test this\n        // make sure setting \"fill\" changes color of a line\n        // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n        var origStrokeStyle = ctx.strokeStyle;\n        ctx.strokeStyle = this.stroke || ctx.fillStyle;\n        this.stroke && this._renderStroke(ctx);\n        ctx.strokeStyle = origStrokeStyle;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        var p = this.calcLinePoints();\n\n        ctx.beginPath();\n        fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n        ctx.closePath();\n      },\n\n      /**\n       * This function is an helper for svg import. it returns the center of the object in the svg\n       * untransformed coordinates\n       * @private\n       * @return {Object} center point from element coordinates\n       */\n      _findCenterFromElement: function() {\n        return {\n          x: (this.x1 + this.x2) / 2,\n          y: (this.y1 + this.y2) / 2,\n        };\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @methd toObject\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n      },\n\n      /*\n       * Calculate object dimensions from its properties\n       * @private\n       */\n      _getNonTransformedDimensions: function() {\n        var dim = this.callSuper('_getNonTransformedDimensions');\n        if (this.strokeLineCap === 'butt') {\n          if (this.width === 0) {\n            dim.y -= this.strokeWidth;\n          }\n          if (this.height === 0) {\n            dim.x -= this.strokeWidth;\n          }\n        }\n        return dim;\n      },\n\n      /**\n       * Recalculates line points given width and height\n       * @private\n       */\n      calcLinePoints: function() {\n        var xMult = this.x1 <= this.x2 ? -1 : 1,\n            yMult = this.y1 <= this.y2 ? -1 : 1,\n            x1 = (xMult * this.width * 0.5),\n            y1 = (yMult * this.height * 0.5),\n            x2 = (xMult * this.width * -0.5),\n            y2 = (yMult * this.height * -0.5);\n\n        return {\n          x1: x1,\n          x2: x2,\n          y1: y1,\n          y2: y2\n        };\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(),\n            p = this.calcLinePoints();\n        markup.push(\n          '<line ', this.getSvgId(),\n          'x1=\"', p.x1,\n          '\" y1=\"', p.y1,\n          '\" x2=\"', p.x2,\n          '\" y2=\"', p.y2,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n          '\"/>\\n'\n        );\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n     * @static\n     * @memberOf fabric.Line\n     * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n     */\n    fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\n    /**\n     * Returns fabric.Line instance from an SVG element\n     * @static\n     * @memberOf fabric.Line\n     * @param {SVGElement} element Element to parse\n     * @param {Object} [options] Options object\n     * @param {Function} [callback] callback function invoked after parsing\n     */\n    fabric.Line.fromElement = function(element, callback, options) {\n      options = options || { };\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n          points = [\n            parsedAttributes.x1 || 0,\n            parsedAttributes.y1 || 0,\n            parsedAttributes.x2 || 0,\n            parsedAttributes.y2 || 0\n          ];\n      callback(new fabric.Line(points, extend(parsedAttributes, options)));\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns fabric.Line instance from an object representation\n     * @static\n     * @memberOf fabric.Line\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] invoked with new instance as first argument\n     */\n    fabric.Line.fromObject = function(object, callback) {\n      function _callback(instance) {\n        delete instance.points;\n        callback && callback(instance);\n      };\n      var options = clone(object, true);\n      options.points = [object.x1, object.y1, object.x2, object.y2];\n      fabric.Object._fromObject('Line', options, _callback, 'points');\n    };\n\n    /**\n     * Produces a function that calculates distance from canvas edge to Line origin.\n     */\n    function makeEdgeToOriginGetter(propertyNames, originValues) {\n      var origin = propertyNames.origin,\n          axis1 = propertyNames.axis1,\n          axis2 = propertyNames.axis2,\n          dimension = propertyNames.dimension,\n          nearest = originValues.nearest,\n          center = originValues.center,\n          farthest = originValues.farthest;\n\n      return function() {\n        switch (this.get(origin)) {\n          case nearest:\n            return Math.min(this.get(axis1), this.get(axis2));\n          case center:\n            return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n          case farthest:\n            return Math.max(this.get(axis1), this.get(axis2));\n        }\n      };\n\n    }\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        pi = Math.PI;\n\n    if (fabric.Circle) {\n      fabric.warn('fabric.Circle is already defined.');\n      return;\n    }\n\n    /**\n     * Circle class\n     * @class fabric.Circle\n     * @extends fabric.Object\n     * @see {@link fabric.Circle#initialize} for constructor definition\n     */\n    fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'circle',\n\n      /**\n       * Radius of this circle\n       * @type Number\n       * @default\n       */\n      radius: 0,\n\n      /**\n       * Start angle of the circle, moving clockwise\n       * deprectated type, this should be in degree, this was an oversight.\n       * probably will change to degrees in next major version\n       * @type Number\n       * @default 0\n       */\n      startAngle: 0,\n\n      /**\n       * End angle of the circle\n       * deprectated type, this should be in degree, this was an oversight.\n       * probably will change to degrees in next major version\n       * @type Number\n       * @default 2Pi\n       */\n      endAngle: pi * 2,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\n\n      /**\n       * @private\n       * @param {String} key\n       * @param {*} value\n       * @return {fabric.Circle} thisArg\n       */\n      _set: function(key, value) {\n        this.callSuper('_set', key, value);\n\n        if (key === 'radius') {\n          this.setRadius(value);\n        }\n\n        return this;\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(), x = 0, y = 0,\n            angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\n        if (angle === 0) {\n          markup.push(\n            '<circle ', this.getSvgId(),\n            'cx=\"' + x + '\" cy=\"' + y + '\" ',\n            'r=\"', this.radius,\n            '\" style=\"', this.getSvgStyles(),\n            '\" transform=\"', this.getSvgTransform(),\n            ' ', this.getSvgTransformMatrix(), '\"',\n            this.addPaintOrder(),\n            '/>\\n'\n          );\n        }\n        else {\n          var startX = fabric.util.cos(this.startAngle) * this.radius,\n              startY = fabric.util.sin(this.startAngle) * this.radius,\n              endX = fabric.util.cos(this.endAngle) * this.radius,\n              endY = fabric.util.sin(this.endAngle) * this.radius,\n              largeFlag = angle > pi ? '1' : '0';\n\n          markup.push(\n            '<path d=\"M ' + startX + ' ' + startY,\n            ' A ' + this.radius + ' ' + this.radius,\n            ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\n            '\" style=\"', this.getSvgStyles(),\n            '\" transform=\"', this.getSvgTransform(),\n            ' ', this.getSvgTransformMatrix(), '\"',\n            this.addPaintOrder(),\n            '/>\\n'\n          );\n        }\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx context to render on\n       */\n      _render: function(ctx) {\n        ctx.beginPath();\n        ctx.arc(\n          0,\n          0,\n          this.radius,\n          this.startAngle,\n          this.endAngle, false);\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * Returns horizontal radius of an object (according to how an object is scaled)\n       * @return {Number}\n       */\n      getRadiusX: function() {\n        return this.get('radius') * this.get('scaleX');\n      },\n\n      /**\n       * Returns vertical radius of an object (according to how an object is scaled)\n       * @return {Number}\n       */\n      getRadiusY: function() {\n        return this.get('radius') * this.get('scaleY');\n      },\n\n      /**\n       * Sets radius of an object (and updates width accordingly)\n       * @return {fabric.Circle} thisArg\n       */\n      setRadius: function(value) {\n        this.radius = value;\n        return this.set('width', value * 2).set('height', value * 2);\n      },\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n     * @static\n     * @memberOf fabric.Circle\n     * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n     */\n    fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\n    /**\n     * Returns {@link fabric.Circle} instance from an SVG element\n     * @static\n     * @memberOf fabric.Circle\n     * @param {SVGElement} element Element to parse\n     * @param {Function} [callback] Options callback invoked after parsing is finished\n     * @param {Object} [options] Options object\n     * @throws {Error} If value of `r` attribute is missing or invalid\n     */\n    fabric.Circle.fromElement = function(element, callback) {\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\n      if (!isValidRadius(parsedAttributes)) {\n        throw new Error('value of `r` attribute is required and can not be negative');\n      }\n\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\n      callback(new fabric.Circle(parsedAttributes));\n    };\n\n    /**\n     * @private\n     */\n    function isValidRadius(attributes) {\n      return (('radius' in attributes) && (attributes.radius >= 0));\n    }\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Circle} instance from an object representation\n     * @static\n     * @memberOf fabric.Circle\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] invoked with new instance as first argument\n     * @return {Object} Instance of fabric.Circle\n     */\n    fabric.Circle.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Circle', object, callback);\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    //var fabric = global.fabric || (global.fabric = { });\n\n    if (fabric.Triangle) {\n      fabric.warn('fabric.Triangle is already defined');\n      return;\n    }\n\n    /**\n     * Triangle class\n     * @class fabric.Triangle\n     * @extends fabric.Object\n     * @return {fabric.Triangle} thisArg\n     * @see {@link fabric.Triangle#initialize} for constructor definition\n     */\n    fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'triangle',\n\n      /**\n       * Width is set to 100 to compensate the old initialize code that was setting it to 100\n       * @type Number\n       * @default\n       */\n      width: 100,\n\n      /**\n       * Height is set to 100 to compensate the old initialize code that was setting it to 100\n       * @type Number\n       * @default\n       */\n      height: 100,\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        var widthBy2 = this.width / 2,\n            heightBy2 = this.height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(-widthBy2, heightBy2);\n        ctx.lineTo(0, -heightBy2);\n        ctx.lineTo(widthBy2, heightBy2);\n        ctx.closePath();\n\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        var widthBy2 = this.width / 2,\n            heightBy2 = this.height / 2;\n\n        ctx.beginPath();\n        fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n        ctx.closePath();\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(),\n            widthBy2 = this.width / 2,\n            heightBy2 = this.height / 2,\n            points = [\n              -widthBy2 + ' ' + heightBy2,\n              '0 ' + -heightBy2,\n              widthBy2 + ' ' + heightBy2\n            ]\n              .join(',');\n\n        markup.push(\n          '<polygon ', this.getSvgId(),\n          'points=\"', points,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(), '\"',\n          this.addPaintOrder(),\n          '/>'\n        );\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n    });\n\n    /**\n     * Returns {@link fabric.Triangle} instance from an object representation\n     * @static\n     * @memberOf fabric.Triangle\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] invoked with new instance as first argument\n     */\n    fabric.Triangle.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Triangle', object, callback);\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        piBy2   = Math.PI * 2;\n\n    if (fabric.Ellipse) {\n      fabric.warn('fabric.Ellipse is already defined.');\n      return;\n    }\n\n    /**\n     * Ellipse class\n     * @class fabric.Ellipse\n     * @extends fabric.Object\n     * @return {fabric.Ellipse} thisArg\n     * @see {@link fabric.Ellipse#initialize} for constructor definition\n     */\n    fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'ellipse',\n\n      /**\n       * Horizontal radius\n       * @type Number\n       * @default\n       */\n      rx:   0,\n\n      /**\n       * Vertical radius\n       * @type Number\n       * @default\n       */\n      ry:   0,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       * @return {fabric.Ellipse} thisArg\n       */\n      initialize: function(options) {\n        this.callSuper('initialize', options);\n        this.set('rx', options && options.rx || 0);\n        this.set('ry', options && options.ry || 0);\n      },\n\n      /**\n       * @private\n       * @param {String} key\n       * @param {*} value\n       * @return {fabric.Ellipse} thisArg\n       */\n      _set: function(key, value) {\n        this.callSuper('_set', key, value);\n        switch (key) {\n\n          case 'rx':\n            this.rx = value;\n            this.set('width', value * 2);\n            break;\n\n          case 'ry':\n            this.ry = value;\n            this.set('height', value * 2);\n            break;\n\n        }\n        return this;\n      },\n\n      /**\n       * Returns horizontal radius of an object (according to how an object is scaled)\n       * @return {Number}\n       */\n      getRx: function() {\n        return this.get('rx') * this.get('scaleX');\n      },\n\n      /**\n       * Returns Vertical radius of an object (according to how an object is scaled)\n       * @return {Number}\n       */\n      getRy: function() {\n        return this.get('ry') * this.get('scaleY');\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup();\n        markup.push(\n          '<ellipse ', this.getSvgId(),\n          'cx=\"0\" cy=\"0\" ',\n          'rx=\"', this.rx,\n          '\" ry=\"', this.ry,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(), '\"',\n          this.addPaintOrder(),\n          '/>\\n'\n        );\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx context to render on\n       */\n      _render: function(ctx) {\n        ctx.beginPath();\n        ctx.save();\n        ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n        ctx.arc(\n          0,\n          0,\n          this.rx,\n          0,\n          piBy2,\n          false);\n        ctx.restore();\n        this._renderPaintInOrder(ctx);\n      },\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n     * @static\n     * @memberOf fabric.Ellipse\n     * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n     */\n    fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\n    /**\n     * Returns {@link fabric.Ellipse} instance from an SVG element\n     * @static\n     * @memberOf fabric.Ellipse\n     * @param {SVGElement} element Element to parse\n     * @param {Function} [callback] Options callback invoked after parsing is finished\n     * @return {fabric.Ellipse}\n     */\n    fabric.Ellipse.fromElement = function(element, callback) {\n\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\n      parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n      parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n      callback(new fabric.Ellipse(parsedAttributes));\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Ellipse} instance from an object representation\n     * @static\n     * @memberOf fabric.Ellipse\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] invoked with new instance as first argument\n     * @return {fabric.Ellipse}\n     */\n    fabric.Ellipse.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Ellipse', object, callback);\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend;\n\n    if (fabric.Rect) {\n      fabric.warn('fabric.Rect is already defined');\n      return;\n    }\n\n    /**\n     * Rectangle class\n     * @class fabric.Rect\n     * @extends fabric.Object\n     * @return {fabric.Rect} thisArg\n     * @see {@link fabric.Rect#initialize} for constructor definition\n     */\n    fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n      /**\n       * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n       * as well as for history (undo/redo) purposes\n       * @type Array\n       */\n      stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'rect',\n\n      /**\n       * Horizontal border radius\n       * @type Number\n       * @default\n       */\n      rx:   0,\n\n      /**\n       * Vertical border radius\n       * @type Number\n       * @default\n       */\n      ry:   0,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       * @return {Object} thisArg\n       */\n      initialize: function(options) {\n        this.callSuper('initialize', options);\n        this._initRxRy();\n      },\n\n      /**\n       * Initializes rx/ry attributes\n       * @private\n       */\n      _initRxRy: function() {\n        if (this.rx && !this.ry) {\n          this.ry = this.rx;\n        }\n        else if (this.ry && !this.rx) {\n          this.rx = this.ry;\n        }\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n\n        // optimize 1x1 case (used in spray brush)\n        if (this.width === 1 && this.height === 1) {\n          ctx.fillRect(-0.5, -0.5, 1, 1);\n          return;\n        }\n\n        var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n            ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n            w = this.width,\n            h = this.height,\n            x = -this.width / 2,\n            y = -this.height / 2,\n            isRounded = rx !== 0 || ry !== 0,\n            /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\n            k = 1 - 0.5522847498;\n        ctx.beginPath();\n\n        ctx.moveTo(x + rx, y);\n\n        ctx.lineTo(x + w - rx, y);\n        isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n        ctx.lineTo(x + w, y + h - ry);\n        isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n        ctx.lineTo(x + rx, y + h);\n        isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n        ctx.lineTo(x, y + ry);\n        isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n        ctx.closePath();\n\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        var x = -this.width / 2,\n            y = -this.height / 2,\n            w = this.width,\n            h = this.height;\n\n        ctx.beginPath();\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n        ctx.closePath();\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(), x = -this.width / 2, y = -this.height / 2;\n        markup.push(\n          '<rect ', this.getSvgId(),\n          'x=\"', x, '\" y=\"', y,\n          '\" rx=\"', this.get('rx'), '\" ry=\"', this.get('ry'),\n          '\" width=\"', this.width, '\" height=\"', this.height,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          this.getSvgTransformMatrix(), '\"',\n          this.addPaintOrder(),\n          '/>\\n');\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n     * @static\n     * @memberOf fabric.Rect\n     * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n     */\n    fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\n    /**\n     * Returns {@link fabric.Rect} instance from an SVG element\n     * @static\n     * @memberOf fabric.Rect\n     * @param {SVGElement} element Element to parse\n     * @param {Function} callback callback function invoked after parsing\n     * @param {Object} [options] Options object\n     */\n    fabric.Rect.fromElement = function(element, callback, options) {\n      if (!element) {\n        return callback(null);\n      }\n      options = options || { };\n\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\n      parsedAttributes.left = parsedAttributes.left || 0;\n      parsedAttributes.top  = parsedAttributes.top  || 0;\n      var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n      rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\n      callback(rect);\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Rect} instance from an object representation\n     * @static\n     * @memberOf fabric.Rect\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\n     */\n    fabric.Rect.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Rect', object, callback);\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        min = fabric.util.array.min,\n        max = fabric.util.array.max,\n        toFixed = fabric.util.toFixed;\n\n    if (fabric.Polyline) {\n      fabric.warn('fabric.Polyline is already defined');\n      return;\n    }\n\n    /**\n     * Polyline class\n     * @class fabric.Polyline\n     * @extends fabric.Object\n     * @see {@link fabric.Polyline#initialize} for constructor definition\n     */\n    fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'polyline',\n\n      /**\n       * Points array\n       * @type Array\n       * @default\n       */\n      points: null,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\n\n      /**\n       * Constructor\n       * @param {Array} points Array of points (where each point is an object with x and y)\n       * @param {Object} [options] Options object\n       * @return {fabric.Polyline} thisArg\n       * @example\n       * var poly = new fabric.Polyline([\n       *     { x: 10, y: 10 },\n       *     { x: 50, y: 30 },\n       *     { x: 40, y: 70 },\n       *     { x: 60, y: 50 },\n       *     { x: 100, y: 150 },\n       *     { x: 40, y: 100 }\n       *   ], {\n       *   stroke: 'red',\n       *   left: 100,\n       *   top: 100\n       * });\n       */\n      initialize: function(points, options) {\n        options = options || {};\n        this.points = points || [];\n        this.callSuper('initialize', options);\n        var calcDim = this._calcDimensions();\n        if (typeof options.left === 'undefined') {\n          this.left = calcDim.left;\n        }\n        if (typeof options.top === 'undefined') {\n          this.top = calcDim.top;\n        }\n        this.width = calcDim.width;\n        this.height = calcDim.height;\n        this.pathOffset = {\n          x: calcDim.left + this.width / 2,\n          y: calcDim.top + this.height / 2\n        };\n      },\n\n      /**\n       * Calculate the polygon min and max point from points array,\n       * returning an object with left, top, widht, height to measure the\n       * polygon size\n       * @return {Object} object.left X coordinate of the polygon leftmost point\n       * @return {Object} object.top Y coordinate of the polygon topmost point\n       * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\n       * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\n       * @private\n       */\n      _calcDimensions: function() {\n\n        var points = this.points,\n            minX = min(points, 'x') || 0,\n            minY = min(points, 'y') || 0,\n            maxX = max(points, 'x') || 0,\n            maxY = max(points, 'y') || 0,\n            width = (maxX - minX),\n            height = (maxY - minY);\n\n        return {\n          left: minX,\n          top: minY,\n          width: width,\n          height: height\n        };\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return extend(this.callSuper('toObject', propertiesToInclude), {\n          points: this.points.concat()\n        });\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\n            markup = this._createBaseSVGMarkup(),\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n        for (var i = 0, len = this.points.length; i < len; i++) {\n          points.push(\n            toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\n            toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\n          );\n        }\n        markup.push(\n          '<', this.type, ' ', this.getSvgId(),\n          'points=\"', points.join(''),\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(),\n          ' ', this.getSvgTransformMatrix(), '\"',\n          this.addPaintOrder(),\n          '/>\\n'\n        );\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      commonRender: function(ctx) {\n        var point, len = this.points.length,\n            x = this.pathOffset.x,\n            y = this.pathOffset.y;\n\n        if (!len || isNaN(this.points[len - 1].y)) {\n          // do not draw if no points or odd points\n          // NaN comes from parseFloat of a empty string in parser\n          return false;\n        }\n        ctx.beginPath();\n        ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n        for (var i = 0; i < len; i++) {\n          point = this.points[i];\n          ctx.lineTo(point.x - x, point.y - y);\n        }\n        return true;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        if (!this.commonRender(ctx)) {\n          return;\n        }\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        var p1, p2;\n\n        ctx.beginPath();\n        for (var i = 0, len = this.points.length; i < len; i++) {\n          p1 = this.points[i];\n          p2 = this.points[i + 1] || p1;\n          fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n        }\n      },\n\n      /**\n       * Returns complexity of an instance\n       * @return {Number} complexity of this instance\n       */\n      complexity: function() {\n        return this.get('points').length;\n      }\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n     * @static\n     * @memberOf fabric.Polyline\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n     */\n    fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n    /**\n     * Returns fabric.Polyline instance from an SVG element\n     * @static\n     * @memberOf fabric.Polyline\n     * @param {SVGElement} element Element to parser\n     * @param {Function} callback callback function invoked after parsing\n     * @param {Object} [options] Options object\n     */\n    fabric.Polyline.fromElement = function(element, callback, options) {\n      if (!element) {\n        return callback(null);\n      }\n      options || (options = { });\n\n      var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n          parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\n      callback(new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options)));\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns fabric.Polyline instance from an object representation\n     * @static\n     * @memberOf fabric.Polyline\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n     */\n    fabric.Polyline.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Polyline', object, callback, 'points');\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend;\n\n    if (fabric.Polygon) {\n      fabric.warn('fabric.Polygon is already defined');\n      return;\n    }\n\n    /**\n     * Polygon class\n     * @class fabric.Polygon\n     * @extends fabric.Polyline\n     * @see {@link fabric.Polygon#initialize} for constructor definition\n     */\n    fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'polygon',\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        if (!this.commonRender(ctx)) {\n          return;\n        }\n        ctx.closePath();\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        this.callSuper('_renderDashedStroke', ctx);\n        ctx.closePath();\n      },\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n     * @static\n     * @memberOf fabric.Polygon\n     * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n     */\n    fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n    /**\n     * Returns {@link fabric.Polygon} instance from an SVG element\n     * @static\n     * @memberOf fabric.Polygon\n     * @param {SVGElement} element Element to parse\n     * @param {Function} callback callback function invoked after parsing\n     * @param {Object} [options] Options object\n     */\n    fabric.Polygon.fromElement = function(element, callback, options) {\n      if (!element) {\n        return callback(null);\n      }\n\n      options || (options = { });\n\n      var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n          parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\n      callback(new fabric.Polygon(points, extend(parsedAttributes, options)));\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns fabric.Polygon instance from an object representation\n     * @static\n     * @memberOf fabric.Polygon\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n     */\n    fabric.Polygon.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Polygon', object, callback, 'points');\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        min = fabric.util.array.min,\n        max = fabric.util.array.max,\n        extend = fabric.util.object.extend,\n        _toString = Object.prototype.toString,\n        drawArc = fabric.util.drawArc,\n        commandLengths = {\n          m: 2,\n          l: 2,\n          h: 1,\n          v: 1,\n          c: 6,\n          s: 4,\n          q: 4,\n          t: 2,\n          a: 7\n        },\n        repeatedCommands = {\n          m: 'l',\n          M: 'L'\n        };\n\n    if (fabric.Path) {\n      fabric.warn('fabric.Path is already defined');\n      return;\n    }\n\n    /**\n     * Path class\n     * @class fabric.Path\n     * @extends fabric.Object\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\n     * @see {@link fabric.Path#initialize} for constructor definition\n     */\n    fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'path',\n\n      /**\n       * Array of path points\n       * @type Array\n       * @default\n       */\n      path: null,\n\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\n\n      stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\n\n      /**\n       * Constructor\n       * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n       * @param {Object} [options] Options object\n       * @return {fabric.Path} thisArg\n       */\n      initialize: function(path, options) {\n        options = options || { };\n        this.callSuper('initialize', options);\n\n        if (!path) {\n          path = [];\n        }\n\n        var fromArray = _toString.call(path) === '[object Array]';\n\n        this.path = fromArray\n          ? path\n          // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n          : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n        if (!this.path) {\n          return;\n        }\n\n        if (!fromArray) {\n          this.path = this._parsePath();\n        }\n\n        this._setPositionDimensions(options);\n      },\n\n      /**\n       * @private\n       * @param {Object} options Options object\n       */\n      _setPositionDimensions: function(options) {\n        var calcDim = this._parseDimensions();\n\n        this.width = calcDim.width;\n        this.height = calcDim.height;\n\n        if (typeof options.left === 'undefined') {\n          this.left = calcDim.left;\n        }\n\n        if (typeof options.top === 'undefined') {\n          this.top = calcDim.top;\n        }\n\n        this.pathOffset = this.pathOffset || {\n          x: calcDim.left + this.width / 2,\n          y: calcDim.top + this.height / 2\n        };\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx context to render path on\n       */\n      _renderPathCommands: function(ctx) {\n        var current, // current instruction\n            previous = null,\n            subpathStartX = 0,\n            subpathStartY = 0,\n            x = 0, // current x\n            y = 0, // current y\n            controlX = 0, // current control point x\n            controlY = 0, // current control point y\n            tempX,\n            tempY,\n            l = -this.pathOffset.x,\n            t = -this.pathOffset.y;\n\n        ctx.beginPath();\n\n        for (var i = 0, len = this.path.length; i < len; ++i) {\n\n          current = this.path[i];\n\n          switch (current[0]) { // first letter\n\n            case 'l': // lineto, relative\n              x += current[1];\n              y += current[2];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'L': // lineto, absolute\n              x = current[1];\n              y = current[2];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'h': // horizontal lineto, relative\n              x += current[1];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'H': // horizontal lineto, absolute\n              x = current[1];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'v': // vertical lineto, relative\n              y += current[1];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'V': // verical lineto, absolute\n              y = current[1];\n              ctx.lineTo(x + l, y + t);\n              break;\n\n            case 'm': // moveTo, relative\n              x += current[1];\n              y += current[2];\n              subpathStartX = x;\n              subpathStartY = y;\n              ctx.moveTo(x + l, y + t);\n              break;\n\n            case 'M': // moveTo, absolute\n              x = current[1];\n              y = current[2];\n              subpathStartX = x;\n              subpathStartY = y;\n              ctx.moveTo(x + l, y + t);\n              break;\n\n            case 'c': // bezierCurveTo, relative\n              tempX = x + current[5];\n              tempY = y + current[6];\n              controlX = x + current[3];\n              controlY = y + current[4];\n              ctx.bezierCurveTo(\n                x + current[1] + l, // x1\n                y + current[2] + t, // y1\n                controlX + l, // x2\n                controlY + t, // y2\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'C': // bezierCurveTo, absolute\n              x = current[5];\n              y = current[6];\n              controlX = current[3];\n              controlY = current[4];\n              ctx.bezierCurveTo(\n                current[1] + l,\n                current[2] + t,\n                controlX + l,\n                controlY + t,\n                x + l,\n                y + t\n              );\n              break;\n\n            case 's': // shorthand cubic bezierCurveTo, relative\n\n              // transform to absolute x,y\n              tempX = x + current[3];\n              tempY = y + current[4];\n\n              if (previous[0].match(/[CcSs]/) === null) {\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\n                // the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control points\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n\n              ctx.bezierCurveTo(\n                controlX + l,\n                controlY + t,\n                x + current[1] + l,\n                y + current[2] + t,\n                tempX + l,\n                tempY + t\n              );\n              // set control point to 2nd one of this command\n              // \"... the first control point is assumed to be\n              // the reflection of the second control point on\n              // the previous command relative to the current point.\"\n              controlX = x + current[1];\n              controlY = y + current[2];\n\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'S': // shorthand cubic bezierCurveTo, absolute\n              tempX = current[3];\n              tempY = current[4];\n              if (previous[0].match(/[CcSs]/) === null) {\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\n                // the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control points\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n              ctx.bezierCurveTo(\n                controlX + l,\n                controlY + t,\n                current[1] + l,\n                current[2] + t,\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n\n              // set control point to 2nd one of this command\n              // \"... the first control point is assumed to be\n              // the reflection of the second control point on\n              // the previous command relative to the current point.\"\n              controlX = current[1];\n              controlY = current[2];\n\n              break;\n\n            case 'q': // quadraticCurveTo, relative\n              // transform to absolute x,y\n              tempX = x + current[3];\n              tempY = y + current[4];\n\n              controlX = x + current[1];\n              controlY = y + current[2];\n\n              ctx.quadraticCurveTo(\n                controlX + l,\n                controlY + t,\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'Q': // quadraticCurveTo, absolute\n              tempX = current[3];\n              tempY = current[4];\n\n              ctx.quadraticCurveTo(\n                current[1] + l,\n                current[2] + t,\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n              controlX = current[1];\n              controlY = current[2];\n              break;\n\n            case 't': // shorthand quadraticCurveTo, relative\n\n              // transform to absolute x,y\n              tempX = x + current[1];\n              tempY = y + current[2];\n\n              if (previous[0].match(/[QqTt]/) === null) {\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\n                // assume the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control point\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n\n              ctx.quadraticCurveTo(\n                controlX + l,\n                controlY + t,\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n\n              break;\n\n            case 'T':\n              tempX = current[1];\n              tempY = current[2];\n\n              if (previous[0].match(/[QqTt]/) === null) {\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\n                // assume the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control point\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n              ctx.quadraticCurveTo(\n                controlX + l,\n                controlY + t,\n                tempX + l,\n                tempY + t\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'a':\n              // TODO: optimize this\n              drawArc(ctx, x + l, y + t, [\n                current[1],\n                current[2],\n                current[3],\n                current[4],\n                current[5],\n                current[6] + x + l,\n                current[7] + y + t\n              ]);\n              x += current[6];\n              y += current[7];\n              break;\n\n            case 'A':\n              // TODO: optimize this\n              drawArc(ctx, x + l, y + t, [\n                current[1],\n                current[2],\n                current[3],\n                current[4],\n                current[5],\n                current[6] + l,\n                current[7] + t\n              ]);\n              x = current[6];\n              y = current[7];\n              break;\n\n            case 'z':\n            case 'Z':\n              x = subpathStartX;\n              y = subpathStartY;\n              ctx.closePath();\n              break;\n          }\n          previous = current;\n        }\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx context to render path on\n       */\n      _render: function(ctx) {\n        this._renderPathCommands(ctx);\n        this._renderPaintInOrder(ctx);\n      },\n\n      /**\n       * Returns string representation of an instance\n       * @return {String} string representation of an instance\n       */\n      toString: function() {\n        return '#<fabric.Path (' + this.complexity() +\n          '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        var o = extend(this.callSuper('toObject', propertiesToInclude), {\n          path: this.path.map(function(item) { return item.slice(); }),\n          top: this.top,\n          left: this.left,\n        });\n        return o;\n      },\n\n      /**\n       * Returns dataless object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toDatalessObject: function(propertiesToInclude) {\n        var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\n        if (o.sourcePath) {\n          delete o.path;\n        }\n        return o;\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var chunks = [],\n            markup = this._createBaseSVGMarkup(), addTransform = '';\n\n        for (var i = 0, len = this.path.length; i < len; i++) {\n          chunks.push(this.path[i].join(' '));\n        }\n        var path = chunks.join(' ');\n        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';\n        markup.push(\n          '<path ', this.getSvgId(),\n          'd=\"', path,\n          '\" style=\"', this.getSvgStyles(),\n          '\" transform=\"', this.getSvgTransform(), addTransform,\n          this.getSvgTransformMatrix(), '\" stroke-linecap=\"round\" ',\n          this.addPaintOrder(),\n          '/>\\n'\n        );\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * Returns number representation of an instance complexity\n       * @return {Number} complexity of this instance\n       */\n      complexity: function() {\n        return this.path.length;\n      },\n\n      /**\n       * @private\n       */\n      _parsePath: function() {\n        var result = [],\n            coords = [],\n            currentPath,\n            parsed,\n            re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n            match,\n            coordsStr;\n\n        for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n          currentPath = this.path[i];\n\n          coordsStr = currentPath.slice(1).trim();\n          coords.length = 0;\n\n          while ((match = re.exec(coordsStr))) {\n            coords.push(match[0]);\n          }\n\n          coordsParsed = [currentPath.charAt(0)];\n\n          for (var j = 0, jlen = coords.length; j < jlen; j++) {\n            parsed = parseFloat(coords[j]);\n            if (!isNaN(parsed)) {\n              coordsParsed.push(parsed);\n            }\n          }\n\n          var command = coordsParsed[0],\n              commandLength = commandLengths[command.toLowerCase()],\n              repeatedCommand = repeatedCommands[command] || command;\n\n          if (coordsParsed.length - 1 > commandLength) {\n            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\n              command = repeatedCommand;\n            }\n          }\n          else {\n            result.push(coordsParsed);\n          }\n        }\n\n        return result;\n      },\n\n      /**\n       * @private\n       */\n      _parseDimensions: function() {\n\n        var aX = [],\n            aY = [],\n            current, // current instruction\n            previous = null,\n            subpathStartX = 0,\n            subpathStartY = 0,\n            x = 0, // current x\n            y = 0, // current y\n            controlX = 0, // current control point x\n            controlY = 0, // current control point y\n            tempX,\n            tempY,\n            bounds;\n\n        for (var i = 0, len = this.path.length; i < len; ++i) {\n\n          current = this.path[i];\n\n          switch (current[0]) { // first letter\n\n            case 'l': // lineto, relative\n              x += current[1];\n              y += current[2];\n              bounds = [];\n              break;\n\n            case 'L': // lineto, absolute\n              x = current[1];\n              y = current[2];\n              bounds = [];\n              break;\n\n            case 'h': // horizontal lineto, relative\n              x += current[1];\n              bounds = [];\n              break;\n\n            case 'H': // horizontal lineto, absolute\n              x = current[1];\n              bounds = [];\n              break;\n\n            case 'v': // vertical lineto, relative\n              y += current[1];\n              bounds = [];\n              break;\n\n            case 'V': // verical lineto, absolute\n              y = current[1];\n              bounds = [];\n              break;\n\n            case 'm': // moveTo, relative\n              x += current[1];\n              y += current[2];\n              subpathStartX = x;\n              subpathStartY = y;\n              bounds = [];\n              break;\n\n            case 'M': // moveTo, absolute\n              x = current[1];\n              y = current[2];\n              subpathStartX = x;\n              subpathStartY = y;\n              bounds = [];\n              break;\n\n            case 'c': // bezierCurveTo, relative\n              tempX = x + current[5];\n              tempY = y + current[6];\n              controlX = x + current[3];\n              controlY = y + current[4];\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                x + current[1], // x1\n                y + current[2], // y1\n                controlX, // x2\n                controlY, // y2\n                tempX,\n                tempY\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'C': // bezierCurveTo, absolute\n              controlX = current[3];\n              controlY = current[4];\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                current[1],\n                current[2],\n                controlX,\n                controlY,\n                current[5],\n                current[6]\n              );\n              x = current[5];\n              y = current[6];\n              break;\n\n            case 's': // shorthand cubic bezierCurveTo, relative\n\n              // transform to absolute x,y\n              tempX = x + current[3];\n              tempY = y + current[4];\n\n              if (previous[0].match(/[CcSs]/) === null) {\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\n                // the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control points\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                x + current[1],\n                y + current[2],\n                tempX,\n                tempY\n              );\n              // set control point to 2nd one of this command\n              // \"... the first control point is assumed to be\n              // the reflection of the second control point on\n              // the previous command relative to the current point.\"\n              controlX = x + current[1];\n              controlY = y + current[2];\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'S': // shorthand cubic bezierCurveTo, absolute\n              tempX = current[3];\n              tempY = current[4];\n              if (previous[0].match(/[CcSs]/) === null) {\n                // If there is no previous command or if the previous command was not a C, c, S, or s,\n                // the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control points\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                current[1],\n                current[2],\n                tempX,\n                tempY\n              );\n              x = tempX;\n              y = tempY;\n              // set control point to 2nd one of this command\n              // \"... the first control point is assumed to be\n              // the reflection of the second control point on\n              // the previous command relative to the current point.\"\n              controlX = current[1];\n              controlY = current[2];\n              break;\n\n            case 'q': // quadraticCurveTo, relative\n              // transform to absolute x,y\n              tempX = x + current[3];\n              tempY = y + current[4];\n              controlX = x + current[1];\n              controlY = y + current[2];\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                controlX,\n                controlY,\n                tempX,\n                tempY\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'Q': // quadraticCurveTo, absolute\n              controlX = current[1];\n              controlY = current[2];\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                controlX,\n                controlY,\n                current[3],\n                current[4]\n              );\n              x = current[3];\n              y = current[4];\n              break;\n\n            case 't': // shorthand quadraticCurveTo, relative\n              // transform to absolute x,y\n              tempX = x + current[1];\n              tempY = y + current[2];\n              if (previous[0].match(/[QqTt]/) === null) {\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\n                // assume the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control point\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                controlX,\n                controlY,\n                tempX,\n                tempY\n              );\n              x = tempX;\n              y = tempY;\n\n              break;\n\n            case 'T':\n              tempX = current[1];\n              tempY = current[2];\n\n              if (previous[0].match(/[QqTt]/) === null) {\n                // If there is no previous command or if the previous command was not a Q, q, T or t,\n                // assume the control point is coincident with the current point\n                controlX = x;\n                controlY = y;\n              }\n              else {\n                // calculate reflection of previous control point\n                controlX = 2 * x - controlX;\n                controlY = 2 * y - controlY;\n              }\n              bounds = fabric.util.getBoundsOfCurve(x, y,\n                controlX,\n                controlY,\n                controlX,\n                controlY,\n                tempX,\n                tempY\n              );\n              x = tempX;\n              y = tempY;\n              break;\n\n            case 'a':\n              // TODO: optimize this\n              bounds = fabric.util.getBoundsOfArc(x, y,\n                current[1],\n                current[2],\n                current[3],\n                current[4],\n                current[5],\n                current[6] + x,\n                current[7] + y\n              );\n              x += current[6];\n              y += current[7];\n              break;\n\n            case 'A':\n              // TODO: optimize this\n              bounds = fabric.util.getBoundsOfArc(x, y,\n                current[1],\n                current[2],\n                current[3],\n                current[4],\n                current[5],\n                current[6],\n                current[7]\n              );\n              x = current[6];\n              y = current[7];\n              break;\n\n            case 'z':\n            case 'Z':\n              x = subpathStartX;\n              y = subpathStartY;\n              break;\n          }\n          previous = current;\n          bounds.forEach(function (point) {\n            aX.push(point.x);\n            aY.push(point.y);\n          });\n          aX.push(x);\n          aY.push(y);\n        }\n\n        var minX = min(aX) || 0,\n            minY = min(aY) || 0,\n            maxX = max(aX) || 0,\n            maxY = max(aY) || 0,\n            deltaX = maxX - minX,\n            deltaY = maxY - minY,\n\n            o = {\n              left: minX,\n              top: minY,\n              width: deltaX,\n              height: deltaY\n            };\n\n        return o;\n      }\n    });\n\n    /**\n     * Creates an instance of fabric.Path from an object\n     * @static\n     * @memberOf fabric.Path\n     * @param {Object} object\n     * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n     */\n    fabric.Path.fromObject = function(object, callback) {\n      if (typeof object.sourcePath === 'string') {\n        var pathUrl = object.sourcePath;\n        fabric.loadSVGFromURL(pathUrl, function (elements) {\n          var path = elements[0];\n          path.setOptions(object);\n          callback && callback(path);\n        });\n      }\n      else {\n        fabric.Object._fromObject('Path', object, callback, 'path');\n      }\n    };\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n     * @static\n     * @memberOf fabric.Path\n     * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n     */\n    fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\n    /**\n     * Creates an instance of fabric.Path from an SVG <path> element\n     * @static\n     * @memberOf fabric.Path\n     * @param {SVGElement} element to parse\n     * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n     * @param {Object} [options] Options object\n     * @param {Function} [callback] Options callback invoked after parsing is finished\n     */\n    fabric.Path.fromElement = function(element, callback, options) {\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n      callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n    };\n    /* _FROM_SVG_END_ */\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        min = fabric.util.array.min,\n        max = fabric.util.array.max;\n\n    if (fabric.Group) {\n      return;\n    }\n\n    /**\n     * Group class\n     * @class fabric.Group\n     * @extends fabric.Object\n     * @mixes fabric.Collection\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n     * @see {@link fabric.Group#initialize} for constructor definition\n     */\n    fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'group',\n\n      /**\n       * Width of stroke\n       * @type Number\n       * @default\n       */\n      strokeWidth: 0,\n\n      /**\n       * Indicates if click events should also check for subtargets\n       * @type Boolean\n       * @default\n       */\n      subTargetCheck: false,\n\n      /**\n       * Groups are container, do not render anything on theyr own, ence no cache properties\n       * @type Array\n       * @default\n       */\n      cacheProperties: [],\n\n      /**\n       * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\n       * available setting this boolean to true.\n       * @type Boolean\n       * @since 2.0.0\n       * @default\n       */\n      useSetOnGroup: false,\n\n      /**\n       * Constructor\n       * @param {Object} objects Group objects\n       * @param {Object} [options] Options object\n       * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n       * @return {Object} thisArg\n       */\n      initialize: function(objects, options, isAlreadyGrouped) {\n        options = options || {};\n        this._objects = [];\n        // if objects enclosed in a group have been grouped already,\n        // we cannot change properties of objects.\n        // Thus we need to set options to group without objects,\n        isAlreadyGrouped && this.callSuper('initialize', options);\n        this._objects = objects || [];\n        for (var i = this._objects.length; i--; ) {\n          this._objects[i].group = this;\n        }\n\n        if (!isAlreadyGrouped) {\n          var center = options && options.centerPoint;\n          // we want to set origins before calculating the bounding box.\n          // so that the topleft can be set with that in mind.\n          // if specific top and left are passed, are overwritten later\n          // with the callSuper('initialize', options)\n          if (options.originX !== undefined) {\n            this.originX = options.originX;\n          }\n          if (options.originY !== undefined) {\n            this.originY = options.originY;\n          }\n          // if coming from svg i do not want to calc bounds.\n          // i assume width and height are passed along options\n          center || this._calcBounds();\n          this._updateObjectsCoords(center);\n          delete options.centerPoint;\n          this.callSuper('initialize', options);\n        }\n        else {\n          this._updateObjectsACoords();\n        }\n\n        this.setCoords();\n      },\n\n      /**\n       * @private\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n       */\n      _updateObjectsACoords: function() {\n        var ignoreZoom = true, skipAbsolute = true;\n        for (var i = this._objects.length; i--; ){\n          this._objects[i].setCoords(ignoreZoom, skipAbsolute);\n        }\n      },\n\n      /**\n       * @private\n       * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n       */\n      _updateObjectsCoords: function(center) {\n        var center = center || this.getCenterPoint();\n        for (var i = this._objects.length; i--; ){\n          this._updateObjectCoords(this._objects[i], center);\n        }\n      },\n\n      /**\n       * @private\n       * @param {Object} object\n       * @param {fabric.Point} center, current center of group.\n       */\n      _updateObjectCoords: function(object, center) {\n        var objectLeft = object.left,\n            objectTop = object.top,\n            ignoreZoom = true, skipAbsolute = true;\n\n        object.set({\n          left: objectLeft - center.x,\n          top: objectTop - center.y\n        });\n        object.group = this;\n        object.setCoords(ignoreZoom, skipAbsolute);\n      },\n\n      /**\n       * Returns string represenation of a group\n       * @return {String}\n       */\n      toString: function() {\n        return '#<fabric.Group: (' + this.complexity() + ')>';\n      },\n\n      /**\n       * Adds an object to a group; Then recalculates group's dimension, position.\n       * @param {Object} object\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      addWithUpdate: function(object) {\n        this._restoreObjectsState();\n        fabric.util.resetObjectTransform(this);\n        if (object) {\n          this._objects.push(object);\n          object.group = this;\n          object._set('canvas', this.canvas);\n        }\n        this._calcBounds();\n        this._updateObjectsCoords();\n        this.setCoords();\n        this.dirty = true;\n        return this;\n      },\n\n      /**\n       * Removes an object from a group; Then recalculates group's dimension, position.\n       * @param {Object} object\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      removeWithUpdate: function(object) {\n        this._restoreObjectsState();\n        fabric.util.resetObjectTransform(this);\n\n        this.remove(object);\n        this._calcBounds();\n        this._updateObjectsCoords();\n        this.setCoords();\n        this.dirty = true;\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _onObjectAdded: function(object) {\n        this.dirty = true;\n        object.group = this;\n        object._set('canvas', this.canvas);\n      },\n\n      /**\n       * @private\n       */\n      _onObjectRemoved: function(object) {\n        this.dirty = true;\n        delete object.group;\n      },\n\n      /**\n       * @private\n       */\n      _set: function(key, value) {\n        var i = this._objects.length;\n        if (this.useSetOnGroup) {\n          while (i--) {\n            this._objects[i].setOnGroup(key, value);\n          }\n        }\n        if (key === 'canvas') {\n          while (i--) {\n            this._objects[i]._set(key, value);\n          }\n        }\n        fabric.Object.prototype._set.call(this, key, value);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        var objsToObject = this._objects.map(function(obj) {\n          var originalDefaults = obj.includeDefaultValues;\n          obj.includeDefaultValues = obj.group.includeDefaultValues;\n          var _obj = obj.toObject(propertiesToInclude);\n          obj.includeDefaultValues = originalDefaults;\n          return _obj;\n        });\n        var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n        obj.objects = objsToObject;\n        return obj;\n      },\n\n      /**\n       * Returns object representation of an instance, in dataless mode.\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toDatalessObject: function(propertiesToInclude) {\n        var objsToObject, sourcePath = this.sourcePath;\n        if (sourcePath) {\n          objsToObject = sourcePath;\n        }\n        else {\n          objsToObject = this._objects.map(function(obj) {\n            var originalDefaults = obj.includeDefaultValues;\n            obj.includeDefaultValues = obj.group.includeDefaultValues;\n            var _obj = obj.toDatalessObject(propertiesToInclude);\n            obj.includeDefaultValues = originalDefaults;\n            return _obj;\n          });\n        }\n        var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n        obj.objects = objsToObject;\n        return obj;\n      },\n\n      /**\n       * Renders instance on a given context\n       * @param {CanvasRenderingContext2D} ctx context to render instance on\n       */\n      render: function(ctx) {\n        this._transformDone = true;\n        this.callSuper('render', ctx);\n        this._transformDone = false;\n      },\n\n      /**\n       * Decide if the object should cache or not. Create its own cache level\n       * objectCaching is a global flag, wins over everything\n       * needsItsOwnCache should be used when the object drawing method requires\n       * a cache step. None of the fabric classes requires it.\n       * Generally you do not cache objects in groups because the group outside is cached.\n       * @return {Boolean}\n       */\n      shouldCache: function() {\n        var ownCache = this.objectCaching && (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n        this.ownCaching = ownCache;\n        if (ownCache) {\n          for (var i = 0, len = this._objects.length; i < len; i++) {\n            if (this._objects[i].willDrawShadow()) {\n              this.ownCaching = false;\n              return false;\n            }\n          }\n        }\n        return ownCache;\n      },\n\n      /**\n       * Check if this object or a child object will cast a shadow\n       * @return {Boolean}\n       */\n      willDrawShadow: function() {\n        if (this.shadow) {\n          return fabric.Object.prototype.willDrawShadow.call(this);\n        }\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          if (this._objects[i].willDrawShadow()) {\n            return true;\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Check if this group or its parent group are caching, recursively up\n       * @return {Boolean}\n       */\n      isOnACache: function() {\n        return this.ownCaching || (this.group && this.group.isOnACache());\n      },\n\n      /**\n       * Execute the drawing operation for an object on a specified context\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      drawObject: function(ctx) {\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          this._objects[i].render(ctx);\n        }\n      },\n\n      /**\n       * Check if cache is dirty\n       */\n      isCacheDirty: function() {\n        if (this.callSuper('isCacheDirty')) {\n          return true;\n        }\n        if (!this.statefullCache) {\n          return false;\n        }\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          if (this._objects[i].isCacheDirty(true)) {\n            if (this._cacheCanvas) {\n              // if this group has not a cache canvas there is nothing to clean\n              var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n              this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n            }\n            return true;\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Retores original state of each of group objects (original state is that which was before group was created).\n       * @private\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      _restoreObjectsState: function() {\n        this._objects.forEach(this._restoreObjectState, this);\n        return this;\n      },\n\n      /**\n       * Realises the transform from this group onto the supplied object\n       * i.e. it tells you what would happen if the supplied object was in\n       * the group, and then the group was destroyed. It mutates the supplied\n       * object.\n       * @param {fabric.Object} object\n       * @return {fabric.Object} transformedObject\n       */\n      realizeTransform: function(object) {\n        var matrix = object.calcTransformMatrix(),\n            options = fabric.util.qrDecompose(matrix),\n            center = new fabric.Point(options.translateX, options.translateY);\n        object.flipX = false;\n        object.flipY = false;\n        object.set('scaleX', options.scaleX);\n        object.set('scaleY', options.scaleY);\n        object.skewX = options.skewX;\n        object.skewY = options.skewY;\n        object.angle = options.angle;\n        object.setPositionByOrigin(center, 'center', 'center');\n        return object;\n      },\n\n      /**\n       * Restores original state of a specified object in group\n       * @private\n       * @param {fabric.Object} object\n       * @return {fabric.Group} thisArg\n       */\n      _restoreObjectState: function(object) {\n        this.realizeTransform(object);\n        object.setCoords();\n        delete object.group;\n        return this;\n      },\n\n      /**\n       * Destroys a group (restoring state of its objects)\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      destroy: function() {\n        // when group is destroyed objects needs to get a repaint to be eventually\n        // displayed on canvas.\n        this._objects.forEach(function(object) {\n          object.set('dirty', true);\n        });\n        return this._restoreObjectsState();\n      },\n\n      /**\n       * make a group an active selection, remove the group from canvas\n       * the group has to be on canvas for this to work.\n       * @return {fabric.ActiveSelection} thisArg\n       * @chainable\n       */\n      toActiveSelection: function() {\n        if (!this.canvas) {\n          return;\n        }\n        var objects = this._objects, canvas = this.canvas;\n        this._objects = [];\n        var options = this.toObject();\n        delete options.objects;\n        var activeSelection = new fabric.ActiveSelection([]);\n        activeSelection.set(options);\n        activeSelection.type = 'activeSelection';\n        canvas.remove(this);\n        objects.forEach(function(object) {\n          object.group = activeSelection;\n          object.dirty = true;\n          canvas.add(object);\n        });\n        activeSelection.canvas = canvas;\n        activeSelection._objects = objects;\n        canvas._activeObject = activeSelection;\n        activeSelection.setCoords();\n        return activeSelection;\n      },\n\n      /**\n       * Destroys a group (restoring state of its objects)\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      ungroupOnCanvas: function() {\n        return this._restoreObjectsState();\n      },\n\n      /**\n       * Sets coordinates of all objects inside group\n       * @return {fabric.Group} thisArg\n       * @chainable\n       */\n      setObjectsCoords: function() {\n        var ignoreZoom = true, skipAbsolute = true;\n        this.forEachObject(function(object) {\n          object.setCoords(ignoreZoom, skipAbsolute);\n        });\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _calcBounds: function(onlyWidthHeight) {\n        var aX = [],\n            aY = [],\n            o, prop,\n            props = ['tr', 'br', 'bl', 'tl'],\n            i = 0, iLen = this._objects.length,\n            j, jLen = props.length,\n            ignoreZoom = true;\n\n        for ( ; i < iLen; ++i) {\n          o = this._objects[i];\n          o.setCoords(ignoreZoom);\n          for (j = 0; j < jLen; j++) {\n            prop = props[j];\n            aX.push(o.oCoords[prop].x);\n            aY.push(o.oCoords[prop].y);\n          }\n        }\n\n        this._getBounds(aX, aY, onlyWidthHeight);\n      },\n\n      /**\n       * @private\n       */\n      _getBounds: function(aX, aY, onlyWidthHeight) {\n        var minXY = new fabric.Point(min(aX), min(aY)),\n            maxXY = new fabric.Point(max(aX), max(aY)),\n            top = minXY.y || 0, left = minXY.x || 0,\n            width = (maxXY.x - minXY.x) || 0,\n            height = (maxXY.y - minXY.y) || 0;\n        this.width = width;\n        this.height = height;\n        if (!onlyWidthHeight) {\n          // the bounding box always finds the topleft most corner.\n          // whatever is the group origin, we set up here the left/top position.\n          this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\n        }\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns svg representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup();\n        markup.push(\n          '<g ', this.getSvgId(), 'transform=\"',\n          /* avoiding styles intentionally */\n          this.getSvgTransform(),\n          this.getSvgTransformMatrix(),\n          '\" style=\"',\n          this.getSvgFilter(),\n          '\">\\n'\n        );\n\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          markup.push('\\t', this._objects[i].toSVG(reviver));\n        }\n\n        markup.push('</g>\\n');\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n    });\n\n    /**\n     * Returns {@link fabric.Group} instance from an object representation\n     * @static\n     * @memberOf fabric.Group\n     * @param {Object} object Object to create a group from\n     * @param {Function} [callback] Callback to invoke when an group instance is created\n     */\n    fabric.Group.fromObject = function(object, callback) {\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n        var options = fabric.util.object.clone(object, true);\n        delete options.objects;\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\n      });\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    //var fabric = global.fabric || (global.fabric = { });\n\n    if (fabric.ActiveSelection) {\n      return;\n    }\n\n    /**\n     * Group class\n     * @class fabric.ActiveSelection\n     * @extends fabric.Group\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n     * @see {@link fabric.ActiveSelection#initialize} for constructor definition\n     */\n    fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'activeSelection',\n\n      /**\n       * Constructor\n       * @param {Object} objects ActiveSelection objects\n       * @param {Object} [options] Options object\n       * @return {Object} thisArg\n       */\n      initialize: function(objects, options) {\n        options = options || {};\n        this._objects = objects || [];\n        for (var i = this._objects.length; i--; ) {\n          this._objects[i].group = this;\n        }\n\n        if (options.originX) {\n          this.originX = options.originX;\n        }\n        if (options.originY) {\n          this.originY = options.originY;\n        }\n        this._calcBounds();\n        this._updateObjectsCoords();\n        fabric.Object.prototype.initialize.call(this, options);\n        this.setCoords();\n      },\n\n      /**\n       * Change te activeSelection to a normal group,\n       * High level function that automatically adds it to canvas as\n       * active object. no events fired.\n       * @since 2.0.0\n       * @return {fabric.Group}\n       */\n      toGroup: function() {\n        var objects = this._objects.concat();\n        this._objects = [];\n        var options = fabric.Object.prototype.toObject.call(this);\n        var newGroup = new fabric.Group([]);\n        delete options.type;\n        newGroup.set(options);\n        objects.forEach(function(object) {\n          object.canvas.remove(object);\n          object.group = newGroup;\n        });\n        newGroup._objects = objects;\n        if (!this.canvas) {\n          return newGroup;\n        }\n        var canvas = this.canvas;\n        canvas.add(newGroup);\n        canvas._activeObject = newGroup;\n        newGroup.setCoords();\n        return newGroup;\n      },\n\n      /**\n       * If returns true, deselection is cancelled.\n       * @since 2.0.0\n       * @return {Boolean} [cancel]\n       */\n      onDeselect: function() {\n        this.destroy();\n        return false;\n      },\n\n      /**\n       * Returns string representation of a group\n       * @return {String}\n       */\n      toString: function() {\n        return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\n      },\n\n      /**\n       * Decide if the object should cache or not. Create its own cache level\n       * objectCaching is a global flag, wins over everything\n       * needsItsOwnCache should be used when the object drawing method requires\n       * a cache step. None of the fabric classes requires it.\n       * Generally you do not cache objects in groups because the group outside is cached.\n       * @return {Boolean}\n       */\n      shouldCache: function() {\n        return false;\n      },\n\n      /**\n       * Check if this group or its parent group are caching, recursively up\n       * @return {Boolean}\n       */\n      isOnACache: function() {\n        return false;\n      },\n\n      /**\n       * Renders controls and borders for the object\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Object} [styleOverride] properties to override the object style\n       * @param {Object} [childrenOverride] properties to override the children overrides\n       */\n      _renderControls: function(ctx, styleOverride, childrenOverride) {\n        ctx.save();\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n        this.callSuper('_renderControls', ctx, styleOverride);\n        childrenOverride = childrenOverride || { };\n        if (typeof childrenOverride.hasControls === 'undefined') {\n          childrenOverride.hasControls = false;\n        }\n        if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\n          childrenOverride.hasRotatingPoint = false;\n        }\n        childrenOverride.forActiveSelection = true;\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          this._objects[i]._renderControls(ctx, childrenOverride);\n        }\n        ctx.restore();\n      },\n    });\n\n    /**\n     * Returns {@link fabric.ActiveSelection} instance from an object representation\n     * @static\n     * @memberOf fabric.ActiveSelection\n     * @param {Object} object Object to create a group from\n     * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\n     */\n    fabric.ActiveSelection.fromObject = function(object, callback) {\n      fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n        delete object.objects;\n        callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n      });\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var extend = fabric.util.object.extend;\n\n    //if (!global.fabric) {\n    //  global.fabric = { };\n    //}\n\n    //if (global.fabric.Image) {\n    if (fabric.Image) {\n      fabric.warn('fabric.Image is already defined.');\n      return;\n    }\n\n    /**\n     * Image class\n     * @class fabric.Image\n     * @extends fabric.Object\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n     * @see {@link fabric.Image#initialize} for constructor definition\n     */\n    fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'image',\n\n      /**\n       * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n       * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n       * @type String\n       * @default\n       */\n      crossOrigin: '',\n\n      /**\n       * Width of a stroke.\n       * For image quality a stroke multiple of 2 gives better results.\n       * @type Number\n       * @default\n       */\n      strokeWidth: 0,\n\n      /**\n       * private\n       * contains last value of scaleX to detect\n       * if the Image got resized after the last Render\n       * @type Number\n       */\n      _lastScaleX: 1,\n\n      /**\n       * private\n       * contains last value of scaleY to detect\n       * if the Image got resized after the last Render\n       * @type Number\n       */\n      _lastScaleY: 1,\n\n      /**\n       * private\n       * contains last value of scaling applied by the apply filter chain\n       * @type Number\n       */\n      _filterScalingX: 1,\n\n      /**\n       * private\n       * contains last value of scaling applied by the apply filter chain\n       * @type Number\n       */\n      _filterScalingY: 1,\n\n      /**\n       * minimum scale factor under which any resizeFilter is triggered to resize the image\n       * 0 will disable the automatic resize. 1 will trigger automatically always.\n       * number bigger than 1 are not implemented yet.\n       * @type Number\n       */\n      minimumScaleTrigger: 0.5,\n\n      /**\n       * List of properties to consider when checking if\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\n       * as well as for history (undo/redo) purposes\n       * @type Array\n       */\n      stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\n\n      /**\n       * When `true`, object is cached on an additional canvas.\n       * default to false for images\n       * since 1.7.0\n       * @type Boolean\n       * @default\n       */\n      objectCaching: false,\n\n      /**\n       * key used to retrieve the texture representing this image\n       * since 2.0.0\n       * @type String\n       * @default\n       */\n      cacheKey: '',\n\n      /**\n       * Image crop in pixels from original image size.\n       * since 2.0.0\n       * @type Number\n       * @default\n       */\n      cropX: 0,\n\n      /**\n       * Image crop in pixels from original image size.\n       * since 2.0.0\n       * @type Number\n       * @default\n       */\n      cropY: 0,\n\n      /**\n       * Constructor\n       * @param {HTMLImageElement | String} element Image element\n       * @param {Object} [options] Options object\n       * @param {function} [callback] callback function to call after eventual filters applied.\n       * @return {fabric.Image} thisArg\n       */\n      initialize: function(element, options) {\n        options || (options = { });\n        this.filters = [];\n        this.cacheKey = 'texture' + fabric.Object.__uid++;\n        this.callSuper('initialize', options);\n        this._initElement(element, options);\n      },\n\n      /**\n       * Returns image element which this instance if based on\n       * @return {HTMLImageElement} Image element\n       */\n      getElement: function() {\n        return this._element || {};\n      },\n\n      /**\n       * Sets image element for this instance to a specified one.\n       * If filters defined they are applied to new image.\n       * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n       * @param {HTMLImageElement} element\n       * @param {Object} [options] Options object\n       * @return {fabric.Image} thisArg\n       * @chainable\n       */\n      setElement: function(element, options) {\n        this.removeTexture(this.cacheKey);\n        this.removeTexture(this.cacheKey + '_filtered');\n        this._element = element;\n        this._originalElement = element;\n        this._initConfig(options);\n        if (this.resizeFilter) {\n          this.applyResizeFilters();\n        }\n        if (this.filters.length !== 0) {\n          this.applyFilters();\n        }\n        return this;\n      },\n\n      /**\n       * Delete a single texture if in webgl mode\n       */\n      removeTexture: function(key) {\n        var backend = fabric.filterBackend;\n        if (backend && backend.evictCachesForKey) {\n          backend.evictCachesForKey(key);\n        }\n      },\n\n      /**\n       * Delete textures, reference to elements and eventually JSDOM cleanup\n       */\n      dispose: function() {\n        this.removeTexture(this.cacheKey);\n        this.removeTexture(this.cacheKey + '_filtered');\n        this._cacheContext = undefined;\n        ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\n          fabric.util.cleanUpJsdomNode(this[element]);\n          this[element] = undefined;\n        }).bind(this));\n      },\n\n      /**\n       * Sets crossOrigin value (on an instance and corresponding image element)\n       * @return {fabric.Image} thisArg\n       * @chainable\n       */\n      setCrossOrigin: function(value) {\n        this.crossOrigin = value;\n        this._element.crossOrigin = value;\n\n        return this;\n      },\n\n      /**\n       * Returns original size of an image\n       * @return {Object} Object with \"width\" and \"height\" properties\n       */\n      getOriginalSize: function() {\n        var element = this.getElement();\n        return {\n          width: element.naturalWidth || element.width,\n          height: element.naturalHeight || element.height\n        };\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _stroke: function(ctx) {\n        if (!this.stroke || this.strokeWidth === 0) {\n          return;\n        }\n        var w = this.width / 2, h = this.height / 2;\n        ctx.beginPath();\n        ctx.moveTo(-w, -h);\n        ctx.lineTo(w, -h);\n        ctx.lineTo(w, h);\n        ctx.lineTo(-w, h);\n        ctx.lineTo(-w, -h);\n        ctx.closePath();\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderDashedStroke: function(ctx) {\n        var x = -this.width / 2,\n            y = -this.height / 2,\n            w = this.width,\n            h = this.height;\n\n        ctx.save();\n        this._setStrokeStyles(ctx, this);\n\n        ctx.beginPath();\n        fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n        fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n        ctx.closePath();\n        ctx.restore();\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        var filters = [];\n\n        this.filters.forEach(function(filterObj) {\n          if (filterObj) {\n            filters.push(filterObj.toObject());\n          }\n        });\n        var object = extend(\n          this.callSuper(\n            'toObject',\n            ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\n          ), {\n            src: this.getSrc(),\n            filters: filters,\n          });\n        if (this.resizeFilter) {\n          object.resizeFilter = this.resizeFilter.toObject();\n        }\n        return object;\n      },\n\n      /**\n       * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\n       * @return {Boolean}\n       */\n      hasCrop: function() {\n        return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n      },\n\n      /* _TO_SVG_START_ */\n      /**\n       * Returns SVG representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(), x = -this.width / 2, y = -this.height / 2, clipPath = '';\n        if (this.hasCrop()) {\n          var clipPathId = fabric.Object.__uid++;\n          markup.push(\n            '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n            '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\n            '</clipPath>\\n'\n          );\n          clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n        }\n        markup.push('<g transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\">\\n');\n        var imageMarkup = ['\\t<image ', this.getSvgId(), 'xlink:href=\"', this.getSvgSrc(true),\n          '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\n          '\" style=\"', this.getSvgStyles(),\n          // we're essentially moving origin of transformation from top/left corner to the center of the shape\n          // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n          // so that object's center aligns with container's left/top\n          '\" width=\"', this._element.width || this._element.naturalWidth,\n          '\" height=\"', this._element.height || this._element.height,\n          '\"', clipPath,\n          '></image>\\n'];\n        if (this.paintFirst === 'fill') {\n          Array.prototype.push.apply(markup, imageMarkup);\n        }\n        if (this.stroke || this.strokeDashArray) {\n          var origFill = this.fill;\n          this.fill = null;\n          markup.push(\n            '\\t<rect ',\n            'x=\"', x, '\" y=\"', y,\n            '\" width=\"', this.width, '\" height=\"', this.height,\n            '\" style=\"', this.getSvgStyles(),\n            '\"/>\\n'\n          );\n          this.fill = origFill;\n        }\n        if (this.paintFirst !== 'fill') {\n          Array.prototype.push.apply(markup, imageMarkup);\n        }\n        markup.push('</g>\\n');\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n      /* _TO_SVG_END_ */\n\n      /**\n       * Returns source of an image\n       * @param {Boolean} filtered indicates if the src is needed for svg\n       * @return {String} Source of an image\n       */\n      getSrc: function(filtered) {\n        var element = filtered ? this._element : this._originalElement;\n        if (element) {\n          if (element.toDataURL) {\n            return element.toDataURL();\n          }\n          return element.src;\n        }\n        else {\n          return this.src || '';\n        }\n      },\n\n      /**\n       * Sets source of an image\n       * @param {String} src Source string (URL)\n       * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n       * @param {Object} [options] Options object\n       * @return {fabric.Image} thisArg\n       * @chainable\n       */\n      setSrc: function(src, callback, options) {\n        fabric.util.loadImage(src, function(img) {\n          this.setElement(img, options);\n          this._setWidthHeight();\n          callback(this);\n        }, this, options && options.crossOrigin);\n        return this;\n      },\n\n      /**\n       * Returns string representation of an instance\n       * @return {String} String representation of an instance\n       */\n      toString: function() {\n        return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n      },\n\n      applyResizeFilters: function() {\n        var filter = this.resizeFilter,\n            minimumScale = this.minimumScaleTrigger,\n            objectScale = this.getTotalObjectScaling(),\n            scaleX = objectScale.scaleX,\n            scaleY = objectScale.scaleY,\n            elementToFilter = this._filteredEl || this._originalElement;\n        if (this.group) {\n          this.set('dirty', true);\n        }\n        if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n          this._element = elementToFilter;\n          this._filterScalingX = 1;\n          this._filterScalingY = 1;\n          this._lastScaleX = scaleX;\n          this._lastScaleY = scaleY;\n          return;\n        }\n        if (!fabric.filterBackend) {\n          fabric.filterBackend = fabric.initFilterBackend();\n        }\n        var canvasEl = fabric.util.createCanvasElement(),\n            cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\n            sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n        canvasEl.width = sourceWidth;\n        canvasEl.height = sourceHeight;\n        this._element = canvasEl;\n        this._lastScaleX = filter.scaleX = scaleX;\n        this._lastScaleY = filter.scaleY = scaleY;\n        fabric.filterBackend.applyFilters(\n          [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n        this._filterScalingX = canvasEl.width / this._originalElement.width;\n        this._filterScalingY = canvasEl.height / this._originalElement.height;\n      },\n\n      /**\n       * Applies filters assigned to this image (from \"filters\" array) or from filter param\n       * @method applyFilters\n       * @param {Array} filters to be applied\n       * @param {Boolean} forResizing specify if the filter operation is a resize operation\n       * @return {thisArg} return the fabric.Image object\n       * @chainable\n       */\n      applyFilters: function(filters) {\n\n        filters = filters || this.filters || [];\n        filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\n        if (this.group) {\n          this.set('dirty', true);\n        }\n\n        // needs to clear out or WEBGL will not resize correctly\n        this.removeTexture(this.cacheKey + '_filtered');\n\n        if (filters.length === 0) {\n          this._element = this._originalElement;\n          this._filteredEl = null;\n          this._filterScalingX = 1;\n          this._filterScalingY = 1;\n          return this;\n        }\n\n        var imgElement = this._originalElement,\n            sourceWidth = imgElement.naturalWidth || imgElement.width,\n            sourceHeight = imgElement.naturalHeight || imgElement.height;\n\n        if (this._element === this._originalElement) {\n          // if the element is the same we need to create a new element\n          var canvasEl = fabric.util.createCanvasElement();\n          canvasEl.width = sourceWidth;\n          canvasEl.height = sourceHeight;\n          this._element = canvasEl;\n          this._filteredEl = canvasEl;\n        }\n        else {\n          // clear the existing element to get new filter data\n          // also dereference the eventual resized _element\n          this._element = this._filteredEl;\n          this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\n          // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n          this._lastScaleX = 1;\n          this._lastScaleY = 1;\n        }\n        if (!fabric.filterBackend) {\n          fabric.filterBackend = fabric.initFilterBackend();\n        }\n        fabric.filterBackend.applyFilters(\n          filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n        if (this._originalElement.width !== this._element.width ||\n          this._originalElement.height !== this._element.height) {\n          this._filterScalingX = this._element.width / this._originalElement.width;\n          this._filterScalingY = this._element.height / this._originalElement.height;\n        }\n        return this;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n          this.applyResizeFilters();\n        }\n        this._stroke(ctx);\n        this._renderPaintInOrder(ctx);\n      },\n\n      _renderFill: function(ctx) {\n        var w = this.width, h = this.height, sW = w * this._filterScalingX, sH = h * this._filterScalingY,\n            x = -w / 2, y = -h / 2, elementToDraw = this._element;\n        elementToDraw && ctx.drawImage(elementToDraw,\n          this.cropX * this._filterScalingX,\n          this.cropY * this._filterScalingY,\n          sW,\n          sH,\n          x, y, w, h);\n      },\n\n      /**\n       * @private, needed to check if image needs resize\n       */\n      _needsResize: function() {\n        var scale = this.getTotalObjectScaling();\n        return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\n      },\n\n      /**\n       * @private\n       */\n      _resetWidthHeight: function() {\n        this.set(this.getOriginalSize());\n      },\n\n      /**\n       * The Image class's initialization method. This method is automatically\n       * called by the constructor.\n       * @private\n       * @param {HTMLImageElement|String} element The element representing the image\n       * @param {Object} [options] Options object\n       */\n      _initElement: function(element, options) {\n        this.setElement(fabric.util.getById(element), options);\n        fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n      },\n\n      /**\n       * @private\n       * @param {Object} [options] Options object\n       */\n      _initConfig: function(options) {\n        options || (options = { });\n        this.setOptions(options);\n        this._setWidthHeight(options);\n        if (this._element && this.crossOrigin) {\n          this._element.crossOrigin = this.crossOrigin;\n        }\n      },\n\n      /**\n       * @private\n       * @param {Array} filters to be initialized\n       * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n       */\n      _initFilters: function(filters, callback) {\n        if (filters && filters.length) {\n          fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n            callback && callback(enlivenedObjects);\n          }, 'fabric.Image.filters');\n        }\n        else {\n          callback && callback();\n        }\n      },\n\n      /**\n       * @private\n       * Set the width and the height of the image object, using the element or the\n       * options.\n       * @param {Object} [options] Object with width/height properties\n       */\n      _setWidthHeight: function(options) {\n        options || (options = { });\n        var el = this.getElement();\n        this.width = options.width || el.naturalWidth || el.width || 0;\n        this.height = options.height || el.naturalHeight || el.height || 0;\n      },\n\n      /**\n       * Calculate offset for center and scale factor for the image in order to respect\n       * the preserveAspectRatio attribute\n       * @private\n       * @return {Object}\n       */\n      parsePreserveAspectRatioAttribute: function() {\n        var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\n            rWidth = this._element.width, rHeight = this._element.height,\n            scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\n            offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\n        if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\n          if (pAR.meetOrSlice === 'meet') {\n            scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n            offset = (pWidth - rWidth * scaleX) / 2;\n            if (pAR.alignX === 'Min') {\n              offsetLeft = -offset;\n            }\n            if (pAR.alignX === 'Max') {\n              offsetLeft = offset;\n            }\n            offset = (pHeight - rHeight * scaleY) / 2;\n            if (pAR.alignY === 'Min') {\n              offsetTop = -offset;\n            }\n            if (pAR.alignY === 'Max') {\n              offsetTop = offset;\n            }\n          }\n          if (pAR.meetOrSlice === 'slice') {\n            scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n            offset = rWidth - pWidth / scaleX;\n            if (pAR.alignX === 'Mid') {\n              cropX = offset / 2;\n            }\n            if (pAR.alignX === 'Max') {\n              cropX = offset;\n            }\n            offset = rHeight - pHeight / scaleY;\n            if (pAR.alignY === 'Mid') {\n              cropY = offset / 2;\n            }\n            if (pAR.alignY === 'Max') {\n              cropY = offset;\n            }\n            rWidth = pWidth / scaleX;\n            rHeight = pHeight / scaleY;\n          }\n        }\n        else {\n          scaleX = pWidth / rWidth;\n          scaleY = pHeight / rHeight;\n        }\n        return {\n          width: rWidth,\n          height: rHeight,\n          scaleX: scaleX,\n          scaleY: scaleY,\n          offsetLeft: offsetLeft,\n          offsetTop: offsetTop,\n          cropX: cropX,\n          cropY: cropY\n        };\n      }\n    });\n\n    /**\n     * Default CSS class name for canvas\n     * @static\n     * @type String\n     * @default\n     */\n    fabric.Image.CSS_CANVAS = 'canvas-img';\n\n    /**\n     * Alias for getSrc\n     * @static\n     */\n    fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n    /**\n     * Creates an instance of fabric.Image from its object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} callback Callback to invoke when an image instance is created\n     */\n    fabric.Image.fromObject = function(_object, callback) {\n      var object = fabric.util.object.clone(_object);\n      fabric.util.loadImage(object.src, function(img, error) {\n        if (error) {\n          callback && callback(null, error);\n          return;\n        }\n        fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n          object.filters = filters || [];\n          fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\n            object.resizeFilter = resizeFilters[0];\n            var image = new fabric.Image(img, object);\n            callback(image);\n          });\n        });\n      }, null, object.crossOrigin);\n    };\n\n    /**\n     * Creates an instance of fabric.Image from an URL string\n     * @static\n     * @param {String} url URL to create an image from\n     * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n     * @param {Object} [imgOptions] Options object\n     */\n    fabric.Image.fromURL = function(url, callback, imgOptions) {\n      fabric.util.loadImage(url, function(img) {\n        callback && callback(new fabric.Image(img, imgOptions));\n      }, null, imgOptions && imgOptions.crossOrigin);\n    };\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n     * @static\n     * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n     */\n    fabric.Image.ATTRIBUTE_NAMES =\n      fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\n\n    /**\n     * Returns {@link fabric.Image} instance from an SVG element\n     * @static\n     * @param {SVGElement} element Element to parse\n     * @param {Object} [options] Options object\n     * @param {Function} callback Callback to execute when fabric.Image object is created\n     * @return {fabric.Image} Instance of fabric.Image\n     */\n    fabric.Image.fromElement = function(element, callback, options) {\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\n      fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n        extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n    };\n    /* _FROM_SVG_END_ */\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * @private\n     * @return {Number} angle value\n     */\n    _getAngleValueForStraighten: function() {\n      var angle = this.angle % 360;\n      if (angle > 0) {\n        return Math.round((angle - 1) / 90) * 90;\n      }\n      return Math.round(angle / 90) * 90;\n    },\n\n    /**\n     * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    straighten: function() {\n      this.rotate(this._getAngleValueForStraighten());\n      return this;\n    },\n\n    /**\n     * Same as {@link fabric.Object.prototype.straighten} but with animation\n     * @param {Object} callbacks Object with callback functions\n     * @param {Function} [callbacks.onComplete] Invoked on completion\n     * @param {Function} [callbacks.onChange] Invoked on every step of animation\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    fxStraighten: function(callbacks) {\n      callbacks = callbacks || { };\n\n      var empty = function() { },\n          onComplete = callbacks.onComplete || empty,\n          onChange = callbacks.onChange || empty,\n          _this = this;\n\n      fabric.util.animate({\n        startValue: this.get('angle'),\n        endValue: this._getAngleValueForStraighten(),\n        duration: this.FX_DURATION,\n        onChange: function(value) {\n          _this.rotate(value);\n          onChange();\n        },\n        onComplete: function() {\n          _this.setCoords();\n          onComplete();\n        },\n      });\n\n      return this;\n    }\n  });\n\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Straightens object, then rerenders canvas\n     * @param {fabric.Object} object Object to straighten\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    straightenObject: function (object) {\n      object.straighten();\n      this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n     * @param {fabric.Object} object Object to straighten\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    fxStraightenObject: function (object) {\n      object.fxStraighten({\n        onChange: this.requestRenderAllBound\n      });\n      return this;\n    }\n  });\n\n\n  (function() {\n\n    'use strict';\n\n    /**\n     * Tests if webgl supports certain precision\n     * @param {WebGL} Canvas WebGL context to test on\n     * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\n     * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n     */\n    function testPrecision(gl, precision){\n      var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      gl.shaderSource(fragmentShader, fragmentSource);\n      gl.compileShader(fragmentShader);\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Indicate whether this filtering backend is supported by the user's browser.\n     * @param {Number} tileSize check if the tileSize is supported\n     * @returns {Boolean} Whether the user's browser supports WebGL.\n     */\n    fabric.isWebglSupported = function(tileSize) {\n      if (fabric.isLikelyNode) {\n        return false;\n      }\n      tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n      var canvas = document.createElement('canvas');\n      var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      var isSupported = false;\n      // eslint-disable-next-line\n      if (gl) {\n        fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        isSupported = fabric.maxTextureSize >= tileSize;\n        var precisions = ['highp', 'mediump', 'lowp'];\n        for (var i = 0; i < 3; i++){\n          if (testPrecision(gl, precisions[i])){\n            fabric.webGlPrecision = precisions[i];\n            break;\n          };\n        }\n      }\n      this.isSupported = isSupported;\n      return isSupported;\n    };\n\n    fabric.WebglFilterBackend = WebglFilterBackend;\n\n    /**\n     * WebGL filter backend.\n     */\n    function WebglFilterBackend(options) {\n      if (options && options.tileSize) {\n        this.tileSize = options.tileSize;\n      }\n      this.setupGLContext(this.tileSize, this.tileSize);\n      this.captureGPUInfo();\n    };\n\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n\n      tileSize: 2048,\n\n      /**\n       * Experimental. This object is a sort of repository of help layers used to avoid\n       * of recreating them during frequent filtering. If you are previewing a filter with\n       * a slider you problably do not want to create help layers every filter step.\n       * in this object there will be appended some canvases, created once, resized sometimes\n       * cleared never. Clearing is left to the developer.\n       **/\n      resources: {\n\n      },\n\n      /**\n       * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n       */\n      setupGLContext: function(width, height) {\n        this.dispose();\n        this.createWebGLCanvas(width, height);\n        // eslint-disable-next-line\n        this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n        this.chooseFastestCopyGLTo2DMethod(width, height);\n      },\n\n      /**\n       * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n       * putImageData is faster than drawImage for that specific operation.\n       */\n      chooseFastestCopyGLTo2DMethod: function(width, height) {\n        var canMeasurePerf = typeof window.performance !== 'undefined';\n        var canUseImageData;\n        try {\n          new ImageData(1, 1);\n          canUseImageData = true;\n        }\n        catch (e) {\n          canUseImageData = false;\n        }\n        // eslint-disable-next-line no-undef\n        var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\n        // eslint-disable-next-line no-undef\n        var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\n\n        if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n          return;\n        }\n\n        var targetCanvas = fabric.util.createCanvasElement();\n        // eslint-disable-next-line no-undef\n        var imageBuffer = new ArrayBuffer(width * height * 4);\n        var testContext = {\n          imageBuffer: imageBuffer,\n          destinationWidth: width,\n          destinationHeight: height,\n          targetCanvas: targetCanvas\n        };\n        var startTime, drawImageTime, putImageDataTime;\n        targetCanvas.width = width;\n        targetCanvas.height = height;\n\n        startTime = window.performance.now();\n        copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n        drawImageTime = window.performance.now() - startTime;\n\n        startTime = window.performance.now();\n        copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n        putImageDataTime = window.performance.now() - startTime;\n\n        if (drawImageTime > putImageDataTime) {\n          this.imageBuffer = imageBuffer;\n          this.copyGLTo2D = copyGLTo2DPutImageData;\n        }\n        else {\n          this.copyGLTo2D = copyGLTo2DDrawImage;\n        }\n      },\n\n      /**\n       * Create a canvas element and associated WebGL context and attaches them as\n       * class properties to the GLFilterBackend class.\n       */\n      createWebGLCanvas: function(width, height) {\n        var canvas = fabric.util.createCanvasElement();\n        canvas.width = width;\n        canvas.height = height;\n        var glOptions = {\n              alpha: true,\n              premultipliedAlpha: false,\n              depth: false,\n              stencil: false,\n              antialias: false\n            },\n            gl = canvas.getContext('webgl', glOptions);\n        if (!gl) {\n          gl = canvas.getContext('experimental-webgl', glOptions);\n        }\n        if (!gl) {\n          return;\n        }\n        gl.clearColor(0, 0, 0, 0);\n        // this canvas can fire webglcontextlost and webglcontextrestored\n        this.canvas = canvas;\n        this.gl = gl;\n      },\n\n      /**\n       * Attempts to apply the requested filters to the source provided, drawing the filtered output\n       * to the provided target canvas.\n       *\n       * @param {Array} filters The filters to apply.\n       * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\n       * @param {Number} width The width of the source input.\n       * @param {Number} height The height of the source input.\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n       * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n       * omitted, caching will be skipped.\n       */\n      applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n        var gl = this.gl;\n        var cachedTexture;\n        if (cacheKey) {\n          cachedTexture = this.getCachedTexture(cacheKey, source);\n        }\n        var pipelineState = {\n          originalWidth: source.width || source.originalWidth,\n          originalHeight: source.height || source.originalHeight,\n          sourceWidth: width,\n          sourceHeight: height,\n          destinationWidth: width,\n          destinationHeight: height,\n          context: gl,\n          sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n          targetTexture: this.createTexture(gl, width, height),\n          originalTexture: cachedTexture ||\n            this.createTexture(gl, width, height, !cachedTexture && source),\n          passes: filters.length,\n          webgl: true,\n          aPosition: this.aPosition,\n          programCache: this.programCache,\n          pass: 0,\n          filterBackend: this,\n          targetCanvas: targetCanvas\n        };\n        var tempFbo = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n        filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\n        resizeCanvasIfNeeded(pipelineState);\n        this.copyGLTo2D(gl, pipelineState);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(pipelineState.sourceTexture);\n        gl.deleteTexture(pipelineState.targetTexture);\n        gl.deleteFramebuffer(tempFbo);\n        targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\n        return pipelineState;\n      },\n\n      /**\n       * The same as the applyFilter method but with additional logging of WebGL\n       * errors.\n       */\n      applyFiltersDebug: function(filters, source, width, height, targetCanvas, cacheKey) {\n        // The following code is useful when debugging a specific issue but adds ~10x slowdown.\n        var gl = this.gl;\n        var ret = this.applyFilters(filters, source, width, height, targetCanvas, cacheKey);\n        var glError = gl.getError();\n        if (glError !== gl.NO_ERROR) {\n          var errorString = this.glErrorToString(gl, glError);\n          var error = new Error('WebGL Error ' + errorString);\n          error.glErrorCode = glError;\n          throw error;\n        }\n        return ret;\n      },\n\n      glErrorToString: function(context, errorCode) {\n        if (!context) {\n          return 'Context undefined for error code: ' + errorCode;\n        }\n        else if (typeof errorCode !== 'number') {\n          return 'Error code is not a number';\n        }\n        switch (errorCode) {\n          case context.NO_ERROR:\n            return 'NO_ERROR';\n          case context.INVALID_ENUM:\n            return 'INVALID_ENUM';\n          case context.INVALID_VALUE:\n            return 'INVALID_VALUE';\n          case context.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n          case context.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n          case context.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n          case context.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n          default:\n            return 'UNKNOWN_ERROR';\n        }\n      },\n\n      /**\n       * Detach event listeners, remove references, and clean up caches.\n       */\n      dispose: function() {\n        if (this.canvas) {\n          this.canvas = null;\n          this.gl = null;\n        }\n        this.clearWebGLCaches();\n      },\n\n      /**\n       * Wipe out WebGL-related caches.\n       */\n      clearWebGLCaches: function() {\n        this.programCache = {};\n        this.textureCache = {};\n      },\n\n      /**\n       * Create a WebGL texture object.\n       *\n       * Accepts specific dimensions to initialize the textuer to or a source image.\n       *\n       * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n       * @param {Number} width The width to initialize the texture at.\n       * @param {Number} height The height to initialize the texture.\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\n       * @returns {WebGLTexture}\n       */\n      createTexture: function(gl, width, height, textureImageSource) {\n        var texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (textureImageSource) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n        }\n        else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n        return texture;\n      },\n\n      /**\n       * Can be optionally used to get a texture from the cache array\n       *\n       * If an existing texture is not found, a new texture is created and cached.\n       *\n       * @param {String} uniqueId A cache key to use to find an existing texture.\n       * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n       * texture cache entry if one does not already exist.\n       */\n      getCachedTexture: function(uniqueId, textureImageSource) {\n        if (this.textureCache[uniqueId]) {\n          return this.textureCache[uniqueId];\n        }\n        else {\n          var texture = this.createTexture(\n            this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n          this.textureCache[uniqueId] = texture;\n          return texture;\n        }\n      },\n\n      /**\n       * Clear out cached resources related to a source image that has been\n       * filtered previously.\n       *\n       * @param {String} cacheKey The cache key provided when the source image was filtered.\n       */\n      evictCachesForKey: function(cacheKey) {\n        if (this.textureCache[cacheKey]) {\n          this.gl.deleteTexture(this.textureCache[cacheKey]);\n          delete this.textureCache[cacheKey];\n        }\n      },\n\n      copyGLTo2D: copyGLTo2DDrawImage,\n\n      /**\n       * Attempt to extract GPU information strings from a WebGL context.\n       *\n       * Useful information when debugging or blacklisting specific GPUs.\n       *\n       * @returns {Object} A GPU info object with renderer and vendor strings.\n       */\n      captureGPUInfo: function() {\n        if (this.gpuInfo) {\n          return this.gpuInfo;\n        }\n        var gl = this.gl;\n        var ext = gl.getExtension('WEBGL_debug_renderer_info');\n        var gpuInfo = { renderer: '', vendor: '' };\n        if (ext) {\n          var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n          var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n          if (renderer) {\n            gpuInfo.renderer = renderer.toLowerCase();\n          }\n          if (vendor) {\n            gpuInfo.vendor = vendor.toLowerCase();\n          }\n        }\n        this.gpuInfo = gpuInfo;\n        return gpuInfo;\n      },\n    };\n  })();\n\n  function resizeCanvasIfNeeded(pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas,\n        width = targetCanvas.width, height = targetCanvas.height,\n        dWidth = pipelineState.destinationWidth,\n        dHeight = pipelineState.destinationHeight;\n\n    if (width !== dWidth || height !== dHeight) {\n      targetCanvas.width = dWidth;\n      targetCanvas.height = dHeight;\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  function copyGLTo2DDrawImage(gl, pipelineState) {\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\n        ctx = targetCanvas.getContext('2d');\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    var sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\n      targetCanvas.width, targetCanvas.height);\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  function copyGLTo2DPutImageData(gl, pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\n        dWidth = pipelineState.destinationWidth,\n        dHeight = pipelineState.destinationHeight,\n        numBytes = dWidth * dHeight * 4;\n\n    // eslint-disable-next-line no-undef\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    // eslint-disable-next-line no-undef\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n\n  (function() {\n\n    'use strict';\n\n    var noop = function() {};\n\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n\n    /**\n     * Canvas 2D filter backend.\n     */\n    function Canvas2dFilterBackend() {};\n\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n      evictCachesForKey: noop,\n      dispose: noop,\n      clearWebGLCaches: noop,\n\n      /**\n       * Experimental. This object is a sort of repository of help layers used to avoid\n       * of recreating them during frequent filtering. If you are previewing a filter with\n       * a slider you probably do not want to create help layers every filter step.\n       * in this object there will be appended some canvases, created once, resized sometimes\n       * cleared never. Clearing is left to the developer.\n       **/\n      resources: {\n\n      },\n\n      /**\n       * Apply a set of filters against a source image and draw the filtered output\n       * to the provided destination canvas.\n       *\n       * @param {EnhancedFilter} filters The filter to apply.\n       * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n       * @param {Number} sourceWidth The width of the source input.\n       * @param {Number} sourceHeight The height of the source input.\n       * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n       */\n      applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n        var ctx = targetCanvas.getContext('2d');\n        ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n        var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n        var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n        var pipelineState = {\n          sourceWidth: sourceWidth,\n          sourceHeight: sourceHeight,\n          imageData: imageData,\n          originalEl: sourceElement,\n          originalImageData: originalImageData,\n          canvasEl: targetCanvas,\n          ctx: ctx,\n          filterBackend: this,\n        };\n        filters.forEach(function(filter) { filter.applyTo(pipelineState); });\n        if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n          targetCanvas.width = pipelineState.imageData.width;\n          targetCanvas.height = pipelineState.imageData.height;\n        }\n        ctx.putImageData(pipelineState.imageData, 0, 0);\n        return pipelineState;\n      },\n\n    };\n  })();\n\n\n  /**\n   * @namespace fabric.Image.filters\n   * @memberOf fabric.Image\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   */\n  fabric.Image.filters = fabric.Image.filters || { };\n\n  /**\n   * Root filter class from which all filter classes inherit from\n   * @class fabric.Image.filters.BaseFilter\n   * @memberOf fabric.Image.filters\n   */\n  fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'BaseFilter',\n\n    /**\n     * Array of attributes to send with buffers. do not modify\n     * @private\n     */\n\n    vertexSource: 'attribute vec2 aPosition;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vTexCoord = aPosition;\\n' +\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n      '}',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'void main() {\\n' +\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n      '}',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * Sets filter's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n    },\n\n    /**\n     * Compile this filter's shader program.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n     * @param {String} fragmentSource fragmentShader source for compilation\n     * @param {String} vertexSource vertexShader source for compilation\n     */\n    createProgram: function(gl, fragmentSource, vertexSource) {\n      fragmentSource = fragmentSource || this.fragmentSource;\n      vertexSource = vertexSource || this.vertexSource;\n      if (fabric.webGlPrecision !== 'highp'){\n        fragmentSource = fragmentSource.replace(\n          /precision highp float/g,\n          'precision ' + fabric.webGlPrecision + ' float'\n        );\n      }\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      gl.shaderSource(vertexShader, vertexSource);\n      gl.compileShader(vertexShader);\n      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n        throw new Error(\n          // eslint-disable-next-line prefer-template\n          'Vertex shader compile error for ' + this.type + ': ' +\n          gl.getShaderInfoLog(vertexShader)\n        );\n      }\n\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      gl.shaderSource(fragmentShader, fragmentSource);\n      gl.compileShader(fragmentShader);\n      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n        throw new Error(\n          // eslint-disable-next-line prefer-template\n          'Fragment shader compile error for ' + this.type + ': ' +\n          gl.getShaderInfoLog(fragmentShader)\n        );\n      }\n\n      var program = gl.createProgram();\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(\n          // eslint-disable-next-line prefer-template\n          'Shader link error for \"${this.type}\" ' +\n          gl.getProgramInfoLog(program)\n        );\n      }\n\n      var attributeLocations = this.getAttributeLocations(gl, program);\n      var uniformLocations = this.getUniformLocations(gl, program) || { };\n      uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n      uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n      return {\n        program: program,\n        attributeLocations: attributeLocations,\n        uniformLocations: uniformLocations\n      };\n    },\n\n    /**\n     * Return a map of attribute names to WebGLAttributeLocation objects.\n     *\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n     * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n     * @returns {Object} A map of attribute names to attribute locations.\n     */\n    getAttributeLocations: function(gl, program) {\n      return {\n        aPosition: gl.getAttribLocation(program, 'aPosition'),\n      };\n    },\n\n    /**\n     * Return a map of uniform names to WebGLUniformLocation objects.\n     *\n     * Intended to be overridden by subclasses.\n     *\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n     * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n     * @returns {Object} A map of uniform names to uniform locations.\n     */\n    getUniformLocations: function (/* gl, program */) {\n      // in case i do not need any special uniform i need to return an empty object\n      return { };\n    },\n\n    /**\n     * Send attribute data from this filter to its shader program on the GPU.\n     *\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n     * @param {Object} attributeLocations A map of shader attribute names to their locations.\n     */\n    sendAttributeData: function(gl, attributeLocations, aPositionData) {\n      var attributeLocation = attributeLocations.aPosition;\n      var buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.enableVertexAttribArray(attributeLocation);\n      gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n      gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n    },\n\n    _setupFrameBuffer: function(options) {\n      var gl = options.context, width, height;\n      if (options.passes > 1) {\n        width = options.destinationWidth;\n        height = options.destinationHeight;\n        if (options.sourceWidth !== width || options.sourceHeight !== height) {\n          gl.deleteTexture(options.targetTexture);\n          options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n        }\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\n          options.targetTexture, 0);\n      }\n      else {\n        // draw last filter on canvas and not to framebuffer.\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.finish();\n      }\n    },\n\n    _swapTextures: function(options) {\n      options.passes--;\n      options.pass++;\n      var temp = options.targetTexture;\n      options.targetTexture = options.sourceTexture;\n      options.sourceTexture = temp;\n    },\n\n    /**\n     * Generic isNeutral implementation for one parameter based filters.\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n     * @param {Object} options\n     **/\n    isNeutralState: function(/* options */) {\n      var main = this.mainParameter,\n          _class = fabric.Image.filters[this.type].prototype;\n      if (main) {\n        if (Array.isArray(_class[main])) {\n          for (var i = _class[main].length; i--;) {\n            if (this[main][i] !== _class[main][i]) {\n              return false;\n            }\n          }\n          return true;\n        }\n        else {\n          return _class[main] === this[main];\n        }\n      }\n      else {\n        return false;\n      }\n    },\n\n    /**\n     * Apply this filter to the input image data provided.\n     *\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      if (options.webgl) {\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      if (!options.programCache.hasOwnProperty(this.type)) {\n        options.programCache[this.type] = this.createProgram(options.context);\n      }\n      return options.programCache[this.type];\n    },\n\n    /**\n     * Apply this filter using webgl.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyToWebGL: function(options) {\n      var gl = options.context;\n      var shader = this.retrieveShader(options);\n      if (options.pass === 0 && options.originalTexture) {\n        gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n      }\n      else {\n        gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n      }\n      gl.useProgram(shader.program);\n      this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n      gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n      gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n      this.sendUniformData(gl, shader.uniformLocations);\n      gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    },\n\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\n      gl.activeTexture(textureUnit);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      // reset active texture to 0 as usual\n      gl.activeTexture(gl.TEXTURE0);\n    },\n\n    unbindAdditionalTexture: function(gl, textureUnit) {\n      gl.activeTexture(textureUnit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      gl.activeTexture(gl.TEXTURE0);\n    },\n\n    getMainParameter: function() {\n      return this[this.mainParameter];\n    },\n\n    setMainParameter: function(value) {\n      this[this.mainParameter] = value;\n    },\n\n    /**\n     * Send uniform data from this filter to its shader program on the GPU.\n     *\n     * Intended to be overridden by subclasses.\n     *\n     * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n     * @param {Object} uniformLocations A map of shader uniform names to their locations.\n     */\n    sendUniformData: function(/* gl, uniformLocations */) {\n      // Intentionally left blank.  Override me in subclasses.\n    },\n\n    /**\n     * If needed by a 2d filter, this functions can create an helper canvas to be used\n     * remember that options.targetCanvas is available for use till end of chain.\n     */\n    createHelpLayer: function(options) {\n      if (!options.helpLayer) {\n        var helpLayer = document.createElement('canvas');\n        helpLayer.width = options.sourceWidth;\n        helpLayer.height = options.sourceHeight;\n        options.helpLayer = helpLayer;\n      }\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      var object = { type: this.type }, mainP = this.mainParameter;\n      if (mainP) {\n        object[mainP] = this[mainP];\n      }\n      return object;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @return {Object} JSON\n     */\n    toJSON: function() {\n      // delegate, not alias\n      return this.toObject();\n    }\n  });\n\n  fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n    var filter = new fabric.Image.filters[object.type](object);\n    callback && callback(filter);\n    return filter;\n  };\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Color Matrix filter class\n     * @class fabric.Image.filters.ColorMatrix\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\n     * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\n     * @example <caption>Kodachrome filter</caption>\n     * var filter = new fabric.Image.filters.ColorMatrix({\n     *  matrix: [\n         1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n         -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n         -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n         0, 0, 0, 1, 0\n        ]\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'ColorMatrix',\n\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'uniform mat4 uColorMatrix;\\n' +\n        'uniform vec4 uConstants;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'color *= uColorMatrix;\\n' +\n          'color += uConstants;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      /**\n       * Colormatrix for pixels.\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n       * outside the -1, 1 range.\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n       * @param {Array} matrix array of 20 numbers.\n       * @default\n       */\n      matrix: [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0\n      ],\n\n      mainParameter: 'matrix',\n\n      /**\n       * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\n       * to save some calculation\n       */\n      colorsOnly: true,\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       */\n      initialize: function(options) {\n        this.callSuper('initialize', options);\n        // create a new array instead mutating the prototype with push\n        this.matrix = this.matrix.slice(0);\n      },\n\n      /**\n       * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data,\n            iLen = data.length,\n            m = this.matrix,\n            r, g, b, a, i, colorsOnly = this.colorsOnly;\n\n        for (i = 0; i < iLen; i += 4) {\n          r = data[i];\n          g = data[i + 1];\n          b = data[i + 2];\n          if (colorsOnly) {\n            data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n          }\n          else {\n            a = data[i + 3];\n            data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n            data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n            data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n            data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n          }\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\n          uConstants: gl.getUniformLocation(program, 'uConstants'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        var m = this.matrix,\n            matrix = [\n              m[0], m[1], m[2], m[3],\n              m[5], m[6], m[7], m[8],\n              m[10], m[11], m[12], m[13],\n              m[15], m[16], m[17], m[18]\n            ],\n            constants = [m[4], m[9], m[14], m[19]];\n        gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n        gl.uniform4fv(uniformLocations.uConstants, constants);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] function to invoke after filter creation\n     * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\n     */\n    fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Brightness filter class\n     * @class fabric.Image.filters.Brightness\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Brightness({\n     *   brightness: 0.05\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Brightness',\n\n      /**\n       * Fragment source for the brightness program\n       */\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uBrightness;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'color.rgb += uBrightness;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      /**\n       * Brightness value, from -1 to 1.\n       * translated to -255 to 255 for 2d\n       * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n       * @param {Number} brightness\n       * @default\n       */\n      brightness: 0,\n\n      /**\n       * Describe the property that is the filter parameter\n       * @param {String} m\n       * @default\n       */\n      mainParameter: 'brightness',\n\n      /**\n      * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n      *\n      * @param {Object} options\n      * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n      */\n      applyTo2d: function(options) {\n        if (this.brightness === 0) {\n          return;\n        }\n        var imageData = options.imageData,\n            data = imageData.data, i, len = data.length,\n            brightness = Math.round(this.brightness * 255);\n        for (i = 0; i < len; i += 4) {\n          data[i] = data[i] + brightness;\n          data[i + 1] = data[i + 1] + brightness;\n          data[i + 2] = data[i + 2] + brightness;\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n     */\n    fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n     * @class fabric.Image.filters.Convolute\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example <caption>Sharpen filter</caption>\n     * var filter = new fabric.Image.filters.Convolute({\n     *   matrix: [ 0, -1,  0,\n     *            -1,  5, -1,\n     *             0, -1,  0 ]\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     * @example <caption>Blur filter</caption>\n     * var filter = new fabric.Image.filters.Convolute({\n     *   matrix: [ 1/9, 1/9, 1/9,\n     *             1/9, 1/9, 1/9,\n     *             1/9, 1/9, 1/9 ]\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     * @example <caption>Emboss filter</caption>\n     * var filter = new fabric.Image.filters.Convolute({\n     *   matrix: [ 1,   1,  1,\n     *             1, 0.7, -1,\n     *            -1,  -1, -1 ]\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     * @example <caption>Emboss filter with opaqueness</caption>\n     * var filter = new fabric.Image.filters.Convolute({\n     *   opaque: true,\n     *   matrix: [ 1,   1,  1,\n     *             1, 0.7, -1,\n     *            -1,  -1, -1 ]\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n    filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Convolute',\n\n      /*\n       * Opaque value (true/false)\n       */\n      opaque: false,\n\n      /*\n       * matrix for the filter, max 9x9\n       */\n      matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n\n      /**\n       * Fragment source for the brightness program\n       */\n      fragmentSource: {\n        Convolute_3_1: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[9];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n        Convolute_3_0: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[9];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\n            'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n            'gl_FragColor = color;\\n' +\n            'gl_FragColor.a = alpha;\\n' +\n          '}',\n        Convolute_5_1: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[25];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n        Convolute_5_0: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[25];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\n            'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n            'gl_FragColor = color;\\n' +\n            'gl_FragColor.a = alpha;\\n' +\n          '}',\n        Convolute_7_1: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[49];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n        Convolute_7_0: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[49];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\n            'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n            'gl_FragColor = color;\\n' +\n            'gl_FragColor.a = alpha;\\n' +\n          '}',\n        Convolute_9_1: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[81];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 0);\\n' +\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n                'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n        Convolute_9_0: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform float uMatrix[81];\\n' +\n          'uniform float uStepW;\\n' +\n          'uniform float uStepH;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = vec4(0, 0, 0, 1);\\n' +\n            'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n              'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n                'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n                'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\n              '}\\n' +\n            '}\\n' +\n            'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n            'gl_FragColor = color;\\n' +\n            'gl_FragColor.a = alpha;\\n' +\n          '}',\n      },\n\n      /**\n       * Constructor\n       * @memberOf fabric.Image.filters.Convolute.prototype\n       * @param {Object} [options] Options object\n       * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n       * @param {Array} [options.matrix] Filter matrix\n       */\n\n\n      /**\n      * Retrieves the cached shader.\n      * @param {Object} options\n      * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n      * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n      */\n      retrieveShader: function(options) {\n        var size = Math.sqrt(this.matrix.length);\n        var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\n        var shaderSource = this.fragmentSource[cacheKey];\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n        }\n        return options.programCache[cacheKey];\n      },\n\n      /**\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data,\n            weights = this.matrix,\n            side = Math.round(Math.sqrt(weights.length)),\n            halfSide = Math.floor(side / 2),\n            sw = imageData.width,\n            sh = imageData.height,\n            output = options.ctx.createImageData(sw, sh),\n            dst = output.data,\n            // go through the destination image pixels\n            alphaFac = this.opaque ? 1 : 0,\n            r, g, b, a, dstOff,\n            scx, scy, srcOff, wt,\n            x, y, cx, cy;\n\n        for (y = 0; y < sh; y++) {\n          for (x = 0; x < sw; x++) {\n            dstOff = (y * sw + x) * 4;\n            // calculate the weighed sum of the source image pixels that\n            // fall under the convolution matrix\n            r = 0; g = 0; b = 0; a = 0;\n\n            for (cy = 0; cy < side; cy++) {\n              for (cx = 0; cx < side; cx++) {\n                scy = y + cy - halfSide;\n                scx = x + cx - halfSide;\n\n                // eslint-disable-next-line max-depth\n                if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n                  continue;\n                }\n\n                srcOff = (scy * sw + scx) * 4;\n                wt = weights[cy * side + cx];\n\n                r += data[srcOff] * wt;\n                g += data[srcOff + 1] * wt;\n                b += data[srcOff + 2] * wt;\n                // eslint-disable-next-line max-depth\n                if (!alphaFac) {\n                  a += data[srcOff + 3] * wt;\n                }\n              }\n            }\n            dst[dstOff] = r;\n            dst[dstOff + 1] = g;\n            dst[dstOff + 2] = b;\n            if (!alphaFac) {\n              dst[dstOff + 3] = a;\n            }\n            else {\n              dst[dstOff + 3] = data[dstOff + 3];\n            }\n          }\n        }\n        options.imageData = output;\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uMatrix: gl.getUniformLocation(program, 'uMatrix'),\n          uOpaque: gl.getUniformLocation(program, 'uOpaque'),\n          uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\n          uSize: gl.getUniformLocation(program, 'uSize'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return extend(this.callSuper('toObject'), {\n          opaque: this.opaque,\n          matrix: this.matrix\n        });\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n     */\n    fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Grayscale image filter class\n     * @class fabric.Image.filters.Grayscale\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Grayscale();\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Grayscale',\n\n      fragmentSource: {\n        average: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n            'float average = (color.r + color.b + color.g) / 3.0;\\n' +\n            'gl_FragColor = vec4(average, average, average, color.a);\\n' +\n          '}',\n        lightness: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform int uMode;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n            'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n          '}',\n        luminosity: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform int uMode;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n            'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\n            'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n          '}',\n      },\n\n\n      /**\n       * Grayscale mode, between 'average', 'lightness', 'luminosity'\n       * @param {String} type\n       * @default\n       */\n      mode: 'average',\n\n      mainParameter: 'mode',\n\n      /**\n       * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data, i,\n            len = data.length, value,\n            mode = this.mode;\n        for (i = 0; i < len; i += 4) {\n          if (mode === 'average') {\n            value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          }\n          else if (mode === 'lightness') {\n            value = (Math.min(data[i], data[i + 1], data[i + 2]) +\n              Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n          }\n          else if (mode === 'luminosity') {\n            value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n          }\n          data[i] = value;\n          data[i + 1] = value;\n          data[i + 2] = value;\n        }\n      },\n\n      /**\n       * Retrieves the cached shader.\n       * @param {Object} options\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      retrieveShader: function(options) {\n        var cacheKey = this.type + '_' + this.mode;\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\n          var shaderSource = this.fragmentSource[this.mode];\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n        }\n        return options.programCache[cacheKey];\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uMode: gl.getUniformLocation(program, 'uMode'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        // default average mode.\n        var mode = 1;\n        gl.uniform1i(uniformLocations.uMode, mode);\n      },\n\n      /**\n       * Grayscale filter isNeutralState implementation\n       * The filter is never neutral\n       * on the image\n       **/\n      isNeutralState: function() {\n        return false;\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n     */\n    fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Invert filter class\n     * @class fabric.Image.filters.Invert\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Invert();\n     * object.filters.push(filter);\n     * object.applyFilters(canvas.renderAll.bind(canvas));\n     */\n    filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Invert',\n\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uInvert;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'if (uInvert == 1) {\\n' +\n            'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\n          '} else {\\n' +\n            'gl_FragColor = color;\\n' +\n          '}\\n' +\n        '}',\n\n      /**\n       * Filter invert. if false, does nothing\n       * @param {Boolean} invert\n       * @default\n       */\n      invert: true,\n\n      mainParameter: 'invert',\n\n      /**\n       * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data, i,\n            len = data.length;\n        for (i = 0; i < len; i += 4) {\n          data[i] = 255 - data[i];\n          data[i + 1] = 255 - data[i + 1];\n          data[i + 2] = 255 - data[i + 2];\n        }\n      },\n\n      /**\n       * Invert filter isNeutralState implementation\n       * Used only in image applyFilters to discard filters that will not have an effect\n       * on the image\n       * @param {Object} options\n       **/\n      isNeutralState: function() {\n        return !this.invert;\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uInvert: gl.getUniformLocation(program, 'uInvert'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1i(uniformLocations.uInvert, this.invert);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n     */\n    fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Noise filter class\n     * @class fabric.Image.filters.Noise\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Noise({\n     *   noise: 700\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n    filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Noise',\n\n      /**\n       * Fragment source for the noise program\n       */\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uStepH;\\n' +\n        'uniform float uNoise;\\n' +\n        'uniform float uSeed;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'float rand(vec2 co, float seed, float vScale) {\\n' +\n          'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\n        '}\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      /**\n       * Describe the property that is the filter parameter\n       * @param {String} m\n       * @default\n       */\n      mainParameter: 'noise',\n\n      /**\n       * Noise value, from\n       * @param {Number} noise\n       * @default\n       */\n      noise: 0,\n\n      /**\n       * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        if (this.noise === 0) {\n          return;\n        }\n        var imageData = options.imageData,\n            data = imageData.data, i, len = data.length,\n            noise = this.noise, rand;\n\n        for (i = 0, len = data.length; i < len; i += 4) {\n\n          rand = (0.5 - Math.random()) * noise;\n\n          data[i] += rand;\n          data[i + 1] += rand;\n          data[i + 2] += rand;\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uNoise: gl.getUniformLocation(program, 'uNoise'),\n          uSeed: gl.getUniformLocation(program, 'uSeed'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n        gl.uniform1f(uniformLocations.uSeed, Math.random());\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return extend(this.callSuper('toObject'), {\n          noise: this.noise\n        });\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n     */\n    fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Pixelate filter class\n     * @class fabric.Image.filters.Pixelate\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Pixelate({\n     *   blocksize: 8\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Pixelate',\n\n      blocksize: 4,\n\n      mainParameter: 'blocksize',\n\n      /**\n       * Fragment source for the Pixelate program\n       */\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uBlocksize;\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'float blockW = uBlocksize * uStepW;\\n' +\n          'float blockH = uBlocksize * uStepW;\\n' +\n          'int posX = int(vTexCoord.x / blockW);\\n' +\n          'int posY = int(vTexCoord.y / blockH);\\n' +\n          'float fposX = float(posX);\\n' +\n          'float fposY = float(posY);\\n' +\n          'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\n          'vec4 color = texture2D(uTexture, squareCoords);\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      /**\n       * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data,\n            iLen = imageData.height,\n            jLen = imageData.width,\n            index, i, j, r, g, b, a,\n            _i, _j, _iLen, _jLen;\n\n        for (i = 0; i < iLen; i += this.blocksize) {\n          for (j = 0; j < jLen; j += this.blocksize) {\n\n            index = (i * 4) * jLen + (j * 4);\n\n            r = data[index];\n            g = data[index + 1];\n            b = data[index + 2];\n            a = data[index + 3];\n\n            _iLen = Math.min(i + this.blocksize, iLen);\n            _jLen = Math.min(j + this.blocksize, jLen);\n            for (_i = i; _i < _iLen; _i++) {\n              for (_j = j; _j < _jLen; _j++) {\n                index = (_i * 4) * jLen + (_j * 4);\n                data[index] = r;\n                data[index + 1] = g;\n                data[index + 2] = b;\n                data[index + 3] = a;\n              }\n            }\n          }\n        }\n      },\n\n      /**\n       * Indicate when the filter is not gonna apply changes to the image\n       **/\n      isNeutralState: function() {\n        return this.blocksize === 1;\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\n          uStepW: gl.getUniformLocation(program, 'uStepW'),\n          uStepH: gl.getUniformLocation(program, 'uStepH'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n     */\n    fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        extend = fabric.util.object.extend,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Remove white filter class\n     * @class fabric.Image.filters.RemoveColor\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.RemoveColor({\n     *   threshold: 0.2,\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n    filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'RemoveColor',\n\n      /**\n       * Color to remove, in any format understood by fabric.Color.\n       * @param {String} type\n       * @default\n       */\n      color: '#FFFFFF',\n\n      /**\n       * Fragment source for the brightness program\n       */\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec4 uLow;\\n' +\n        'uniform vec4 uHigh;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n          'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\n            'gl_FragColor.a = 0.0;\\n' +\n          '}\\n' +\n        '}',\n\n      /**\n       * distance to actual color, as value up or down from each r,g,b\n       * between 0 and 1\n       **/\n      distance: 0.02,\n\n      /**\n       * For color to remove inside distance, use alpha channel for a smoother deletion\n       * NOT IMPLEMENTED YET\n       **/\n      useAlpha: false,\n\n      /**\n       * Constructor\n       * @memberOf fabric.Image.filters.RemoveWhite.prototype\n       * @param {Object} [options] Options object\n       * @param {Number} [options.color=#RRGGBB] Threshold value\n       * @param {Number} [options.distance=10] Distance value\n       */\n\n      /**\n       * Applies filter to canvas element\n       * @param {Object} canvasEl Canvas element to apply filter to\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data, i,\n            distance = this.distance * 255,\n            r, g, b,\n            source = new fabric.Color(this.color).getSource(),\n            lowC = [\n              source[0] - distance,\n              source[1] - distance,\n              source[2] - distance,\n            ],\n            highC = [\n              source[0] + distance,\n              source[1] + distance,\n              source[2] + distance,\n            ];\n\n\n        for (i = 0; i < data.length; i += 4) {\n          r = data[i];\n          g = data[i + 1];\n          b = data[i + 2];\n\n          if (r > lowC[0] &&\n              g > lowC[1] &&\n              b > lowC[2] &&\n              r < highC[0] &&\n              g < highC[1] &&\n              b < highC[2]) {\n            data[i + 3] = 0;\n          }\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uLow: gl.getUniformLocation(program, 'uLow'),\n          uHigh: gl.getUniformLocation(program, 'uHigh'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        var source = new fabric.Color(this.color).getSource(),\n            distance = parseFloat(this.distance),\n            lowC = [\n              0 + source[0] / 255 - distance,\n              0 + source[1] / 255 - distance,\n              0 + source[2] / 255 - distance,\n              1\n            ],\n            highC = [\n              source[0] / 255 + distance,\n              source[1] / 255 + distance,\n              source[2] / 255 + distance,\n              1\n            ];\n        gl.uniform4fv(uniformLocations.uLow, lowC);\n        gl.uniform4fv(uniformLocations.uHigh, highC);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return extend(this.callSuper('toObject'), {\n          color: this.color,\n          distance: this.distance\n        });\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\n     */\n    fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    var matrices = {\n      Brownie: [\n        0.59970,0.34553,-0.27082,0,0.186,\n        -0.03770,0.86095,0.15059,0,-0.1449,\n        0.24113,-0.07441,0.44972,0,-0.02965,\n        0,0,0,1,0\n      ],\n      Vintage: [\n        0.62793,0.32021,-0.03965,0,0.03784,\n        0.02578,0.64411,0.03259,0,0.02926,\n        0.04660,-0.08512,0.52416,0,0.02023,\n        0,0,0,1,0\n      ],\n      Kodachrome: [\n        1.12855,-0.39673,-0.03992,0,0.24991,\n        -0.16404,1.08352,-0.05498,0,0.09698,\n        -0.16786,-0.56034,1.60148,0,0.13972,\n        0,0,0,1,0\n      ],\n      Technicolor: [\n        1.91252,-0.85453,-0.09155,0,0.04624,\n        -0.30878,1.76589,-0.10601,0,-0.27589,\n        -0.23110,-0.75018,1.84759,0,0.12137,\n        0,0,0,1,0\n      ],\n      Polaroid: [\n        1.438,-0.062,-0.062,0,0,\n        -0.122,1.378,-0.122,0,0,\n        -0.016,-0.016,1.483,0,0,\n        0,0,0,1,0\n      ],\n      Sepia: [\n        0.393, 0.769, 0.189, 0, 0,\n        0.349, 0.686, 0.168, 0, 0,\n        0.272, 0.534, 0.131, 0, 0,\n        0, 0, 0, 1, 0\n      ],\n      BlackWhite: [\n        1.5, 1.5, 1.5, 0, -1,\n        1.5, 1.5, 1.5, 0, -1,\n        1.5, 1.5, 1.5, 0, -1,\n        0, 0, 0, 1, 0,\n      ]\n    };\n\n    for (var key in matrices) {\n      filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n        /**\n         * Filter type\n         * @param {String} type\n         * @default\n         */\n        type: key,\n\n        /**\n         * Colormatrix for the effect\n         * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n         * outside the -1, 1 range.\n         * @param {Array} matrix array of 20 numbers.\n         * @default\n         */\n        matrix: matrices[key],\n\n        /**\n         * Lock the matrix export for this kind of static, parameter less filters.\n         */\n        mainParameter: false,\n        /**\n         * Lock the colormatrix on the color part, skipping alpha\n         */\n        colorsOnly: true,\n\n      });\n      fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n    }\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n    'use strict';\n\n    var //fabric = global.fabric,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Color Blend filter class\n     * @class fabric.Image.filter.BlendColor\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @example\n     * var filter = new fabric.Image.filters.BlendColor({\n     *  color: '#000',\n     *  mode: 'multiply'\n     * });\n     *\n     * var filter = new fabric.Image.filters.BlendImage({\n     *  image: fabricImageObject,\n     *  mode: 'multiply',\n     *  alpha: 0.5\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n\n    filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n      type: 'BlendColor',\n\n      /**\n       * Color to make the blend operation with. default to a reddish color since black or white\n       * gives always strong result.\n       **/\n      color: '#F95C63',\n\n      /**\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n       * darken, lighten, overlay, exclusion, tint.\n       **/\n      mode: 'multiply',\n\n      /**\n       * alpha value. represent the strength of the blend color operation.\n       **/\n      alpha: 1,\n\n      /**\n       * Fragment source for the Multiply program\n       */\n      fragmentSource: {\n        multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n        screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n        add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n        diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n        subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n        lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n        darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n        exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n        overlay: 'if (uColor.r < 0.5) {\\n' +\n            'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\n          '} else {\\n' +\n            'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\n          '}\\n' +\n          'if (uColor.g < 0.5) {\\n' +\n            'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\n          '} else {\\n' +\n            'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\n          '}\\n' +\n          'if (uColor.b < 0.5) {\\n' +\n            'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\n          '} else {\\n' +\n            'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\n          '}\\n',\n        tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\n          'gl_FragColor.rgb += uColor.rgb;\\n',\n      },\n\n      /**\n       * build the fragment source for the filters, joining the common part with\n       * the specific one.\n       * @param {String} mode the mode of the filter, a key of this.fragmentSource\n       * @return {String} the source to be compiled\n       * @private\n       */\n      buildSource: function(mode) {\n        return 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform vec4 uColor;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'void main() {\\n' +\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n            'gl_FragColor = color;\\n' +\n            'if (color.a > 0.0) {\\n' +\n              this.fragmentSource[mode] +\n            '}\\n' +\n          '}';\n      },\n\n      /**\n       * Retrieves the cached shader.\n       * @param {Object} options\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      retrieveShader: function(options) {\n        var cacheKey = this.type + '_' + this.mode, shaderSource;\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\n          shaderSource = this.buildSource(this.mode);\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n        }\n        return options.programCache[cacheKey];\n      },\n\n      /**\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            data = imageData.data, iLen = data.length,\n            tr, tg, tb,\n            r, g, b,\n            source, alpha1 = 1 - this.alpha;\n\n        source = new fabric.Color(this.color).getSource();\n        tr = source[0] * this.alpha;\n        tg = source[1] * this.alpha;\n        tb = source[2] * this.alpha;\n\n        for (var i = 0; i < iLen; i += 4) {\n\n          r = data[i];\n          g = data[i + 1];\n          b = data[i + 2];\n\n          switch (this.mode) {\n            case 'multiply':\n              data[i] = r * tr / 255;\n              data[i + 1] = g * tg / 255;\n              data[i + 2] = b * tb / 255;\n              break;\n            case 'screen':\n              data[i] = 255 - (255 - r) * (255 - tr) / 255;\n              data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n              data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n              break;\n            case 'add':\n              data[i] = r + tr;\n              data[i + 1] = g + tg;\n              data[i + 2] = b + tb;\n              break;\n            case 'diff':\n            case 'difference':\n              data[i] = Math.abs(r - tr);\n              data[i + 1] = Math.abs(g - tg);\n              data[i + 2] = Math.abs(b - tb);\n              break;\n            case 'subtract':\n              data[i] = r - tr;\n              data[i + 1] = g - tg;\n              data[i + 2] = b - tb;\n              break;\n            case 'darken':\n              data[i] = Math.min(r, tr);\n              data[i + 1] = Math.min(g, tg);\n              data[i + 2] = Math.min(b, tb);\n              break;\n            case 'lighten':\n              data[i] = Math.max(r, tr);\n              data[i + 1] = Math.max(g, tg);\n              data[i + 2] = Math.max(b, tb);\n              break;\n            case 'overlay':\n              data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\n              data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\n              data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\n              break;\n            case 'exclusion':\n              data[i] = tr + r - ((2 * tr * r) / 255);\n              data[i + 1] = tg + g - ((2 * tg * g) / 255);\n              data[i + 2] = tb + b - ((2 * tb * b) / 255);\n              break;\n            case 'tint':\n              data[i] = tr + r * alpha1;\n              data[i + 1] = tg + g * alpha1;\n              data[i + 2] = tb + b * alpha1;\n          }\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uColor: gl.getUniformLocation(program, 'uColor'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        var source = new fabric.Color(this.color).getSource();\n        source[0] = this.alpha * source[0] / 255;\n        source[1] = this.alpha * source[1] / 255;\n        source[2] = this.alpha * source[2] / 255;\n        source[3] = this.alpha;\n        gl.uniform4fv(uniformLocations.uColor, source);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return {\n          type: this.type,\n          color: this.color,\n          mode: this.mode,\n          alpha: this.alpha\n        };\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\n     */\n    fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n    'use strict';\n\n    var //fabric = global.fabric,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Image Blend filter class\n     * @class fabric.Image.filter.BlendImage\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @example\n     * var filter = new fabric.Image.filters.BlendColor({\n     *  color: '#000',\n     *  mode: 'multiply'\n     * });\n     *\n     * var filter = new fabric.Image.filters.BlendImage({\n     *  image: fabricImageObject,\n     *  mode: 'multiply',\n     *  alpha: 0.5\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n\n    filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n      type: 'BlendImage',\n\n      /**\n       * Color to make the blend operation with. default to a reddish color since black or white\n       * gives always strong result.\n       **/\n      image: null,\n\n      /**\n       * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n       * darken, lighten, overlay, exclusion, tint.\n       **/\n      mode: 'multiply',\n\n      /**\n       * alpha value. represent the strength of the blend image operation.\n       * not implemented.\n       **/\n      alpha: 1,\n\n      vertexSource: 'attribute vec2 aPosition;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'uniform mat3 uTransformMatrix;\\n' +\n        'void main() {\\n' +\n          'vTexCoord = aPosition;\\n' +\n          'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\n          'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n        '}',\n\n      /**\n       * Fragment source for the Multiply program\n       */\n      fragmentSource: {\n        multiply: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform sampler2D uImage;\\n' +\n          'uniform vec4 uColor;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'varying vec2 vTexCoord2;\\n' +\n          'void main() {\\n' +\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n            'color.rgba *= color2.rgba;\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n        mask: 'precision highp float;\\n' +\n          'uniform sampler2D uTexture;\\n' +\n          'uniform sampler2D uImage;\\n' +\n          'uniform vec4 uColor;\\n' +\n          'varying vec2 vTexCoord;\\n' +\n          'varying vec2 vTexCoord2;\\n' +\n          'void main() {\\n' +\n            'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n            'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n            'color.a = color2.a;\\n' +\n            'gl_FragColor = color;\\n' +\n          '}',\n      },\n\n      /**\n       * Retrieves the cached shader.\n       * @param {Object} options\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      retrieveShader: function(options) {\n        var cacheKey = this.type + '_' + this.mode;\n        var shaderSource = this.fragmentSource[this.mode];\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\n          options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n        }\n        return options.programCache[cacheKey];\n      },\n\n      applyToWebGL: function(options) {\n        // load texture to blend.\n        var gl = options.context,\n            texture = this.createTexture(options.filterBackend, this.image);\n        this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n        this.callSuper('applyToWebGL', options);\n        this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n      },\n\n      createTexture: function(backend, image) {\n        return backend.getCachedTexture(image.cacheKey, image._element);\n      },\n\n      /**\n       * Calculate a transformMatrix to adapt the image to blend over\n       * @param {Object} options\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      calculateMatrix: function() {\n        var image = this.image,\n            width = image._element.width,\n            height = image._element.height;\n        return [\n          1 / image.scaleX, 0, 0,\n          0, 1 / image.scaleY, 0,\n          -image.left / width, -image.top / height, 1\n        ];\n      },\n\n      /**\n       * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            resources = options.filterBackend.resources,\n            data = imageData.data, iLen = data.length,\n            width = imageData.width,\n            height = imageData.height,\n            tr, tg, tb, ta,\n            r, g, b, a,\n            canvas1, context, image = this.image, blendData;\n\n        if (!resources.blendImage) {\n          resources.blendImage = fabric.util.createCanvasElement();\n        }\n        canvas1 = resources.blendImage;\n        context = canvas1.getContext('2d');\n        if (canvas1.width !== width || canvas1.height !== height) {\n          canvas1.width = width;\n          canvas1.height = height;\n        }\n        else {\n          context.clearRect(0, 0, width, height);\n        }\n        context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n        context.drawImage(image._element, 0, 0, width, height);\n        blendData = context.getImageData(0, 0, width, height).data;\n        for (var i = 0; i < iLen; i += 4) {\n\n          r = data[i];\n          g = data[i + 1];\n          b = data[i + 2];\n          a = data[i + 3];\n\n          tr = blendData[i];\n          tg = blendData[i + 1];\n          tb = blendData[i + 2];\n          ta = blendData[i + 3];\n\n          switch (this.mode) {\n            case 'multiply':\n              data[i] = r * tr / 255;\n              data[i + 1] = g * tg / 255;\n              data[i + 2] = b * tb / 255;\n              data[i + 3] = a * ta / 255;\n              break;\n            case 'mask':\n              data[i + 3] = ta;\n              break;\n          }\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\n          uImage: gl.getUniformLocation(program, 'uImage'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        var matrix = this.calculateMatrix();\n        gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n        gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return {\n          type: this.type,\n          image: this.image && this.image.toObject(),\n          mode: this.mode,\n          alpha: this.alpha\n        };\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} callback to be invoked after filter creation\n     * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\n     */\n    fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n      fabric.Image.fromObject(object.image, function(image) {\n        var options = fabric.util.object.clone(object);\n        options.image = image;\n        callback(new fabric.Image.filters.BlendImage(options));\n      });\n    };\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }), \n        pow = Math.pow, floor = Math.floor,\n        sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\n        ceil = Math.ceil,\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Resize image filter class\n     * @class fabric.Image.filters.Resize\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Resize();\n     * object.filters.push(filter);\n     * object.applyFilters(canvas.renderAll.bind(canvas));\n     */\n    filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Resize',\n\n      /**\n       * Resize type\n       * for webgl resizyType is just lanczos, for canvas2d can be:\n       * bilinear, hermite, sliceHacl, lanczos.\n       * @param {String} resizeType\n       * @default\n       */\n      resizeType: 'hermite',\n\n      /**\n       * Scale factor for resizing, x axis\n       * @param {Number} scaleX\n       * @default\n       */\n      scaleX: 1,\n\n      /**\n       * Scale factor for resizing, y axis\n       * @param {Number} scaleY\n       * @default\n       */\n      scaleY: 1,\n\n      /**\n       * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n       * @param {Number} lanczosLobes\n       * @default\n       */\n      lanczosLobes: 3,\n\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uDelta: gl.getUniformLocation(program, 'uDelta'),\n          uTaps: gl.getUniformLocation(program, 'uTaps'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\n        gl.uniform1fv(uniformLocations.uTaps, this.taps);\n      },\n\n      /**\n       * Retrieves the cached shader.\n       * @param {Object} options\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      retrieveShader: function(options) {\n        var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\n        if (!options.programCache.hasOwnProperty(cacheKey)) {\n          var fragmentShader = this.generateShader(filterWindow);\n          options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n        }\n        return options.programCache[cacheKey];\n      },\n\n      getFilterWindow: function() {\n        var scale = this.tempScale;\n        return Math.ceil(this.lanczosLobes / scale);\n      },\n\n      getTaps: function() {\n        var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\n            filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n        for (var i = 1; i <= filterWindow; i++) {\n          taps[i - 1] = lobeFunction(i * scale);\n        }\n        return taps;\n      },\n\n      /**\n       * Generate vertex and shader sources from the necessary steps numbers\n       * @param {Number} filterWindow\n       */\n      generateShader: function(filterWindow) {\n        var offsets = new Array(filterWindow),\n            fragmentShader = this.fragmentSourceTOP, filterWindow;\n\n        for (var i = 1; i <= filterWindow; i++) {\n          offsets[i - 1] = i + '.0 * uDelta';\n        }\n\n        fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\n        fragmentShader += 'void main() {\\n';\n        fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\n        fragmentShader += '  float sum = 1.0;\\n';\n\n        offsets.forEach(function(offset, i) {\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\n          fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\n          fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\n        });\n        fragmentShader += '  gl_FragColor = color / sum;\\n';\n        fragmentShader += '}';\n        return fragmentShader;\n      },\n\n      fragmentSourceTOP: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec2 uDelta;\\n' +\n        'varying vec2 vTexCoord;\\n',\n\n      /**\n       * Apply the resize filter to the image\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n       *\n       * @param {Object} options\n       * @param {Number} options.passes The number of filters remaining to be executed\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      applyTo: function(options) {\n        if (options.webgl) {\n          options.passes++;\n          this.width = options.sourceWidth;\n          this.horizontal = true;\n          this.dW = Math.round(this.width * this.scaleX);\n          this.dH = options.sourceHeight;\n          this.tempScale = this.dW / this.width;\n          this.taps = this.getTaps();\n          options.destinationWidth = this.dW;\n          this._setupFrameBuffer(options);\n          this.applyToWebGL(options);\n          this._swapTextures(options);\n          options.sourceWidth = options.destinationWidth;\n\n          this.height = options.sourceHeight;\n          this.horizontal = false;\n          this.dH = Math.round(this.height * this.scaleY);\n          this.tempScale = this.dH / this.height;\n          this.taps = this.getTaps();\n          options.destinationHeight = this.dH;\n          this._setupFrameBuffer(options);\n          this.applyToWebGL(options);\n          this._swapTextures(options);\n          options.sourceHeight = options.destinationHeight;\n        }\n        else {\n          this.applyTo2d(options);\n        }\n      },\n\n      isNeutralState: function() {\n        return this.scaleX === 1 && this.scaleY === 1;\n      },\n\n      lanczosCreate: function(lobes) {\n        return function(x) {\n          if (x >= lobes || x <= -lobes) {\n            return 0.0;\n          }\n          if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n            return 1.0;\n          }\n          x *= Math.PI;\n          var xx = x / lobes;\n          return (sin(x) / x) * sin(xx) / xx;\n        };\n      },\n\n      /**\n       * Applies filter to canvas element\n       * @memberOf fabric.Image.filters.Resize.prototype\n       * @param {Object} canvasEl Canvas element to apply filter to\n       * @param {Number} scaleX\n       * @param {Number} scaleY\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData,\n            scaleX = this.scaleX,\n            scaleY = this.scaleY;\n\n        this.rcpScaleX = 1 / scaleX;\n        this.rcpScaleY = 1 / scaleY;\n\n        var oW = imageData.width, oH = imageData.height,\n            dW = round(oW * scaleX), dH = round(oH * scaleY),\n            newData;\n\n        if (this.resizeType === 'sliceHack') {\n          newData = this.sliceByTwo(options, oW, oH, dW, dH);\n        }\n        else if (this.resizeType === 'hermite') {\n          newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n        }\n        else if (this.resizeType === 'bilinear') {\n          newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n        }\n        else if (this.resizeType === 'lanczos') {\n          newData = this.lanczosResize(options, oW, oH, dW, dH);\n        }\n        options.imageData = newData;\n      },\n\n      /**\n       * Filter sliceByTwo\n       * @param {Object} canvasEl Canvas element to apply filter to\n       * @param {Number} oW Original Width\n       * @param {Number} oH Original Height\n       * @param {Number} dW Destination Width\n       * @param {Number} dH Destination Height\n       * @returns {ImageData}\n       */\n      sliceByTwo: function(options, oW, oH, dW, dH) {\n        var imageData = options.imageData,\n            mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\n            stepH = oH * mult, resources = fabric.filterBackend.resources,\n            tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n        if (!resources.sliceByTwo) {\n          resources.sliceByTwo = document.createElement('canvas');\n        }\n        tmpCanvas = resources.sliceByTwo;\n        if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n          tmpCanvas.width = oW * 1.5;\n          tmpCanvas.height = oH;\n        }\n        ctx = tmpCanvas.getContext('2d');\n        ctx.clearRect(0, 0, oW * 1.5, oH);\n        ctx.putImageData(imageData, 0, 0);\n\n        dW = floor(dW);\n        dH = floor(dH);\n\n        while (!doneW || !doneH) {\n          oW = stepW;\n          oH = stepH;\n          if (dW < floor(stepW * mult)) {\n            stepW = floor(stepW * mult);\n          }\n          else {\n            stepW = dW;\n            doneW = true;\n          }\n          if (dH < floor(stepH * mult)) {\n            stepH = floor(stepH * mult);\n          }\n          else {\n            stepH = dH;\n            doneH = true;\n          }\n          ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n          sX = dX;\n          sY = dY;\n          dY += stepH;\n        }\n        return ctx.getImageData(sX, sY, dW, dH);\n      },\n\n      /**\n       * Filter lanczosResize\n       * @param {Object} canvasEl Canvas element to apply filter to\n       * @param {Number} oW Original Width\n       * @param {Number} oH Original Height\n       * @param {Number} dW Destination Width\n       * @param {Number} dH Destination Height\n       * @returns {ImageData}\n       */\n      lanczosResize: function(options, oW, oH, dW, dH) {\n\n        function process(u) {\n          var v, i, weight, idx, a, red, green,\n              blue, alpha, fX, fY;\n          center.x = (u + 0.5) * ratioX;\n          icenter.x = floor(center.x);\n          for (v = 0; v < dH; v++) {\n            center.y = (v + 0.5) * ratioY;\n            icenter.y = floor(center.y);\n            a = 0; red = 0; green = 0; blue = 0; alpha = 0;\n            for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n              if (i < 0 || i >= oW) {\n                continue;\n              }\n              fX = floor(1000 * abs(i - center.x));\n              if (!cacheLanc[fX]) {\n                cacheLanc[fX] = { };\n              }\n              for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n                if (j < 0 || j >= oH) {\n                  continue;\n                }\n                fY = floor(1000 * abs(j - center.y));\n                if (!cacheLanc[fX][fY]) {\n                  cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n                }\n                weight = cacheLanc[fX][fY];\n                if (weight > 0) {\n                  idx = (j * oW + i) * 4;\n                  a += weight;\n                  red += weight * srcData[idx];\n                  green += weight * srcData[idx + 1];\n                  blue += weight * srcData[idx + 2];\n                  alpha += weight * srcData[idx + 3];\n                }\n              }\n            }\n            idx = (v * dW + u) * 4;\n            destData[idx] = red / a;\n            destData[idx + 1] = green / a;\n            destData[idx + 2] = blue / a;\n            destData[idx + 3] = alpha / a;\n          }\n\n          if (++u < dW) {\n            return process(u);\n          }\n          else {\n            return destImg;\n          }\n        }\n\n        var srcData = options.imageData.data,\n            destImg = options.ctx.createImageData(dW, dH),\n            destData = destImg.data,\n            lanczos = this.lanczosCreate(this.lanczosLobes),\n            ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n            rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n            range2X = ceil(ratioX * this.lanczosLobes / 2),\n            range2Y = ceil(ratioY * this.lanczosLobes / 2),\n            cacheLanc = { }, center = { }, icenter = { };\n\n        return process(0);\n      },\n\n      /**\n       * bilinearFiltering\n       * @param {Object} canvasEl Canvas element to apply filter to\n       * @param {Number} oW Original Width\n       * @param {Number} oH Original Height\n       * @param {Number} dW Destination Width\n       * @param {Number} dH Destination Height\n       * @returns {ImageData}\n       */\n      bilinearFiltering: function(options, oW, oH, dW, dH) {\n        var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n            color, offset = 0, origPix, ratioX = this.rcpScaleX,\n            ratioY = this.rcpScaleY,\n            w4 = 4 * (oW - 1), img = options.imageData,\n            pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\n            destPixels = destImage.data;\n        for (i = 0; i < dH; i++) {\n          for (j = 0; j < dW; j++) {\n            x = floor(ratioX * j);\n            y = floor(ratioY * i);\n            xDiff = ratioX * j - x;\n            yDiff = ratioY * i - y;\n            origPix = 4 * (y * oW + x);\n\n            for (chnl = 0; chnl < 4; chnl++) {\n              a = pixels[origPix + chnl];\n              b = pixels[origPix + 4 + chnl];\n              c = pixels[origPix + w4 + chnl];\n              d = pixels[origPix + w4 + 4 + chnl];\n              color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                      c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n              destPixels[offset++] = color;\n            }\n          }\n        }\n        return destImage;\n      },\n\n      /**\n       * hermiteFastResize\n       * @param {Object} canvasEl Canvas element to apply filter to\n       * @param {Number} oW Original Width\n       * @param {Number} oH Original Height\n       * @param {Number} dW Destination Width\n       * @param {Number} dH Destination Height\n       * @returns {ImageData}\n       */\n      hermiteFastResize: function(options, oW, oH, dW, dH) {\n        var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n            ratioWHalf = ceil(ratioW / 2),\n            ratioHHalf = ceil(ratioH / 2),\n            img = options.imageData, data = img.data,\n            img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n        for (var j = 0; j < dH; j++) {\n          for (var i = 0; i < dW; i++) {\n            var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n                gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n            for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n              var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                  centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n              for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n                var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                    w = sqrt(w0 + dx * dx);\n                /* eslint-disable max-depth */\n                if (w > 1 && w < -1) {\n                  continue;\n                }\n                //hermite filter\n                weight = 2 * w * w * w - 3 * w * w + 1;\n                if (weight > 0) {\n                  dx = 4 * (xx + yy * oW);\n                  //alpha\n                  gxA += weight * data[dx + 3];\n                  weightsAlpha += weight;\n                  //colors\n                  if (data[dx + 3] < 255) {\n                    weight = weight * data[dx + 3] / 250;\n                  }\n                  gxR += weight * data[dx];\n                  gxG += weight * data[dx + 1];\n                  gxB += weight * data[dx + 2];\n                  weights += weight;\n                }\n                /* eslint-enable max-depth */\n              }\n            }\n            data2[x2] = gxR / weights;\n            data2[x2 + 1] = gxG / weights;\n            data2[x2 + 2] = gxB / weights;\n            data2[x2 + 3] = gxA / weightsAlpha;\n          }\n        }\n        return img2;\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function() {\n        return {\n          type: this.type,\n          scaleX: this.scaleX,\n          scaleY: this.scaleY,\n          resizeType: this.resizeType,\n          lanczosLobes: this.lanczosLobes\n        };\n      }\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n     */\n    fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Contrast filter class\n     * @class fabric.Image.filters.Contrast\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Contrast({\n     *   contrast: 40\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Contrast',\n\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uContrast;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\n          'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      contrast: 0,\n\n      mainParameter: 'contrast',\n\n      /**\n       * Constructor\n       * @memberOf fabric.Image.filters.Contrast.prototype\n       * @param {Object} [options] Options object\n       * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\n       */\n\n      /**\n        * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n        *\n        * @param {Object} options\n        * @param {ImageData} options.imageData The Uint8Array to be filtered.\n        */\n      applyTo2d: function(options) {\n        if (this.contrast === 0) {\n          return;\n        }\n        var imageData = options.imageData, i, len,\n            data = imageData.data, len = data.length,\n            contrast = Math.floor(this.contrast * 255),\n            contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n\n        for (i = 0; i < len; i += 4) {\n          data[i] = contrastF * (data[i] - 128) + 128;\n          data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n          data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uContrast: gl.getUniformLocation(program, 'uContrast'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1f(uniformLocations.uContrast, this.contrast);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\n     */\n    fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Saturate filter class\n     * @class fabric.Image.filters.Saturation\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Saturation({\n     *   saturation: 100\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Saturation',\n\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uSaturation;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'float rgMax = max(color.r, color.g);\\n' +\n          'float rgbMax = max(rgMax, color.b);\\n' +\n          'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\n          'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\n          'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n\n      saturation: 0,\n\n      mainParameter: 'saturation',\n\n      /**\n       * Constructor\n       * @memberOf fabric.Image.filters.Saturate.prototype\n       * @param {Object} [options] Options object\n       * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\n       */\n\n      /**\n       * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n       */\n      applyTo2d: function(options) {\n        if (this.saturation === 0) {\n          return;\n        }\n        var imageData = options.imageData,\n            data = imageData.data, len = data.length,\n            adjust = -this.saturation, i, max;\n\n        for (i = 0; i < len; i += 4) {\n          max = Math.max(data[i], data[i + 1], data[i + 2]);\n          data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n          data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n          data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\n     */\n    fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Blur filter class\n     * @class fabric.Image.filters.Blur\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Blur({\n     *   blur: 0.5\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     * canvas.renderAll();\n     */\n    filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n\n      type: 'Blur',\n\n      /*\n  'gl_FragColor = vec4(0.0);',\n  'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\n  'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\n  'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\n  'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\n  */\n\n      /* eslint-disable max-len */\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec2 uDelta;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'const float nSamples = 15.0;\\n' +\n        'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\n        'float random(vec3 scale) {\\n' +\n          /* use the fragment position for a different seed per-pixel */\n          'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\n        '}\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0.0);\\n' +\n          'float total = 0.0;\\n' +\n          'float offset = random(v3offset);\\n' +\n          'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\n            'float percent = (t + offset - 0.5) / nSamples;\\n' +\n            'float weight = 1.0 - abs(percent);\\n' +\n            'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\n            'total += weight;\\n' +\n          '}\\n' +\n          'gl_FragColor = color / total;\\n' +\n        '}',\n      /* eslint-enable max-len */\n\n      /**\n       * blur value, in percentage of image dimensions.\n       * specific to keep the image blur constant at different resolutions\n       * range bewteen 0 and 1.\n       */\n      blur: 0,\n\n      mainParameter: 'blur',\n\n      applyTo: function(options) {\n        if (options.webgl) {\n          // this aspectRatio is used to give the same blur to vertical and horizontal\n          this.aspectRatio = options.sourceWidth / options.sourceHeight;\n          options.passes++;\n          this._setupFrameBuffer(options);\n          this.horizontal = true;\n          this.applyToWebGL(options);\n          this._swapTextures(options);\n          this._setupFrameBuffer(options);\n          this.horizontal = false;\n          this.applyToWebGL(options);\n          this._swapTextures(options);\n        }\n        else {\n          this.applyTo2d(options);\n        }\n      },\n\n      applyTo2d: function(options) {\n        // paint canvasEl with current image data.\n        //options.ctx.putImageData(options.imageData, 0, 0);\n        options.imageData = this.simpleBlur(options);\n      },\n\n      simpleBlur: function(options) {\n        var resources = options.filterBackend.resources, canvas1, canvas2,\n            width = options.imageData.width,\n            height = options.imageData.height;\n\n        if (!resources.blurLayer1) {\n          resources.blurLayer1 = fabric.util.createCanvasElement();\n          resources.blurLayer2 = fabric.util.createCanvasElement();\n        }\n        canvas1 = resources.blurLayer1;\n        canvas2 = resources.blurLayer2;\n        if (canvas1.width !== width || canvas1.height !== height) {\n          canvas2.width = canvas1.width = width;\n          canvas2.height = canvas1.height = height;\n        }\n        var ctx1 = canvas1.getContext('2d'),\n            ctx2 = canvas2.getContext('2d'),\n            nSamples = 15,\n            random, percent, j, i,\n            blur = this.blur * 0.06 * 0.5;\n\n        // load first canvas\n        ctx1.putImageData(options.imageData, 0, 0);\n        ctx2.clearRect(0, 0, width, height);\n\n        for (i = -nSamples; i <= nSamples; i++) {\n          random = (Math.random() - 0.5) / 4;\n          percent = i / nSamples;\n          j = blur * percent * width + random;\n          ctx2.globalAlpha = 1 - Math.abs(percent);\n          ctx2.drawImage(canvas1, j, random);\n          ctx1.drawImage(canvas2, 0, 0);\n          ctx2.globalAlpha = 1;\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        }\n        for (i = -nSamples; i <= nSamples; i++) {\n          random = (Math.random() - 0.5) / 4;\n          percent = i / nSamples;\n          j = blur * percent * height + random;\n          ctx2.globalAlpha = 1 - Math.abs(percent);\n          ctx2.drawImage(canvas1, random, j);\n          ctx1.drawImage(canvas2, 0, 0);\n          ctx2.globalAlpha = 1;\n          ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        }\n        options.ctx.drawImage(canvas1, 0, 0);\n        var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n        ctx1.globalAlpha = 1;\n        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n        return newImageData;\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          delta: gl.getUniformLocation(program, 'uDelta'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        var delta = this.chooseRightDelta();\n        gl.uniform2fv(uniformLocations.delta, delta);\n      },\n\n      /**\n       * choose right value of image percentage to blur with\n       * @returns {Array} a numeric array with delta values\n       */\n      chooseRightDelta: function() {\n        var blurScale = 1, delta = [0, 0], blur;\n        if (this.horizontal) {\n          if (this.aspectRatio > 1) {\n            // image is wide, i want to shrink radius horizontal\n            blurScale = 1 / this.aspectRatio;\n          }\n        }\n        else {\n          if (this.aspectRatio < 1) {\n            // image is tall, i want to shrink radius vertical\n            blurScale = this.aspectRatio;\n          }\n        }\n        blur = blurScale * this.blur * 0.12;\n        if (this.horizontal) {\n          delta[0] = blur;\n        }\n        else {\n          delta[1] = blur;\n        }\n        return delta;\n      },\n    });\n\n    /**\n     * Deserialize a JSON definition of a BlurFilter into a concrete instance.\n     */\n    filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * Gamma filter class\n     * @class fabric.Image.filters.Gamma\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.Gamma({\n     *   brightness: 200\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'Gamma',\n\n      fragmentSource: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec3 uGamma;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec3 correction = (1.0 / uGamma);\\n' +\n          'color.r = pow(color.r, correction.r);\\n' +\n          'color.g = pow(color.g, correction.g);\\n' +\n          'color.b = pow(color.b, correction.b);\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.rgb *= color.a;\\n' +\n        '}',\n\n      /**\n       * Gamma array value, from 0.01 to 2.2.\n       * @param {Array} gamma\n       * @default\n       */\n      gamma: [1, 1, 1],\n\n      /**\n       * Describe the property that is the filter parameter\n       * @param {String} m\n       * @default\n       */\n      mainParameter: 'gamma',\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       */\n      initialize: function(options) {\n        this.gamma = [1, 1, 1];\n        filters.BaseFilter.prototype.initialize.call(this, options);\n      },\n\n      /**\n       * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n       *\n       * @param {Object} options\n       * @param {ImageData} options.imageData The Uint8Array to be filtered.\n       */\n      applyTo2d: function(options) {\n        var imageData = options.imageData, data = imageData.data,\n            gamma = this.gamma, len = data.length,\n            rInv = 1 / gamma[0], gInv = 1 / gamma[1],\n            bInv = 1 / gamma[2], i;\n\n        if (!this.rVals) {\n          // eslint-disable-next-line\n          this.rVals = new Uint8Array(256);\n          // eslint-disable-next-line\n          this.gVals = new Uint8Array(256);\n          // eslint-disable-next-line\n          this.bVals = new Uint8Array(256);\n        }\n\n        // This is an optimization - pre-compute a look-up table for each color channel\n        // instead of performing these pow calls for each pixel in the image.\n        for (i = 0, len = 256; i < len; i++) {\n          this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n          this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n          this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n        }\n        for (i = 0, len = data.length; i < len; i += 4) {\n          data[i] = this.rVals[data[i]];\n          data[i + 1] = this.gVals[data[i + 1]];\n          data[i + 2] = this.bVals[data[i + 2]];\n        }\n      },\n\n      /**\n       * Return WebGL uniform locations for this filter's shader.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {WebGLShaderProgram} program This filter's compiled shader program.\n       */\n      getUniformLocations: function(gl, program) {\n        return {\n          uGamma: gl.getUniformLocation(program, 'uGamma'),\n        };\n      },\n\n      /**\n       * Send data from this filter to its shader program's uniforms.\n       *\n       * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n       * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n       */\n      sendUniformData: function(gl, uniformLocations) {\n        gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n      },\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\n     */\n    fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * A container class that knows how to apply a sequence of filters to an input image.\n     */\n    filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n\n      type: 'Composed',\n\n      /**\n       * A non sparse array of filters to apply\n       */\n      subFilters: [],\n\n      /**\n       * Constructor\n       * @param {Object} [options] Options object\n       */\n      initialize: function(options) {\n        this.callSuper('initialize', options);\n        // create a new array instead mutating the prototype with push\n        this.subFilters = this.subFilters.slice(0);\n      },\n\n      /**\n       * Apply this container's filters to the input image provided.\n       *\n       * @param {Object} options\n       * @param {Number} options.passes The number of filters remaining to be applied.\n       */\n      applyTo: function(options) {\n        options.passes += this.subFilters.length - 1;\n        this.subFilters.forEach(function(filter) {\n          filter.applyTo(options);\n        });\n      },\n\n      /**\n       * Serialize this filter into JSON.\n       *\n       * @returns {Object} A JSON representation of this filter.\n       */\n      toObject: function() {\n        return fabric.util.object.extend(this.callSuper('toObject'), {\n          subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\n        });\n      },\n\n      isNeutralState: function() {\n        return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\n      }\n    });\n\n    /**\n     * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n     */\n    fabric.Image.filters.Composed.fromObject = function(object, callback) {\n      var filters = object.subFilters || [],\n          subFilters = filters.map(function(filter) {\n            return new fabric.Image.filters[filter.type](filter);\n          }),\n          instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\n      callback && callback(instance);\n      return instance;\n    };\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric  = global.fabric || (global.fabric = { }),\n        filters = fabric.Image.filters,\n        createClass = fabric.util.createClass;\n\n    /**\n     * HueRotation filter class\n     * @class fabric.Image.filters.HueRotation\n     * @memberOf fabric.Image.filters\n     * @extends fabric.Image.filters.BaseFilter\n     * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\n     * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n     * @example\n     * var filter = new fabric.Image.filters.HueRotation({\n     *   rotation: -0.5\n     * });\n     * object.filters.push(filter);\n     * object.applyFilters();\n     */\n    filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: 'HueRotation',\n\n      /**\n       * HueRotation value, from -1 to 1.\n       * the unit is radians\n       * @param {Number} myParameter\n       * @default\n       */\n      rotation: 0,\n\n      /**\n       * Describe the property that is the filter parameter\n       * @param {String} m\n       * @default\n       */\n      mainParameter: 'rotation',\n\n      calculateMatrix: function() {\n        var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\n            aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n        this.matrix = [\n          1, 0, 0, 0, 0,\n          0, 1, 0, 0, 0,\n          0, 0, 1, 0, 0,\n          0, 0, 0, 1, 0\n        ];\n        this.matrix[0] = cos + OneMinusCos / 3;\n        this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n        this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n        this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n        this.matrix[6] = cos + aThird * OneMinusCos;\n        this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n        this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n        this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n        this.matrix[12] = cos + aThird * OneMinusCos;\n      },\n\n      /**\n       * HueRotation isNeutralState implementation\n       * Used only in image applyFilters to discard filters that will not have an effect\n       * on the image\n       * @param {Object} options\n       **/\n      isNeutralState: function(options) {\n        this.calculateMatrix();\n        return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n      },\n\n      /**\n       * Apply this filter to the input image data provided.\n       *\n       * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n       *\n       * @param {Object} options\n       * @param {Number} options.passes The number of filters remaining to be executed\n       * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n       * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n       * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n       * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n       * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n       */\n      applyTo: function(options) {\n        this.calculateMatrix();\n        filters.BaseFilter.prototype.applyTo.call(this, options);\n      },\n\n    });\n\n    /**\n     * Returns filter instance from an object representation\n     * @static\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] to be invoked after filter creation\n     * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\n     */\n    fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function(global) {\n\n    'use strict';\n\n    var //fabric = global.fabric || (global.fabric = { }),\n        clone = fabric.util.object.clone;\n\n    if (fabric.Text) {\n      fabric.warn('fabric.Text is already defined');\n      return;\n    }\n\n    /**\n     * Text class\n     * @class fabric.Text\n     * @extends fabric.Object\n     * @return {fabric.Text} thisArg\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n     * @see {@link fabric.Text#initialize} for constructor definition\n     */\n    fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n      /**\n       * Properties which when set cause object to change dimensions\n       * @type Array\n       * @private\n       */\n      _dimensionAffectingProps: [\n        'fontSize',\n        'fontWeight',\n        'fontFamily',\n        'fontStyle',\n        'lineHeight',\n        'text',\n        'charSpacing',\n        'textAlign',\n        'styles',\n      ],\n\n      /**\n       * @private\n       */\n      _reNewline: /\\r?\\n/,\n\n      /**\n       * Use this regular expression to filter for whitespaces that is not a new line.\n       * Mostly used when text is 'justify' aligned.\n       * @private\n       */\n      _reSpacesAndTabs: /[ \\t\\r]/g,\n\n      /**\n       * Use this regular expression to filter for whitespace that is not a new line.\n       * Mostly used when text is 'justify' aligned.\n       * @private\n       */\n      _reSpaceAndTab: /[ \\t\\r]/,\n\n      /**\n       * Use this regular expression to filter consecutive groups of non spaces.\n       * Mostly used when text is 'justify' aligned.\n       * @private\n       */\n      _reWords: /\\S+/g,\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type:                 'text',\n\n      /**\n       * Font size (in pixels)\n       * @type Number\n       * @default\n       */\n      fontSize:             40,\n\n      /**\n       * Font weight (e.g. bold, normal, 400, 600, 800)\n       * @type {(Number|String)}\n       * @default\n       */\n      fontWeight:           'normal',\n\n      /**\n       * Font family\n       * @type String\n       * @default\n       */\n      fontFamily:           'Times New Roman',\n\n      /**\n       * Text decoration underline.\n       * @type Boolean\n       * @default\n       */\n      underline:       false,\n\n      /**\n       * Text decoration overline.\n       * @type Boolean\n       * @default\n       */\n      overline:       false,\n\n      /**\n       * Text decoration linethrough.\n       * @type Boolean\n       * @default\n       */\n      linethrough:       false,\n\n      /**\n       * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n       * \"justify-left\", \"justify-center\" or \"justify-right\".\n       * @type String\n       * @default\n       */\n      textAlign:            'left',\n\n      /**\n       * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n       * @type String\n       * @default\n       */\n      fontStyle:            'normal',\n\n      /**\n       * Line height\n       * @type Number\n       * @default\n       */\n      lineHeight:           1.16,\n\n      /**\n       * Superscript schema object (minimum overlap)\n       * @type {Object}\n       * @default\n       */\n      superscript: {\n        size:      0.60, // fontSize factor\n        baseline: -0.35  // baseline-shift factor (upwards)\n      },\n\n      /**\n       * Subscript schema object (minimum overlap)\n       * @type {Object}\n       * @default\n       */\n      subscript: {\n        size:      0.60, // fontSize factor\n        baseline:  0.11  // baseline-shift factor (downwards)\n      },\n\n      /**\n       * Background color of text lines\n       * @type String\n       * @default\n       */\n      textBackgroundColor:  '',\n\n      /**\n       * List of properties to consider when checking if\n       * state of an object is changed ({@link fabric.Object#hasStateChanged})\n       * as well as for history (undo/redo) purposes\n       * @type Array\n       */\n      stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\n        'fontWeight',\n        'fontSize',\n        'text',\n        'underline',\n        'overline',\n        'linethrough',\n        'textAlign',\n        'fontStyle',\n        'lineHeight',\n        'textBackgroundColor',\n        'charSpacing',\n        'styles'),\n\n      /**\n       * List of properties to consider when checking if cache needs refresh\n       * @type Array\n       */\n      cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\n        'fontWeight',\n        'fontSize',\n        'text',\n        'underline',\n        'overline',\n        'linethrough',\n        'textAlign',\n        'fontStyle',\n        'lineHeight',\n        'textBackgroundColor',\n        'charSpacing',\n        'styles'),\n\n      /**\n       * When defined, an object is rendered via stroke and this property specifies its color.\n       * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n       * @type String\n       * @default\n       */\n      stroke:               null,\n\n      /**\n       * Shadow object representing shadow of this shape.\n       * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n       * @type fabric.Shadow\n       * @default\n       */\n      shadow:               null,\n\n      /**\n       * @private\n       */\n      _fontSizeFraction: 0.222,\n\n      /**\n       * @private\n       */\n      offsets: {\n        underline: 0.10,\n        linethrough: -0.315,\n        overline: -0.88\n      },\n\n      /**\n       * Text Line proportion to font Size (in pixels)\n       * @type Number\n       * @default\n       */\n      _fontSizeMult:             1.13,\n\n      /**\n       * additional space between characters\n       * expressed in thousands of em unit\n       * @type Number\n       * @default\n       */\n      charSpacing:             0,\n\n      /**\n       * Object containing character styles - top-level properties -> line numbers,\n       * 2nd-level properties - charater numbers\n       * @type Object\n       * @default\n       */\n      styles: null,\n\n      /**\n       * Reference to a context to measure text char or couple of chars\n       * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\n       * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\n       * text object created.\n       * @type {CanvasRenderingContext2D}\n       * @default\n       */\n      _measuringContext: null,\n\n      /**\n       * Baseline shift, stlyes only, keep at 0 for the main text object\n       * @type {Number}\n       * @default\n       */\n      deltaY: 0,\n\n      /**\n       * Array of properties that define a style unit (of 'styles').\n       * @type {Array}\n       * @default\n       */\n      _styleProperties: [\n        'stroke',\n        'strokeWidth',\n        'fill',\n        'fontFamily',\n        'fontSize',\n        'fontWeight',\n        'fontStyle',\n        'underline',\n        'overline',\n        'linethrough',\n        'deltaY',\n        'textBackgroundColor',\n      ],\n\n      /**\n       * contains characters bounding boxes\n       */\n      __charBounds: [],\n\n      /**\n       * use this size when measuring text. To avoid IE11 rounding errors\n       * @type {Number}\n       * @default\n       * @readonly\n       * @private\n       */\n      CACHE_FONT_SIZE: 400,\n\n      /**\n       * contains the min text width to avoid getting 0\n       * @type {Number}\n       * @default\n       */\n      MIN_TEXT_WIDTH: 2,\n\n      /**\n       * Constructor\n       * @param {String} text Text string\n       * @param {Object} [options] Options object\n       * @return {fabric.Text} thisArg\n       */\n      initialize: function(text, options) {\n        this.styles = options ? (options.styles || { }) : { };\n        this.text = text;\n        this.__skipDimension = true;\n        this.callSuper('initialize', options);\n        this.__skipDimension = false;\n        this.initDimensions();\n        this.setCoords();\n        this.setupState({ propertySet: '_dimensionAffectingProps' });\n      },\n\n      /**\n       * Return a contex for measurement of text string.\n       * if created it gets stored for reuse\n       * @param {String} text Text string\n       * @param {Object} [options] Options object\n       * @return {fabric.Text} thisArg\n       */\n      getMeasuringContext: function() {\n        // if we did not return we have to measure something.\n        if (!fabric._measuringContext) {\n          fabric._measuringContext = this.canvas && this.canvas.contextCache ||\n            fabric.util.createCanvasElement().getContext('2d');\n        }\n        return fabric._measuringContext;\n      },\n\n      /**\n       * @private\n       * Divides text into lines of text and lines of graphemes.\n       */\n      _splitText: function() {\n        var newLines = this._splitTextIntoLines(this.text);\n        this.textLines = newLines.lines;\n        this._textLines = newLines.graphemeLines;\n        this._unwrappedTextLines = newLines._unwrappedLines;\n        this._text = newLines.graphemeText;\n        return newLines;\n      },\n\n      /**\n       * Initialize or update text dimensions.\n       * Updates this.width and this.height with the proper values.\n       * Does not return dimensions.\n       */\n      initDimensions: function() {\n        if (this.__skipDimension) {\n          return;\n        }\n        this._splitText();\n        this._clearCache();\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n        if (this.textAlign.indexOf('justify') !== -1) {\n          // once text is measured we need to make space fatter to make justified text.\n          this.enlargeSpaces();\n        }\n        this.height = this.calcTextHeight();\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\n      },\n\n      /**\n       * Enlarge space boxes and shift the others\n       */\n      enlargeSpaces: function() {\n        var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\n            continue;\n          }\n          accumulatedSpace = 0;\n          line = this._textLines[i];\n          currentLineWidth = this.getLineWidth(i);\n          if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n            numberOfSpaces = spaces.length;\n            diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n            for (var j = 0, jlen = line.length; j <= jlen; j++) {\n              charBound = this.__charBounds[i][j];\n              if (this._reSpaceAndTab.test(line[j])) {\n                charBound.width += diffSpace;\n                charBound.kernedWidth += diffSpace;\n                charBound.left += accumulatedSpace;\n                accumulatedSpace += diffSpace;\n              }\n              else {\n                charBound.left += accumulatedSpace;\n              }\n            }\n          }\n        }\n      },\n\n      /**\n       * Detect if the text line is ended with an hard break\n       * text and itext do not have wrapping, return false\n       * @return {Boolean}\n       */\n      isEndOfWrapping: function(lineIndex) {\n        return lineIndex === this._textLines.length - 1;\n      },\n\n      /**\n       * Returns string representation of an instance\n       * @return {String} String representation of text object\n       */\n      toString: function() {\n        return '#<fabric.Text (' + this.complexity() +\n          '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n      },\n\n      /**\n       * Return the dimension and the zoom level needed to create a cache canvas\n       * big enough to host the object to be cached.\n       * @private\n       * @param {Object} dim.x width of object to be cached\n       * @param {Object} dim.y height of object to be cached\n       * @return {Object}.width width of canvas\n       * @return {Object}.height height of canvas\n       * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n       * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n       */\n      _getCacheCanvasDimensions: function() {\n        var dims = this.callSuper('_getCacheCanvasDimensions');\n        var fontSize = this.fontSize;\n        dims.width += fontSize * dims.zoomX;\n        dims.height += fontSize * dims.zoomY;\n        return dims;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        this._setTextStyles(ctx);\n        this._renderTextLinesBackground(ctx);\n        this._renderTextDecoration(ctx, 'underline');\n        this._renderText(ctx);\n        this._renderTextDecoration(ctx, 'overline');\n        this._renderTextDecoration(ctx, 'linethrough');\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderText: function(ctx) {\n        if (this.paintFirst === 'stroke') {\n          this._renderTextStroke(ctx);\n          this._renderTextFill(ctx);\n        }\n        else {\n          this._renderTextFill(ctx);\n          this._renderTextStroke(ctx);\n        }\n      },\n\n      /**\n       * Set the font parameter of the context with the object properties or with charStyle\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Object} [charStyle] object with font style properties\n       * @param {String} [charStyle.fontFamily] Font Family\n       * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n       * @param {String} [charStyle.fontWeight] Font weight\n       * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n       */\n      _setTextStyles: function(ctx, charStyle, forMeasuring) {\n        ctx.textBaseline = 'alphabetic';\n        ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n      },\n\n      /**\n       * calculate and return the text Width measuring each line.\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @return {Number} Maximum width of fabric.Text object\n       */\n      calcTextWidth: function() {\n        var maxWidth = this.getLineWidth(0);\n\n        for (var i = 1, len = this._textLines.length; i < len; i++) {\n          var currentLineWidth = this.getLineWidth(i);\n          if (currentLineWidth > maxWidth) {\n            maxWidth = currentLineWidth;\n          }\n        }\n        return maxWidth;\n      },\n\n      /**\n       * @private\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {String} line Text to render\n       * @param {Number} left Left position of text\n       * @param {Number} top Top position of text\n       * @param {Number} lineIndex Index of a line in a text\n       */\n      _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n        this._renderChars(method, ctx, line, left, top, lineIndex);\n      },\n\n      /**\n       * Renders the text background for lines, taking care of style\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderTextLinesBackground: function(ctx) {\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n          return;\n        }\n        var lineTopOffset = 0, heightOfLine,\n            lineLeftOffset, originalFill = ctx.fillStyle,\n            line, lastColor,\n            leftOffset = this._getLeftOffset(),\n            topOffset = this._getTopOffset(),\n            boxStart = 0, boxWidth = 0, charBox, currentColor;\n\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          heightOfLine = this.getHeightOfLine(i);\n          if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\n            lineTopOffset += heightOfLine;\n            continue;\n          }\n          line = this._textLines[i];\n          lineLeftOffset = this._getLineLeftOffset(i);\n          boxWidth = 0;\n          boxStart = 0;\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\n            charBox = this.__charBounds[i][j];\n            currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n            if (currentColor !== lastColor) {\n              ctx.fillStyle = lastColor;\n              lastColor && ctx.fillRect(\n                leftOffset + lineLeftOffset + boxStart,\n                topOffset + lineTopOffset,\n                boxWidth,\n                heightOfLine / this.lineHeight\n              );\n              boxStart = charBox.left;\n              boxWidth = charBox.width;\n              lastColor = currentColor;\n            }\n            else {\n              boxWidth += charBox.kernedWidth;\n            }\n          }\n          if (currentColor) {\n            ctx.fillStyle = currentColor;\n            ctx.fillRect(\n              leftOffset + lineLeftOffset + boxStart,\n              topOffset + lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n          }\n          lineTopOffset += heightOfLine;\n        }\n        ctx.fillStyle = originalFill;\n        // if there is text background color no\n        // other shadows should be casted\n        this._removeShadow(ctx);\n      },\n\n      /**\n       * @private\n       * @param {Object} decl style declaration for cache\n       * @param {String} decl.fontFamily fontFamily\n       * @param {String} decl.fontStyle fontStyle\n       * @param {String} decl.fontWeight fontWeight\n       * @return {Object} reference to cache\n       */\n      getFontCache: function(decl) {\n        var fontFamily = decl.fontFamily.toLowerCase();\n        if (!fabric.charWidthsCache[fontFamily]) {\n          fabric.charWidthsCache[fontFamily] = { };\n        }\n        var cache = fabric.charWidthsCache[fontFamily],\n            cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\n        if (!cache[cacheProp]) {\n          cache[cacheProp] = { };\n        }\n        return cache[cacheProp];\n      },\n\n      /**\n       * apply all the character style to canvas for rendering\n       * @private\n       * @param {String} _char\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @param {Object} [decl]\n       */\n      _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\n\n        this._setFillStyles(ctx, styleDeclaration);\n        this._setStrokeStyles(ctx, styleDeclaration);\n\n        ctx.font = this._getFontDeclaration(styleDeclaration);\n      },\n\n      /**\n       * measure and return the width of a single character.\n       * possibly overridden to accommodate different measure logic or\n       * to hook some external lib for character measurement\n       * @private\n       * @param {String} char to be measured\n       * @param {Object} charStyle style of char to be measured\n       * @param {String} [previousChar] previous char\n       * @param {Object} [prevCharStyle] style of previous char\n       */\n      _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n        // first i try to return from cache\n        var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\n            previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\n            stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\n            fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n\n        if (previousChar && fontCache[previousChar] !== undefined) {\n          previousWidth = fontCache[previousChar];\n        }\n        if (fontCache[_char] !== undefined) {\n          kernedWidth = width = fontCache[_char];\n        }\n        if (stylesAreEqual && fontCache[couple] !== undefined) {\n          coupleWidth = fontCache[couple];\n          kernedWidth = coupleWidth - previousWidth;\n        }\n        if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n          var ctx = this.getMeasuringContext();\n          // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n          this._setTextStyles(ctx, charStyle, true);\n        }\n        if (width === undefined) {\n          kernedWidth = width = ctx.measureText(_char).width;\n          fontCache[_char] = width;\n        }\n        if (previousWidth === undefined && stylesAreEqual && previousChar) {\n          previousWidth = ctx.measureText(previousChar).width;\n          fontCache[previousChar] = previousWidth;\n        }\n        if (stylesAreEqual && coupleWidth === undefined) {\n          // we can measure the kerning couple and subtract the width of the previous character\n          coupleWidth = ctx.measureText(couple).width;\n          fontCache[couple] = coupleWidth;\n          kernedWidth = coupleWidth - previousWidth;\n        }\n        return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\n      },\n\n      /**\n       * Computes height of character at given position\n       * @param {Number} line the line number\n       * @param {Number} char the character number\n       * @return {Number} fontSize of the character\n       */\n      getHeightOfChar: function(line, char) {\n        return this.getValueOfPropertyAt(line, char, 'fontSize');\n      },\n\n      /**\n       * measure a text line measuring all characters.\n       * @param {Number} lineIndex line number\n       * @return {Number} Line width\n       */\n      measureLine: function(lineIndex) {\n        var lineInfo = this._measureLine(lineIndex);\n        if (this.charSpacing !== 0) {\n          lineInfo.width -= this._getWidthOfCharSpacing();\n        }\n        if (lineInfo.width < 0) {\n          lineInfo.width = 0;\n        }\n        return lineInfo;\n      },\n\n      /**\n       * measure every grapheme of a line, populating __charBounds\n       * @param {Number} lineIndex\n       * @return {Object} object.width total width of characters\n       * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\n       */\n      _measureLine: function(lineIndex) {\n        var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\n            graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\n\n        this.__charBounds[lineIndex] = lineBounds;\n        for (i = 0; i < line.length; i++) {\n          grapheme = line[i];\n          graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n          lineBounds[i] = graphemeInfo;\n          width += graphemeInfo.kernedWidth;\n          prevGrapheme = grapheme;\n        }\n        // this latest bound box represent the last character of the line\n        // to simplify cursor handling in interactive mode.\n        lineBounds[i] = {\n          left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n          width: 0,\n          kernedWidth: 0,\n          height: this.fontSize\n        };\n        return { width: width, numOfSpaces: numOfSpaces };\n      },\n\n      /**\n       * Measure and return the info of a single grapheme.\n       * needs the the info of previous graphemes already filled\n       * @private\n       * @param {String} grapheme to be measured\n       * @param {Number} lineIndex index of the line where the char is\n       * @param {Number} charIndex position in the line\n       * @param {String} [prevGrapheme] character preceding the one to be measured\n       */\n      _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n        var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n            prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\n            info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\n            kernedWidth = info.kernedWidth,\n            width = info.width, charSpacing;\n\n        if (this.charSpacing !== 0) {\n          charSpacing = this._getWidthOfCharSpacing();\n          width += charSpacing;\n          kernedWidth += charSpacing;\n        }\n\n        var box = {\n          width: width,\n          left: 0,\n          height: style.fontSize,\n          kernedWidth: kernedWidth,\n          deltaY: style.deltaY,\n        };\n        if (charIndex > 0 && !skipLeft) {\n          var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n          box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n        }\n        return box;\n      },\n\n      /**\n       * Calculate height of line at 'lineIndex'\n       * @param {Number} lineIndex index of line to calculate\n       * @return {Number}\n       */\n      getHeightOfLine: function(lineIndex) {\n        if (this.__lineHeights[lineIndex]) {\n          return this.__lineHeights[lineIndex];\n        }\n\n        var line = this._textLines[lineIndex],\n            // char 0 is measured before the line cycle because it nneds to char\n            // emptylines\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\n        for (var i = 1, len = line.length; i < len; i++) {\n          maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n        }\n\n        return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n      },\n\n      /**\n       * Calculate text box height\n       */\n      calcTextHeight: function() {\n        var lineHeight, height = 0;\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          lineHeight = this.getHeightOfLine(i);\n          height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\n        }\n        return height;\n      },\n\n      /**\n       * @private\n       * @return {Number} Left offset\n       */\n      _getLeftOffset: function() {\n        return -this.width / 2;\n      },\n\n      /**\n       * @private\n       * @return {Number} Top offset\n       */\n      _getTopOffset: function() {\n        return -this.height / 2;\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {String} method Method name (\"fillText\" or \"strokeText\")\n       */\n      _renderTextCommon: function(ctx, method) {\n        ctx.save();\n        var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\n            offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          var heightOfLine = this.getHeightOfLine(i),\n              maxHeight = heightOfLine / this.lineHeight,\n              leftOffset = this._getLineLeftOffset(i);\n          this._renderTextLine(\n            method,\n            ctx,\n            this._textLines[i],\n            left + leftOffset - offsets.offsetX,\n            top + lineHeights + maxHeight - offsets.offsetY,\n            i\n          );\n          lineHeights += heightOfLine;\n        }\n        ctx.restore();\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderTextFill: function(ctx) {\n        if (!this.fill && !this.styleHas('fill')) {\n          return;\n        }\n\n        this._renderTextCommon(ctx, 'fillText');\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderTextStroke: function(ctx) {\n        if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n          return;\n        }\n\n        if (this.shadow && !this.shadow.affectStroke) {\n          this._removeShadow(ctx);\n        }\n\n        ctx.save();\n        this._setLineDash(ctx, this.strokeDashArray);\n        ctx.beginPath();\n        this._renderTextCommon(ctx, 'strokeText');\n        ctx.closePath();\n        ctx.restore();\n      },\n\n      /**\n       * @private\n       * @param {String} method\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {String} line Content of the line\n       * @param {Number} left\n       * @param {Number} top\n       * @param {Number} lineIndex\n       * @param {Number} charOffset\n       */\n      _renderChars: function(method, ctx, line, left, top, lineIndex) {\n        // set proper line offset\n        var lineHeight = this.getHeightOfLine(lineIndex),\n            isJustify = this.textAlign.indexOf('justify') !== -1,\n            actualStyle,\n            nextStyle,\n            charsToRender = '',\n            charBox,\n            boxWidth = 0,\n            timeToRender,\n            shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\n\n        ctx.save();\n        top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n        if (shortCut) {\n          // render all the line in one pass without checking\n          this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\n          ctx.restore();\n          return;\n        }\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\n          timeToRender = i === len || this.charSpacing;\n          charsToRender += line[i];\n          charBox = this.__charBounds[lineIndex][i];\n          if (boxWidth === 0) {\n            left += charBox.kernedWidth - charBox.width;\n            boxWidth += charBox.width;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n          if (isJustify && !timeToRender) {\n            if (this._reSpaceAndTab.test(line[i])) {\n              timeToRender = true;\n            }\n          }\n          if (!timeToRender) {\n            // if we have charSpacing, we render char by char\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n            timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\n          }\n          if (timeToRender) {\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\n            charsToRender = '';\n            actualStyle = nextStyle;\n            left += boxWidth;\n            boxWidth = 0;\n          }\n        }\n        ctx.restore();\n      },\n\n      /**\n       * @private\n       * @param {String} method\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @param {String} _char\n       * @param {Number} left Left coordinate\n       * @param {Number} top Top coordinate\n       * @param {Number} lineHeight Height of the line\n       */\n      _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n        var decl = this._getStyleDeclaration(lineIndex, charIndex),\n            fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n            shouldFill = method === 'fillText' && fullDecl.fill,\n            shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n        if (!shouldStroke && !shouldFill) {\n          return;\n        }\n        decl && ctx.save();\n\n        this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\n\n        if (decl && decl.textBackgroundColor) {\n          this._removeShadow(ctx);\n        }\n        if (decl && decl.deltaY) {\n          top += decl.deltaY;\n        }\n\n        shouldFill && ctx.fillText(_char, left, top);\n        shouldStroke && ctx.strokeText(_char, left, top);\n        decl && ctx.restore();\n      },\n\n      /**\n       * Turns the character into a 'superior figure' (i.e. 'superscript')\n       * @param {Number} start selection start\n       * @param {Number} end selection end\n       * @returns {fabric.Text} thisArg\n       * @chainable\n       */\n      setSuperscript: function(start, end) {\n        return this._setScript(start, end, this.superscript);\n      },\n\n      /**\n       * Turns the character into an 'inferior figure' (i.e. 'subscript')\n       * @param {Number} start selection start\n       * @param {Number} end selection end\n       * @returns {fabric.Text} thisArg\n       * @chainable\n       */\n      setSubscript: function(start, end) {\n        return this._setScript(start, end, this.subscript);\n      },\n\n      /**\n       * Applies 'schema' at given position\n       * @private\n       * @param {Number} start selection start\n       * @param {Number} end selection end\n       * @param {Number} schema\n       * @returns {fabric.Text} thisArg\n       * @chainable\n       */\n      _setScript: function(start, end, schema) {\n        var loc = this.get2DCursorLocation(start, true),\n            fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\n            dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n            style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\n        this.setSelectionStyles(style, start, end);\n        return this;\n      },\n\n      /**\n       * @private\n       * @param {Object} prevStyle\n       * @param {Object} thisStyle\n       */\n      _hasStyleChanged: function(prevStyle, thisStyle) {\n        return prevStyle.fill !== thisStyle.fill ||\n                prevStyle.stroke !== thisStyle.stroke ||\n                prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n                prevStyle.fontSize !== thisStyle.fontSize ||\n                prevStyle.fontFamily !== thisStyle.fontFamily ||\n                prevStyle.fontWeight !== thisStyle.fontWeight ||\n                prevStyle.fontStyle !== thisStyle.fontStyle ||\n                prevStyle.deltaY !== thisStyle.deltaY;\n      },\n\n      /**\n       * @private\n       * @param {Object} prevStyle\n       * @param {Object} thisStyle\n       */\n      _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\n        return this._hasStyleChanged(prevStyle, thisStyle) ||\n          prevStyle.overline !== thisStyle.overline ||\n          prevStyle.underline !== thisStyle.underline ||\n          prevStyle.linethrough !== thisStyle.linethrough;\n      },\n\n      /**\n       * @private\n       * @param {Number} lineIndex index text line\n       * @return {Number} Line left offset\n       */\n      _getLineLeftOffset: function(lineIndex) {\n        var lineWidth = this.getLineWidth(lineIndex);\n        if (this.textAlign === 'center') {\n          return (this.width - lineWidth) / 2;\n        }\n        if (this.textAlign === 'right') {\n          return this.width - lineWidth;\n        }\n        if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\n          return (this.width - lineWidth) / 2;\n        }\n        if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\n          return this.width - lineWidth;\n        }\n        return 0;\n      },\n\n      /**\n       * @private\n       */\n      _clearCache: function() {\n        this.__lineWidths = [];\n        this.__lineHeights = [];\n        this.__charBounds = [];\n      },\n\n      /**\n       * @private\n       */\n      _shouldClearDimensionCache: function() {\n        var shouldClear = this._forceClearCache;\n        shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\n        if (shouldClear) {\n          this.dirty = true;\n          this._forceClearCache = false;\n        }\n        return shouldClear;\n      },\n\n      /**\n       * Measure a single line given its index. Used to calculate the initial\n       * text bounding box. The values are calculated and stored in __lineWidths cache.\n       * @private\n       * @param {Number} lineIndex line number\n       * @return {Number} Line width\n       */\n      getLineWidth: function(lineIndex) {\n        if (this.__lineWidths[lineIndex]) {\n          return this.__lineWidths[lineIndex];\n        }\n\n        var width, line = this._textLines[lineIndex], lineInfo;\n\n        if (line === '') {\n          width = 0;\n        }\n        else {\n          lineInfo = this.measureLine(lineIndex);\n          width = lineInfo.width;\n        }\n        this.__lineWidths[lineIndex] = width;\n        return width;\n      },\n\n      _getWidthOfCharSpacing: function() {\n        if (this.charSpacing !== 0) {\n          return this.fontSize * this.charSpacing / 1000;\n        }\n        return 0;\n      },\n\n      /**\n       * Retrieves the value of property at given character position\n       * @param {Number} lineIndex the line number\n       * @param {Number} charIndex the charater number\n       * @param {String} property the property name\n       * @returns the value of 'property'\n       */\n      getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n        var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n        if (charStyle && typeof charStyle[property] !== 'undefined') {\n          return charStyle[property];\n        }\n        return this[property];\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _renderTextDecoration: function(ctx, type) {\n        if (!this[type] && !this.styleHas(type)) {\n          return;\n        }\n        var heightOfLine, size, _size,\n            lineLeftOffset, dy, _dy,\n            line, lastDecoration,\n            leftOffset = this._getLeftOffset(),\n            topOffset = this._getTopOffset(), top,\n            boxStart, boxWidth, charBox, currentDecoration,\n            maxHeight, currentFill, lastFill,\n            charSpacing = this._getWidthOfCharSpacing();\n\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          heightOfLine = this.getHeightOfLine(i);\n          if (!this[type] && !this.styleHas(type, i)) {\n            topOffset += heightOfLine;\n            continue;\n          }\n          line = this._textLines[i];\n          maxHeight = heightOfLine / this.lineHeight;\n          lineLeftOffset = this._getLineLeftOffset(i);\n          boxStart = 0;\n          boxWidth = 0;\n          lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n          lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n          top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n          size = this.getHeightOfChar(i, 0);\n          dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n          for (var j = 0, jlen = line.length; j < jlen; j++) {\n            charBox = this.__charBounds[i][j];\n            currentDecoration = this.getValueOfPropertyAt(i, j, type);\n            currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n            _size = this.getHeightOfChar(i, j);\n            _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\n            if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\n                boxWidth > 0) {\n              ctx.fillStyle = lastFill;\n              lastDecoration && lastFill && ctx.fillRect(\n                leftOffset + lineLeftOffset + boxStart,\n                top + this.offsets[type] * size + dy,\n                boxWidth,\n                this.fontSize / 15\n              );\n              boxStart = charBox.left;\n              boxWidth = charBox.width;\n              lastDecoration = currentDecoration;\n              lastFill = currentFill;\n              size = _size;\n              dy = _dy;\n            }\n            else {\n              boxWidth += charBox.kernedWidth;\n            }\n          }\n          ctx.fillStyle = currentFill;\n          currentDecoration && currentFill && ctx.fillRect(\n            leftOffset + lineLeftOffset + boxStart,\n            top + this.offsets[type] * size + dy,\n            boxWidth - charSpacing,\n            this.fontSize / 15\n          );\n          topOffset += heightOfLine;\n        }\n        // if there is text background color no\n        // other shadows should be casted\n        this._removeShadow(ctx);\n      },\n\n      /**\n       * return font declaration string for canvas context\n       * @param {Object} [styleObject] object\n       * @returns {String} font declaration formatted for canvas context.\n       */\n      _getFontDeclaration: function(styleObject, forMeasuring) {\n        var style = styleObject || this, family = this.fontFamily,\n            fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n        var fontFamily = family === undefined ||\n        family.indexOf('\\'') > -1 ||\n        family.indexOf('\"') > -1 || fontIsGeneric\n          ? style.fontFamily : '\"' + style.fontFamily + '\"';\n        return [\n          // node-canvas needs \"weight style\", while browsers need \"style weight\"\n          (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\n          (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\n          forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\n          fontFamily\n        ].join(' ');\n      },\n\n      /**\n       * Renders text instance on a specified context\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      render: function(ctx) {\n        // do not render if object is not visible\n        if (!this.visible) {\n          return;\n        }\n        if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n          return;\n        }\n        if (this._shouldClearDimensionCache()) {\n          this.initDimensions();\n        }\n        this.callSuper('render', ctx);\n      },\n\n      /**\n       * Returns the text as an array of lines.\n       * @param {String} text text to split\n       * @returns {Array} Lines in the text\n       */\n      _splitTextIntoLines: function(text) {\n        var lines = text.split(this._reNewline),\n            newLines = new Array(lines.length),\n            newLine = ['\\n'],\n            newText = [];\n        for (var i = 0; i < lines.length; i++) {\n          newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n          newText = newText.concat(newLines[i], newLine);\n        }\n        newText.pop();\n        return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} Object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        var additionalProperties = [\n          'text',\n          'fontSize',\n          'fontWeight',\n          'fontFamily',\n          'fontStyle',\n          'lineHeight',\n          'underline',\n          'overline',\n          'linethrough',\n          'textAlign',\n          'textBackgroundColor',\n          'charSpacing',\n        ].concat(propertiesToInclude);\n        var obj = this.callSuper('toObject', additionalProperties);\n        obj.styles = clone(this.styles, true);\n        return obj;\n      },\n\n      /**\n       * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n       * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n       * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n       * @return {fabric.Object} thisArg\n       * @chainable\n       */\n      set: function(key, value) {\n        this.callSuper('set', key, value);\n        var needsDims = false;\n        if (typeof key === 'object') {\n          for (var _key in key) {\n            needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n          }\n        }\n        else {\n          needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n        }\n        if (needsDims) {\n          this.initDimensions();\n          this.setCoords();\n        }\n        return this;\n      },\n\n      /**\n       * Returns complexity of an instance\n       * @return {Number} complexity\n       */\n      complexity: function() {\n        return 1;\n      }\n    });\n\n    /* _FROM_SVG_START_ */\n    /**\n     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n     * @static\n     * @memberOf fabric.Text\n     * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n     */\n    fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n      'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\n\n    /**\n     * Default SVG font size\n     * @static\n     * @memberOf fabric.Text\n     */\n    fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\n    /**\n     * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n     * @static\n     * @memberOf fabric.Text\n     * @param {SVGElement} element Element to parse\n     * @param {Function} callback callback function invoked after parsing\n     * @param {Object} [options] Options object\n     */\n    fabric.Text.fromElement = function(element, callback, options) {\n      if (!element) {\n        return callback(null);\n      }\n\n      var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\n          parsedAnchor = parsedAttributes.textAnchor || 'left';\n      options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\n\n      options.top = options.top || 0;\n      options.left = options.left || 0;\n      if (parsedAttributes.textDecoration) {\n        var textDecoration = parsedAttributes.textDecoration;\n        if (textDecoration.indexOf('underline') !== -1) {\n          options.underline = true;\n        }\n        if (textDecoration.indexOf('overline') !== -1) {\n          options.overline = true;\n        }\n        if (textDecoration.indexOf('line-through') !== -1) {\n          options.linethrough = true;\n        }\n        delete options.textDecoration;\n      }\n      if ('dx' in parsedAttributes) {\n        options.left += parsedAttributes.dx;\n      }\n      if ('dy' in parsedAttributes) {\n        options.top += parsedAttributes.dy;\n      }\n      if (!('fontSize' in options)) {\n        options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n\n      var textContent = '';\n\n      // The XML is not properly parsed in IE9 so a workaround to get\n      // textContent is through firstChild.data. Another workaround would be\n      // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\n      if (!('textContent' in element)) {\n        if ('firstChild' in element && element.firstChild !== null) {\n          if ('data' in element.firstChild && element.firstChild.data !== null) {\n            textContent = element.firstChild.data;\n          }\n        }\n      }\n      else {\n        textContent = element.textContent;\n      }\n\n      textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\n      var originalStrokeWidth = options.strokeWidth;\n      options.strokeWidth = 0;\n\n      var text = new fabric.Text(textContent, options),\n          textHeightScaleFactor = text.getScaledHeight() / text.height,\n          lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\n          scaledDiff = lineHeightDiff * textHeightScaleFactor,\n          textHeight = text.getScaledHeight() + scaledDiff,\n          offX = 0;\n      /*\n        Adjust positioning:\n          x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n          fabric output by default at top, left.\n      */\n      if (parsedAnchor === 'center') {\n        offX = text.getScaledWidth() / 2;\n      }\n      if (parsedAnchor === 'right') {\n        offX = text.getScaledWidth();\n      }\n      text.set({\n        left: text.left - offX,\n        top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\n        strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\n      });\n      callback(text);\n    };\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns fabric.Text instance from an object representation\n     * @static\n     * @memberOf fabric.Text\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\n     */\n    fabric.Text.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Text', object, callback, 'text');\n    };\n\n    fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\n\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function() {\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n      /**\n       * Returns true if object has no styling or no styling in a line\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\n       * @return {Boolean}\n       */\n      isEmptyStyles: function(lineIndex) {\n        if (!this.styles) {\n          return true;\n        }\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n          return true;\n        }\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n        for (var p1 in obj) {\n          for (var p2 in obj[p1]) {\n            // eslint-disable-next-line no-unused-vars\n            for (var p3 in obj[p1][p2]) {\n              return false;\n            }\n          }\n        }\n        return true;\n      },\n\n      /**\n       * Returns true if object has a style property or has it ina specified line\n       * @param {Number} lineIndex\n       * @return {Boolean}\n       */\n      styleHas: function(property, lineIndex) {\n        if (!this.styles || !property || property === '') {\n          return false;\n        }\n        if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n          return false;\n        }\n        var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n        // eslint-disable-next-line\n        for (var p1 in obj) {\n          // eslint-disable-next-line\n          for (var p2 in obj[p1]) {\n            if (typeof obj[p1][p2][property] !== 'undefined') {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Check if characters in a text have a value for a property\n       * whose value matches the textbox's value for that property.  If so,\n       * the character-level property is deleted.  If the character\n       * has no other properties, then it is also deleted.  Finally,\n       * if the line containing that character has no other characters\n       * then it also is deleted.\n       *\n       * @param {string} property The property to compare between characters and text.\n       */\n      cleanStyle: function(property) {\n        if (!this.styles || !property || property === '') {\n          return false;\n        }\n        var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\n            allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n        // eslint-disable-next-line\n        for (var p1 in obj) {\n          letterCount = 0;\n          // eslint-disable-next-line\n          for (var p2 in obj[p1]) {\n            var styleObject = obj[p1][p2],\n                stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n\n            stylesCount++;\n\n            if (stylePropertyHasBeenSet) {\n              if (!stylePropertyValue) {\n                stylePropertyValue = styleObject[property];\n              }\n              else if (styleObject[property] !== stylePropertyValue) {\n                allStyleObjectPropertiesMatch = false;\n              }\n\n              if (styleObject[property] === this[property]) {\n                delete styleObject[property];\n              }\n            }\n            else {\n              allStyleObjectPropertiesMatch = false;\n            }\n\n            if (Object.keys(styleObject).length !== 0) {\n              letterCount++;\n            }\n            else {\n              delete obj[p1][p2];\n            }\n          }\n\n          if (letterCount === 0) {\n            delete obj[p1];\n          }\n        }\n        // if every grapheme has the same style set then\n        // delete those styles and set it on the parent\n        for (var i = 0; i < this._textLines.length; i++) {\n          graphemeCount += this._textLines[i].length;\n        }\n        if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n          this[property] = stylePropertyValue;\n          this.removeStyle(property);\n        }\n      },\n\n      /**\n       * Remove a style property or properties from all individual character styles\n       * in a text object.  Deletes the character style object if it contains no other style\n       * props.  Deletes a line style object if it contains no other character styles.\n       *\n       * @param {String} props The property to remove from character styles.\n       */\n      removeStyle: function(property) {\n        if (!this.styles || !property || property === '') {\n          return;\n        }\n        var obj = this.styles, line, lineNum, charNum;\n        for (lineNum in obj) {\n          line = obj[lineNum];\n          for (charNum in line) {\n            delete line[charNum][property];\n            if (Object.keys(line[charNum]).length === 0) {\n              delete line[charNum];\n            }\n          }\n          if (Object.keys(line).length === 0) {\n            delete obj[lineNum];\n          }\n        }\n      },\n\n      /**\n       * @private\n       */\n      _extendStyles: function(index, styles) {\n        var loc = this.get2DCursorLocation(index);\n\n        if (!this._getLineStyle(loc.lineIndex)) {\n          this._setLineStyle(loc.lineIndex, {});\n        }\n\n        if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n          this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n        }\n\n        fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n      },\n\n      /**\n       * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n       * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n       * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\n       */\n      get2DCursorLocation: function(selectionStart, skipWrapping) {\n        if (typeof selectionStart === 'undefined') {\n          selectionStart = this.selectionStart;\n        }\n        var lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n        var len = lines.length;\n        for (var i = 0; i < len; i++) {\n          if (selectionStart <= lines[i].length) {\n            return {\n              lineIndex: i,\n              charIndex: selectionStart\n            };\n          }\n          selectionStart -= lines[i].length + 1;\n        }\n        return {\n          lineIndex: i - 1,\n          charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n        };\n      },\n\n      /**\n       * Gets style of a current selection/cursor (at the start position)\n       * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\n       * @param {Number} [startIndex] Start index to get styles at\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n       * @param {Boolean} [complete] get full style or not\n       * @return {Array} styles an array with one, zero or more Style objects\n       */\n      getSelectionStyles: function(startIndex, endIndex, complete) {\n        if (typeof startIndex === 'undefined') {\n          startIndex = this.selectionStart || 0;\n        }\n        if (typeof endIndex === 'undefined') {\n          endIndex = this.selectionEnd || startIndex;\n        }\n        var styles = [];\n        for (var i = startIndex; i < endIndex; i++) {\n          styles.push(this.getStyleAtPosition(i, complete));\n        }\n        return styles;\n      },\n\n      /**\n       * Gets style of a current selection/cursor position\n       * @param {Number} position  to get styles at\n       * @param {Boolean} [complete] full style if true\n       * @return {Object} style Style object at a specified index\n       * @private\n       */\n      getStyleAtPosition: function(position, complete) {\n        var loc = this.get2DCursorLocation(position),\n            style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\n              this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n        return style || {};\n      },\n\n      /**\n       * Sets style of a current selection, if no selection exist, do not set anything.\n       * @param {Object} [styles] Styles object\n       * @param {Number} [startIndex] Start index to get styles at\n       * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n       * @return {fabric.IText} thisArg\n       * @chainable\n       */\n      setSelectionStyles: function(styles, startIndex, endIndex) {\n        if (typeof startIndex === 'undefined') {\n          startIndex = this.selectionStart || 0;\n        }\n        if (typeof endIndex === 'undefined') {\n          endIndex = this.selectionEnd || startIndex;\n        }\n        for (var i = startIndex; i < endIndex; i++) {\n          this._extendStyles(i, styles);\n        }\n        /* not included in _extendStyles to avoid clearing cache more than once */\n        this._forceClearCache = true;\n        return this;\n      },\n\n      /**\n       * get the reference, not a clone, of the style object for a given character\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @return {Object} style object\n       */\n      _getStyleDeclaration: function(lineIndex, charIndex) {\n        var lineStyle = this.styles && this.styles[lineIndex];\n        if (!lineStyle) {\n          return null;\n        }\n        return lineStyle[charIndex];\n      },\n\n      /**\n       * return a new object that contains all the style property for a character\n       * the object returned is newly created\n       * @param {Number} lineIndex of the line where the character is\n       * @param {Number} charIndex position of the character on the line\n       * @return {Object} style object\n       */\n      getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n        var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\n            styleObject = { }, prop;\n        for (var i = 0; i < this._styleProperties.length; i++) {\n          prop = this._styleProperties[i];\n          styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\n        }\n        return styleObject;\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @param {Object} style\n       * @private\n       */\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\n        this.styles[lineIndex][charIndex] = style;\n      },\n\n      /**\n       *\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @private\n       */\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\n        delete this.styles[lineIndex][charIndex];\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @private\n       */\n      _getLineStyle: function(lineIndex) {\n        return this.styles[lineIndex];\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @param {Object} style\n       * @private\n       */\n      _setLineStyle: function(lineIndex, style) {\n        this.styles[lineIndex] = style;\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @private\n       */\n      _deleteLineStyle: function(lineIndex) {\n        delete this.styles[lineIndex];\n      }\n    });\n  })();\n\n\n  (function() {\n\n    function parseDecoration(object) {\n      if (object.textDecoration) {\n        object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\n        object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\n        object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\n        delete object.textDecoration;\n      }\n    }\n\n    /**\n     * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n     * prefix when observing canvas.\n     * @class fabric.IText\n     * @extends fabric.Text\n     * @mixes fabric.Observable\n     *\n     * @fires changed\n     * @fires selection:changed\n     * @fires editing:entered\n     * @fires editing:exited\n     *\n     * @return {fabric.IText} thisArg\n     * @see {@link fabric.IText#initialize} for constructor definition\n     *\n     * <p>Supported key combinations:</p>\n     * <pre>\n     *   Move cursor:                    left, right, up, down\n     *   Select character:               shift + left, shift + right\n     *   Select text vertically:         shift + up, shift + down\n     *   Move cursor by word:            alt + left, alt + right\n     *   Select words:                   shift + alt + left, shift + alt + right\n     *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n     *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n     *   Jump to start/end of text:      cmd + up, cmd + down\n     *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n     *   Delete character:               backspace\n     *   Delete word:                    alt + backspace\n     *   Delete line:                    cmd + backspace\n     *   Forward delete:                 delete\n     *   Copy text:                      ctrl/cmd + c\n     *   Paste text:                     ctrl/cmd + v\n     *   Cut text:                       ctrl/cmd + x\n     *   Select entire text:             ctrl/cmd + a\n     *   Quit editing                    tab or esc\n     * </pre>\n     *\n     * <p>Supported mouse/touch combination</p>\n     * <pre>\n     *   Position cursor:                click/touch\n     *   Create selection:               click/touch & drag\n     *   Create selection:               click & shift + click\n     *   Select word:                    double click\n     *   Select line:                    triple click\n     * </pre>\n     */\n    fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'i-text',\n\n      /**\n       * Index where text selection starts (or where cursor is when there is no selection)\n       * @type Number\n       * @default\n       */\n      selectionStart: 0,\n\n      /**\n       * Index where text selection ends\n       * @type Number\n       * @default\n       */\n      selectionEnd: 0,\n\n      /**\n       * Color of text selection\n       * @type String\n       * @default\n       */\n      selectionColor: 'rgba(17,119,255,0.3)',\n\n      /**\n       * Indicates whether text is in editing mode\n       * @type Boolean\n       * @default\n       */\n      isEditing: false,\n\n      /**\n       * Indicates whether a text can be edited\n       * @type Boolean\n       * @default\n       */\n      editable: true,\n\n      /**\n       * Border color of text object while it's in editing mode\n       * @type String\n       * @default\n       */\n      editingBorderColor: 'rgba(102,153,255,0.25)',\n\n      /**\n       * Width of cursor (in px)\n       * @type Number\n       * @default\n       */\n      cursorWidth: 2,\n\n      /**\n       * Color of default cursor (when not overwritten by character style)\n       * @type String\n       * @default\n       */\n      cursorColor: '#333',\n\n      /**\n       * Delay between cursor blink (in ms)\n       * @type Number\n       * @default\n       */\n      cursorDelay: 1000,\n\n      /**\n       * Duration of cursor fadein (in ms)\n       * @type Number\n       * @default\n       */\n      cursorDuration: 600,\n\n      /**\n       * Indicates whether internal text char widths can be cached\n       * @type Boolean\n       * @default\n       */\n      caching: true,\n\n      /**\n       * @private\n       */\n      _reSpace: /\\s|\\n/,\n\n      /**\n       * @private\n       */\n      _currentCursorOpacity: 0,\n\n      /**\n       * @private\n       */\n      _selectionDirection: null,\n\n      /**\n       * @private\n       */\n      _abortCursorAnimation: false,\n\n      /**\n       * @private\n       */\n      __widthOfSpace: [],\n\n      /**\n       * Helps determining when the text is in composition, so that the cursor\n       * rendering is altered.\n       */\n      inCompositionMode: false,\n\n      /**\n       * Constructor\n       * @param {String} text Text string\n       * @param {Object} [options] Options object\n       * @return {fabric.IText} thisArg\n       */\n      initialize: function(text, options) {\n        this.callSuper('initialize', text, options);\n        this.initBehavior();\n      },\n\n      /**\n       * Sets selection start (left boundary of a selection)\n       * @param {Number} index Index to set selection start to\n       */\n      setSelectionStart: function(index) {\n        index = Math.max(index, 0);\n        this._updateAndFire('selectionStart', index);\n      },\n\n      /**\n       * Sets selection end (right boundary of a selection)\n       * @param {Number} index Index to set selection end to\n       */\n      setSelectionEnd: function(index) {\n        index = Math.min(index, this.text.length);\n        this._updateAndFire('selectionEnd', index);\n      },\n\n      /**\n       * @private\n       * @param {String} property 'selectionStart' or 'selectionEnd'\n       * @param {Number} index new position of property\n       */\n      _updateAndFire: function(property, index) {\n        if (this[property] !== index) {\n          this._fireSelectionChanged();\n          this[property] = index;\n        }\n        this._updateTextarea();\n      },\n\n      /**\n       * Fires the even of selection changed\n       * @private\n       */\n      _fireSelectionChanged: function() {\n        this.fire('selection:changed');\n        this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n      },\n\n      /**\n       * Initialize text dimensions. Render all text on given context\n       * or on a offscreen canvas to get the text width with measureText.\n       * Updates this.width and this.height with the proper values.\n       * Does not return dimensions.\n       * @private\n       */\n      initDimensions: function() {\n        this.isEditing && this.initDelayedCursor();\n        this.clearContextTop();\n        this.callSuper('initDimensions');\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      render: function(ctx) {\n        this.clearContextTop();\n        this.callSuper('render', ctx);\n        // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n        // the correct position but not at every cursor animation.\n        this.cursorOffsetCache = { };\n        this.renderCursorOrSelection();\n      },\n\n      /**\n       * @private\n       * @param {CanvasRenderingContext2D} ctx Context to render on\n       */\n      _render: function(ctx) {\n        this.callSuper('_render', ctx);\n      },\n\n      /**\n       * Prepare and clean the contextTop\n       */\n      clearContextTop: function(skipRestore) {\n        if (!this.isEditing) {\n          return;\n        }\n        if (this.canvas && this.canvas.contextTop) {\n          var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\n          ctx.save();\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n          this.transform(ctx);\n          this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n          this._clearTextArea(ctx);\n          skipRestore || ctx.restore();\n        }\n      },\n\n      /**\n       * Renders cursor or selection (depending on what exists)\n       */\n      renderCursorOrSelection: function() {\n        if (!this.isEditing || !this.canvas) {\n          return;\n        }\n        var boundaries = this._getCursorBoundaries(), ctx;\n        if (this.canvas && this.canvas.contextTop) {\n          ctx = this.canvas.contextTop;\n          this.clearContextTop(true);\n        }\n        else {\n          ctx = this.canvas.contextContainer;\n          ctx.save();\n        }\n        if (this.selectionStart === this.selectionEnd) {\n          this.renderCursor(boundaries, ctx);\n        }\n        else {\n          this.renderSelection(boundaries, ctx);\n        }\n        ctx.restore();\n      },\n\n      _clearTextArea: function(ctx) {\n        // we add 4 pixel, to be sure to do not leave any pixel out\n        var width = this.width + 4, height = this.height + 4;\n        ctx.clearRect(-width / 2, -height / 2, width, height);\n      },\n\n      /**\n       * Returns cursor boundaries (left, top, leftOffset, topOffset)\n       * @private\n       * @param {Array} chars Array of characters\n       * @param {String} typeOfBoundaries\n       */\n      _getCursorBoundaries: function(position) {\n\n        // left/top are left/top of entire text box\n        // leftOffset/topOffset are offset from that left/top point of a text box\n\n        if (typeof position === 'undefined') {\n          position = this.selectionStart;\n        }\n\n        var left = this._getLeftOffset(),\n            top = this._getTopOffset(),\n            offsets = this._getCursorBoundariesOffsets(position);\n\n        return {\n          left: left,\n          top: top,\n          leftOffset: offsets.left,\n          topOffset: offsets.top\n        };\n      },\n\n      /**\n       * @private\n       */\n      _getCursorBoundariesOffsets: function(position) {\n        if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n          return this.cursorOffsetCache;\n        }\n        var lineLeftOffset,\n            lineIndex,\n            charIndex,\n            topOffset = 0,\n            leftOffset = 0,\n            boundaries,\n            cursorPosition = this.get2DCursorLocation(position);\n        charIndex = cursorPosition.charIndex;\n        lineIndex = cursorPosition.lineIndex;\n        for (var i = 0; i < lineIndex; i++) {\n          topOffset += this.getHeightOfLine(i);\n        }\n        lineLeftOffset = this._getLineLeftOffset(lineIndex);\n        var bound = this.__charBounds[lineIndex][charIndex];\n        bound && (leftOffset = bound.left);\n        if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\n          leftOffset -= this._getWidthOfCharSpacing();\n        }\n        boundaries = {\n          top: topOffset,\n          left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n        };\n        this.cursorOffsetCache = boundaries;\n        return this.cursorOffsetCache;\n      },\n\n      /**\n       * Renders cursor\n       * @param {Object} boundaries\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n       */\n      renderCursor: function(boundaries, ctx) {\n        var cursorLocation = this.get2DCursorLocation(),\n            lineIndex = cursorLocation.lineIndex,\n            charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n            multiplier = this.scaleX * this.canvas.getZoom(),\n            cursorWidth = this.cursorWidth / multiplier,\n            topOffset = boundaries.topOffset,\n            dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\n\n        topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\n          - charHeight * (1 - this._fontSizeFraction);\n\n        if (this.inCompositionMode) {\n          this.renderSelection(boundaries, ctx);\n        }\n\n        ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\n        ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n        ctx.fillRect(\n          boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n          topOffset + boundaries.top + dy,\n          cursorWidth,\n          charHeight);\n      },\n\n      /**\n       * Renders text selection\n       * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n       * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n       */\n      renderSelection: function(boundaries, ctx) {\n\n        var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n            selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\n            isJustify = this.textAlign.indexOf('justify') !== -1,\n            start = this.get2DCursorLocation(selectionStart),\n            end = this.get2DCursorLocation(selectionEnd),\n            startLine = start.lineIndex,\n            endLine = end.lineIndex,\n            startChar = start.charIndex < 0 ? 0 : start.charIndex,\n            endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n        for (var i = startLine; i <= endLine; i++) {\n          var lineOffset = this._getLineLeftOffset(i) || 0,\n              lineHeight = this.getHeightOfLine(i),\n              realLineHeight = 0, boxStart = 0, boxEnd = 0;\n\n          if (i === startLine) {\n            boxStart = this.__charBounds[startLine][startChar].left;\n          }\n          if (i >= startLine && i < endLine) {\n            boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\n          }\n          else if (i === endLine) {\n            if (endChar === 0) {\n              boxEnd = this.__charBounds[endLine][endChar].left;\n            }\n            else {\n              var charSpacing = this._getWidthOfCharSpacing();\n              boxEnd = this.__charBounds[endLine][endChar - 1].left\n                + this.__charBounds[endLine][endChar - 1].width - charSpacing;\n            }\n          }\n          realLineHeight = lineHeight;\n          if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n            lineHeight /= this.lineHeight;\n          }\n          if (this.inCompositionMode) {\n            ctx.fillStyle = this.compositionColor || 'black';\n            ctx.fillRect(\n              boundaries.left + lineOffset + boxStart,\n              boundaries.top + boundaries.topOffset + lineHeight,\n              boxEnd - boxStart,\n              1);\n          }\n          else {\n            ctx.fillStyle = this.selectionColor;\n            ctx.fillRect(\n              boundaries.left + lineOffset + boxStart,\n              boundaries.top + boundaries.topOffset,\n              boxEnd - boxStart,\n              lineHeight);\n          }\n\n\n          boundaries.topOffset += realLineHeight;\n        }\n      },\n\n      /**\n       * High level function to know the height of the cursor.\n       * the currentChar is the one that precedes the cursor\n       * Returns fontSize of char at the current cursor\n       * @return {Number} Character font size\n       */\n      getCurrentCharFontSize: function() {\n        var cp = this._getCurrentCharIndex();\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n      },\n\n      /**\n       * High level function to know the color of the cursor.\n       * the currentChar is the one that precedes the cursor\n       * Returns color (fill) of char at the current cursor\n       * @return {String} Character color (fill)\n       */\n      getCurrentCharColor: function() {\n        var cp = this._getCurrentCharIndex();\n        return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\n      },\n\n      /**\n       * Returns the cursor position for the getCurrent.. functions\n       * @private\n       */\n      _getCurrentCharIndex: function() {\n        var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n            charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n        return { l: cursorPosition.lineIndex, c: charIndex };\n      }\n    });\n\n    /**\n     * Returns fabric.IText instance from an object representation\n     * @static\n     * @memberOf fabric.IText\n     * @param {Object} object Object to create an instance from\n     * @param {function} [callback] invoked with new instance as argument\n     */\n    fabric.IText.fromObject = function(object, callback) {\n      parseDecoration(object);\n      if (object.styles) {\n        for (var i in object.styles) {\n          for (var j in object.styles[i]) {\n            parseDecoration(object.styles[i][j]);\n          }\n        }\n      }\n      fabric.Object._fromObject('IText', object, callback, 'text');\n    };\n  })();\n\n\n  (function() {\n\n    var clone = fabric.util.object.clone;\n\n    fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n      /**\n       * Initializes all the interactive behavior of IText\n       */\n      initBehavior: function() {\n        this.initAddedHandler();\n        this.initRemovedHandler();\n        this.initCursorSelectionHandlers();\n        this.initDoubleClickSimulation();\n        this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n      },\n\n      onDeselect: function() {\n        this.isEditing && this.exitEditing();\n        this.selected = false;\n      },\n\n      /**\n       * Initializes \"added\" event handler\n       */\n      initAddedHandler: function() {\n        var _this = this;\n        this.on('added', function() {\n          var canvas = _this.canvas;\n          if (canvas) {\n            if (!canvas._hasITextHandlers) {\n              canvas._hasITextHandlers = true;\n              _this._initCanvasHandlers(canvas);\n            }\n            canvas._iTextInstances = canvas._iTextInstances || [];\n            canvas._iTextInstances.push(_this);\n          }\n        });\n      },\n\n      initRemovedHandler: function() {\n        var _this = this;\n        this.on('removed', function() {\n          var canvas = _this.canvas;\n          if (canvas) {\n            canvas._iTextInstances = canvas._iTextInstances || [];\n            fabric.util.removeFromArray(canvas._iTextInstances, _this);\n            if (canvas._iTextInstances.length === 0) {\n              canvas._hasITextHandlers = false;\n              _this._removeCanvasHandlers(canvas);\n            }\n          }\n        });\n      },\n\n      /**\n       * register canvas event to manage exiting on other instances\n       * @private\n       */\n      _initCanvasHandlers: function(canvas) {\n        canvas._mouseUpITextHandler = function() {\n          if (canvas._iTextInstances) {\n            canvas._iTextInstances.forEach(function(obj) {\n              obj.__isMousedown = false;\n            });\n          }\n        };\n        canvas.on('mouse:up', canvas._mouseUpITextHandler);\n      },\n\n      /**\n       * remove canvas event to manage exiting on other instances\n       * @private\n       */\n      _removeCanvasHandlers: function(canvas) {\n        canvas.off('mouse:up', canvas._mouseUpITextHandler);\n      },\n\n      /**\n       * @private\n       */\n      _tick: function() {\n        this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n      },\n\n      /**\n       * @private\n       */\n      _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\n        var tickState;\n\n        tickState = {\n          isAborted: false,\n          abort: function() {\n            this.isAborted = true;\n          },\n        };\n\n        obj.animate('_currentCursorOpacity', targetOpacity, {\n          duration: duration,\n          onComplete: function() {\n            if (!tickState.isAborted) {\n              obj[completeMethod]();\n            }\n          },\n          onChange: function() {\n            // we do not want to animate a selection, only cursor\n            if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\n              obj.renderCursorOrSelection();\n            }\n          },\n          abort: function() {\n            return tickState.isAborted;\n          }\n        });\n        return tickState;\n      },\n\n      /**\n       * @private\n       */\n      _onTickComplete: function() {\n\n        var _this = this;\n\n        if (this._cursorTimeout1) {\n          clearTimeout(this._cursorTimeout1);\n        }\n        this._cursorTimeout1 = setTimeout(function() {\n          _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n        }, 100);\n      },\n\n      /**\n       * Initializes delayed cursor\n       */\n      initDelayedCursor: function(restart) {\n        var _this = this,\n            delay = restart ? 0 : this.cursorDelay;\n\n        this.abortCursorAnimation();\n        this._currentCursorOpacity = 1;\n        this._cursorTimeout2 = setTimeout(function() {\n          _this._tick();\n        }, delay);\n      },\n\n      /**\n       * Aborts cursor animation and clears all timeouts\n       */\n      abortCursorAnimation: function() {\n        var shouldClear = this._currentTickState || this._currentTickCompleteState,\n            canvas = this.canvas;\n        this._currentTickState && this._currentTickState.abort();\n        this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\n        clearTimeout(this._cursorTimeout1);\n        clearTimeout(this._cursorTimeout2);\n\n        this._currentCursorOpacity = 0;\n        // to clear just itext area we need to transform the context\n        // it may not be worth it\n        if (shouldClear && canvas) {\n          canvas.clearContext(canvas.contextTop || canvas.contextContainer);\n        }\n\n      },\n\n      /**\n       * Selects entire text\n       * @return {fabric.IText} thisArg\n       * @chainable\n       */\n      selectAll: function() {\n        this.selectionStart = 0;\n        this.selectionEnd = this._text.length;\n        this._fireSelectionChanged();\n        this._updateTextarea();\n        return this;\n      },\n\n      /**\n       * Returns selected text\n       * @return {String}\n       */\n      getSelectedText: function() {\n        return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n      },\n\n      /**\n       * Find new selection index representing start of current word according to current selection index\n       * @param {Number} startFrom Surrent selection index\n       * @return {Number} New selection index\n       */\n      findWordBoundaryLeft: function(startFrom) {\n        var offset = 0, index = startFrom - 1;\n\n        // remove space before cursor first\n        if (this._reSpace.test(this._text[index])) {\n          while (this._reSpace.test(this._text[index])) {\n            offset++;\n            index--;\n          }\n        }\n        while (/\\S/.test(this._text[index]) && index > -1) {\n          offset++;\n          index--;\n        }\n\n        return startFrom - offset;\n      },\n\n      /**\n       * Find new selection index representing end of current word according to current selection index\n       * @param {Number} startFrom Current selection index\n       * @return {Number} New selection index\n       */\n      findWordBoundaryRight: function(startFrom) {\n        var offset = 0, index = startFrom;\n\n        // remove space after cursor first\n        if (this._reSpace.test(this._text[index])) {\n          while (this._reSpace.test(this._text[index])) {\n            offset++;\n            index++;\n          }\n        }\n        while (/\\S/.test(this._text[index]) && index < this.text.length) {\n          offset++;\n          index++;\n        }\n\n        return startFrom + offset;\n      },\n\n      /**\n       * Find new selection index representing start of current line according to current selection index\n       * @param {Number} startFrom Current selection index\n       * @return {Number} New selection index\n       */\n      findLineBoundaryLeft: function(startFrom) {\n        var offset = 0, index = startFrom - 1;\n\n        while (!/\\n/.test(this._text[index]) && index > -1) {\n          offset++;\n          index--;\n        }\n\n        return startFrom - offset;\n      },\n\n      /**\n       * Find new selection index representing end of current line according to current selection index\n       * @param {Number} startFrom Current selection index\n       * @return {Number} New selection index\n       */\n      findLineBoundaryRight: function(startFrom) {\n        var offset = 0, index = startFrom;\n\n        while (!/\\n/.test(this._text[index]) && index < this.text.length) {\n          offset++;\n          index++;\n        }\n\n        return startFrom + offset;\n      },\n\n      /**\n       * Finds index corresponding to beginning or end of a word\n       * @param {Number} selectionStart Index of a character\n       * @param {Number} direction 1 or -1\n       * @return {Number} Index of the beginning or end of a word\n       */\n      searchWordBoundary: function(selectionStart, direction) {\n        var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n            _char     = this.text.charAt(index),\n            reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\n        while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n          index += direction;\n          _char = this.text.charAt(index);\n        }\n        if (reNonWord.test(_char) && _char !== '\\n') {\n          index += direction === 1 ? 0 : 1;\n        }\n        return index;\n      },\n\n      /**\n       * Selects a word based on the index\n       * @param {Number} selectionStart Index of a character\n       */\n      selectWord: function(selectionStart) {\n        selectionStart = selectionStart || this.selectionStart;\n        var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n            newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\n\n        this.selectionStart = newSelectionStart;\n        this.selectionEnd = newSelectionEnd;\n        this._fireSelectionChanged();\n        this._updateTextarea();\n        this.renderCursorOrSelection();\n      },\n\n      /**\n       * Selects a line based on the index\n       * @param {Number} selectionStart Index of a character\n       * @return {fabric.IText} thisArg\n       * @chainable\n       */\n      selectLine: function(selectionStart) {\n        selectionStart = selectionStart || this.selectionStart;\n        var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n            newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n        this.selectionStart = newSelectionStart;\n        this.selectionEnd = newSelectionEnd;\n        this._fireSelectionChanged();\n        this._updateTextarea();\n        return this;\n      },\n\n      /**\n       * Enters editing state\n       * @return {fabric.IText} thisArg\n       * @chainable\n       */\n      enterEditing: function(e) {\n        if (this.isEditing || !this.editable) {\n          return;\n        }\n\n        if (this.canvas) {\n          this.canvas.calcOffset();\n          this.exitEditingOnOthers(this.canvas);\n        }\n\n        this.isEditing = true;\n\n        this.initHiddenTextarea(e);\n        this.hiddenTextarea.focus();\n        this.hiddenTextarea.value = this.text;\n        this._updateTextarea();\n        this._saveEditingProps();\n        this._setEditingProps();\n        this._textBeforeEdit = this.text;\n\n        this._tick();\n        this.fire('editing:entered');\n        this._fireSelectionChanged();\n        if (!this.canvas) {\n          return this;\n        }\n        this.canvas.fire('text:editing:entered', { target: this });\n        this.initMouseMoveHandler();\n        this.canvas.requestRenderAll();\n        return this;\n      },\n\n      exitEditingOnOthers: function(canvas) {\n        if (canvas._iTextInstances) {\n          canvas._iTextInstances.forEach(function(obj) {\n            obj.selected = false;\n            if (obj.isEditing) {\n              obj.exitEditing();\n            }\n          });\n        }\n      },\n\n      /**\n       * Initializes \"mousemove\" event handler\n       */\n      initMouseMoveHandler: function() {\n        this.canvas.on('mouse:move', this.mouseMoveHandler);\n      },\n\n      /**\n       * @private\n       */\n      mouseMoveHandler: function(options) {\n        if (!this.__isMousedown || !this.isEditing) {\n          return;\n        }\n\n        var newSelectionStart = this.getSelectionStartFromPointer(options.e),\n            currentStart = this.selectionStart,\n            currentEnd = this.selectionEnd;\n        if (\n          (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\n          &&\n          (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n        ) {\n          return;\n        }\n        if (newSelectionStart > this.__selectionStartOnMouseDown) {\n          this.selectionStart = this.__selectionStartOnMouseDown;\n          this.selectionEnd = newSelectionStart;\n        }\n        else {\n          this.selectionStart = newSelectionStart;\n          this.selectionEnd = this.__selectionStartOnMouseDown;\n        }\n        if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\n          this.restartCursorIfNeeded();\n          this._fireSelectionChanged();\n          this._updateTextarea();\n          this.renderCursorOrSelection();\n        }\n      },\n\n      /**\n       * @private\n       */\n      _setEditingProps: function() {\n        this.hoverCursor = 'text';\n\n        if (this.canvas) {\n          this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n        }\n\n        this.borderColor = this.editingBorderColor;\n\n        this.hasControls = this.selectable = false;\n        this.lockMovementX = this.lockMovementY = true;\n      },\n\n      /**\n       * convert from textarea to grapheme indexes\n       */\n      fromStringToGraphemeSelection: function(start, end, text) {\n        var smallerTextStart = text.slice(0, start),\n            graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\n        if (start === end) {\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n        }\n        var smallerTextEnd = text.slice(start, end),\n            graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n      },\n\n      /**\n       * convert from fabric to textarea values\n       */\n      fromGraphemeToStringSelection: function(start, end, _text) {\n        var smallerTextStart = _text.slice(0, start),\n            graphemeStart = smallerTextStart.join('').length;\n        if (start === end) {\n          return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n        }\n        var smallerTextEnd = _text.slice(start, end),\n            graphemeEnd = smallerTextEnd.join('').length;\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n      },\n\n      /**\n       * @private\n       */\n      _updateTextarea: function() {\n        this.cursorOffsetCache = { };\n        if (!this.hiddenTextarea) {\n          return;\n        }\n        if (!this.inCompositionMode) {\n          var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n          this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n          this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n        }\n        this.updateTextareaPosition();\n      },\n\n      /**\n       * @private\n       */\n      updateFromTextArea: function() {\n        if (!this.hiddenTextarea) {\n          return;\n        }\n        this.cursorOffsetCache = { };\n        this.text = this.hiddenTextarea.value;\n        if (this._shouldClearDimensionCache()) {\n          this.initDimensions();\n          this.setCoords();\n        }\n        var newSelection = this.fromStringToGraphemeSelection(\n          this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\n        this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n        if (!this.inCompositionMode) {\n          this.selectionStart = newSelection.selectionStart;\n        }\n        this.updateTextareaPosition();\n      },\n\n      /**\n       * @private\n       */\n      updateTextareaPosition: function() {\n        if (this.selectionStart === this.selectionEnd) {\n          var style = this._calcTextareaPosition();\n          this.hiddenTextarea.style.left = style.left;\n          this.hiddenTextarea.style.top = style.top;\n        }\n      },\n\n      /**\n       * @private\n       * @return {Object} style contains style for hiddenTextarea\n       */\n      _calcTextareaPosition: function() {\n        if (!this.canvas) {\n          return { x: 1, y: 1 };\n        }\n        var desiredPostion = this.inCompositionMode ? this.compositionStart : this.selectionStart,\n            boundaries = this._getCursorBoundaries(desiredPostion),\n            cursorLocation = this.get2DCursorLocation(desiredPostion),\n            lineIndex = cursorLocation.lineIndex,\n            charIndex = cursorLocation.charIndex,\n            charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\n            leftOffset = boundaries.leftOffset,\n            m = this.calcTransformMatrix(),\n            p = {\n              x: boundaries.left + leftOffset,\n              y: boundaries.top + boundaries.topOffset + charHeight\n            },\n            upperCanvas = this.canvas.upperCanvasEl,\n            upperCanvasWidth = upperCanvas.width,\n            upperCanvasHeight = upperCanvas.height,\n            maxWidth = upperCanvasWidth - charHeight,\n            maxHeight = upperCanvasHeight - charHeight,\n            scaleX = upperCanvas.clientWidth / upperCanvasWidth,\n            scaleY = upperCanvas.clientHeight / upperCanvasHeight;\n\n        p = fabric.util.transformPoint(p, m);\n        p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\n        p.x *= scaleX;\n        p.y *= scaleY;\n        if (p.x < 0) {\n          p.x = 0;\n        }\n        if (p.x > maxWidth) {\n          p.x = maxWidth;\n        }\n        if (p.y < 0) {\n          p.y = 0;\n        }\n        if (p.y > maxHeight) {\n          p.y = maxHeight;\n        }\n\n        // add canvas offset on document\n        p.x += this.canvas._offset.left;\n        p.y += this.canvas._offset.top;\n\n        return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\n      },\n\n      /**\n       * @private\n       */\n      _saveEditingProps: function() {\n        this._savedProps = {\n          hasControls: this.hasControls,\n          borderColor: this.borderColor,\n          lockMovementX: this.lockMovementX,\n          lockMovementY: this.lockMovementY,\n          hoverCursor: this.hoverCursor,\n          defaultCursor: this.canvas && this.canvas.defaultCursor,\n          moveCursor: this.canvas && this.canvas.moveCursor\n        };\n      },\n\n      /**\n       * @private\n       */\n      _restoreEditingProps: function() {\n        if (!this._savedProps) {\n          return;\n        }\n\n        this.hoverCursor = this._savedProps.hoverCursor;\n        this.hasControls = this._savedProps.hasControls;\n        this.borderColor = this._savedProps.borderColor;\n        this.lockMovementX = this._savedProps.lockMovementX;\n        this.lockMovementY = this._savedProps.lockMovementY;\n\n        if (this.canvas) {\n          this.canvas.defaultCursor = this._savedProps.defaultCursor;\n          this.canvas.moveCursor = this._savedProps.moveCursor;\n        }\n      },\n\n      /**\n       * Exits from editing state\n       * @return {fabric.IText} thisArg\n       * @chainable\n       */\n      exitEditing: function() {\n        var isTextChanged = (this._textBeforeEdit !== this.text);\n        this.selected = false;\n        this.isEditing = false;\n        this.selectable = true;\n\n        this.selectionEnd = this.selectionStart;\n\n        if (this.hiddenTextarea) {\n          this.hiddenTextarea.blur && this.hiddenTextarea.blur();\n          this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n          this.hiddenTextarea = null;\n        }\n\n        this.abortCursorAnimation();\n        this._restoreEditingProps();\n        this._currentCursorOpacity = 0;\n        if (this._shouldClearDimensionCache()) {\n          this.initDimensions();\n          this.setCoords();\n        }\n        this.fire('editing:exited');\n        isTextChanged && this.fire('modified');\n        if (this.canvas) {\n          this.canvas.off('mouse:move', this.mouseMoveHandler);\n          this.canvas.fire('text:editing:exited', { target: this });\n          isTextChanged && this.canvas.fire('object:modified', { target: this });\n        }\n        return this;\n      },\n\n      /**\n       * @private\n       */\n      _removeExtraneousStyles: function() {\n        for (var prop in this.styles) {\n          if (!this._textLines[prop]) {\n            delete this.styles[prop];\n          }\n        }\n      },\n\n      /**\n       * remove and reflow a style block from start to end.\n       * @param {Number} start linear start position for removal (included in removal)\n       * @param {Number} end linear end position for removal ( excluded from removal )\n       */\n      removeStyleFromTo: function(start, end) {\n        var cursorStart = this.get2DCursorLocation(start, true),\n            cursorEnd = this.get2DCursorLocation(end, true),\n            lineStart = cursorStart.lineIndex,\n            charStart = cursorStart.charIndex,\n            lineEnd = cursorEnd.lineIndex,\n            charEnd = cursorEnd.charIndex,\n            i, styleObj;\n        if (lineStart !== lineEnd) {\n          // step1 remove the trailing of lineStart\n          if (this.styles[lineStart]) {\n            for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\n              delete this.styles[lineStart][i];\n            }\n          }\n          // step2 move the trailing of lineEnd to lineStart if needed\n          if (this.styles[lineEnd]) {\n            for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\n              styleObj = this.styles[lineEnd][i];\n              if (styleObj) {\n                this.styles[lineStart] || (this.styles[lineStart] = { });\n                this.styles[lineStart][charStart + i - charEnd] = styleObj;\n              }\n            }\n          }\n          // step3 detects lines will be completely removed.\n          for (i = lineStart + 1; i <= lineEnd; i++) {\n            delete this.styles[i];\n          }\n          // step4 shift remaining lines.\n          this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n        }\n        else {\n          // remove and shift left on the same line\n          if (this.styles[lineStart]) {\n            styleObj = this.styles[lineStart];\n            var diff = charEnd - charStart, numericChar, _char;\n            for (i = charStart; i < charEnd; i++) {\n              delete styleObj[i];\n            }\n            for (_char in this.styles[lineStart]) {\n              numericChar = parseInt(_char, 10);\n              if (numericChar >= charEnd) {\n                styleObj[numericChar - diff] = styleObj[_char];\n                delete styleObj[_char];\n              }\n            }\n          }\n        }\n      },\n\n      /**\n       * Shifts line styles up or down\n       * @param {Number} lineIndex Index of a line\n       * @param {Number} offset Can any number?\n       */\n      shiftLineStyles: function(lineIndex, offset) {\n        // shift all line styles by offset upward or downward\n        // do not clone deep. we need new array, not new style objects\n        var clonedStyles = clone(this.styles);\n        for (var line in this.styles) {\n          var numericLine = parseInt(line, 10);\n          if (numericLine > lineIndex) {\n            this.styles[numericLine + offset] = clonedStyles[numericLine];\n            if (!clonedStyles[numericLine - offset]) {\n              delete this.styles[numericLine];\n            }\n          }\n        }\n      },\n\n      restartCursorIfNeeded: function() {\n        if (!this._currentTickState || this._currentTickState.isAborted\n          || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\n        ) {\n          this.initDelayedCursor();\n        }\n      },\n\n      /**\n       * Inserts new style object\n       * @param {Number} lineIndex Index of a line\n       * @param {Number} charIndex Index of a char\n       * @param {Number} qty number of lines to add\n       * @param {Array} copiedStyle Array of objects styles\n       */\n      insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\n        var currentCharStyle,\n            newLineStyles = {},\n            somethingAdded = false;\n\n        qty || (qty = 1);\n        this.shiftLineStyles(lineIndex, qty);\n        if (this.styles[lineIndex]) {\n          currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\n        }\n\n        // we clone styles of all chars\n        // after cursor onto the current line\n        for (var index in this.styles[lineIndex]) {\n          var numIndex = parseInt(index, 10);\n          if (numIndex >= charIndex) {\n            somethingAdded = true;\n            newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n            // remove lines from the previous line since they're on a new line now\n            delete this.styles[lineIndex][index];\n          }\n        }\n        if (somethingAdded) {\n          this.styles[lineIndex + qty] = newLineStyles;\n        }\n        else {\n          delete this.styles[lineIndex + qty];\n        }\n        // for the other lines\n        // we clone current char style onto the next (otherwise empty) line\n        while (qty > 1) {\n          qty--;\n          if (copiedStyle && copiedStyle[qty]) {\n            this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\n          }\n          else if (currentCharStyle) {\n            this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\n          }\n          else {\n            delete this.styles[lineIndex + qty];\n          }\n        }\n        this._forceClearCache = true;\n      },\n\n      /**\n       * Inserts style object for a given line/char index\n       * @param {Number} lineIndex Index of a line\n       * @param {Number} charIndex Index of a char\n       * @param {Number} quantity number Style object to insert, if given\n       * @param {Array} copiedStyle array of style objecs\n       */\n      insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\n        if (!this.styles) {\n          this.styles = {};\n        }\n        var currentLineStyles       = this.styles[lineIndex],\n            currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\n\n        quantity || (quantity = 1);\n        // shift all char styles by quantity forward\n        // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n        for (var index in currentLineStylesCloned) {\n          var numericIndex = parseInt(index, 10);\n          if (numericIndex >= charIndex) {\n            currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\n            // only delete the style if there was nothing moved there\n            if (!currentLineStylesCloned[numericIndex - quantity]) {\n              delete currentLineStyles[numericIndex];\n            }\n          }\n        }\n        this._forceClearCache = true;\n        if (copiedStyle) {\n          while (quantity--) {\n            if (!Object.keys(copiedStyle[quantity]).length) {\n              continue;\n            }\n            if (!this.styles[lineIndex]) {\n              this.styles[lineIndex] = {};\n            }\n            this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\n          }\n          return;\n        }\n        if (!currentLineStyles) {\n          return;\n        }\n        var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n        while (newStyle && quantity--) {\n          this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\n        }\n      },\n\n      /**\n       * Inserts style object(s)\n       * @param {Array} insertedText Characters at the location where style is inserted\n       * @param {Number} start cursor index for inserting style\n       * @param {Array} [copiedStyle] array of style objects to insert.\n       */\n      insertNewStyleBlock: function(insertedText, start, copiedStyle) {\n        var cursorLoc = this.get2DCursorLocation(start, true),\n            addedLines = [0], linesLenght = 0;\n        for (var i = 0; i < insertedText.length; i++) {\n          if (insertedText[i] === '\\n') {\n            linesLenght++;\n            addedLines[linesLenght] = 0;\n          }\n          else {\n            addedLines[linesLenght]++;\n          }\n        }\n        if (addedLines[0] > 0) {\n          this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n        }\n        linesLenght && this.insertNewlineStyleObject(\n          cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLenght);\n        for (var i = 1; i < linesLenght; i++) {\n          if (addedLines[i] > 0) {\n            this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n          }\n          else if (copiedStyle) {\n            this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n          }\n          copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n        }\n        // we use i outside the loop to get it like linesLength\n        if (addedLines[i] > 0) {\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n        }\n      },\n\n      /**\n       * Set the selectionStart and selectionEnd according to the ne postion of cursor\n       * mimic the key - mouse navigation when shift is pressed.\n       */\n      setSelectionStartEndWithShift: function(start, end, newSelection) {\n        if (newSelection <= start) {\n          if (end === start) {\n            this._selectionDirection = 'left';\n          }\n          else if (this._selectionDirection === 'right') {\n            this._selectionDirection = 'left';\n            this.selectionEnd = start;\n          }\n          this.selectionStart = newSelection;\n        }\n        else if (newSelection > start && newSelection < end) {\n          if (this._selectionDirection === 'right') {\n            this.selectionEnd = newSelection;\n          }\n          else {\n            this.selectionStart = newSelection;\n          }\n        }\n        else {\n          // newSelection is > selection start and end\n          if (end === start) {\n            this._selectionDirection = 'right';\n          }\n          else if (this._selectionDirection === 'left') {\n            this._selectionDirection = 'right';\n            this.selectionStart = end;\n          }\n          this.selectionEnd = newSelection;\n        }\n      },\n\n      setSelectionInBoundaries: function() {\n        var length = this.text.length;\n        if (this.selectionStart > length) {\n          this.selectionStart = length;\n        }\n        else if (this.selectionStart < 0) {\n          this.selectionStart = 0;\n        }\n        if (this.selectionEnd > length) {\n          this.selectionEnd = length;\n        }\n        else if (this.selectionEnd < 0) {\n          this.selectionEnd = 0;\n        }\n      }\n    });\n  })();\n\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n    /**\n     * Initializes \"dbclick\" event handler\n     */\n    initDoubleClickSimulation: function() {\n\n      // for double click\n      this.__lastClickTime = +new Date();\n\n      // for triple click\n      this.__lastLastClickTime = +new Date();\n\n      this.__lastPointer = { };\n\n      this.on('mousedown', this.onMouseDown);\n    },\n\n    /**\n     * Default event handler to simulate triple click\n     * @private\n     */\n    onMouseDown: function(options) {\n      if (!this.canvas) {\n        return;\n      }\n      this.__newClickTime = +new Date();\n      var newPointer = options.pointer;\n      if (this.isTripleClick(newPointer)) {\n        this.fire('tripleclick', options);\n        this._stopEvent(options.e);\n      }\n      this.__lastLastClickTime = this.__lastClickTime;\n      this.__lastClickTime = this.__newClickTime;\n      this.__lastPointer = newPointer;\n      this.__lastIsEditing = this.isEditing;\n      this.__lastSelected = this.selected;\n    },\n\n    isTripleClick: function(newPointer) {\n      return this.__newClickTime - this.__lastClickTime < 500 &&\n          this.__lastClickTime - this.__lastLastClickTime < 500 &&\n          this.__lastPointer.x === newPointer.x &&\n          this.__lastPointer.y === newPointer.y;\n    },\n\n    /**\n     * @private\n     */\n    _stopEvent: function(e) {\n      e.preventDefault && e.preventDefault();\n      e.stopPropagation && e.stopPropagation();\n    },\n\n    /**\n     * Initializes event handlers related to cursor or selection\n     */\n    initCursorSelectionHandlers: function() {\n      this.initMousedownHandler();\n      this.initMouseupHandler();\n      this.initClicks();\n    },\n\n    /**\n     * Initializes double and triple click event handlers\n     */\n    initClicks: function() {\n      this.on('mousedblclick', function(options) {\n        this.selectWord(this.getSelectionStartFromPointer(options.e));\n      });\n      this.on('tripleclick', function(options) {\n        this.selectLine(this.getSelectionStartFromPointer(options.e));\n      });\n    },\n\n    /**\n     * Default event handler for the basic functionalities needed on _mouseDown\n     * can be overridden to do something different.\n     * Scope of this implementation is: find the click position, set selectionStart\n     * find selectionEnd, initialize the drawing of either cursor or selection area\n     */\n    _mouseDownHandler: function(options) {\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n        return;\n      }\n\n      this.__isMousedown = true;\n\n      if (this.selected) {\n        this.setCursorByClick(options.e);\n      }\n\n      if (this.isEditing) {\n        this.__selectionStartOnMouseDown = this.selectionStart;\n        if (this.selectionStart === this.selectionEnd) {\n          this.abortCursorAnimation();\n        }\n        this.renderCursorOrSelection();\n      }\n    },\n\n    /**\n     * Default event handler for the basic functionalities needed on mousedown:before\n     * can be overridden to do something different.\n     * Scope of this implementation is: verify the object is already selected when mousing down\n     */\n    _mouseDownHandlerBefore: function(options) {\n      if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n        return;\n      }\n      if (this === this.canvas._activeObject) {\n        this.selected = true;\n      }\n    },\n\n    /**\n     * Initializes \"mousedown\" event handler\n     */\n    initMousedownHandler: function() {\n      this.on('mousedown', this._mouseDownHandler);\n      this.on('mousedown:before', this._mouseDownHandlerBefore);\n    },\n\n    /**\n     * Initializes \"mouseup\" event handler\n     */\n    initMouseupHandler: function() {\n      this.on('mouseup', this.mouseUpHandler);\n    },\n\n    /**\n     * standard hander for mouse up, overridable\n     * @private\n     */\n    mouseUpHandler: function(options) {\n      this.__isMousedown = false;\n      if (!this.editable || this.group ||\n        (options.transform && options.transform.actionPerformed) ||\n        (options.e.button && options.e.button !== 1)) {\n        return;\n      }\n\n      if (this.__lastSelected && !this.__corner) {\n        this.selected = false;\n        this.__lastSelected = false;\n        this.enterEditing(options.e);\n        if (this.selectionStart === this.selectionEnd) {\n          this.initDelayedCursor(true);\n        }\n        else {\n          this.renderCursorOrSelection();\n        }\n      }\n      else {\n        this.selected = true;\n      }\n    },\n\n    /**\n     * Changes cursor location in a text depending on passed pointer (x/y) object\n     * @param {Event} e Event object\n     */\n    setCursorByClick: function(e) {\n      var newSelection = this.getSelectionStartFromPointer(e),\n          start = this.selectionStart, end = this.selectionEnd;\n      if (e.shiftKey) {\n        this.setSelectionStartEndWithShift(start, end, newSelection);\n      }\n      else {\n        this.selectionStart = newSelection;\n        this.selectionEnd = newSelection;\n      }\n      if (this.isEditing) {\n        this._fireSelectionChanged();\n        this._updateTextarea();\n      }\n    },\n\n    /**\n     * Returns index of a character corresponding to where an object was clicked\n     * @param {Event} e Event object\n     * @return {Number} Index of a character\n     */\n    getSelectionStartFromPointer: function(e) {\n      var mouseOffset = this.getLocalPointer(e),\n          prevWidth = 0,\n          width = 0,\n          height = 0,\n          charIndex = 0,\n          lineIndex = 0,\n          lineLeftOffset,\n          line;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (height <= mouseOffset.y) {\n          height += this.getHeightOfLine(i) * this.scaleY;\n          lineIndex = i;\n          if (i > 0) {\n            charIndex += this._textLines[i - 1].length + 1;\n          }\n        }\n        else {\n          break;\n        }\n      }\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n      width = lineLeftOffset * this.scaleX;\n      line = this._textLines[lineIndex];\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n        prevWidth = width;\n        // i removed something about flipX here, check.\n        width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\n        if (width <= mouseOffset.x) {\n          charIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\n    },\n\n    /**\n     * @private\n     */\n    _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n      // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\n      var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n          distanceBtwNextCharAndCursor = width - mouseOffset.x,\n          offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\n            distanceBtwNextCharAndCursor < 0 ? 0 : 1,\n          newSelectionStart = index + offset;\n      // if object is horizontally flipped, mirror cursor location from the end\n      if (this.flipX) {\n        newSelectionStart = jlen - newSelectionStart;\n      }\n\n      if (newSelectionStart > this._text.length) {\n        newSelectionStart = this._text.length;\n      }\n\n      return newSelectionStart;\n    }\n  });\n\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Initializes hidden textarea (needed to bring up keyboard in iOS)\n     */\n    initHiddenTextarea: function() {\n      this.hiddenTextarea = fabric.document.createElement('textarea');\n      this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n      this.hiddenTextarea.setAttribute('autocorrect', 'off');\n      this.hiddenTextarea.setAttribute('autocomplete', 'off');\n      this.hiddenTextarea.setAttribute('spellcheck', 'false');\n      this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\n      this.hiddenTextarea.setAttribute('wrap', 'off');\n      var style = this._calcTextareaPosition();\n      // line-height: 1px; was removed from the style to fix this:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n      this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\n      '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\n      ' paddingｰtop: ' + style.fontSize + ';';\n      fabric.document.body.appendChild(this.hiddenTextarea);\n\n      fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\n      fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\n\n      if (!this._clickHandlerInitialized && this.canvas) {\n        fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n        this._clickHandlerInitialized = true;\n      }\n    },\n\n    /**\n     * For functionalities on keyDown\n     * Map a special key to a function of the instance/prototype\n     * If you need different behaviour for ESC or TAB or arrows, you have to change\n     * this map setting the name of a function that you build on the fabric.Itext or\n     * your prototype.\n     * the map change will affect all Instances unless you need for only some text Instances\n     * in that case you have to clone this object and assign your Instance.\n     * this.keysMap = fabric.util.object.clone(this.keysMap);\n     * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\n     */\n    keysMap: {\n      9:  'exitEditing',\n      27: 'exitEditing',\n      33: 'moveCursorUp',\n      34: 'moveCursorDown',\n      35: 'moveCursorRight',\n      36: 'moveCursorLeft',\n      37: 'moveCursorLeft',\n      38: 'moveCursorUp',\n      39: 'moveCursorRight',\n      40: 'moveCursorDown',\n    },\n\n    /**\n     * For functionalities on keyUp + ctrl || cmd\n     */\n    ctrlKeysMapUp: {\n      67: 'copy',\n      88: 'cut'\n    },\n\n    /**\n     * For functionalities on keyDown + ctrl || cmd\n     */\n    ctrlKeysMapDown: {\n      65: 'selectAll'\n    },\n\n    onClick: function() {\n      // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n      this.hiddenTextarea && this.hiddenTextarea.focus();\n    },\n\n    /**\n     * Handles keyup event\n     * @param {Event} e Event object\n     */\n    onKeyDown: function(e) {\n      if (!this.isEditing || this.inCompositionMode) {\n        return;\n      }\n      if (e.keyCode in this.keysMap) {\n        this[this.keysMap[e.keyCode]](e);\n      }\n      else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\n        this[this.ctrlKeysMapDown[e.keyCode]](e);\n      }\n      else {\n        return;\n      }\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      if (e.keyCode >= 33 && e.keyCode <= 40) {\n        // if i press an arrow key just update selection\n        this.clearContextTop();\n        this.renderCursorOrSelection();\n      }\n      else {\n        this.canvas && this.canvas.requestRenderAll();\n      }\n    },\n\n    /**\n     * Handles keyup event\n     * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n     * if a copy/cut event fired, keyup is dismissed\n     * @param {Event} e Event object\n     */\n    onKeyUp: function(e) {\n      if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n        this._copyDone = false;\n        return;\n      }\n      if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\n        this[this.ctrlKeysMapUp[e.keyCode]](e);\n      }\n      else {\n        return;\n      }\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      this.canvas && this.canvas.requestRenderAll();\n    },\n\n    /**\n     * Handles onInput event\n     * @param {Event} e Event object\n     */\n    onInput: function(e) {\n      var fromPaste = this.fromPaste;\n      this.fromPaste = false;\n      e && e.stopPropagation();\n      if (!this.isEditing) {\n        return;\n      }\n      // decisions about style changes.\n      var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\n          charCount = this._text.length,\n          nextCharCount = nextText.length,\n          removedText, insertedText,\n          charDiff = nextCharCount - charCount;\n      if (this.hiddenTextarea.value === '') {\n        this.styles = { };\n        this.updateFromTextArea();\n        this.fire('changed');\n        if (this.canvas) {\n          this.canvas.fire('text:changed', { target: this });\n          this.canvas.requestRenderAll();\n        }\n        return;\n      }\n\n      var textareaSelection = this.fromStringToGraphemeSelection(\n        this.hiddenTextarea.selectionStart,\n        this.hiddenTextarea.selectionEnd,\n        this.hiddenTextarea.value\n      );\n      var backDelete = this.selectionStart > textareaSelection.selectionStart;\n\n      if (this.selectionStart !== this.selectionEnd) {\n        removedText = this._text.slice(this.selectionStart, this.selectionEnd);\n        charDiff += this.selectionEnd - this.selectionStart;\n      }\n      else if (nextCharCount < charCount) {\n        if (backDelete) {\n          removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\n        }\n        else {\n          removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\n        }\n      }\n      insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\n      if (removedText && removedText.length) {\n        if (this.selectionStart !== this.selectionEnd) {\n          this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\n        }\n        else if (backDelete) {\n          // detect differencies between forwardDelete and backDelete\n          this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\n        }\n        else {\n          this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\n        }\n      }\n      if (insertedText.length) {\n        if (fromPaste && insertedText.join('') === fabric.copiedText) {\n          this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\n        }\n        else {\n          this.insertNewStyleBlock(insertedText, this.selectionStart);\n        }\n      }\n      this.updateFromTextArea();\n      this.fire('changed');\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this });\n        this.canvas.requestRenderAll();\n      }\n    },\n    /**\n     * Composition start\n     */\n    onCompositionStart: function() {\n      this.inCompositionMode = true;\n    },\n\n    /**\n     * Composition end\n     */\n    onCompositionEnd: function() {\n      this.inCompositionMode = false;\n    },\n\n    // /**\n    //  * Composition update\n    //  */\n    onCompositionUpdate: function(e) {\n      this.compositionStart = e.target.selectionStart;\n      this.compositionEnd = e.target.selectionEnd;\n      this.updateTextareaPosition();\n    },\n\n    /**\n     * Copies selected text\n     * @param {Event} e Event object\n     */\n    copy: function() {\n      if (this.selectionStart === this.selectionEnd) {\n        //do not cut-copy if no selection\n        return;\n      }\n\n      fabric.copiedText = this.getSelectedText();\n      fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\n      this._copyDone = true;\n    },\n\n    /**\n     * Pastes text\n     * @param {Event} e Event object\n     */\n    paste: function() {\n      this.fromPaste = true;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @return {Object} Clipboard data object\n     */\n    _getClipboardData: function(e) {\n      return (e && e.clipboardData) || fabric.window.clipboardData;\n    },\n\n    /**\n     * Finds the width in pixels before the cursor on the same line\n     * @private\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @return {Number} widthBeforeCursor width before cursor\n     */\n    _getWidthBeforeCursor: function(lineIndex, charIndex) {\n      var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\n\n      if (charIndex > 0) {\n        bound = this.__charBounds[lineIndex][charIndex - 1];\n        widthBeforeCursor += bound.left + bound.width;\n      }\n      return widthBeforeCursor;\n    },\n\n    /**\n     * Gets start offset of a selection\n     * @param {Event} e Event object\n     * @param {Boolean} isRight\n     * @return {Number}\n     */\n    getDownCursorOffset: function(e, isRight) {\n      var selectionProp = this._getSelectionForOffset(e, isRight),\n          cursorLocation = this.get2DCursorLocation(selectionProp),\n          lineIndex = cursorLocation.lineIndex;\n      // if on last line, down cursor goes to end of line\n      if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n        // move to the end of a text\n        return this._text.length - selectionProp;\n      }\n      var charIndex = cursorLocation.charIndex,\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n          indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n          textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n      return textAfterCursor.length + indexOnOtherLine + 2;\n    },\n\n    /**\n     * private\n     * Helps finding if the offset should be counted from Start or End\n     * @param {Event} e Event object\n     * @param {Boolean} isRight\n     * @return {Number}\n     */\n    _getSelectionForOffset: function(e, isRight) {\n      if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n        return this.selectionEnd;\n      }\n      else {\n        return this.selectionStart;\n      }\n    },\n\n    /**\n     * @param {Event} e Event object\n     * @param {Boolean} isRight\n     * @return {Number}\n     */\n    getUpCursorOffset: function(e, isRight) {\n      var selectionProp = this._getSelectionForOffset(e, isRight),\n          cursorLocation = this.get2DCursorLocation(selectionProp),\n          lineIndex = cursorLocation.lineIndex;\n      if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n        // if on first line, up cursor goes to start of line\n        return -selectionProp;\n      }\n      var charIndex = cursorLocation.charIndex,\n          widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n          indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n          textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex);\n      // return a negative offset\n      return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length;\n    },\n\n    /**\n     * for a given width it founds the matching character.\n     * @private\n     */\n    _getIndexOnLine: function(lineIndex, width) {\n\n      var line = this._textLines[lineIndex],\n          lineLeftOffset = this._getLineLeftOffset(lineIndex),\n          widthOfCharsOnLine = lineLeftOffset,\n          indexOnLine = 0, charWidth, foundMatch;\n\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n        charWidth = this.__charBounds[lineIndex][j].width;\n        widthOfCharsOnLine += charWidth;\n        if (widthOfCharsOnLine > width) {\n          foundMatch = true;\n          var leftEdge = widthOfCharsOnLine - charWidth,\n              rightEdge = widthOfCharsOnLine,\n              offsetFromLeftEdge = Math.abs(leftEdge - width),\n              offsetFromRightEdge = Math.abs(rightEdge - width);\n\n          indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n          break;\n        }\n      }\n\n      // reached end\n      if (!foundMatch) {\n        indexOnLine = line.length - 1;\n      }\n\n      return indexOnLine;\n    },\n\n\n    /**\n     * Moves cursor down\n     * @param {Event} e Event object\n     */\n    moveCursorDown: function(e) {\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n        return;\n      }\n      this._moveCursorUpOrDown('Down', e);\n    },\n\n    /**\n     * Moves cursor up\n     * @param {Event} e Event object\n     */\n    moveCursorUp: function(e) {\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\n        return;\n      }\n      this._moveCursorUpOrDown('Up', e);\n    },\n\n    /**\n     * Moves cursor up or down, fires the events\n     * @param {String} direction 'Up' or 'Down'\n     * @param {Event} e Event object\n     */\n    _moveCursorUpOrDown: function(direction, e) {\n      // getUpCursorOffset\n      // getDownCursorOffset\n      var action = 'get' + direction + 'CursorOffset',\n          offset = this[action](e, this._selectionDirection === 'right');\n      if (e.shiftKey) {\n        this.moveCursorWithShift(offset);\n      }\n      else {\n        this.moveCursorWithoutShift(offset);\n      }\n      if (offset !== 0) {\n        this.setSelectionInBoundaries();\n        this.abortCursorAnimation();\n        this._currentCursorOpacity = 1;\n        this.initDelayedCursor();\n        this._fireSelectionChanged();\n        this._updateTextarea();\n      }\n    },\n\n    /**\n     * Moves cursor with shift\n     * @param {Number} offset\n     */\n    moveCursorWithShift: function(offset) {\n      var newSelection = this._selectionDirection === 'left'\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n      this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\n      return offset !== 0;\n    },\n\n    /**\n     * Moves cursor up without shift\n     * @param {Number} offset\n     */\n    moveCursorWithoutShift: function(offset) {\n      if (offset < 0) {\n        this.selectionStart += offset;\n        this.selectionEnd = this.selectionStart;\n      }\n      else {\n        this.selectionEnd += offset;\n        this.selectionStart = this.selectionEnd;\n      }\n      return offset !== 0;\n    },\n\n    /**\n     * Moves cursor left\n     * @param {Event} e Event object\n     */\n    moveCursorLeft: function(e) {\n      if (this.selectionStart === 0 && this.selectionEnd === 0) {\n        return;\n      }\n      this._moveCursorLeftOrRight('Left', e);\n    },\n\n    /**\n     * @private\n     * @return {Boolean} true if a change happened\n     */\n    _move: function(e, prop, direction) {\n      var newValue;\n      if (e.altKey) {\n        newValue = this['findWordBoundary' + direction](this[prop]);\n      }\n      else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n        newValue = this['findLineBoundary' + direction](this[prop]);\n      }\n      else {\n        this[prop] += direction === 'Left' ? -1 : 1;\n        return true;\n      }\n      if (typeof newValue !== undefined && this[prop] !== newValue) {\n        this[prop] = newValue;\n        return true;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _moveLeft: function(e, prop) {\n      return this._move(e, prop, 'Left');\n    },\n\n    /**\n     * @private\n     */\n    _moveRight: function(e, prop) {\n      return this._move(e, prop, 'Right');\n    },\n\n    /**\n     * Moves cursor left without keeping selection\n     * @param {Event} e\n     */\n    moveCursorLeftWithoutShift: function(e) {\n      var change = true;\n      this._selectionDirection = 'left';\n\n      // only move cursor when there is no selection,\n      // otherwise we discard it, and leave cursor on same place\n      if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\n        change = this._moveLeft(e, 'selectionStart');\n\n      }\n      this.selectionEnd = this.selectionStart;\n      return change;\n    },\n\n    /**\n     * Moves cursor left while keeping selection\n     * @param {Event} e\n     */\n    moveCursorLeftWithShift: function(e) {\n      if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n        return this._moveLeft(e, 'selectionEnd');\n      }\n      else if (this.selectionStart !== 0){\n        this._selectionDirection = 'left';\n        return this._moveLeft(e, 'selectionStart');\n      }\n    },\n\n    /**\n     * Moves cursor right\n     * @param {Event} e Event object\n     */\n    moveCursorRight: function(e) {\n      if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n        return;\n      }\n      this._moveCursorLeftOrRight('Right', e);\n    },\n\n    /**\n     * Moves cursor right or Left, fires event\n     * @param {String} direction 'Left', 'Right'\n     * @param {Event} e Event object\n     */\n    _moveCursorLeftOrRight: function(direction, e) {\n      var actionName = 'moveCursor' + direction + 'With';\n      this._currentCursorOpacity = 1;\n\n      if (e.shiftKey) {\n        actionName += 'Shift';\n      }\n      else {\n        actionName += 'outShift';\n      }\n      if (this[actionName](e)) {\n        this.abortCursorAnimation();\n        this.initDelayedCursor();\n        this._fireSelectionChanged();\n        this._updateTextarea();\n      }\n    },\n\n    /**\n     * Moves cursor right while keeping selection\n     * @param {Event} e\n     */\n    moveCursorRightWithShift: function(e) {\n      if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n        return this._moveRight(e, 'selectionStart');\n      }\n      else if (this.selectionEnd !== this._text.length) {\n        this._selectionDirection = 'right';\n        return this._moveRight(e, 'selectionEnd');\n      }\n    },\n\n    /**\n     * Moves cursor right without keeping selection\n     * @param {Event} e Event object\n     */\n    moveCursorRightWithoutShift: function(e) {\n      var changed = true;\n      this._selectionDirection = 'right';\n\n      if (this.selectionStart === this.selectionEnd) {\n        changed = this._moveRight(e, 'selectionStart');\n        this.selectionEnd = this.selectionStart;\n      }\n      else {\n        this.selectionStart = this.selectionEnd;\n      }\n      return changed;\n    },\n\n    /**\n     * Removes characters from start/end\n     * start/end ar per grapheme position in _text array.\n     *\n     * @param {Number} start\n     * @param {Number} end default to start + 1\n     */\n    removeChars: function(start, end) {\n      if (typeof end === 'undefined') {\n        end = start + 1;\n      }\n      this.removeStyleFromTo(start, end);\n      this._text.splice(start, end - start);\n      this.text = this._text.join('');\n      this.set('dirty', true);\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      this._removeExtraneousStyles();\n    },\n\n    /**\n     * insert characters at start position, before start position.\n     * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n     * if style array is provided, it must be as the same length of text in graphemes\n     * if end is provided and is bigger than start, old text is replaced.\n     * start/end ar per grapheme position in _text array.\n     *\n     * @param {String} text text to insert\n     * @param {Array} style array of style objects\n     * @param {Number} start\n     * @param {Number} end default to start + 1\n     */\n    insertChars: function(text, style, start, end) {\n      if (typeof end === 'undefined') {\n        end = start;\n      }\n      if (end > start) {\n        this.removeStyleFromTo(start, end);\n      }\n      var graphemes = fabric.util.string.graphemeSplit(text);\n      this.insertNewStyleBlock(graphemes, start, style);\n      this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\n      this.text = this._text.join('');\n      this.set('dirty', true);\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      this._removeExtraneousStyles();\n    },\n\n  });\n\n\n  /* _TO_SVG_START_ */\n  (function() {\n    var toFixed = fabric.util.toFixed,\n        multipleSpacesRegex = /  +/g;\n\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n\n      /**\n       * Returns SVG representation of an instance\n       * @param {Function} [reviver] Method for further parsing of svg representation.\n       * @return {String} svg representation of an instance\n       */\n      toSVG: function(reviver) {\n        var markup = this._createBaseSVGMarkup(),\n            offsets = this._getSVGLeftTopOffsets(),\n            textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n        this._wrapSVGTextAndBg(markup, textAndBg);\n\n        return reviver ? reviver(markup.join('')) : markup.join('');\n      },\n\n      /**\n       * @private\n       */\n      _getSVGLeftTopOffsets: function() {\n        return {\n          textLeft: -this.width / 2,\n          textTop: -this.height / 2,\n          lineTop: this.getHeightOfLine(0)\n        };\n      },\n\n      /**\n       * @private\n       */\n      _wrapSVGTextAndBg: function(markup, textAndBg) {\n        var noShadow = true, filter = this.getSvgFilter(),\n            style = filter === '' ? '' : ' style=\"' + filter + '\"',\n            textDecoration = this.getSvgTextDecoration(this);\n        markup.push(\n          '\\t<g ', this.getSvgId(), 'transform=\"', this.getSvgTransform(), this.getSvgTransformMatrix(), '\"',\n          style, '>\\n',\n          textAndBg.textBgRects.join(''),\n          '\\t\\t<text xml:space=\"preserve\" ',\n          (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\n          (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\n          (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\n          (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\n          (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\n          'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\n          textAndBg.textSpans.join(''),\n          '</text>\\n',\n          '\\t</g>\\n'\n        );\n      },\n\n      /**\n       * @private\n       * @param {Number} textTopOffset Text top offset\n       * @param {Number} textLeftOffset Text left offset\n       * @return {Object}\n       */\n      _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n        var textSpans = [],\n            textBgRects = [],\n            height = textTopOffset, lineOffset;\n        // bounding-box background\n        this._setSVGBg(textBgRects);\n\n        // text and text-background\n        for (var i = 0, len = this._textLines.length; i < len; i++) {\n          lineOffset = this._getLineLeftOffset(i);\n          if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n            this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\n          }\n          this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\n          height += this.getHeightOfLine(i);\n        }\n\n        return {\n          textSpans: textSpans,\n          textBgRects: textBgRects\n        };\n      },\n\n      /**\n       * @private\n       */\n      _createTextCharSpan: function(_char, styleDecl, left, top) {\n        var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\n            styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\n            fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\n            dy = styleDecl.deltaY, dySpan = '',\n            NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n        if (dy) {\n          dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\n        }\n        return [\n          '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\n          toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\n          fillStyles, '>',\n          fabric.util.string.escapeXml(_char),\n          '</tspan>'\n        ].join('');\n      },\n\n      _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\n        // set proper line offset\n        var lineHeight = this.getHeightOfLine(lineIndex),\n            isJustify = this.textAlign.indexOf('justify') !== -1,\n            actualStyle,\n            nextStyle,\n            charsToRender = '',\n            charBox, style,\n            boxWidth = 0,\n            line = this._textLines[lineIndex],\n            timeToRender;\n\n        textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\n        for (var i = 0, len = line.length - 1; i <= len; i++) {\n          timeToRender = i === len || this.charSpacing;\n          charsToRender += line[i];\n          charBox = this.__charBounds[lineIndex][i];\n          if (boxWidth === 0) {\n            textLeftOffset += charBox.kernedWidth - charBox.width;\n            boxWidth += charBox.width;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n          if (isJustify && !timeToRender) {\n            if (this._reSpaceAndTab.test(line[i])) {\n              timeToRender = true;\n            }\n          }\n          if (!timeToRender) {\n            // if we have charSpacing, we render char by char\n            actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n            nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n            timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\n          }\n          if (timeToRender) {\n            style = this._getStyleDeclaration(lineIndex, i) || { };\n            textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\n            charsToRender = '';\n            actualStyle = nextStyle;\n            textLeftOffset += boxWidth;\n            boxWidth = 0;\n          }\n        }\n      },\n\n      _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n        textBgRects.push(\n          '\\t\\t<rect ',\n          this._getFillAttributes(color),\n          ' x=\"',\n          toFixed(left, NUM_FRACTION_DIGITS),\n          '\" y=\"',\n          toFixed(top, NUM_FRACTION_DIGITS),\n          '\" width=\"',\n          toFixed(width, NUM_FRACTION_DIGITS),\n          '\" height=\"',\n          toFixed(height, NUM_FRACTION_DIGITS),\n          '\"></rect>\\n');\n      },\n\n      _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\n        var line = this._textLines[i],\n            heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\n            boxWidth = 0,\n            boxStart = 0,\n            charBox, currentColor,\n            lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n          if (currentColor !== lastColor) {\n            lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\n              textTopOffset, boxWidth, heightOfLine);\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastColor = currentColor;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\n          textTopOffset, boxWidth, heightOfLine);\n      },\n\n      /**\n       * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n       * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n       *\n       * @private\n       * @param {*} value\n       * @return {String}\n       */\n      _getFillAttributes: function(value) {\n        var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n        if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n          return 'fill=\"' + value + '\"';\n        }\n        return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n      },\n\n      /**\n       * @private\n       */\n      _getSVGLineTopOffset: function(lineIndex) {\n        var lineTopOffset = 0, lastHeight = 0;\n        for (var j = 0; j < lineIndex; j++) {\n          lineTopOffset += this.getHeightOfLine(j);\n        }\n        lastHeight = this.getHeightOfLine(j);\n        return {\n          lineTop: lineTopOffset,\n          offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n        };\n      },\n\n      /**\n       * Returns styles-string for svg-export\n       * @param {Boolean} skipShadow a boolean to skip shadow filter output\n       * @return {String}\n       */\n      getSvgStyles: function(skipShadow) {\n        var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\n        return svgStyle + ' white-space: pre;';\n      },\n    });\n  })();\n  /* _TO_SVG_END_ */\n\n\n  (function(global) {\n\n    'use strict';\n\n    //var fabric = global.fabric || (global.fabric = {});\n\n    /**\n     * Textbox class, based on IText, allows the user to resize the text rectangle\n     * and wraps lines automatically. Textboxes have their Y scaling locked, the\n     * user can only change width. Height is adjusted automatically based on the\n     * wrapping of lines.\n     * @class fabric.Textbox\n     * @extends fabric.IText\n     * @mixes fabric.Observable\n     * @return {fabric.Textbox} thisArg\n     * @see {@link fabric.Textbox#initialize} for constructor definition\n     */\n    fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n\n      /**\n       * Type of an object\n       * @type String\n       * @default\n       */\n      type: 'textbox',\n\n      /**\n       * Minimum width of textbox, in pixels.\n       * @type Number\n       * @default\n       */\n      minWidth: 20,\n\n      /**\n       * Minimum calculated width of a textbox, in pixels.\n       * fixed to 2 so that an empty textbox cannot go to 0\n       * and is still selectable without text.\n       * @type Number\n       * @default\n       */\n      dynamicMinWidth: 2,\n\n      /**\n       * Cached array of text wrapping.\n       * @type Array\n       */\n      __cachedLines: null,\n\n      /**\n       * Override standard Object class values\n       */\n      lockScalingFlip: true,\n\n      /**\n       * Override standard Object class values\n       * Textbox needs this on false\n       */\n      noScaleCache: false,\n\n      /**\n       * Properties which when set cause object to change dimensions\n       * @type Object\n       * @private\n       */\n      _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\n\n      /**\n       * Unlike superclass's version of this function, Textbox does not update\n       * its width.\n       * @private\n       * @override\n       */\n      initDimensions: function() {\n        if (this.__skipDimension) {\n          return;\n        }\n        this.isEditing && this.initDelayedCursor();\n        this.clearContextTop();\n        this._clearCache();\n        // clear dynamicMinWidth as it will be different after we re-wrap line\n        this.dynamicMinWidth = 0;\n        // wrap lines\n        this._styleMap = this._generateStyleMap(this._splitText());\n        // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n        if (this.dynamicMinWidth > this.width) {\n          this._set('width', this.dynamicMinWidth);\n        }\n        if (this.textAlign.indexOf('justify') !== -1) {\n          // once text is measured we need to make space fatter to make justified text.\n          this.enlargeSpaces();\n        }\n        // clear cache and re-calculate height\n        this.height = this.calcTextHeight();\n        this.saveState({ propertySet: '_dimensionAffectingProps' });\n      },\n\n      /**\n       * Generate an object that translates the style object so that it is\n       * broken up by visual lines (new lines and automatic wrapping).\n       * The original text styles object is broken up by actual lines (new lines only),\n       * which is only sufficient for Text / IText\n       * @private\n       */\n      _generateStyleMap: function(textInfo) {\n        var realLineCount     = 0,\n            realLineCharCount = 0,\n            charCount         = 0,\n            map               = {};\n\n        for (var i = 0; i < textInfo.graphemeLines.length; i++) {\n          if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n            realLineCharCount = 0;\n            charCount++;\n            realLineCount++;\n          }\n          else if (this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\n            // this case deals with space's that are removed from end of lines when wrapping\n            realLineCharCount++;\n            charCount++;\n          }\n\n          map[i] = { line: realLineCount, offset: realLineCharCount };\n\n          charCount += textInfo.graphemeLines[i].length;\n          realLineCharCount += textInfo.graphemeLines[i].length;\n        }\n\n        return map;\n      },\n\n      /**\n       * Returns true if object has a style property or has it ina specified line\n       * @param {Number} lineIndex\n       * @return {Boolean}\n       */\n      styleHas: function(property, lineIndex) {\n        if (this._styleMap && !this.isWrapping) {\n          var map = this._styleMap[lineIndex];\n          if (map) {\n            lineIndex = map.line;\n          }\n        }\n        return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\n      },\n\n      /**\n       * Returns true if object has no styling or no styling in a line\n       * @param {Number} lineIndex , lineIndex is on wrapped lines.\n       * @return {Boolean}\n       */\n      isEmptyStyles: function(lineIndex) {\n        var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false;\n        var map = this._styleMap[lineIndex];\n        var mapNextLine = this._styleMap[lineIndex + 1];\n        if (map) {\n          lineIndex = map.line;\n          offset = map.offset;\n        }\n        if (mapNextLine) {\n          nextLineIndex = mapNextLine.line;\n          shouldLimit = nextLineIndex === lineIndex;\n          nextOffset = mapNextLine.offset;\n        }\n        obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n        for (var p1 in obj) {\n          for (var p2 in obj[p1]) {\n            if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\n              // eslint-disable-next-line no-unused-vars\n              for (var p3 in obj[p1][p2]) {\n                return false;\n              }\n            }\n          }\n        }\n        return true;\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @private\n       */\n      _getStyleDeclaration: function(lineIndex, charIndex) {\n        if (this._styleMap && !this.isWrapping) {\n          var map = this._styleMap[lineIndex];\n          if (!map) {\n            return null;\n          }\n          lineIndex = map.line;\n          charIndex = map.offset + charIndex;\n        }\n        return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @param {Object} style\n       * @private\n       */\n      _setStyleDeclaration: function(lineIndex, charIndex, style) {\n        var map = this._styleMap[lineIndex];\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n\n        this.styles[lineIndex][charIndex] = style;\n      },\n\n      /**\n       * @param {Number} lineIndex\n       * @param {Number} charIndex\n       * @private\n       */\n      _deleteStyleDeclaration: function(lineIndex, charIndex) {\n        var map = this._styleMap[lineIndex];\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n\n        delete this.styles[lineIndex][charIndex];\n      },\n\n      /**\n      * probably broken need a fix\n       * @param {Number} lineIndex\n       * @private\n       */\n      _getLineStyle: function(lineIndex) {\n        var map = this._styleMap[lineIndex];\n        return this.styles[map.line];\n      },\n\n      /**\n       * probably broken need a fix\n       * @param {Number} lineIndex\n       * @param {Object} style\n       * @private\n       */\n      _setLineStyle: function(lineIndex, style) {\n        var map = this._styleMap[lineIndex];\n        this.styles[map.line] = style;\n      },\n\n      /**\n       * probably broken need a fix\n       * @param {Number} lineIndex\n       * @private\n       */\n      _deleteLineStyle: function(lineIndex) {\n        var map = this._styleMap[lineIndex];\n        delete this.styles[map.line];\n      },\n\n      /**\n       * Wraps text using the 'width' property of Textbox. First this function\n       * splits text on newlines, so we preserve newlines entered by the user.\n       * Then it wraps each line using the width of the Textbox by calling\n       * _wrapLine().\n       * @param {Array} lines The string array of text that is split into lines\n       * @param {Number} desiredWidth width you want to wrap to\n       * @returns {Array} Array of lines\n       */\n      _wrapText: function(lines, desiredWidth) {\n        var wrapped = [], i;\n        this.isWrapping = true;\n        for (i = 0; i < lines.length; i++) {\n          wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\n        }\n        this.isWrapping = false;\n        return wrapped;\n      },\n\n      /**\n       * Helper function to measure a string of text, given its lineIndex and charIndex offset\n       * it gets called when charBounds are not available yet.\n       * @param {CanvasRenderingContext2D} ctx\n       * @param {String} text\n       * @param {number} lineIndex\n       * @param {number} charOffset\n       * @returns {number}\n       * @private\n       */\n      _measureWord: function(word, lineIndex, charOffset) {\n        var width = 0, prevGrapheme, skipLeft = true;\n        charOffset = charOffset || 0;\n        for (var i = 0, len = word.length; i < len; i++) {\n          var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\n          width += box.kernedWidth;\n          prevGrapheme = word[i];\n        }\n        return width;\n      },\n\n      /**\n       * Wraps a line of text using the width of the Textbox and a context.\n       * @param {Array} line The grapheme array that represent the line\n       * @param {Number} lineIndex\n       * @param {Number} desiredWidth width you want to wrap the line to\n       * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n       * @returns {Array} Array of line(s) into which the given text is wrapped\n       * to.\n       */\n      _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\n        var lineWidth        = 0,\n            graphemeLines    = [],\n            line             = [],\n            // spaces in different languges?\n            words            = _line.split(this._reSpaceAndTab),\n            word             = '',\n            offset           = 0,\n            infix            = ' ',\n            wordWidth        = 0,\n            infixWidth       = 0,\n            largestWordWidth = 0,\n            lineJustStarted = true,\n            additionalSpace = this._getWidthOfCharSpacing(),\n            reservedSpace = reservedSpace || 0;\n\n        desiredWidth -= reservedSpace;\n        for (var i = 0; i < words.length; i++) {\n          // i would avoid resplitting the graphemes\n          word = fabric.util.string.graphemeSplit(words[i]);\n          wordWidth = this._measureWord(word, lineIndex, offset);\n          offset += word.length;\n\n          lineWidth += infixWidth + wordWidth - additionalSpace;\n\n          if (lineWidth >= desiredWidth && !lineJustStarted) {\n            graphemeLines.push(line);\n            line = [];\n            lineWidth = wordWidth;\n            lineJustStarted = true;\n          }\n          else {\n            lineWidth += additionalSpace;\n          }\n\n          if (!lineJustStarted) {\n            line.push(infix);\n          }\n          line = line.concat(word);\n\n          infixWidth = this._measureWord([infix], lineIndex, offset);\n          offset++;\n          lineJustStarted = false;\n          // keep track of largest word\n          if (wordWidth > largestWordWidth) {\n            largestWordWidth = wordWidth;\n          }\n        }\n\n        i && graphemeLines.push(line);\n\n        if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n          this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n        }\n\n        return graphemeLines;\n      },\n\n      /**\n       * Detect if the text line is ended with an hard break\n       * text and itext do not have wrapping, return false\n       * @param {Number} lineIndex text to split\n       * @return {Boolean}\n       */\n      isEndOfWrapping: function(lineIndex) {\n        if (!this._styleMap[lineIndex + 1]) {\n          // is last line, return true;\n          return true;\n        }\n        if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n          // this is last line before a line break, return true;\n          return true;\n        }\n        return false;\n      },\n\n      /**\n      * Gets lines of text to render in the Textbox. This function calculates\n      * text wrapping on the fly every time it is called.\n      * @param {String} text text to split\n      * @returns {Array} Array of lines in the Textbox.\n      * @override\n      */\n      _splitTextIntoLines: function(text) {\n        var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\n            graphemeLines = this._wrapText(newText.lines, this.width),\n            lines = new Array(graphemeLines.length);\n\n        for (var i = 0; i < graphemeLines.length; i++) {\n          lines[i] = graphemeLines[i].join('');\n        }\n        newText.lines = lines;\n        newText.graphemeLines = graphemeLines;\n        return newText;\n      },\n\n      getMinWidth: function() {\n        return Math.max(this.minWidth, this.dynamicMinWidth);\n      },\n\n      /**\n       * Returns object representation of an instance\n       * @method toObject\n       * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n       * @return {Object} object representation of an instance\n       */\n      toObject: function(propertiesToInclude) {\n        return this.callSuper('toObject', ['minWidth'].concat(propertiesToInclude));\n      }\n    });\n\n    /**\n     * Returns fabric.Textbox instance from an object representation\n     * @static\n     * @memberOf fabric.Textbox\n     * @param {Object} object Object to create an instance from\n     * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\n     */\n    fabric.Textbox.fromObject = function(object, callback) {\n      return fabric.Object._fromObject('Textbox', object, callback, 'text');\n    };\n  })(typeof exports !== 'undefined' ? exports : this);\n\n\n  (function() {\n\n    /**\n     * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n     * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n     */\n    var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\n    fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n      lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n\n      var t = transform.target;\n      if (by === 'x' && t instanceof fabric.Textbox) {\n        var tw = t._getTransformedDimensions().x;\n        var w = t.width * (localMouse.x / tw);\n        if (w >= t.getMinWidth()) {\n          t.set('width', w);\n          return true;\n        }\n      }\n      else {\n        return setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n          lockScalingX, lockScalingY, by, lockScalingFlip, _dim);\n      }\n    };\n\n    fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n      /**\n       * @private\n       */\n      _removeExtraneousStyles: function() {\n        for (var prop in this._styleMap) {\n          if (!this._textLines[prop]) {\n            delete this.styles[this._styleMap[prop].line];\n          }\n        }\n      },\n\n    });\n\n  })();\n\n  return fabric;\n});\n\n\ndefine('skylark-utils-canvas2d/Canvas',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Canvas = fabric.Canvas;\r\n});\ndefine('skylark-utils-canvas2d/Circle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Circle = fabric.Circle;\r\n});\ndefine('skylark-utils-canvas2d/Color',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Color = fabric.Color;\r\n});\ndefine('skylark-utils-canvas2d/Ellipse',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Ellipse = fabric.Ellipse;\r\n});\ndefine('skylark-utils-canvas2d/Group',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Group = fabric.Group;\r\n});\ndefine('skylark-utils-canvas2d/Image',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Image = fabric.Image;\r\n});\ndefine('skylark-utils-canvas2d/Line',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Line = fabric.Line;\r\n});\ndefine('skylark-utils-canvas2d/Path',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Path = fabric.Path;\r\n});\ndefine('skylark-utils-canvas2d/Point',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Point = fabric.Point;\r\n});\ndefine('skylark-utils-canvas2d/Polygon',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polygon = fabric.Polygon;\r\n});\ndefine('skylark-utils-canvas2d/Polyline',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Polyline = fabric.Polyline;\r\n});\ndefine('skylark-utils-canvas2d/Rect',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Rect = fabric.Rect;\r\n});\ndefine('skylark-utils-canvas2d/Text',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Text = fabric.Text;\r\n});\ndefine('skylark-utils-canvas2d/Triangle',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.Triangle = fabric.Triangle;\r\n});\ndefine('skylark-utils-canvas2d/util',[\r\n    \"./canvas2d\",\r\n    \"./primitives/fabric\"\r\n], function(canvas2d,fabric) {\r\n    return canvas2d.util = fabric.util;\r\n});\ndefine('skylark-utils-canvas2d/main',[\r\n    \"./canvas2d\",\r\n    \"./Canvas\",\r\n    \"./Circle\",\r\n    \"./Color\",\r\n    \"./Ellipse\",\r\n    \"./Group\",\r\n    \"./Image\",\r\n    \"./Line\",\r\n    \"./Path\",\r\n    \"./Point\",\r\n    \"./Polygon\",\r\n    \"./Polyline\",\r\n    \"./Rect\",\r\n    \"./Text\",\r\n    \"./Triangle\",\r\n    \"./util\"\r\n], function(canvas2d) {\r\n    return canvas2d;\r\n});\r\n\ndefine('skylark-utils-canvas2d', ['skylark-utils-canvas2d/main'], function (main) { return main; });\n\n"]}